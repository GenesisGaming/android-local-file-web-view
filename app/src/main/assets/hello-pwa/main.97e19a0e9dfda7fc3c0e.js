webpackJsonp([1],[
/* 0 */,
/* 1 */,
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var TsMap = /** @class */ (function () {
    // Accept an optional parameter,
    // The parameter's type:
    // [
    //   [K, V], [K, V], ...
    // ]
    function TsMap(intrator) {
        // Used to store keys.
        this.keyStore = [];
        // Used to store values.
        this.valueStore = [];
        // The Map's size,
        // increase at function set,
        // decrease at function remove,
        // clear at function clear.
        this.size = 0;
        if (intrator) {
            for (var _i = 0, intrator_1 = intrator; _i < intrator_1.length; _i++) {
                var item = intrator_1[_i];
                this.keyStore.push(item[0]);
                this.valueStore.push(item[1]);
                this.size++;
            }
        }
    }
    // set a key-value to Map,
    // return this to chain called.
    TsMap.prototype.set = function (k, v) {
        var existed = false;
        var ks = this.keyStore;
        var vs = this.valueStore;
        // if key is existed, replace it.
        for (var i = ks.length; i > -1; i--) {
            if (ks[i] === k) {
                vs[i] = v;
                existed = true;
            }
        }
        if (!existed) {
            this.keyStore.push(k);
            this.valueStore.push(v);
            this.size++;
        }
        return this;
    };
    // Return the value of the corresponding key,
    // if dosn't has, return undefind.
    TsMap.prototype.get = function (k) {
        var ks = this.keyStore;
        for (var i = ks.length; i > -1; i--) {
            if (ks[i] === k) {
                return this.valueStore[i];
            }
        }
        return undefined;
    };
    // Determine if a key is included.
    TsMap.prototype.has = function (k) {
        var ks = this.keyStore;
        for (var i = ks.length; i > -1; i--) {
            if (ks[i] === k) {
                return true;
            }
        }
        return false;
    };
    // Delete all the corresponding keys and its value,
    // if detele success, return true.
    // else return false.
    TsMap.prototype.delete = function (k) {
        var ks = this.keyStore;
        var vs = this.valueStore;
        var len = ks.length;
        var deleteFlag = false;
        while (len--) {
            if (ks[len] === k) {
                ks.splice(len, 1);
                vs.splice(len, 1);
                this.size--;
                deleteFlag = true;
            }
        }
        return deleteFlag;
    };
    // Empty the Map.
    TsMap.prototype.clear = function () {
        this.keyStore.splice(0, this.size);
        this.valueStore.splice(0, this.size);
        this.size = 0;
    };
    // return all Map's key.
    TsMap.prototype.keys = function () {
        return this.keyStore;
    };
    // return all Map's value.
    TsMap.prototype.values = function () {
        return this.valueStore;
    };
    // return all Map's key-value.
    TsMap.prototype.entries = function () {
        var entries = [];
        var ks = this.keyStore;
        var vs = this.valueStore;
        for (var i = 0; i < this.size; i++) {
            entries.push([ks[i], vs[i]]);
        }
        return entries;
    };
    // Traversal the Map,
    // Accept two parameters, first is a callback, second is a optional context.
    // callback function accepts 3 optional params.
    // first is value, second is key, last is the map
    TsMap.prototype.forEach = function (cb, context) {
        var size = this.size;
        var ks = this.keyStore;
        var vs = this.valueStore;
        for (var i = 0; i < size; i++) {
            cb.bind(context || this)(vs[i], ks[i], this);
        }
    };
    return TsMap;
}());
exports.TsMap = TsMap;


/***/ }),
/* 3 */,
/* 4 */,
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Browser_1 = __webpack_require__(72);
var pixi_js_1 = __webpack_require__(4);
var Mode;
(function (Mode) {
    Mode["PLAY"] = "play";
    Mode["REAL"] = "real";
})(Mode = exports.Mode || (exports.Mode = {}));
var Device;
(function (Device) {
    Device["MOBILE"] = "mobile";
    Device["DESKTOP"] = "desktop";
})(Device = exports.Device || (exports.Device = {}));
var Helper = /** @class */ (function () {
    function Helper() {
    }
    /**
     * Removes every occurence in an array equal to given item
     * @param array target array
     * @param item comparable item
     * @return mutated array object
     */
    Helper.removeItemsFromArray = function (array, item) {
        while (array.indexOf(item) > -1) {
            array.splice(array.indexOf(item), 1);
        }
        return array;
    };
    /**
     * Return array with numnbers
     * @param from
     * @param to
     * @return array with numnbers
     */
    Helper.getFillinArray = function (from, to) {
        if (to < from) {
            return [];
        }
        var array = [];
        for (var index = from; index < to; index++) {
            array.push(index);
        }
        return array;
    };
    /**
     * Merge two objects. If we have the same keys property in objectsA will be overwritted by property from objectB.
     * @param objectA - first object
     * @param objectB - second object
     * @return merged object
     */
    Helper.mergeTwoObjects = function (objectA, objectB) {
        Object.keys(objectB).forEach(function (key) { objectA[key] = objectB[key]; });
        return objectA;
    };
    /**
     * Gets the display object screen coordinates relative to the entire game.
     * @param  displayObject - The DisplayObject you want to get the world position for
     * @return The local coordinates conveted to world coordinates.
     * */
    Helper.getWorldCoordinates = function (displayObject) {
        var x = 0;
        var y = 0;
        for (var current = displayObject; current != undefined; current = current.parent) {
            x += current.x;
            y += current.y;
        }
        return new pixi_js_1.Point(x, y);
    };
    /**
     * Converts a world Point to a local point
     * @param  position - The World position you wish to conver to local coordinates
     * @param  displayObject - The DisplayObject you want to use as local coordinates
     * @return The world coordinates conveted to local coordinates .
     */
    Helper.convertWorldToLocalCoordinates = function (position, displayObject) {
        var x = 0;
        var y = 0;
        for (var current = displayObject; current != undefined; current = current.parent) {
            x += current.x;
            y += current.y;
        }
        position.x -= x;
        position.y -= y;
        return position;
    };
    /**
     * Get device infomation.
     * return mobile or desktop.
     */
    Helper.getDeviceInfo = function () {
        if (Browser_1.Browser.isMobile()) {
            return Device.MOBILE;
        }
        else {
            return Device.DESKTOP;
        }
    };
    Helper.uuid = function () {
        var d = Date.now();
        if (typeof performance !== 'undefined' && typeof performance.now === 'function') {
            d += performance.now(); //use high-precision timer if available
        }
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
            // tslint:disable-next-line:no-bitwise
            var r = (d + Math.random() * 16) % 16 | 0;
            d = Math.floor(d / 16);
            // tslint:disable-next-line:no-bitwise
            return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);
        });
    };
    /**
     * Replacing all { num } by the parameters.
     * ex: Helpers.stringReplacing('{0}! I am {1}, nice to meet you.', ['Hello', 'John']);
     * the result will be: 'Hello! I am John, nice to meet you.'
     * @static
     * @param {string} target - Use curly brackets with number to mark replacing place. Start number is 0.
     * @param {Array<string>} replacing - Replacing words by array order.
     * @returns {string} replacing result
     * @memberof Helper
     */
    Helper.stringReplacing = function (target, replacing) {
        var result = target;
        for (var i = 0; i < replacing.length; i++) {
            result = result.replace('{' + i + '}', replacing[i]);
        }
        return result;
    };
    Helper.EMPTY = '';
    Helper.PNG_TYPE = '.png';
    Helper.DEFAULT_FONTS = 'Helvetica, Arial, STHeiti, \"华文黑体\", NSimSun, \"新宋体\"';
    return Helper;
}());
exports.Helper = Helper;


/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var MiniSignal = __webpack_require__(3);
var PIXI = __webpack_require__(4);
var es5_1 = __webpack_require__(0);
var Browser_1 = __webpack_require__(72);
var TsMap_1 = __webpack_require__(2);
var ViewportAlign;
(function (ViewportAlign) {
    ViewportAlign[ViewportAlign["LEFT_TOP"] = 0] = "LEFT_TOP";
    ViewportAlign[ViewportAlign["LEFT_MIDDLE"] = 1] = "LEFT_MIDDLE";
    ViewportAlign[ViewportAlign["LEFT_BOTTOM"] = 2] = "LEFT_BOTTOM";
    ViewportAlign[ViewportAlign["CENTER_TOP"] = 3] = "CENTER_TOP";
    ViewportAlign[ViewportAlign["CENTER_MIDDLE"] = 4] = "CENTER_MIDDLE";
    ViewportAlign[ViewportAlign["CENTER_BOTTOM"] = 5] = "CENTER_BOTTOM";
    ViewportAlign[ViewportAlign["RIGHT_TOP"] = 6] = "RIGHT_TOP";
    ViewportAlign[ViewportAlign["RIGHT_MIDDLE"] = 7] = "RIGHT_MIDDLE";
    ViewportAlign[ViewportAlign["RIGHT_BOTTOM"] = 8] = "RIGHT_BOTTOM";
})(ViewportAlign = exports.ViewportAlign || (exports.ViewportAlign = {}));
var Orientation;
(function (Orientation) {
    Orientation["PORTRAIT"] = "portrait";
    Orientation["LANDSCAPE"] = "landscape";
    Orientation["BOTH"] = "both";
})(Orientation = exports.Orientation || (exports.Orientation = {}));
/**
 * Viewport is the controller that deal with the canvas scale/resize issue.
 *
 * @export
 * @class Viewport
 */
var Viewport = /** @class */ (function () {
    function Viewport() {
        /**
         * subscribe to this event to get notification everytime scene dimensions change
         */
        this.onResizeSignal = new MiniSignal();
        /**
         * subscribe to this event to get notification everytime the orientation of device changed
         */
        this.onOrientationChangedSignal = new MiniSignal();
        this._inited = false;
        this._scrollEventInited = false;
        this._showFullScreenHint = false;
        this.viewportSizeData = new TsMap_1.TsMap();
    }
    Object.defineProperty(Viewport.prototype, "resolution", {
        /**
         * The resolution of the game.
         *
         * @type {Block}
         * @memberof Viewport
         */
        get: function () {
            return this._resolution;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Viewport.prototype, "orientation", {
        /**
         * Current device orientation.
         *
         * @type {Orientation}
         * @memberof Viewport
         */
        get: function () {
            return this._orientation;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Viewport.prototype, "properOrientation", {
        /**
         * In current device size, the most proper orientation for the game.
         *
         * @type {Orientation}
         * @memberof Viewport
         */
        get: function () {
            if (this.gameOrientation === Orientation.PORTRAIT) {
                return Orientation.PORTRAIT;
            }
            else if (this.gameOrientation === Orientation.LANDSCAPE) {
                return Orientation.LANDSCAPE;
            }
            else if (this.isPortraitMode) {
                return Orientation.PORTRAIT;
            }
            else {
                return Orientation.LANDSCAPE;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Viewport.prototype, "width", {
        /**
         * The width of the viewport.
         *
         * @type {number}
         * @memberof Viewport
         */
        get: function () {
            return this.getCurrentViewportSize().width;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Viewport.prototype, "height", {
        /**
         * The height of the viewport.
         *
         * @type {number}
         * @memberof Viewport
         */
        get: function () {
            return this.getCurrentViewportSize().height;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Viewport.prototype, "canvas", {
        /**
         * The information of the canvas DOM.
         *
         * @readonly
         * @type {Canvas}
         * @memberof Viewport
         */
        get: function () {
            return this._canvas;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Viewport.prototype, "renderer", {
        /**
         * WebGL renderer if available, otherwise CanvasRenderer
         * @member {PIXI.WebGLRenderer|PIXI.CanvasRenderer}
         */
        get: function () {
            return this._renderer;
        },
        set: function (renderer) {
            this._renderer = renderer;
        },
        enumerable: true,
        configurable: true
    });
    Viewport.prototype.init = function (pixi, gameOrientation, width, height) {
        if (width === void 0) { width = 1280; }
        if (height === void 0) { height = 720; }
        this._pixi = pixi;
        this._resolution = {
            height: Math.min(height, width),
            width: Math.max(height, width)
        };
        this.viewportSizeData.set(Orientation.LANDSCAPE, {
            width: Math.max(height, width),
            height: Math.min(height, width),
        });
        this.viewportSizeData.set(Orientation.PORTRAIT, {
            width: Math.min(height, width),
            height: Math.max(height, width),
        });
        this._gameRatio = this.resolution.width / this.resolution.height;
        this._orientation = null;
        this.gameOrientation = gameOrientation;
        this._renderer = pixi.renderer;
        this._canvasElement = this.renderer.view;
        this._canvas = {
            width: undefined,
            height: undefined,
            marginLeft: undefined,
            marginTop: undefined,
        };
        this.renderer.resize(this.resolution.width, this.resolution.height);
        // lock protrait game may wrong in some browser. Only force full screen if the game only support LANDSCAPE.
        if (Browser_1.Browser.isMobile() && Browser_1.Browser.isFullscreenSupported() && this.gameOrientation === Orientation.LANDSCAPE) {
            document.body.addEventListener('touchend', this.onTouchScreen.bind(this), false);
        }
        if (Browser_1.Browser.isMobile()) {
            // disable scrolling or zoom effect.
            document.getElementById('mainContainer').addEventListener('touchmove', function (e) { e.preventDefault(); }, { passive: false });
            document.addEventListener(Browser_1.Browser.VISIBILITY_CHANGE, this.resize.bind(this), false);
        }
        this.resize();
        window.onresize = this.resizeHandler.bind(this);
    };
    Viewport.prototype.resizeHandler = function () {
        var _this = this;
        window.setTimeout(function () {
            _this.resize();
            // adjust scrollY for mobile safari when toggling url bar in landscape.
            if (Browser_1.Browser.isMobile() && Browser_1.Browser.getName() === Browser_1.BrowserName.SAFARI) {
                window.setTimeout(function () {
                    window.scrollTo(0, 0);
                }, 50);
            }
        }, 50);
    };
    /**
     * Returns coordinates to use as position of screen achours depends on provided align
     *
     * @param {ViewportAlign} align Aligh of returning point ( see Align )
     * @returns {PIXI.Point}
     * @memberof Viewport
     */
    Viewport.prototype.getAlignedPoint = function (align) {
        var gameSize = this.getCurrentViewportSize();
        switch (align) {
            case ViewportAlign.LEFT_TOP:
                return new PIXI.Point(0, 0);
            case ViewportAlign.LEFT_MIDDLE:
                return new PIXI.Point(0, gameSize.height / 2);
            case ViewportAlign.LEFT_BOTTOM:
                return new PIXI.Point(0, gameSize.height);
            case ViewportAlign.CENTER_TOP:
                return new PIXI.Point(gameSize.width / 2, 0);
            case ViewportAlign.CENTER_MIDDLE:
                return new PIXI.Point(gameSize.width / 2, gameSize.height / 2);
            case ViewportAlign.CENTER_BOTTOM:
                return new PIXI.Point(gameSize.width / 2, gameSize.height);
            case ViewportAlign.RIGHT_TOP:
                return new PIXI.Point(gameSize.width, 0);
            case ViewportAlign.RIGHT_MIDDLE:
                return new PIXI.Point(gameSize.width, gameSize.height / 2);
            case ViewportAlign.RIGHT_BOTTOM:
                return new PIXI.Point(gameSize.width, gameSize.height);
        }
    };
    Object.defineProperty(Viewport.prototype, "isPortraitMode", {
        get: function () {
            return this.orientation == Orientation.PORTRAIT;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * The method will force to full screen if current device is not in full screen mode.
     * @param event - click event
     */
    Viewport.prototype.onTouchScreen = function (event) {
        if (!Browser_1.Browser.isFullScreen()) {
            Browser_1.Browser.requestFullScreen();
            if (this.gameOrientation !== Orientation.BOTH) {
                Browser_1.Browser.lockFullScreen(this.gameOrientation);
            }
            this.hideFullscreenHint();
        }
    };
    /**
     * Supposed to be called from outer space everytime browser window updates its size
     *
     * @private
     * @memberof Viewport
     */
    Viewport.prototype.resize = function () {
        this.checkOrientation();
        if (this.orientation === Orientation.LANDSCAPE) {
            if (this.gameOrientation === Orientation.PORTRAIT) { // fix to height
                this._canvasElement.style.height = this.browserHeight + "px";
                this._canvasElement.style.width = Math.floor(this.browserHeight / this._gameRatio) + "px";
            }
            else {
                this.setLandscapeView();
            }
        }
        else {
            if (this.gameOrientation === Orientation.LANDSCAPE) {
                this._canvasElement.style.width = this.browserWidth + "px";
                this._canvasElement.style.height = Math.floor(this.browserWidth / this._gameRatio) + "px";
            }
            else {
                this.setPortraitView();
            }
        }
        this._canvas.width = +this._canvasElement.style.width.slice(0, -2);
        this._canvas.height = +this._canvasElement.style.height.slice(0, -2);
        if (this.gameOrientation === Orientation.PORTRAIT || (this.gameOrientation === Orientation.BOTH && this.orientation === Orientation.PORTRAIT)) {
            this._pixi.stage.scale.set(this._gameRatio, 1 / this._gameRatio);
        }
        else {
            this._pixi.stage.scale.set(1, 1);
        }
        if (this.canvas.width === this.browserWidth) {
            var margin = Math.floor((this.browserHeight - this.canvas.height) / 2);
            this._canvasElement.style.marginLeft = '';
            this._canvasElement.style.marginTop = margin + "px";
            this._canvas.marginTop = margin;
            this._canvas.marginLeft = 0;
        }
        else {
            var margin = Math.floor((this.browserWidth - this.canvas.width) / 2);
            this._canvasElement.style.marginTop = '';
            this._canvasElement.style.marginLeft = margin + "px";
            this._canvas.marginLeft = margin;
            this._canvas.marginTop = 0;
        }
        if (!this._inited) {
            if (Browser_1.Browser.isMobile() && Browser_1.Browser.iOS && this.orientation === Orientation.LANDSCAPE && this.gameOrientation === Orientation.LANDSCAPE) {
                this.showFullscreenHint();
            }
            this._inited = true;
        }
        // for now forward itself to views
        this.onResizeSignal.dispatch();
    };
    /**
     * Defines rule for portrait or landscape mode, sets deviceOrientation property. And emits Orientation chnaged signal if need.
     *
     * @private
     * @memberof Viewport
     */
    Viewport.prototype.checkOrientation = function () {
        var prevOrientation = this.orientation;
        if (this.browserWidth / this.browserHeight >= 4.0 / 3.0) {
            this._orientation = Orientation.LANDSCAPE;
        }
        else {
            this._orientation = Orientation.PORTRAIT;
        }
        // prevOrientation === null is for initialize the UI.
        if (prevOrientation === null || prevOrientation !== this.orientation) {
            this.onOrientationChangedSignal.dispatch(this.orientation);
            if (this.gameOrientation === Orientation.LANDSCAPE && prevOrientation === Orientation.PORTRAIT) {
                this.showFullscreenHint();
            }
        }
    };
    /**
     * Updates current viewport to fit the portrait view.
     *
     * @private
     * @memberof Viewport
     */
    Viewport.prototype.setPortraitView = function () {
        var currentResolution = this.getCurrentResolution();
        if (this.browserWidth / currentResolution.width <= this.browserHeight / currentResolution.height) {
            this._canvasElement.style.width = this.browserWidth + "px";
            this._canvasElement.style.height = Math.floor(this.browserWidth * this._gameRatio) + "px";
        }
        else {
            this._canvasElement.style.height = this.browserHeight + "px";
            this._canvasElement.style.width = Math.floor(this.browserHeight / this._gameRatio) + "px";
        }
    };
    /**
     * Update current canvas DOM size to fit the landscape view.
     *
     * @private
     * @memberof Viewport
     */
    Viewport.prototype.setLandscapeView = function () {
        var currentResolution = this.getCurrentResolution();
        if (this.browserWidth / currentResolution.width <= this.browserHeight / currentResolution.height) {
            this._canvasElement.style.width = this.browserWidth + "px";
            this._canvasElement.style.height = Math.floor(this.browserWidth / this._gameRatio) + "px";
        }
        else {
            this._canvasElement.style.height = this.browserHeight + "px";
            this._canvasElement.style.width = Math.floor(this.browserHeight * this._gameRatio) + "px";
        }
    };
    /**
     * Get current resolution based on current orientation.
     *
     * @private
     * @returns {Block}
     * @memberof Viewport
     */
    Viewport.prototype.getCurrentResolution = function () {
        if (this.orientation === Orientation.LANDSCAPE) {
            return {
                width: this.resolution.width,
                height: this.resolution.height
            };
        }
        else {
            return {
                width: this.resolution.height,
                height: this.resolution.width
            };
        }
    };
    /**
     * Get current gamesize based on current orientation.
     * It's not same with getCurrentResolution(), because the current game can be in portrait mode while the device is in landscape.
     * @private
     * @returns {Block}
     * @memberof Viewport
     */
    Viewport.prototype.getCurrentViewportSize = function () {
        if (this.gameOrientation === Orientation.BOTH) {
            return this.viewportSizeData.get(this.orientation);
        }
        else if (this.gameOrientation === Orientation.PORTRAIT) {
            return this.viewportSizeData.get(Orientation.PORTRAIT);
        }
        else {
            return this.viewportSizeData.get(Orientation.LANDSCAPE);
        }
    };
    Object.defineProperty(Viewport.prototype, "browserWidth", {
        get: function () {
            return document.documentElement.clientWidth;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Viewport.prototype, "browserHeight", {
        get: function () {
            if (Browser_1.Browser.getName() === Browser_1.BrowserName.SAFARI) {
                return window.innerHeight;
            }
            else {
                return document.documentElement.clientHeight;
            }
        },
        enumerable: true,
        configurable: true
    });
    Viewport.prototype.showFullscreenHint = function () {
        var _this = this;
        window.scrollTo(0, 0);
        this._showFullScreenHint = true;
        var fullscreen = document.getElementById('fullscreen');
        fullscreen.style.height = 2 * this.browserHeight + 'px';
        fullscreen.style.display = 'block';
        fullscreen.style.backgroundPosition = "center " + (this.browserHeight - 100) + "px";
        var startY;
        window.ontouchstart = function (e) {
            startY = e.touches[0].clientY;
            _this._touchStartHeight = _this.browserHeight;
        };
        if (!this._scrollEventInited) {
            fullscreen.addEventListener('touchend', function (e) {
                var endPoint = e.changedTouches[0].clientY;
                if (startY - endPoint >= 20) {
                    _this.hideFullscreenHint();
                }
            }, false);
            this._scrollEventInited = true;
        }
    };
    Viewport.prototype.hideFullscreenHint = function () {
        var fullscreen = document.getElementById('fullscreen');
        fullscreen.style.display = 'none';
        window.ontouchstart = null;
        this._showFullScreenHint = false;
    };
    Viewport = __decorate([
        es5_1.Singleton
    ], Viewport);
    return Viewport;
}());
exports.Viewport = Viewport;


/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var GameController_1 = __webpack_require__(53);
var TsMap_1 = __webpack_require__(2);
var EventParams = /** @class */ (function () {
    function EventParams(type, data) {
        this.type = type;
        this.data = data;
    }
    return EventParams;
}());
exports.EventParams = EventParams;
var EventMap = /** @class */ (function () {
    function EventMap(context, event, callback) {
        this.context = context;
        this.event = event;
        this.callback = callback;
    }
    EventMap.prototype.dispose = function () {
        this.callback = null;
    };
    return EventMap;
}());
exports.EventMap = EventMap;
var GlobalDispatcher = /** @class */ (function () {
    function GlobalDispatcher() {
    }
    GlobalDispatcher.addListener = function (context, event, callback) {
        var eventMap = new EventMap(context, event, callback);
        if (this.eventToHandlers.has(event)) {
            var handler = this.eventToHandlers.get(event);
            handler.push(eventMap);
        }
        else {
            var handler = new Array();
            handler.push(eventMap);
            this.eventToHandlers.set(event, handler);
        }
    };
    GlobalDispatcher.removeListener = function (event, callback) {
        var _this = this;
        if (this.eventToHandlers.has(event)) {
            var handlers_1 = this.eventToHandlers.get(event);
            handlers_1.forEach(function (handler, i) {
                if (handler.callback == callback) {
                    handlers_1.splice(i, 1);
                    handler.dispose();
                    if (handlers_1.length == 0) {
                        _this.eventToHandlers.delete(event);
                    }
                }
                return;
            });
        }
    };
    GlobalDispatcher.dispatch = function (event, params) {
        var _this = this;
        if (params === void 0) { params = null; }
        if (this.eventToHandlers.has(event)) {
            var handlers = this.eventToHandlers.get(event);
            handlers.forEach(function (handler) {
                _this.call(handler.context, handler.callback, new EventParams(event, params));
            });
        }
        else {
            console.warn('this event:[' + event + '] no one is waiting');
        }
    };
    GlobalDispatcher.call = function (context, fn, param) {
        if (param === void 0) { param = undefined; }
        if (param.data != undefined) {
            fn.call(context, param);
        }
        else {
            if (fn.length > 0) {
                fn.call(context, param);
            }
            else {
                fn.call(context);
            }
        }
    };
    GlobalDispatcher.removeListenersByEventName = function (event) {
        if (this.eventToHandlers.has(event)) {
            this.eventToHandlers.set(event, []);
        }
    };
    GlobalDispatcher.removeAllListeners = function () {
        var _this = this;
        for (var event in this.eventToHandlers) {
            if (event != undefined) {
                var handlers = this.eventToHandlers.get(event);
                handlers.forEach(function (handler) {
                    handler.dispose();
                    _this.eventToHandlers.delete(event);
                });
            }
        }
    };
    /**
     * dispatches event only if current state is same as expected
     * @param {string} event to dispatch
     * @param {string} expected state
     * @param {Object} params
     */
    GlobalDispatcher.dispatchIntoExpectedState = function (event, state, params) {
        if (params === void 0) { params = undefined; }
        var gameController = es5_1.Container.get(GameController_1.GameController);
        if (gameController.currentStateName == state) {
            this.dispatch(event, params);
        }
        else {
            console.warn('this event:[' + event + '] do not dispatch because error in current state: [' +
                gameController.currentStateName + '] do not match with target state [' + state + ']');
        }
    };
    /**
     * dispatches event only if current state is one of expected
     * @param {string} event
     * @param {Array<string>} states
     * @param {Object} params
     */
    GlobalDispatcher.dispatchIntoExpectedStates = function (event, states, params) {
        if (params === void 0) { params = undefined; }
        if (states.indexOf(es5_1.Container.get(GameController_1.GameController).currentStateName) >= 0) {
            this.dispatch(event, params);
        }
        else {
            console.warn('this event:[' + event + '] do not dispatch because error in current state: [' +
                es5_1.Container.get(GameController_1.GameController).currentStateName + '] do not match with target states [' + states + ']');
        }
    };
    /**
     * dispatches event only if current state is one of expected
     * @param {string} event
     * @param {Array<string>} states
     * @param {Object} params
     */
    GlobalDispatcher.dispatchIntoAllStates = function (event, params) {
        if (params === void 0) { params = undefined; }
        this.dispatch(event, params);
    };
    GlobalDispatcher.eventToHandlers = new TsMap_1.TsMap();
    return GlobalDispatcher;
}());
exports.GlobalDispatcher = GlobalDispatcher;


/***/ }),
/* 8 */,
/* 9 */,
/* 10 */,
/* 11 */,
/* 12 */,
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var AudioTrack_1 = __webpack_require__(618);
var TsMap_1 = __webpack_require__(2);
var Browser_1 = __webpack_require__(72);
/**
 * Class contains all available sound and is responsible for
 * loading and playing them.
 * It uses Howler.js to play audio. We have modified Howler sound file.
 * Please look at NAudio for details.
 */
var SoundManager = /** @class */ (function () {
    function SoundManager() {
        /**
         * Play sound once we loaded file
         * TODO: move it to GameConfig
         */
        this.playSoundsOnLoad = false;
        /**
         * Cache of all sounds
         */
        this.audios = new TsMap_1.TsMap();
        /**
         * Holds data for AudioTracks mute a track to mute all sound from that track
         */
        this.tracks = new TsMap_1.TsMap();
        this.isInited = false;
        /**
         * Holds AudioTracks mute status
         */
        this.muteMap = {};
    }
    Object.defineProperty(SoundManager.prototype, "allSoundsKeys", {
        get: function () {
            return this.audios.keys();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Override this to add new tracks
     */
    SoundManager.prototype.init = function (assetLoader) {
        if (this.isInited) {
            return;
        }
        this.assetLoader = assetLoader;
        this.addTracks([
            {
                name: AudioTrackName.MUSIC,
                keepAudioOnEnable: true,
                isSingleChannel: true,
            },
            {
                name: AudioTrackName.EFFECT,
                keepAudioOnEnable: false,
                isSingleChannel: false,
            }
        ]);
        this.setMuteMap();
        this.isInited = true;
        document.addEventListener(Browser_1.Browser.VISIBILITY_CHANGE, this.onVisibilityChanged.bind(this), false);
    };
    SoundManager.prototype.setMuteMap = function () {
        this.muteMap[AudioTrackName.MUSIC] = false;
        this.muteMap[AudioTrackName.EFFECT] = false;
    };
    SoundManager.prototype.onVisibilityChanged = function () {
        if (document[Browser_1.Browser.HIDDEN]) {
            this.muteAll();
        }
        else {
            this.unmuteAll();
        }
    };
    /**
     * Return Howler.js audio object from cache
     * @param key - the unique id of sound
     * @return NAudio object
     */
    SoundManager.prototype.audio = function (key) {
        return this.audios.get(key);
    };
    /**
     *
     * @param key The audio key associated with the audio to stop playing
     * @param trackName The track to play the audio on
     * @param loop whether the audio should loop or not
     */
    SoundManager.prototype.play = function (key, trackName, loop, onComplete) {
        if (trackName === void 0) { trackName = AudioTrackName.EFFECT; }
        if (loop === void 0) { loop = false; }
        if (key === '') {
            return;
        }
        if (!this.assetLoader.resources[key]) {
            console.warn("Make sure audio:" + key + " is loaded.");
            return;
        }
        var track = this.tracks.get(trackName);
        var audio = this.assetLoader.resources[key].data;
        if (!this.audios.get(key)) {
            this.audios.set(key, audio);
        }
        if (onComplete) {
            audio.once('end', function () {
                onComplete();
            });
        }
        if (trackName === AudioTrackName.MUSIC) {
            window.setTimeout(function () {
                track.play(audio, loop);
            }, 0);
        }
        else {
            track.play(audio, loop);
        }
    };
    /**
     * Pauses the specified audio
     * @param key @param key The audio key associated with the audio to stop playing
     */
    SoundManager.prototype.pause = function (key) {
        var _this = this;
        if (!this.audios.get(key)) {
            return;
        }
        window.setTimeout(function () {
            _this.audios.get(key).pause();
        }, 0);
    };
    /**
     * stops the specified audio from playing
     * @param key The audio key associated with the audio to stop playing
     */
    SoundManager.prototype.stop = function (key) {
        var _this = this;
        if (!this.audios.get(key)) {
            return;
        }
        window.setTimeout(function () {
            _this.audios.get(key).stop();
        }, 0);
    };
    /**
     * Returns whether the sound associated with the sound key is playing or not
     * @param key The audio key associated with the audio to stop playing
     * @return is the sound playing true for yes false for no
     */
    SoundManager.prototype.isPlaying = function (key) {
        if (!this.audios.get(key)) {
            return false;
        }
        return this.audios.get(key).playing();
    };
    SoundManager.prototype.addTrack = function (trackData) {
        var track = new AudioTrack_1.NAudioTrack(trackData);
        this.tracks.set(trackData.name, track);
    };
    SoundManager.prototype.addTracks = function (data) {
        var _this = this;
        data.forEach(function (trackData) {
            _this.addTrack(trackData);
        });
    };
    SoundManager.prototype.muteTrack = function (name) {
        this.tracks.get(name).enabled = false;
        this.muteMap[name] = true;
    };
    SoundManager.prototype.unmuteTrack = function (name) {
        this.tracks.get(name).enabled = true;
        this.muteMap[name] = false;
    };
    SoundManager.prototype.muteAll = function () {
        this.tracks.forEach(function (track) {
            track.enabled = false;
        });
    };
    SoundManager.prototype.unmuteAll = function () {
        var _this = this;
        this.tracks.forEach(function (track) {
            if (!_this.muteMap[track.name]) {
                track.enabled = true;
            }
        });
    };
    SoundManager.prototype.isTrackEnabled = function (name) {
        return this.tracks.get(name).enabled;
    };
    SoundManager.prototype.destroy = function () {
        this.audios.clear();
        this.tracks.forEach(function (track) {
            track.destroy();
        });
        this.tracks.clear();
    };
    /**
     * Disable loading of howler files on initialisation
     */
    SoundManager.ignoreHowlerPreload = true;
    SoundManager = __decorate([
        es5_1.Singleton
    ], SoundManager);
    return SoundManager;
}());
exports.SoundManager = SoundManager;
var AudioTrackName;
(function (AudioTrackName) {
    AudioTrackName["MUSIC"] = "music";
    AudioTrackName["EFFECT"] = "effect";
})(AudioTrackName = exports.AudioTrackName || (exports.AudioTrackName = {}));


/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Helper_1 = __webpack_require__(5);
var UrlParameters = /** @class */ (function () {
    function UrlParameters() {
    }
    Object.defineProperty(UrlParameters, "partnerToken", {
        /**
         * get partner token from url
         */
        get: function () {
            var partnerToken = this.getURLParameter(UrlParameters.PARTNER);
            return partnerToken;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UrlParameters, "partnerCode", {
        /**
         * get partner code from url
         */
        get: function () {
            var partnerCode = this.getURLParameter(UrlParameters.PARTNER_CODE);
            return partnerCode == undefined ? Helper_1.Helper.EMPTY : partnerCode;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Returns param value
     * example for http://example.com/path/to/page?name=ferret&color=purple getURLParameter( 'color' ) will be 'purple'
     * @param name searching param
     * @returns searching value
     */
    UrlParameters.getURLParameter = function (name) {
        return decodeURIComponent((new RegExp('[?|&]' + name + '=' + '([^&;]+?)(&|#|;|$)').exec(location.search)
            || [null, ''])[1].replace(/\+/g, '%20')) || null;
    };
    Object.defineProperty(UrlParameters, "sessionToken", {
        /**
         * get session token from url
         * remove hard code once rgs fixed
         */
        get: function () {
            var session = this.getURLParameter(UrlParameters.SESSION);
            if (!UrlParameters.isRealMode()) {
                var gs = this.getURLParameter(UrlParameters.GS);
                if (gs == 'nurgs-rmx1') {
                    session = 'a40a269e-f0aa-d16f-63e6-00fd6117afc8-GNS_HouseDemoCNY';
                }
                else if (gs == 'demo-nurgs-krug') {
                    session = '760e878c-482a-4e95-92fa-8920a463e525-GNS_Krug1HouseDemoCNY';
                }
                else { // session without currency
                    session = '0f7efb4f47e1dd49cba3bac1bc3d6455';
                }
            }
            return session;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UrlParameters, "language", {
        /**
         * get language from url, make sure it's in lower case
         */
        get: function () {
            var lan = this.getURLParameter(this.LANGUAGE);
            if (lan) {
                lan = lan.toLowerCase();
            }
            return lan;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UrlParameters, "gs", {
        /**
         * get gs info from url
         */
        get: function () {
            return this.getURLParameter(this.GS);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UrlParameters, "returnUrl", {
        /**
         * get return url from url
         */
        get: function () {
            return this.getURLParameter(UrlParameters.RETURN_URL);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UrlParameters, "engagements", {
        /**
         * get engagements data from url if it's demo mode
         */
        get: function () {
            if (!this.isRealMode()) {
                var engagements = this.getURLParameter(UrlParameters.ENGAGEMENTS);
                return engagements ? engagements.split(',') : null;
            }
            else {
                return null;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UrlParameters, "sdk", {
        /**
         * get sdk info from url
         */
        get: function () {
            return this.getURLParameter(UrlParameters.SDK);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UrlParameters, "sdkVersion", {
        /**
         * get sdk version info from url,
         * if not in url, will use defult setting in sdk controller
         */
        get: function () {
            return (this.getURLParameter(UrlParameters.SDK_VERSION)) ? this.getURLParameter(UrlParameters.SDK_VERSION) : Helper_1.Helper.EMPTY;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Check if it's using play mode.
     */
    UrlParameters.isRealMode = function () {
        var mode = this.getURLParameter(UrlParameters.MODE);
        if (mode == undefined) {
            mode = Mode.REAL;
        }
        return mode.toLowerCase() !== Mode.PLAY;
    };
    /**
     * if mode = play && !isRealMode(), return true
     */
    UrlParameters.isDemoMode = function () {
        if (!this.isRealMode() && this.engagements) {
            return true;
        }
        else {
            return false;
        }
    };
    /**
     * Check if it's hide/show history.
     * if UrlParameters.HISTORY == flase || is demo mode
     * isHistoryVisible() return false
     */
    UrlParameters.isHistoryVisible = function () {
        var history = this.getURLParameter(UrlParameters.HISTORY);
        if (!this.isRealMode()) {
            return false;
        }
        return ((history != undefined) ? (history.toLocaleLowerCase() == this.TRUE) : true);
    };
    /**
     * Check if showing messenger.
     * if it's play mode, disable messenger.
     */
    UrlParameters.isShowMessage = function () {
        if (!this.isRealMode()) {
            return false;
        }
        else {
            var isMessenger = this.getURLParameter(UrlParameters.MESSENGER);
            if (isMessenger == undefined) {
                isMessenger = this.TRUE;
            }
            return isMessenger.toLowerCase() === this.TRUE;
        }
    };
    UrlParameters.LANGUAGE = 'language';
    UrlParameters.SESSION = 'session';
    UrlParameters.PARTNER = 'partner';
    UrlParameters.PARTNER_CODE = 'partnerCode';
    UrlParameters.GS = 'gs';
    UrlParameters.MODE = 'mode';
    UrlParameters.MESSENGER = 'messenger';
    UrlParameters.RETURN_URL = 'returnurl';
    UrlParameters.HISTORY = 'history';
    UrlParameters.ENGAGEMENTS = 'engagements';
    UrlParameters.SDK = 'sdk';
    UrlParameters.SDK_VERSION = 'sdkVersion';
    UrlParameters.TRUE = 'true';
    UrlParameters.FALSE = 'false';
    return UrlParameters;
}());
exports.UrlParameters = UrlParameters;
var Mode;
(function (Mode) {
    Mode["PLAY"] = "play";
    Mode["REAL"] = "real";
})(Mode = exports.Mode || (exports.Mode = {}));


/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var MiniSignal = __webpack_require__(3);
var HeartTicker_1 = __webpack_require__(87);
var es5_1 = __webpack_require__(0);
var SimpleTimer = /** @class */ (function () {
    function SimpleTimer(deltaMs, evalf, isLoop) {
        if (isLoop === void 0) { isLoop = false; }
        this.eval = new MiniSignal();
        this.isLoop = isLoop;
        this.pIsAlive = true;
        this.pTimeLeft = this.pDelta = deltaMs;
        if (evalf != undefined) {
            this.eval.add(evalf, this);
        }
        this.timeManager.register(this);
    }
    SimpleTimer.prototype.isAlive = function () {
        return this.pIsAlive;
    };
    SimpleTimer.prototype.stop = function (processCallback) {
        if (processCallback === void 0) { processCallback = false; }
        this.pIsAlive = false;
        if (processCallback) {
            this.eval.dispatch(Math.min(this.pDelta, 0));
        }
    };
    SimpleTimer.prototype.start = function () {
        this.pIsAlive = true;
    };
    SimpleTimer.prototype.tick = function (deltaTimeMs) {
        if (!this.pIsAlive) {
            return;
        }
        this.pTimeLeft -= deltaTimeMs;
        while (this.pTimeLeft <= 0) {
            this.eval.dispatch(Math.min(this.pDelta, -this.pTimeLeft));
            if (this.isLoop) {
                //proceed
                this.pTimeLeft += this.pDelta;
            }
            else {
                //we are done here
                this.pIsAlive = false;
                return;
            }
        }
    };
    SimpleTimer.prototype.reset = function () {
        this.pTimeLeft = this.pDelta;
        this.pIsAlive = true;
    };
    SimpleTimer.prototype.destroy = function () {
        this.pIsAlive = false;
        this.eval.detachAll();
        this.eval = undefined;
        this.timeManager = undefined;
    };
    var _a;
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof HeartTicker_1.HeartTicker !== "undefined" && HeartTicker_1.HeartTicker) === "function" && _a || Object)
    ], SimpleTimer.prototype, "timeManager", void 0);
    return SimpleTimer;
}());
exports.SimpleTimer = SimpleTimer;


/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var CurrencyFormatter = __webpack_require__(641);
// TODO: should be replace currency-formatter plugin by Intl.NumberFormat.
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat
/**
 * Class is reposponsible for money formatting.
 * Reference: https://www.npmjs.com/package/currency-formatter
 */
var MoneyFormatter = /** @class */ (function () {
    function MoneyFormatter() {
        this.DEFAULT_CURRENCY = 'USD';
        this.DEFAULT_COIN_SIZE = 1;
        this.DEFAULT_PRECISION = 2;
        this._currency = CurrencyFormatter.findCurrency(this.DEFAULT_CURRENCY);
        this._precision = this.DEFAULT_PRECISION;
        this._coinSize = this.DEFAULT_COIN_SIZE;
    }
    Object.defineProperty(MoneyFormatter.prototype, "currency", {
        get: function () {
            return this._currency;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MoneyFormatter.prototype, "currencyCode", {
        get: function () {
            return this._currencyCode;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MoneyFormatter.prototype, "precision", {
        get: function () {
            return this._precision;
        },
        set: function (value) {
            this._precision = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MoneyFormatter.prototype, "coinSize", {
        get: function () {
            return this._coinSize;
        },
        set: function (value) {
            this._coinSize = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Setup the initial values for class.
     * If URL parameter 'language' is missing we will use the default language.
     */
    MoneyFormatter.prototype.initMoneyFormater = function () {
        this.setCurrencyByCode(this.DEFAULT_CURRENCY);
    };
    MoneyFormatter.prototype.setCurrencyByCode = function (currencyCode) {
        this._currencyCode = currencyCode;
        // force to USD
        this._currency = CurrencyFormatter.findCurrency(this.DEFAULT_CURRENCY);
    };
    MoneyFormatter.prototype.toCurrencyFormat = function (value, currencyOptions) {
        var baseOption = this.currency ? this.currency : {};
        var option = Object.assign(baseOption, currencyOptions);
        if (JSON.stringify(option) === '{}') {
            console.warn('currency option is empty. use default currency instead.');
            return CurrencyFormatter.format(value, { symbol: this.DEFAULT_CURRENCY, format: '%v' });
        }
        else {
            return CurrencyFormatter.format(value, option);
        }
    };
    MoneyFormatter.prototype.getDividedValue = function (value, divideBy) {
        var divideValue = divideBy ? divideBy : this.coinSize;
        return value / divideValue;
    };
    /**
     * Format the money with currency config
     * @param {number} value  The value should be formatted
     * @param {NumberDisplayMode} displayMode VALUE_ONLY = 12,333.00, VALUE_WITH_CURRENCY = 12,333.00 CNY
     * @param {boolean} [ showSymbol = false ] set true to show dollar sign
     * @param {number} [ precision = this.precision ] accurate to n decimal places
     * @param {number} [ divideBy = this.coinSize ] the value will divide by this param, set to cent (value/100) by default.
     * @param {CurrencyConfig} overrideOptions extra options
     * @returns {string}
     */
    MoneyFormatter.prototype.formatMoney = function (value, displayMode, showSymbol, precision, divideBy, overrideOptions) {
        if (showSymbol === void 0) { showSymbol = false; }
        if (precision === void 0) { precision = this.precision; }
        if (divideBy === void 0) { divideBy = this.coinSize; }
        var actualValue = this.getDividedValue(value, divideBy) + 0.0000000001;
        // avoid rounding
        var actualValueStr = actualValue.toString();
        if (actualValueStr.includes('.')) {
            var splits = actualValueStr.split('.');
            if (splits[1].length > precision) {
                actualValue = +(splits[0] + '.' + splits[1].slice(0, precision));
            }
        }
        var option = { precision: precision };
        if (!showSymbol) {
            option.format = '%v';
        }
        option = Object.assign(option, __assign({}, overrideOptions));
        switch (displayMode) {
            case NumberDisplayMode.VALUE_ONLY:
                return this.toCurrencyFormat(actualValue, option);
            case NumberDisplayMode.VALUE_WITH_CURRENCY:
                return this.toCurrencyFormat(actualValue, option) + ' ' + this.currencyCode;
            case NumberDisplayMode.VALUE_WITH_CURREYCY_SYMBOL:
                return CurrencyFormatter.format(actualValue, {
                    precision: this.precision,
                    code: this.currencyCode
                });
            default:
                return value + '';
        }
    };
    /**
     * Returns original number from given value string, base on currency and coin size.
     * @param {string} value
     * @param {number} [ multiplyBy = this.coinSize ]
     * @param {CurrencyConfig} [ currencyOptions = currencyOptions={} ]
     * @returns {number}
     */
    MoneyFormatter.prototype.unformatMoney = function (value, multiplyBy, currencyOptions) {
        if (multiplyBy === void 0) { multiplyBy = this.coinSize; }
        if (currencyOptions === void 0) { currencyOptions = {}; }
        var baseOption = this.currency ? this.currency : {};
        var option = Object.assign(baseOption, currencyOptions);
        return CurrencyFormatter.unformat(value, option) * multiplyBy;
    };
    MoneyFormatter = __decorate([
        es5_1.Singleton
    ], MoneyFormatter);
    return MoneyFormatter;
}());
exports.MoneyFormatter = MoneyFormatter;
var NumberDisplayMode;
(function (NumberDisplayMode) {
    NumberDisplayMode[NumberDisplayMode["VALUE_ONLY"] = 0] = "VALUE_ONLY";
    NumberDisplayMode[NumberDisplayMode["VALUE_WITH_CURRENCY"] = 1] = "VALUE_WITH_CURRENCY";
    NumberDisplayMode[NumberDisplayMode["VALUE_WITH_CURREYCY_SYMBOL"] = 2] = "VALUE_WITH_CURREYCY_SYMBOL"; //  £1,000.00
})(NumberDisplayMode = exports.NumberDisplayMode || (exports.NumberDisplayMode = {}));


/***/ }),
/* 17 */,
/* 18 */,
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = __webpack_require__(343);
var es5_1 = __webpack_require__(0);
var pixi_js_1 = __webpack_require__(4);
var Actions_1 = __webpack_require__(22);
var Browser_1 = __webpack_require__(72);
var SimpleTimer_1 = __webpack_require__(15);
var GameController_1 = __webpack_require__(53);
var SoundConfig_1 = __webpack_require__(55);
var DataHookService_1 = __webpack_require__(139);
var Animation_1 = __webpack_require__(26);
var ButtonsController_1 = __webpack_require__(134);
var InteractiveElement_1 = __webpack_require__(140);
/**
 * Interactive Button that support 4 states:
 * - Enabled
 * - Disabled
 * - Over
 * - Down
 */
var Button = /** @class */ (function (_super) {
    __extends(Button, _super);
    function Button(buttonConfig, localController) {
        var _this = _super.call(this, buttonConfig) || this;
        /**
         * Asset postfix for enabled state.
         */
        _this.enabledFrame = '_Enabled.png';
        /**
         * Asset postfix for disabled state.
         */
        _this.disabledFrame = '_Disabled.png';
        /**
         * Asset postfix for over state.
         */
        _this.overFrame = '_Over.png';
        /**
         * Asset postfix for down state.
         */
        _this.downFrame = '_Down.png';
        _this.defaultSoundKey = SoundConfig_1.SoundConfig.buttonClick;
        _this.isLocal = true;
        _this._clickData = {};
        _this.init(buttonConfig, localController);
        return _this;
    }
    Object.defineProperty(Button.prototype, "clickData", {
        get: function () {
            return this._clickData;
        },
        set: function (data) {
            this._clickData = data;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Button.prototype, "productLine", {
        get: function () {
            return this._productLine;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Button.prototype, "id", {
        get: function () {
            return this._id;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Button.prototype, "scaleX", {
        get: function () {
            return this.scale.x;
        },
        set: function (newScale) {
            this.scale.x = newScale;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Button.prototype, "scaleY", {
        get: function () {
            return this.scale.y;
        },
        set: function (newScale) {
            this.scale.y = newScale;
        },
        enumerable: true,
        configurable: true
    });
    Button.prototype.init = function (buttonConfig, localController) {
        this.buttonContainer = new pixi_js_1.Sprite();
        this.addChild(this.buttonContainer);
        this.animationContainer = new pixi_js_1.Sprite();
        this.addChild(this.animationContainer);
        this.activeElement = new pixi_js_1.Sprite();
        this.buttonContainer.addChild(this.activeElement);
        this._id = buttonConfig.id;
        this._productLine = buttonConfig.productLine;
        if (buttonConfig.action != undefined) {
            this.action = buttonConfig.action;
        }
        if (buttonConfig.isLocal != undefined) {
            this.isLocal = buttonConfig.isLocal;
        }
        if (buttonConfig.soundKey != undefined) {
            this.soundKey = buttonConfig.soundKey;
        }
        else {
            this.soundKey = this.defaultSoundKey;
        }
        if (buttonConfig.keyCode != undefined) {
            this.keyboardManager.register(buttonConfig.keyCode, this.buttonContainer);
        }
        this.updateAttributes(buttonConfig);
        this.setEnable(true);
        this.addListeners();
        this.linkToController(localController);
        this.createElements(buttonConfig);
    };
    Button.prototype.createElements = function (buttonConfig) {
        if (buttonConfig.position != undefined) {
            this.position.x = buttonConfig.position.x;
            this.position.y = buttonConfig.position.y;
        }
        if (buttonConfig.scale != undefined) {
            this.scale.set(buttonConfig.scale.x, buttonConfig.scale.y);
        }
        if (buttonConfig.attractAnimation != undefined) {
            this.attractAnimation = Animation_1.Animation.getAnimationByName(buttonConfig.attractAnimation.assetName);
            this.animationContainer.addChild(this.attractAnimation);
            this.attractDelay = buttonConfig.attractAnimation.loopDelay;
            if (buttonConfig.attractAnimation.scale) {
                this.attractAnimation.scale.set(buttonConfig.attractAnimation.scale.x, buttonConfig.attractAnimation.scale.y);
            }
            if (buttonConfig.attractAnimation.blendMode) {
                this.attractAnimation.blendMode = buttonConfig.attractAnimation.blendMode;
            }
            this.attractAnimation.animationSpeed = buttonConfig.attractAnimation.speed ? buttonConfig.attractAnimation.speed : 1;
        }
    };
    Button.prototype.updateAttributes = function (buttonConfig) {
        if (this.activeElement == undefined) {
            return;
        }
        _super.prototype.updateAttributes.call(this, buttonConfig);
        if (buttonConfig.assetName != undefined) {
            this.assetName = buttonConfig.assetName;
            this.updateTexture();
            this.updateTextureDisplay();
        }
        if (buttonConfig.anchor != undefined) {
            this.anchor = new pixi_js_1.Point(buttonConfig.anchor.x, buttonConfig.anchor.y);
        }
        if (buttonConfig.rectangleHitArea) {
            this.setRectangleHitArea(buttonConfig.rectangleHitArea.width, buttonConfig.rectangleHitArea.height);
        }
        else if (buttonConfig.circleHitArea) {
            this.setCircleHitArea(buttonConfig.circleHitArea.radius, buttonConfig.circleHitArea.x, buttonConfig.circleHitArea.y);
        }
        else if (buttonConfig.polygonHitArea) {
            this.setPolygonHitArea(buttonConfig.polygonHitArea.points);
        }
        else { // for default, we use rectangle.
            this.setRectangleHitArea(this.enabledElement.width, this.enabledElement.height);
        }
    };
    Button.prototype.updateTexture = function () {
        this.enabledElement = this.getTexture(this.enabledFrame);
        this.disabledElement = this.getTexture(this.disabledFrame, false);
        this.overElement = this.getTexture(this.overFrame, false);
        this.downElement = this.getTexture(this.downFrame, false);
    };
    Button.prototype.updateTextureDisplay = function () {
        if (this.state != Button.DISABLED_STATE) {
            this.setEnable(true);
        }
        else {
            this.setEnable(false);
        }
    };
    Button.prototype.getTexture = function (nameFrame, isRequired) {
        if (isRequired === void 0) { isRequired = true; }
        var fullAssetName = this.assetName + nameFrame;
        if (PIXI.utils.TextureCache[fullAssetName] == undefined) {
            if (isRequired) {
                throw 'button texture doesn\'t exist: ' + fullAssetName;
            }
            else {
                console.log('button texture doesn\'t exist: ' + fullAssetName);
            }
        }
        return PIXI.utils.TextureCache[fullAssetName];
    };
    Button.prototype.addListeners = function () {
        this.buttonContainer.on('pointerdown', this.onPointerDown, this);
        this.buttonContainer.on('pointerup', this.onPointerUp, this);
        this.buttonContainer.on('pointerover', this.onPointerOver, this);
        this.buttonContainer.on('pointerout', this.onPointerOut, this);
        this.buttonContainer.on('pointertap', this.onClick, this);
        this.on('mouseupoutside', this.onMouseUpOutside, this);
        this.on('touchendoutside', this.onMouseUpOutside, this);
    };
    /**
     * Any data can be passed to be consumed by Button Action Handlers via Game Controller,
     * or dispatched locally by the elementSignal
     * @param data
     */
    Button.prototype.onClick = function (event) {
        this.playSoundEffect();
        var action = Actions_1.Actions.CLICK_ACTION_PREFIX + this.action;
        this._clickData.action = action;
        if (this.action != Actions_1.Actions.EMPTY) {
            if (this.isLocal) {
                if (this.localButtonsController != undefined) {
                    this.localButtonsController.handleButtonAction(action, this._clickData);
                }
            }
            else {
                this.gameController.handleButtonAction(action, this._clickData);
            }
            this.elementSignal.dispatch(this._clickData);
        }
        else {
            console.warn('need action for button:' + this.id);
        }
        this.hookPlayerAction();
    };
    /**
     * The triggerClick() method simulates a mouse click on the button element.
     *
     * @memberof Button
     */
    Button.prototype.triggerClick = function (event) {
        this.onClick(event);
    };
    Button.prototype.hookPlayerAction = function () {
        this.dataHookService.onButtonClicked(this.id, this.productLine, this._clickData);
    };
    /**
     * Sets Circle hit area for tracking click event
     * @param radius - radious of Circle area
     * @param circleX - ( optional ) center point X of circle. Default value is center of element.
     * @param circleY - ( optional ) center point Y of circle. Default value is center of element.
     */
    Button.prototype.setCircleHitArea = function (radius, circleX, circleY) {
        if (!this.activeElement) {
            return;
        }
        this.hitAreaShape = Shape.Circle;
        var offsetX;
        var offsetY;
        if (this.activeElement.anchor.x === 0.5 && this.activeElement.anchor.y === 0.5) {
            offsetX = 0;
            offsetY = 0;
        }
        else if (circleX === undefined || circleY === undefined) {
            console.error("[" + this.name + "] The anchor is not in center. circleX & circleY must be assigned.");
            return;
        }
        else {
            offsetX = circleX;
            offsetY = circleY;
        }
        this.buttonContainer.hitArea = new PIXI.Circle(offsetX, offsetY, radius);
    };
    /**
     * Sets Circle hit area for tracking click event
     */
    Button.prototype.setRectangleHitArea = function (width, height, x, y) {
        if (!this.activeElement) {
            return;
        }
        this.hitAreaShape = Shape.Rectangle;
        var offsetX = (x == undefined) ? -width * this.activeElement.anchor.x : x;
        var offsetY = (y == undefined) ? -height * this.activeElement.anchor.y : y;
        this.buttonContainer.hitArea = new PIXI.Rectangle(offsetX, offsetY, width, height);
    };
    /**
     * Sets Polygon hit area for tracking click event
     */
    Button.prototype.setPolygonHitArea = function (points) {
        if (!this.activeElement) {
            return;
        }
        this.hitAreaShape = Shape.Polygon;
        this.buttonContainer.hitArea = new PIXI.Polygon(points);
    };
    Button.prototype.setEnable = function (value) {
        if (value) {
            this.setState(Button.ENABLED_STATE);
            this.showEnabledElement();
        }
        else {
            this.setState(Button.DISABLED_STATE);
            this.showDisabledElement();
        }
        this.interactive = this.buttonContainer.interactive = this.interactiveChildren = value;
    };
    Button.prototype.setInteractive = function (value) {
        this.interactive = value;
        this.buttonContainer.interactive = value;
        this.interactiveChildren = value;
    };
    Object.defineProperty(Button.prototype, "anchor", {
        /**
         * Gets the buttons anchor
         */
        get: function () {
            return this.activeElement.anchor;
        },
        /**
         * Sets the buttons anchor
         */
        set: function (anchorPoint) {
            this.activeElement.anchor.set(anchorPoint.x, anchorPoint.y);
            this.updateHitArea(anchorPoint);
            if (this.attractAnimation) {
                this.attractAnimation.anchor.set(anchorPoint.x, anchorPoint.y);
            }
        },
        enumerable: true,
        configurable: true
    });
    Button.prototype.updateHitArea = function (anchorPoint, x, y) {
        var offsetX = (x == undefined) ? -anchorPoint.x * this.enabledElement.width : x;
        var offsetY = (y == undefined) ? -anchorPoint.y * this.enabledElement.height : y;
        switch (this.hitAreaShape) {
            case Shape.Circle:
                this.setCircleHitArea(this.enabledElement.width / 2, offsetX, offsetY);
                break;
            case Shape.Rectangle:
                this.setRectangleHitArea(this.enabledElement.width, this.enabledElement.height, offsetX, offsetY);
                break;
        }
    };
    /**
     * @param {boolean} value - it means where will be use this button only for component or in global system
     */
    Button.prototype.setLocal = function (value) {
        this.isLocal = value;
    };
    Button.prototype.linkToController = function (localController) {
        if (this.isLocal && localController != undefined) {
            if (util_1.isArray(localController)) {
                this.localButtonsController = localController[0];
            }
            else {
                this.localButtonsController = localController;
            }
            this.localButtonsController.addButton(this);
        }
        else if (!this.isLocal) {
            this.buttonsController.addButton(this);
        }
    };
    Button.prototype.showEnabledElement = function () {
        this.activeElement.texture = this.enabledElement;
    };
    Button.prototype.showDisabledElement = function () {
        if (this.disabledElement != undefined) {
            this.activeElement.texture = this.disabledElement;
        }
    };
    Button.prototype.onMouseUpOutside = function () {
        this.setEnable(this.interactive);
    };
    Button.prototype.onPointerDown = function (e) {
        if (this.touchInputsOverTouchLimit(e.data, 1)) {
            return;
        }
        if (this.downElement != undefined) {
            this.activeElement.texture = this.downElement;
        }
    };
    Button.prototype.onPointerUp = function (e) {
        if (this.overElement != undefined) {
            this.activeElement.texture = this.enabledElement;
        }
    };
    Button.prototype.touchInputsOverTouchLimit = function (interactionData, touchLimit) {
        if (!Browser_1.Browser.isMobile()) {
            return false;
        }
        var originalEvent = interactionData.originalEvent;
        return originalEvent instanceof TouchEvent && originalEvent.touches.length > touchLimit;
    };
    Button.prototype.onPointerOver = function (e) {
        if (this.overElement != undefined) {
            this.activeElement.texture = this.overElement;
        }
    };
    Button.prototype.onPointerOut = function (e) {
        if (this.state == Button.ENABLED_STATE) {
            this.showEnabledElement();
        }
        else {
            this.showDisabledElement();
        }
    };
    Button.prototype.playAttractAnimation = function () {
        if (this.attractAnimation != undefined) {
            if (this.attractTimer != undefined) {
                this.removeAttractTimer();
            }
            this.playAttract();
            this.attractTimer = new SimpleTimer_1.SimpleTimer(this.attractDelay, this.playAttract.bind(this), true);
        }
    };
    Button.prototype.playAttract = function () {
        if (this.attractAnimation != undefined) {
            this.attractAnimation.visible = true;
            this.attractAnimation.loop = false;
            this.attractAnimation.gotoAndPlay(0);
        }
    };
    Button.prototype.stopAttractAnimation = function () {
        if (this.attractAnimation != undefined) {
            this.removeAttractTimer();
            this.attractAnimation.visible = false;
            this.attractAnimation.stop();
        }
    };
    Button.prototype.removeAttractTimer = function () {
        if (this.attractTimer != undefined) {
            this.attractTimer.stop(false);
            this.attractTimer.destroy();
            this.attractTimer = undefined;
        }
    };
    var _a, _b, _c;
    Button.elementType = 'Button';
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof GameController_1.GameController !== "undefined" && GameController_1.GameController) === "function" && _a || Object)
    ], Button.prototype, "gameController", void 0);
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_b = typeof ButtonsController_1.ButtonsController !== "undefined" && ButtonsController_1.ButtonsController) === "function" && _b || Object)
    ], Button.prototype, "buttonsController", void 0);
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_c = typeof DataHookService_1.DataHookService !== "undefined" && DataHookService_1.DataHookService) === "function" && _c || Object)
    ], Button.prototype, "dataHookService", void 0);
    return Button;
}(InteractiveElement_1.InteractiveElement));
exports.Button = Button;
var Shape;
(function (Shape) {
    Shape[Shape["Rectangle"] = 0] = "Rectangle";
    Shape[Shape["Circle"] = 1] = "Circle";
    Shape[Shape["Polygon"] = 2] = "Polygon";
})(Shape = exports.Shape || (exports.Shape = {}));


/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var Helper_1 = __webpack_require__(5);
var UrlParameters_1 = __webpack_require__(14);
var SlotStates_1 = __webpack_require__(31);
var SlotBankService_1 = __webpack_require__(49);
var SlotNGModel_1 = __webpack_require__(91);
var SlotScenarioNames_1 = __webpack_require__(114);
var SlotScenarioManager_1 = __webpack_require__(115);
var SlotNGServerConfig_1 = __webpack_require__(147);
var SlotHttpFormatter_1 = __webpack_require__(369);
var SlotNGHttpFormatter = /** @class */ (function (_super) {
    __extends(SlotNGHttpFormatter, _super);
    function SlotNGHttpFormatter() {
        var _this = _super.call(this) || this;
        _this.config = _this.gameConfig.getConfig(SlotNGServerConfig_1.SlotNGServerConfig);
        _this.path = (_this.config) ? _this.config[_this.getApiPathByMode()] : null;
        _this.addEventListeners();
        return _this;
    }
    SlotNGHttpFormatter.prototype.addEventListeners = function () {
        //
    };
    SlotNGHttpFormatter.prototype.getApiPathByMode = function () {
        return !UrlParameters_1.UrlParameters.isRealMode() ? SlotNGHttpFormatter.PLAY_MODE_API_PATH : SlotNGHttpFormatter.REAL_MODE_API_PATH;
    };
    /**
     * reveals data from servers message into framework-friendly format
     * @param message original server's message
     */
    SlotNGHttpFormatter.prototype.processIncomingMessage = function (message, featureInfo) {
        return null;
    };
    SlotNGHttpFormatter.prototype.setRoundCompletedFlag = function (scenario, states, roundCompleted) {
        var _this = this;
        if (roundCompleted === void 0) { roundCompleted = false; }
        var skipSetBaseGame = scenario.hasStateName(this.stateNames.allLineWin);
        states.forEach(function (stateName) {
            if (skipSetBaseGame && stateName === _this.stateNames.baseGameIdle) {
                return;
            }
            if (scenario.hasStateName(stateName)) {
                scenario.addStateData(stateName, {
                    roundCompleted: roundCompleted
                });
            }
        });
    };
    SlotNGHttpFormatter.prototype.isAllFeatureCompleted = function (features) {
        if (!features) {
            throw new Error('features is undefined.');
        }
        return features.filter(function (feature) { return feature.complete; }).length === features.length;
    };
    SlotNGHttpFormatter.prototype.margeScenarioStateData = function (scenario, stateName, extraStateData) {
        var tmpScenario = scenario;
        if (extraStateData && tmpScenario.hasStateName(stateName)) {
            if (tmpScenario.getStateByName(stateName).stateData) {
                tmpScenario.setStateData(stateName, Helper_1.Helper.mergeTwoObjects(tmpScenario.getStateByName(stateName).stateData, extraStateData));
            }
            else {
                if (tmpScenario.getStateByName(stateName).stateData) {
                    tmpScenario.setStateData(stateName, extraStateData);
                }
            }
            return tmpScenario;
        }
    };
    var _a, _b, _c, _d, _e;
    SlotNGHttpFormatter.PLAY_MODE_API_PATH = 'devPath';
    SlotNGHttpFormatter.REAL_MODE_API_PATH = 'path';
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof SlotNGModel_1.SlotNGModel !== "undefined" && SlotNGModel_1.SlotNGModel) === "function" && _a || Object)
    ], SlotNGHttpFormatter.prototype, "slotNGModel", void 0);
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_b = typeof SlotBankService_1.SlotBankService !== "undefined" && SlotBankService_1.SlotBankService) === "function" && _b || Object)
    ], SlotNGHttpFormatter.prototype, "bankService", void 0);
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_c = typeof SlotScenarioManager_1.SlotScenarioManager !== "undefined" && SlotScenarioManager_1.SlotScenarioManager) === "function" && _c || Object)
    ], SlotNGHttpFormatter.prototype, "scenarioManager", void 0);
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_d = typeof SlotScenarioNames_1.SlotScenarioNames !== "undefined" && SlotScenarioNames_1.SlotScenarioNames) === "function" && _d || Object)
    ], SlotNGHttpFormatter.prototype, "scenarioNames", void 0);
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_e = typeof SlotStates_1.SlotStates !== "undefined" && SlotStates_1.SlotStates) === "function" && _e || Object)
    ], SlotNGHttpFormatter.prototype, "stateNames", void 0);
    return SlotNGHttpFormatter;
}(SlotHttpFormatter_1.SlotHttpFormatter));
exports.SlotNGHttpFormatter = SlotNGHttpFormatter;


/***/ }),
/* 21 */,
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Class that contains all actions and markers for actions that we use in game
 */
var Actions = /** @class */ (function () {
    function Actions() {
    }
    /**
     * The marker that determines the beginning of action.
     * It will help us to sort all types of actions.
     */
    Actions.CLICK_ACTION_PREFIX = 'action_';
    Actions.EMPTY = 'empty';
    Actions.TOGGLE_SELECTED_MARKER = 'toggleSelected:';
    Actions.TOGGLE_UNSELECTED_MARKER = 'toggleUnselected:';
    Actions.SKIP_STATE = 'skipState';
    Actions.MENU = 'menu';
    Actions.HELP = 'help';
    Actions.SOUND_TOGGLE = 'soundToggle';
    Actions.ON_GAME_START = 'onGameStart';
    Actions.CLOSE_ERROR_DIALOG = 'closeErrorDialog';
    Actions.CLOSE_TUTORIAL = 'closeTutorial';
    Actions.ARROW_TUTORIAL = 'arrowTutorial';
    return Actions;
}());
exports.Actions = Actions;


/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var FeatureTypes = /** @class */ (function () {
    function FeatureTypes() {
    }
    FeatureTypes.PICK = 'PICK';
    FeatureTypes.FREE_SPIN = 'FREE_SPIN';
    FeatureTypes.SUPERBOOSTER = 'SUPERBOOSTER';
    FeatureTypes.RETRIGGER = 'RETRIGGER';
    FeatureTypes.JACKPOT = 'JACKPOT';
    FeatureTypes.WHEEL_FORTUNE = 'WHEEL_FORTUNE';
    FeatureTypes.WILD_MULTIPLIER = 'WILD_MULTIPLIER';
    FeatureTypes.SINGLE_WILD_MULTIPLIER = 'SINGLE_WILD_MULTIPLIER';
    FeatureTypes.WILD_LOCKED = 'WILD_LOCKED';
    FeatureTypes.REPLACING_SYMBOLS = 'REPLACING_SYMBOLS';
    FeatureTypes.ROTATE = 'ROTATE';
    FeatureTypes.SINGLE_LINE_WILD_MULTIPLIER = 'SINGLE_LINE_WILD_MULTIPLIER';
    FeatureTypes.FREE_RESPIN_REELS = 'FREE_RESPIN_REELS';
    FeatureTypes.SYMBOL_CRAWL = 'SYMBOL_CRAWL';
    FeatureTypes.MULTIPLIER = 'MULTIPLIER';
    return FeatureTypes;
}());
exports.FeatureTypes = FeatureTypes;


/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var Helper_1 = __webpack_require__(5);
var MainConfig_1 = __webpack_require__(61);
var es5_1 = __webpack_require__(0);
/**
 * Configuration of game.
 * It will be converted to JSON format later.
 * We use it as a class just for convenience on early stage of development.
 */
var GameConfig = /** @class */ (function () {
    function GameConfig() {
        this._mainConfig = this.getConfig(MainConfig_1.MainConfig);
    }
    Object.defineProperty(GameConfig.prototype, "mainConfig", {
        get: function () {
            return this._mainConfig;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * sets main game config
     * @param config JSON object with main config
     */
    GameConfig.prototype.setMainConfig = function (config) {
        this._mainConfig = config;
    };
    /**
     * Save dictionary with config files for later usage
     * @param {PIXI.loaders.ResourceDictionary} configs
     */
    GameConfig.prototype.setConfigStorageObject = function (configs) {
        this.configStorage = configs;
    };
    /**
     * @depreceted
     * It is better to avoid it since that method is deprecated
     * Example: let config = this.gameConfig.getJsonConfig<IDashboardConfig>( this.dashboardConfigName );
     *
     * @returns typified config as the object that we get from JSON file
     * @param configName name of config
     */
    GameConfig.prototype.getJsonConfig = function (configName) {
        // console.log('[GameConfig] : requesting: ' + configName);
        //check if resource exists
        var configResource = this.configStorage[configName];
        if (configResource != undefined) {
            return this.configStorage[configName].data;
        }
        else {
            console.log('[GameConfig] : config file ' + configName + ' not found');
            return null;
        }
    };
    GameConfig.prototype.getConfigWithFunction = function (source) {
        return Helper_1.Helper.mergeTwoObjects({}, es5_1.Container.get(source));
    };
    /**
     * returns typified config as the object
     * Example: let reelConfig : IReelsConfig = this.gameConfig.getConfig<IReelsConfig>( ReelsConfig );
     *
     * @param source class that contains default game configs
     */
    GameConfig.prototype.getConfig = function (source) {
        return Helper_1.Helper.mergeTwoObjects({}, es5_1.Container.get(source));
    };
    GameConfig = __decorate([
        es5_1.Singleton,
        __metadata("design:paramtypes", [])
    ], GameConfig);
    return GameConfig;
}());
exports.GameConfig = GameConfig;


/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var MiniSignal = __webpack_require__(3);
var Polyglot = __webpack_require__(621);
var es5_1 = __webpack_require__(0);
var GameConfig_1 = __webpack_require__(24);
var UrlParameters_1 = __webpack_require__(14);
/**
 * Class is reposponsible for localisation.
 * Check https://staroad.atlassian.net/wiki/spaces/PHFRAM/pages/81298610/Localisation for more details.
 */
var Translator = /** @class */ (function () {
    function Translator() {
        this.polyglot = new Polyglot();
        this.languageChangedSignal = new MiniSignal();
    }
    Translator_1 = Translator;
    Object.defineProperty(Translator.prototype, "language", {
        get: function () {
            return this._language;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Setup the initial values for class.
     * If URL parameter 'language' is missing we will use the default language.
     */
    Translator.prototype.init = function () {
        var language = UrlParameters_1.UrlParameters.language;
        var localisationConfig = this.gameConfig.mainConfig.localisation;
        if (language) {
            language = language.toLocaleLowerCase();
        }
        if (language == undefined || localisationConfig.assets.get(language) == undefined) {
            language = Translator_1.DEFAULT_LANGUAGE;
        }
        this.setLanguage(language);
    };
    Translator.prototype.setLanguage = function (language) {
        language = language.toLocaleLowerCase();
        this._language = language;
        this.polyglot.locale(language);
        this.fillinPhrases(language);
        this.languageChangedSignal.dispatch();
    };
    Translator.prototype.localeExists = function (language) {
        return PIXI.loader.resources[language] != undefined;
    };
    Translator.prototype.onAssetsLoaded = function () {
        this.fillinPhrases(this.language);
    };
    /**
     * Parse the json with localisation
     * @param languageKey
     */
    Translator.prototype.fillinPhrases = function (languageKey) {
        if (this.localeExists(languageKey)) {
            this.polyglot.extend(PIXI.loader.resources[languageKey].data);
        }
    };
    /**
     * Method for translation. Please check http://airbnb.io/polyglot.js/polyglot.html#section-17 for details
     *
     * The most-used method. Provide a key, and t will return the phrase.
     * t("hello"); => "Hello"
     * The phrase value is provided first by a call to polyglot.extend() or polyglot.replace().

     * Pass in an object as the second argument to perform interpolation.

     * t("hello_name", {name: "Spike"});
     * => "Hello, Spike"
     * If you like, you can provide a default value in case the phrase is missing.
     * Use the special option key “_” to specify a default.

     * polyglot.t("i_like_to_write_in_language", {
     * _: "I like to write in %{language}.",
     * language: "JavaScript"
     * });
     * => "I like to write in JavaScript."
     * @param phrase
     * @param interpolationOptions
     */
    Translator.prototype.t = function (phrase, interpolationOptions) {
        return this.polyglot.t(phrase, interpolationOptions);
    };
    /**
     * Returns list of assets needed for preloading.
     * Check https://staroad.atlassian.net/wiki/spaces/PHFRAM/pages/81298610/Localisation for more details.
     */
    Translator.prototype.getLocalisationAssets = function () {
        var localisationConfig = this.gameConfig.mainConfig.localisation;
        if (!localisationConfig.supportMultipleLoading) {
            return [{ assetKey: this.language, assetURL: localisationConfig.assets.get(this.language) }];
        }
        else if (localisationConfig.preloadLanguages != undefined) {
            var loadingAssets_1 = new Array();
            localisationConfig.preloadLanguages.forEach(function (languageKey) {
                loadingAssets_1.push({
                    assetKey: languageKey,
                    assetURL: localisationConfig.assets.get(languageKey)
                });
            });
            return loadingAssets_1;
        }
        else {
            console.log('Can\'t load the localisations assets');
            return [];
        }
    };
    var Translator_1, _a;
    Translator.DEFAULT_LANGUAGE = 'en';
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof GameConfig_1.GameConfig !== "undefined" && GameConfig_1.GameConfig) === "function" && _a || Object)
    ], Translator.prototype, "gameConfig", void 0);
    Translator = Translator_1 = __decorate([
        es5_1.Singleton,
        __metadata("design:paramtypes", [])
    ], Translator);
    return Translator;
}());
exports.Translator = Translator;


/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
__webpack_require__(637);
var pixi_js_1 = __webpack_require__(4);
var es5_1 = __webpack_require__(0);
var Helper_1 = __webpack_require__(5);
var HeartTicker_1 = __webpack_require__(87);
var TsMap_1 = __webpack_require__(2);
/**
 * This is utility/wrapper class, for easiest using of PIXI and SPINE animations.
 * List of main SPINE functions.
 * animationName.state.addAnimation
 * animationName.state.setAnimation
 * animationName.state.addListeners
 */
var Animation = /** @class */ (function () {
    function Animation() {
    }
    /**
     * Creates SPINE animation.
     * @param name Name of SPINE animation, from assets list.
     */
    Animation.createSpineAnimation = function (name) {
        var animation = new pixi_js_1.spine.Spine(pixi_js_1.loader.resources[name].spineData);
        animation.name = name;
        animation.state.timeScale = Animation.TIME_SCALE;
        //If we turn on turbo mode we change the timeScale. The animation will automatically update his timescale.
        es5_1.Container.get(HeartTicker_1.HeartTicker).onTimeScaleChanged.add(function () { animation.state.timeScale = Animation.TIME_SCALE; });
        return animation;
    };
    /**
     * Creates PIXI frame-by-frame animation.
     * @param frames List of frames. For its creation, call generateFrameNames function
     */
    Animation.createFrameAnimation = function (frames) {
        var textureArray = new Array();
        for (var _i = 0, frames_1 = frames; _i < frames_1.length; _i++) {
            var frame = frames_1[_i];
            var texture = pixi_js_1.Texture.fromFrame(frame);
            textureArray.push(texture);
        }
        return new pixi_js_1.extras.AnimatedSprite(textureArray);
    };
    /**
     * Creates a pool of animations you can use later from the name
     * @param name name of the animation to save in pool
     * @param numObjectsToCreate number of animations to save in pool, this will be the number of total animation of this playing at a time
     */
    Animation.createAnimationPool = function (name, numObjectsToCreate) {
        var poolArray = new Array();
        for (var i = 0; i < numObjectsToCreate; i++) {
            var animation = Animation.getAnimationByName(name);
            if (animation) {
                poolArray.push(animation);
            }
            else {
                return; //Animation Does not exist will not pool
            }
        }
        this.animationPool.set(name, poolArray);
    };
    /**
     * Gets an animation from the pool of saved animations. If it does not exist
     * or all pooled animations are being used it returns a newly created animation
     * @param name name of animation to get
     */
    Animation.getAnimationFromPool = function (name) {
        var returnAnimation;
        if (this.animationPool.has(name)) {
            this.animationPool.get(name).forEach(function (animation) {
                if (!animation.parent) {
                    returnAnimation = animation;
                    return;
                }
            });
        }
        //Gets new animation if doesnt exist or all animation are being used
        if (!returnAnimation) {
            returnAnimation = this.getAnimationByName(name);
        }
        return returnAnimation;
    };
    /**
     * Creates list of assets, if they are standalone files
     * @param path Path to folder
     * @param prefix "Main" name of file
     * @param from The number to start sequentially counting from.
     * @param to The number to count to.
     * @param suffix The end of the filename. No need extension.
     * @param zeroPad The number of zeros to pad the min and max values with.
     */
    Animation.generateAssetsList = function (path, prefix, from, to, suffix, zeroPad) {
        if (suffix === void 0) { suffix = ''; }
        if (zeroPad === void 0) { zeroPad = 0; }
        var result = new Array();
        var frames = Animation.generateFrameNames(prefix, from, to, suffix, zeroPad);
        for (var i = 0; i < frames.length; i++) {
            result.push({ assetKey: frames[i], assetURL: path + frames[i] + Helper_1.Helper.PNG_TYPE });
        }
        return result;
    };
    /**
    * Really handy function for when you are creating arrays of animation data but it's using frame names and not numbers.
    *
    * @static
    * @param {string} prefix - The start of the filename.
    * @param {number} from - The number to start sequentially counting from.
    * @param {number} to - The number to count to.
    * @param {string} [suffix=''] - The end of the filename.
    * @param {number} [zeroPad=0] - The number of zeros to pad the min and max values with.
    * @return {Array< string >} An array of framenames.
    */
    Animation.generateFrameNames = function (prefix, from, to, suffix, zeroPad) {
        if (suffix === void 0) { suffix = ''; }
        if (zeroPad === void 0) { zeroPad = 0; }
        var result = [];
        var frame = '';
        for (var i = from; i <= to; i++) {
            frame = i.toString();
            while (frame.toString().length < zeroPad) {
                frame = '0' + frame;
            }
            frame = prefix + frame + suffix;
            result.push(frame);
        }
        return result;
    };
    Animation.getAnimationByName = function (name, keepInMemory, zeroPad) {
        if (keepInMemory === void 0) { keepInMemory = false; }
        if (zeroPad === void 0) { zeroPad = 2; }
        if (this.animationsByName.has(name)) {
            return this.animationsByName.get(name);
        }
        else {
            var textures = this.getAnimationFrameTexturesByName(name, zeroPad);
            if (textures.length > 0) {
                var animation = new pixi_js_1.extras.AnimatedSprite(textures);
                if (keepInMemory) {
                    this.animationsByName.set(name, animation);
                }
                return animation;
            }
            else {
                return null;
            }
        }
    };
    Animation.getAnimationFrameTexturesByName = function (prefix, zeroPad) {
        if (zeroPad === void 0) { zeroPad = 0; }
        var textures = new Array();
        var frame = '';
        var indexFrame = 0;
        while (true) {
            try {
                frame = indexFrame.toString();
                while (frame.toString().length < zeroPad) {
                    frame = '0' + frame;
                }
                var texture = pixi_js_1.Texture.fromFrame(prefix + '_' + frame + '.png');
                textures.push(texture);
                indexFrame++;
            }
            catch (e) {
                break;
            }
        }
        return textures;
    };
    Animation.TIME_SCALE = 1;
    Animation.animationsByName = new TsMap_1.TsMap();
    Animation.animationPool = new TsMap_1.TsMap();
    return Animation;
}());
exports.Animation = Animation;


/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var TWEEN = __webpack_require__(47);
var TweenJSTickConsumer_1 = __webpack_require__(345);
var SimpleTween = /** @class */ (function (_super) {
    __extends(SimpleTween, _super);
    function SimpleTween() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SimpleTween.prototype.start = function () {
        _super.prototype.start.call(this, TweenJSTickConsumer_1.TweenJSTickConsumer.timeMs);
        return this;
    };
    return SimpleTween;
}(TWEEN.Tween));
exports.SimpleTween = SimpleTween;


/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Sprite_1 = __webpack_require__(48);
var Button_1 = __webpack_require__(19);
var WebTextField_1 = __webpack_require__(35);
var BitmapTextField_1 = __webpack_require__(109);
var SpineAnimation_1 = __webpack_require__(63);
var SpineSoundAnimation_1 = __webpack_require__(640);
/**
 * elements that can be produce by core ui element factory
 */
var ElementList = {
    WebTextField: WebTextField_1.WebTextField,
    BitmapTextField: BitmapTextField_1.BitmapTextField,
    Button: Button_1.Button,
    Sprite: Sprite_1.Sprite,
    SpineSoundAnimation: SpineSoundAnimation_1.SpineSoundAnimation,
    SpineAnimation: SpineAnimation_1.SpineAnimation
};
/**
 * a factory to create all core ui element.
 */
var CoreUIElementFactory = /** @class */ (function () {
    function CoreUIElementFactory() {
    }
    CoreUIElementFactory.createInstance = function (coreUIElementConfig) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        var _a;
        if (ElementList[coreUIElementConfig.elementType] != undefined) {
            return new ((_a = ElementList[coreUIElementConfig.elementType]).bind.apply(_a, [void 0, coreUIElementConfig.elementConfig].concat(args)))();
        }
        throw new Error("Class type '" + coreUIElementConfig.elementType + "' is not in element list");
    };
    return CoreUIElementFactory;
}());
exports.CoreUIElementFactory = CoreUIElementFactory;


/***/ }),
/* 29 */,
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var BlankTransport_1 = __webpack_require__(365);
var HttpTransport = /** @class */ (function (_super) {
    __extends(HttpTransport, _super);
    function HttpTransport() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Make http request to server
     * @param method define the request is using GET or POST
     * @param url
     * @param name
     * @param headers define headers of the request
     * @param content define body of the request
     */
    HttpTransport.prototype.request = function (method, url, name, headers, content, callback) {
        var _this = this;
        var request = new XMLHttpRequest();
        request.open(method, url, true);
        request.onload = function (event) {
            _this.onLoad(name, event, callback);
        };
        request.onerror = this.onNetworkError.bind(this);
        if (headers) {
            headers.keys().forEach(function (key) {
                request.setRequestHeader(key, headers.get(key));
            });
        }
        request.setRequestHeader('Accept', 'application/json');
        request.responseType = 'json';
        request.send(JSON.stringify(content));
    };
    /**
     * Dispatch network error
     * @param reason
     */
    HttpTransport.prototype.onNetworkError = function (reason) {
        if (this.onError) {
            this.onError(reason);
        }
    };
    /**
     * callback function for get http response
     *
     * @protected
     * @param {string} name
     * @param {*} event
     * @param {Function} [callback=null]
     * @returns {void}
     * @memberof HttpTransport
     */
    HttpTransport.prototype.onLoad = function (name, event, callback) {
        if (callback === void 0) { callback = null; }
        var req = event.target;
        if (req.status >= 200 && req.status < 400) {
            if (req.response == 'ERROR' && this.onError) {
                if (this.onError) {
                    this.onError(req.response);
                    return;
                }
                else {
                    throw new Error('Unhandled Network error.');
                }
            }
            var payload = (!req.response) ? {} : req.response;
            var response = {
                name: name,
                payload: payload
            };
            if (this.onReceive) {
                this.onReceive(response);
            }
            if (callback) {
                callback(response);
            }
        }
        else {
            if (this.onReceiveError) {
                if (callback) {
                    var response = {
                        name: 'ERROR',
                        payload: req.response
                    };
                    callback(response.payload);
                }
                this.onReceiveError.forEach(function (cb) {
                    cb(req.response);
                });
            }
        }
    };
    HttpTransport.prototype.psend = function (data) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var url = data.url;
            var content = null;
            if (data.method === HTTP_METHODS.GET) {
                var urlParameters = '';
                for (var param in data.urlParameters) {
                    if (data.urlParameters[param]) {
                        urlParameters = urlParameters + (param + "=" + data.urlParameters[param] + "&");
                    }
                }
                if (urlParameters !== '') {
                    urlParameters = urlParameters.substring(0, urlParameters.length - 1);
                    url = url + ("?" + urlParameters);
                }
            }
            else {
                content = data.content;
            }
            _this.request(data.method, url, data.name, data.headers, content, function (payload) {
                if (payload.code) {
                    reject(payload);
                }
                else {
                    resolve(payload);
                }
            });
        });
    };
    return HttpTransport;
}(BlankTransport_1.BlankTransport));
exports.HttpTransport = HttpTransport;
var HTTP_METHODS;
(function (HTTP_METHODS) {
    HTTP_METHODS["POST"] = "POST";
    HTTP_METHODS["GET"] = "GET";
})(HTTP_METHODS = exports.HTTP_METHODS || (exports.HTTP_METHODS = {}));


/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var States_1 = __webpack_require__(74);
var SlotStates = /** @class */ (function (_super) {
    __extends(SlotStates, _super);
    function SlotStates() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        // base game
        _this.startSpin = 'startSpin';
        _this.spinning = 'spinning';
        _this.spinStop = 'spinStop';
        _this.allReelStopped = 'allReelStopped';
        _this.skip_spinning = 'skip_spinning';
        _this.skip_spinStop = 'skip_spinStop';
        /**
         * State that is responsible for showing winning on reels.
         * Format of data:
         * { winning: 150 }
         */
        _this.allLineWin = 'allLineWin';
        _this.skip_allLineWin = 'skip_allLineWin';
        _this.showWinning = 'showWinning';
        _this.skip_showWinning = 'skip_showWinning';
        _this.showWinningLoop = 'showWinningLoop';
        _this.prefeatureWinning = 'prefeatureWinning';
        // transitions
        _this.transitionToFreeSpins = 'transitionToFreeSpins';
        _this.transitionToBaseGame = 'transitionToBaseGame';
        _this.transitionToAutoSpin = 'transitionToAutoSpin';
        _this.transitionToBonusSpins = 'transitionToBonusSpins';
        _this.transitionBonusToBase = 'transitionBonusToBase';
        // free spins
        _this.freeSpinsIdle = 'freeSpinsIdle';
        _this.freeSpinsStart = 'freeSpinsStart';
        _this.freeSpinsIntroPopup = 'freeSpinsIntroPopup';
        _this.freeSpinsOutroPopup = 'freeSpinsOutroPopup';
        _this.freeSpinning = 'freeSpinning';
        _this.freeSpinsStop = 'freeSpinsStop';
        _this.freeSpinsAllReelStopped = 'freeSpinsAllReelStopped';
        _this.freeSpinsShowWinning = 'freeSpinsShowWinning';
        _this.freeSpinsAllLineWin = 'freeSpinsAllLineWin';
        _this.skip_freeSpinsAllLineWin = 'skip_freeSpinsAllLineWin';
        _this.freeSpinsWildMultipliers = 'freeSpinsWildMultipliers';
        _this.wildLockTriggered = 'wildLockTriggered';
        _this.freeSpinsRotate = 'freeSpinsRotate';
        _this.freeSpinsEnd = 'freeSpinsEnd';
        _this.showRetrigger = 'showRetrigger';
        _this.showBonusResult = 'showBonusResult';
        _this.skip_freeSpinning = 'skip_freeSpinning';
        _this.skip_freeSpinsStop = 'skip_freeSpinsStop';
        _this.replacingSymbols = 'replacingSymbols';
        //free respin
        _this.startFreeRespin = 'startFreeRespin';
        _this.freeRespinReels = 'freeRespinReels';
        _this.freeRespinning = 'freeRespinning';
        _this.freeRespinsStop = 'freeRespinsStop';
        _this.skip_freeRepinsStop = 'skip_freeRepinsStop';
        _this.freeRespinsAllReelStopped = 'freeRespinsAllReelStopped';
        _this.freeRespinsShowWinning = 'freeRespinsShowWinning';
        _this.freeRespinsAllLineWin = 'freeRespinsAllLineWin';
        _this.skip_freeRespinsAllLineWin = 'skip_freeRespinsAllLineWin';
        _this.freeRespinFinish = 'freeRespinFinish';
        _this.multiplierApplied = 'multiplierApplied';
        _this.multiplierAdded = 'multiplierAdded';
        _this.symbolCrawlTriggered = 'symbolCrawlTriggered';
        // Gamble
        /*
        public readonly showGamblePanel: string = 'showGamblePanel';
        public readonly gambleWin: string = 'gambleWin';
        public readonly gambleLoss: string = 'gambleLoss';
        public readonly showGambleCard: string = 'showGambleCard';
        public readonly showPaytables: string = 'showPaytables';
        public readonly hidePaytables: string = 'hidePaytables';
        public readonly openMenu: string = 'openMenu';
        public readonly closeMenu: string = 'closeMenu';
        public readonly realityCheck: string = 'realityCheck';
        public readonly winTaken: string = 'winTaken';
        */
        // Pick feature
        _this.startPickFeature = 'startPickFeature';
        _this.pickFeature = 'pickFeature';
        _this.endPickFeature = 'endPickFeature';
        // wheel fortune
        _this.transitionToWheelFortune = 'transitionToWheelFortune';
        _this.wheelFortuneStart = 'wheelFortuneStart';
        _this.wheelFortunRun = 'wheelFortunRun';
        _this.wheelFortunStop = 'wheelFortunStop';
        _this.wheelFortunClose = 'wheelFortunClose';
        // Jackpot
        _this.transitionToJackpot = 'transitionToJackpot';
        _this.jackpotStart = 'jackpotStart';
        _this.jackpotIdle = 'jackpotIdle';
        _this.jackpotRun = 'jackpotRun';
        _this.jackpotStop = 'jackpotStop';
        _this.jackpotShowWinning = 'jackpotShowWinning';
        _this.jackpotClose = 'jackpotClose';
        return _this;
    }
    SlotStates = __decorate([
        es5_1.Singleton
    ], SlotStates);
    return SlotStates;
}(States_1.States));
exports.SlotStates = SlotStates;


/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var SlotEvent = /** @class */ (function () {
    function SlotEvent() {
    }
    SlotEvent.GAME_READY_FOR_STOP = 'GameReadyForStopSpin';
    SlotEvent.HISTORY_SUMMARY = 'HISTORY_SUMMARY';
    SlotEvent.HISTORY_DETAIL = 'HISTORY_DETAIL';
    SlotEvent.RECV_HISTORY_SUMMARY = 'RECV_HISTORY_SUMMARY';
    SlotEvent.RECV_HISTORY_DETAIL = 'RECV_HISTORY_DETAIL';
    SlotEvent.CLOSE_HISTORY = 'CLOSE_HISTORY';
    SlotEvent.RESULT_HISTORY_SUMMARY = 'RESULT_HISTORY_SUMMARY';
    SlotEvent.RESULT_HISTORY_DETAIL = 'RESULT_HISTORY_DETAIL';
    SlotEvent.RECV_RESULT_HISTORY_SUMMARY = 'RECV_RESULT_HISTORY_SUMMARY';
    SlotEvent.RECV_RESULT_HISTORY_DETAIL = 'RECV_RESULT_HISTORY_DETAIL';
    SlotEvent.HIDE_FULL_SCREEN_UI = 'HIDE_FULL_SCREEN_UI';
    SlotEvent.SHOW_FULL_SCREEN_UI = 'SHOW_FULL_SCREEN_UI';
    SlotEvent.NORMAL_AUTOPLAY_STOP = 'normal_autoplay_stop';
    SlotEvent.BOOSTER_AUTOPLAY_START = 'booster_autoplay_start';
    SlotEvent.BOOSTER_AUTOPLAY_STOP = 'booster_autoplay_stop';
    SlotEvent.STOP_SPIN = 'STOP_SPIN';
    SlotEvent.SHOW_DEMO_SCREEN_UI = 'SHOW_DEMO_SCREEN_UI';
    SlotEvent.UPDATE_RNG_TOOL_SPIN_DATA = 'UPDATE_RNG_TOOL_SPIN_DATA';
    SlotEvent.RESPIN_REELS = 'RESPIN_REELS';
    return SlotEvent;
}());
exports.SlotEvent = SlotEvent;


/***/ }),
/* 33 */,
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var pixi_js_1 = __webpack_require__(4);
var Viewport_1 = __webpack_require__(6);
var GameContainerManager_1 = __webpack_require__(205);
/**
 * CompView is basic class for MVC components that NGF has.
 * The class represent the component. It contains all elements that are visible for user.
 */
var CompView = /** @class */ (function () {
    function CompView() {
        this.listenedSignals = null;
        this._initialized = false;
        this._orientationCoreElements = new Array();
    }
    Object.defineProperty(CompView.prototype, "initialized", {
        get: function () {
            return this._initialized;
        },
        set: function (value) {
            this._initialized = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CompView.prototype, "orientationCoreElements", {
        get: function () {
            return this._orientationCoreElements;
        },
        set: function (value) {
            this._orientationCoreElements = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * List of assets that will be loaded for this component.
     * The format of assets should be in the next format:
     * {
     *			assetKey 	: 'symbols',
     *			assetURL	: 'assets/animations/symbols.json'
     *	}
     * @return list of assets needed for this component
     */
    CompView.prototype.getAssetsList = function () {
        return [];
    };
    /**
     * Register required events
     *
     * @memberof CompView
     */
    CompView.prototype.registerEvents = function () {
        this.listenedSignals = {};
        this.listenedSignals['onOrientationChangedSignal'] = this.viewport.onOrientationChangedSignal.add(this.layoutElements, this);
    };
    /**
     * Unregister events.
     *
     * @memberof CompView
     */
    CompView.prototype.unRegisterEvents = function () {
        this.viewport.onOrientationChangedSignal.detach(this.listenedSignals['onOrientationChangedSignal']);
    };
    /**
     * Set the model of component to have access to all parameters.
     * @param pModel MODEL of component
     */
    CompView.prototype.initialize = function (config) {
        this.config = config;
        this.mainContainer = new pixi_js_1.Container();
        this.gameContainerManager.addChild(this.mainContainer);
        this.setMainContainerName(config);
        this.createElements(config);
        this.layoutElements();
        this.registerEvents();
        this.initialized = true;
    };
    /**
     * The method where we set the name for main container
     */
    CompView.prototype.setMainContainerName = function (config) {
        if (config != undefined && config.name != undefined) {
            this.mainContainer.name = config.name;
        }
        else {
            this.mainContainer.name = this.constructor.toString().match(/([a-zA-Z_{1}][a-zA-Z0-9_]+)(?=\()/g)[0];
        }
    };
    /**
     * The method where we create and add elements to the view
     */
    CompView.prototype.createElements = function (config) {
        //
    };
    /**
     * Resize content after screen dimensions changed
     */
    CompView.prototype.layoutElements = function () {
        if (this.viewport.gameOrientation === Viewport_1.Orientation.PORTRAIT) {
            this.portraitLayout();
        }
        else if (this.viewport.gameOrientation === Viewport_1.Orientation.LANDSCAPE) {
            this.landscapeLayout();
        }
        else if (this.viewport.isPortraitMode) {
            this.portraitLayout();
        }
        else {
            this.landscapeLayout();
        }
    };
    /**
     * Method where we set position, scale, visibility, textures ext. for portrait mode
     */
    CompView.prototype.portraitLayout = function () {
        this.coreElementLayout(Viewport_1.Orientation.PORTRAIT);
    };
    /**
     * Method where we set position, scale, visibility, textures ext. for landscape mode
     */
    CompView.prototype.landscapeLayout = function () {
        this.coreElementLayout(Viewport_1.Orientation.LANDSCAPE);
    };
    /**
     * update all core elements config with orientation config
     * @param orientation
     */
    CompView.prototype.coreElementLayout = function (orientation) {
        if (this.config != undefined) {
            if (this.config.coreElementOrientationConfig != undefined) {
                var orientationConfig_1 = this.config.coreElementOrientationConfig.get(orientation);
                this.orientationCoreElements.forEach(function (element) {
                    element.updateAttributes(orientationConfig_1.get(element.name));
                });
            }
        }
    };
    /**
     * check is CoreElement
     * @param toBeDetermined
     */
    CompView.prototype.isCoreElement = function (toBeDetermined) {
        return toBeDetermined.isOrientationSupported;
    };
    /**
     * Adds children to the container.
     * @param child - The DisplayObject to add to the container
     * @return Child that was added.
     */
    CompView.prototype.addChild = function (child) {
        if (this.isCoreElement(child)) {
            this.orientationCoreElements.push(child);
        }
        return this.mainContainer.addChild(child);
    };
    /**
     * Adds children to the container.
     * @param child - The DisplayObject to add to the container
     * @param index - The index in the container to place the DisplayObject
     * @return Child that was added.
     */
    CompView.prototype.addChildAt = function (child, index) {
        return this.mainContainer.addChildAt(child, index);
    };
    /**
     * Removes children from the container.
     * @param  child - The DisplayObject remove
     * @return Child that was removed.
     */
    CompView.prototype.removeChild = function (child) {
        if (this.isCoreElement(child)) {
            var index = this.orientationCoreElements.indexOf(child, 0);
            if (index > -1) {
                this.orientationCoreElements.splice(index, 1);
            }
        }
        return this.mainContainer.removeChild(child);
    };
    Object.defineProperty(CompView.prototype, "visible", {
        /**
         * get visible of component view
         */
        get: function () {
            return this.mainContainer.visible;
        },
        /**
         * set visible of component view
         */
        set: function (value) {
            this.mainContainer.visible = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Destroy all elements of component view
     */
    CompView.prototype.destroy = function () {
        this.viewport = undefined;
        this.mainContainer = undefined;
        if (this.listenedSignals !== null) {
            this.unRegisterEvents();
        }
    };
    var _a, _b;
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof Viewport_1.Viewport !== "undefined" && Viewport_1.Viewport) === "function" && _a || Object)
    ], CompView.prototype, "viewport", void 0);
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_b = typeof GameContainerManager_1.GameContainerManager !== "undefined" && GameContainerManager_1.GameContainerManager) === "function" && _b || Object)
    ], CompView.prototype, "gameContainerManager", void 0);
    return CompView;
}());
exports.CompView = CompView;


/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var pixi_js_1 = __webpack_require__(4);
var TextField_1 = __webpack_require__(346);
var WebTextField = /** @class */ (function (_super) {
    __extends(WebTextField, _super);
    function WebTextField() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.autoscale = false;
        return _this;
    }
    WebTextField.prototype.initElement = function (config) {
        var text = (config.text) ? config.text : this.getTextByKey(config.key);
        this.label = new pixi_js_1.Text(text, config.style);
        this.addChild(this.label);
        _super.prototype.initElement.call(this, config);
    };
    WebTextField.prototype.setMaxWidth = function (value) {
        this.label.style.wordWrapWidth = value;
        this.maxWidth = value;
    };
    WebTextField.prototype.setMaxScale = function (maxWidth, maxHeight) {
        this.maxWidth = maxWidth;
        this.maxHeight = maxHeight;
    };
    WebTextField.prototype.setAutoscale = function (maxWidth, maxHeight) {
        this.maxWidth = maxWidth;
        this.maxHeight = maxHeight;
        this.autoscale = true;
        this.updateTextField();
    };
    WebTextField.prototype.updateTextField = function () {
        if (this.autoscale) {
            this.autoResize();
        }
    };
    Object.defineProperty(WebTextField.prototype, "size", {
        get: function () {
            return this.label.style.fontSize;
        },
        set: function (fontSize) {
            this.label.style.fontSize = fontSize;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WebTextField.prototype, "isLargerThanMaxWidth", {
        get: function () {
            return this.label.width > this.maxWidth;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WebTextField.prototype, "fill", {
        get: function () {
            return this.label.style.fill;
        },
        set: function (fill) {
            this.label.style.fill = fill;
        },
        enumerable: true,
        configurable: true
    });
    WebTextField.elementType = 'WebTextField';
    return WebTextField;
}(TextField_1.TextField));
exports.WebTextField = WebTextField;


/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var SoundConfig_1 = __webpack_require__(55);
var SlotSoundConfig = /** @class */ (function (_super) {
    __extends(SlotSoundConfig, _super);
    function SlotSoundConfig() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SlotSoundConfig.backgroundLoop = 'backgroundLoop';
    SlotSoundConfig.bonusIntro = 'bonusIntro';
    SlotSoundConfig.bonusLoop = 'bonusLoop';
    SlotSoundConfig.bonusOutro = 'bonusOutro';
    SlotSoundConfig.scatterDrop = 'scatterDrop';
    SlotSoundConfig.scatter = 'Scatter';
    SlotSoundConfig.creditLoopEnd = 'creditLoopEnd';
    SlotSoundConfig.creditLoop = 'creditLoop';
    SlotSoundConfig.reelSpin = 'ReelSpin';
    SlotSoundConfig.reelStopped = 'ReelStop';
    SlotSoundConfig.cardPick = 'cardPick';
    SlotSoundConfig.coinDump = 'coinDump';
    SlotSoundConfig.win = 'Win';
    return SlotSoundConfig;
}(SoundConfig_1.SoundConfig));
exports.SlotSoundConfig = SlotSoundConfig;


/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * The postfix for names of symbol's assets
 */
var SymbolStatePostfix;
(function (SymbolStatePostfix) {
    SymbolStatePostfix["STATIC"] = "";
    SymbolStatePostfix["BLUR"] = "_Blur";
    SymbolStatePostfix["LOSE"] = "_Lose";
    SymbolStatePostfix["WIN"] = "_Win";
})(SymbolStatePostfix = exports.SymbolStatePostfix || (exports.SymbolStatePostfix = {}));
var SymbolState;
(function (SymbolState) {
    SymbolState[SymbolState["STATIC"] = 0] = "STATIC";
    SymbolState[SymbolState["BLUR"] = 1] = "BLUR";
    SymbolState[SymbolState["LOSE"] = 2] = "LOSE";
    SymbolState[SymbolState["WIN"] = 3] = "WIN";
})(SymbolState = exports.SymbolState || (exports.SymbolState = {}));
var SymbolAnimationPostfix;
(function (SymbolAnimationPostfix) {
    SymbolAnimationPostfix["IDLE"] = "_Idle";
    SymbolAnimationPostfix["WIN"] = "_Win";
    SymbolAnimationPostfix["LOCKWIN"] = "_Lock_Win";
    SymbolAnimationPostfix["DROPPED"] = "_Drop";
    SymbolAnimationPostfix["ANTICIPATION"] = "_Anticipation";
    SymbolAnimationPostfix["WIN_INTRO"] = "_Win_Intro";
    SymbolAnimationPostfix["WILD_X2"] = "_x2";
    SymbolAnimationPostfix["WILD_X3"] = "_x3";
    SymbolAnimationPostfix["WILD_X4"] = "_x4";
})(SymbolAnimationPostfix = exports.SymbolAnimationPostfix || (exports.SymbolAnimationPostfix = {}));


/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var SlotUIButtonId_1 = __webpack_require__(162);
var MLUIButtonId = /** @class */ (function (_super) {
    __extends(MLUIButtonId, _super);
    function MLUIButtonId() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MLUIButtonId.SLIDER_WIN = 'SLIDER_WIN';
    MLUIButtonId.SLIDER_LOSE = 'SLIDER_LOSE';
    MLUIButtonId.SLIDER_SINGLE_WIN = 'SLIDER_SINGLE_WIN';
    MLUIButtonId.BUTTON_BET_INCREMENT = 'BUTTON_BET_INCREMENT';
    MLUIButtonId.BUTTON_BET_DECREMENT = 'BUTTON_BET_DECREMENT';
    MLUIButtonId.BUTTON_MAIN_VIEW_BET_INCREMENT = 'BUTTON_MAIN_VIEW_BET_INCREMENT';
    MLUIButtonId.BUTTON_MAIN_VIEW_BET_DECREMENT = 'BUTTON_MAIN_VIEW_BET_DECREMENT';
    MLUIButtonId.BUTTON_SPIN_OPTION_CONFIRM = 'BUTTON_SPIN_OPTION_CONFIRM';
    //paytable
    MLUIButtonId.BUTTON_PAYTABLE_NEXT = 'BUTTON_PAYTABLE_NEXT';
    MLUIButtonId.BUTTON_PAYTABLE_PREV = 'BUTTON_PAYTABLE_PREV';
    //rules
    MLUIButtonId.BUTTON_RULES_NEXT = 'BUTTON_RULES_NEXT';
    MLUIButtonId.BUTTON_RULES_PREV = 'BUTTON_RULES_PREV';
    //history
    MLUIButtonId.BUTTON_HISTORY_RETURN = 'BUTTON_HISTORY_RETURN';
    MLUIButtonId.BUTTON_HISTORY_NEXT = 'BUTTON_HISTORY_NEXT';
    MLUIButtonId.BUTTON_HISTORY_PREV = 'BUTTON_HISTORY_PREV';
    MLUIButtonId.OPTION_TODAY = 'OPTION_TODAY';
    MLUIButtonId.OPTION_PAST_7_DAYS = 'OPTION_PAST_7_DAYS';
    MLUIButtonId.OPTION_PAST_30_DAYS = 'OPTION_PAST_30_DAYS';
    MLUIButtonId.OPTION_PAST_90_DAYS = 'OPTION_PAST_90_DAYS';
    MLUIButtonId.DROPDOWN_HISTORY_DETAIL_TRANSACTION = 'DROPDOWN_HISTORY_DETAIL_TRANSACTION';
    MLUIButtonId.BUTTON_HISTORY_TRANDETAIL = 'BUTTON_HISTORY_TRANDETAIL';
    return MLUIButtonId;
}(SlotUIButtonId_1.SlotUIButtonId));
exports.MLUIButtonId = MLUIButtonId;


/***/ }),
/* 39 */,
/* 40 */,
/* 41 */,
/* 42 */,
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var MiniSignal = __webpack_require__(3);
var es5_1 = __webpack_require__(0);
var States_1 = __webpack_require__(74);
var GameConfig_1 = __webpack_require__(24);
var StateMachine_1 = __webpack_require__(198);
var SoundManager_1 = __webpack_require__(13);
var AssetLoader_1 = __webpack_require__(54);
var ResourceConfig_1 = __webpack_require__(62);
/**
 * CompController is basic class for MVC components that NGF has.
 * The class is responsible for ALL business logic of component. It stores all data.
 * Controller and Model are combined together is this class.
 */
var CompController = /** @class */ (function () {
    function CompController(view) {
        this.prevStateName = null;
        this.isStateActionCompleted = false;
        this.finishStateActionSignal = new MiniSignal();
        if (view != undefined) {
            this.view = view;
        }
        this.addAudio();
        this.addEventListeners();
    }
    CompController.prototype.getCurrentStateName = function () {
        return this.currentStateName;
    };
    CompController.prototype.init = function (stateData) {
        if (this.view != undefined) {
            this.view.initialize();
        }
        this.finishStateAction();
    };
    Object.defineProperty(CompController.prototype, "loaderList", {
        /**
         * List of assets that will be loaded for this component.
         * The format of assets should be in the next format:
         * {
         *			assetKey 	: 'symbols',
         *			assetURL	: 'assets/animations/symbols.json'
         *	}
         * @return list of assets needed for this component
         */
        get: function () {
            var assetsList = new Array();
            var config = this.getConfigAsset();
            if (this.view != undefined) {
                assetsList = this.view.getAssetsList();
                assetsList.forEach(function (asset) {
                    asset.group = ResourceConfig_1.ResourceConfig.MAIN_GAME;
                });
            }
            if (config.assetKey != undefined) {
                assetsList.push(config);
            }
            return assetsList;
        },
        enumerable: true,
        configurable: true
    });
    CompController.prototype.getConfigAsset = function () {
        return {};
    };
    CompController.prototype.addEventListeners = function () {
        // Example of code:
        // GlobalDispatcher.addListener(this, BaseAutoPlayController.SET_AUTO_PLAY, this.onSomeMethod);
    };
    /**
     * [Deprecated] Please add sound resource just like normal image file : View.getAssetsList()
     */
    CompController.prototype.addAudio = function () {
        //TODO
    };
    /**
     * Method notifies subscribes that all required actions for current state has been finished.
     */
    CompController.prototype.finishStateAction = function () {
        this.isStateActionCompleted = true;
        this.prevStateName = this.currentStateName;
        this.finishStateActionSignal.dispatch(this.componentID);
    };
    /**
     * Set the state for component AND
     * invoke the method with name of state for CONTROLLER.
     *
     * CONTROLLER handling of state is priority but if we do not have it it will be done in VIEW.
     *
     * If CONTROLLER does NOT have method "nameOfState()" we will mark the component
     * as the one that is ready to go to the next state.
     *
     * @param state the state that we will set for component
     */
    CompController.prototype.setState = function (state) {
        this.currentStateName = state.stateName;
        if (typeof this[state.stateName] === 'function') {
            this.isStateActionCompleted = false;
            this.invokeStateMethod(state);
            return true;
        }
        else {
            this.finishStateAction();
            return false;
        }
    };
    CompController.prototype.skipState = function (state) {
        if (typeof this[StateMachine_1.StateMachine.PREFIX_SKIP + state.stateName] === 'function') {
            this[StateMachine_1.StateMachine.PREFIX_SKIP + state.stateName](state.stateData);
        }
    };
    /**
     * Calls method in current controller that has same name as state
     * @param {CoreState} state
     */
    CompController.prototype.invokeStateMethod = function (state) {
        if (typeof this[state.stateName] === 'function') {
            this[state.stateName](state.stateData);
        }
    };
    CompController.prototype.onResourceLoaded = function (groupIdx) {
        // TODO
    };
    CompController.prototype.onGroupProgress = function (groupIdx, ratio) {
        //TODO
    };
    /**
     * override for set bttton action callback
     *
     * @protected
     * @param {IButtonConfig} buttonConfig
     * @memberof CompController
     */
    CompController.prototype.setButtonActionEventListeners = function (buttonConfig) {
        /**
         * exsample:
         * ButtonsController.setAction( ... );
         */
    };
    CompController.prototype.onGroupCompleted = function (groupIdx) {
        //
    };
    CompController.prototype.onLandscapeViewLoaded = function () {
        //
    };
    CompController.prototype.onPortraitViewLoaded = function () {
        //
    };
    var _a, _b, _c, _d;
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof GameConfig_1.GameConfig !== "undefined" && GameConfig_1.GameConfig) === "function" && _a || Object)
    ], CompController.prototype, "gameConfig", void 0);
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_b = typeof States_1.States !== "undefined" && States_1.States) === "function" && _b || Object)
    ], CompController.prototype, "stateNames", void 0);
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_c = typeof SoundManager_1.SoundManager !== "undefined" && SoundManager_1.SoundManager) === "function" && _c || Object)
    ], CompController.prototype, "soundManager", void 0);
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_d = typeof AssetLoader_1.AssetLoader !== "undefined" && AssetLoader_1.AssetLoader) === "function" && _d || Object)
    ], CompController.prototype, "assetLoader", void 0);
    return CompController;
}());
exports.CompController = CompController;


/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Actions_1 = __webpack_require__(22);
/**
 * Class that contains all actions and markers for actions that we use in game
 */
var SlotActions = /** @class */ (function (_super) {
    __extends(SlotActions, _super);
    function SlotActions() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SlotActions.SPIN = 'spin';
    SlotActions.FREE_SPIN = 'freeSpin';
    SlotActions.FREE_SPIN_STOP = 'freeSpinStop';
    SlotActions.AUTO_SPIN = 'autoSpin';
    SlotActions.STOP_SPIN = 'stopSpin';
    SlotActions.STOP_AUTO_PLAY = 'stopAutoPlay';
    SlotActions.SKIP_LINE_WIN = 'skipLineWin';
    SlotActions.RESERVE = 'reserve';
    SlotActions.PAYOUT = 'payout';
    SlotActions.NO_ACTION = '';
    SlotActions.FORCE_SPIN_RESULTS = 'forceSpinResults';
    SlotActions.GAMBLE_CHOOSE = 'gambleChoose';
    SlotActions.GAMBLE_CHOOSE_RED = 'gambleRed';
    SlotActions.GAMBLE_CHOOSE_BLACK = 'gambleBlack';
    SlotActions.GAMBLE_CHOOSE_CLUBS = 'gambleClubs';
    SlotActions.GAMBLE_CHOOSE_DIAMONDS = 'gambleDiamonds';
    SlotActions.GAMBLE_CHOOSE_HEARTS = 'gambleHearts';
    SlotActions.GAMBLE_CHOOSE_SPADES = 'gambleSpades';
    // Options
    SlotActions.OPEN_OPTIONS = 'openOptions';
    SlotActions.SHOW_AUTOPLAY = 'showAutoPlayOption';
    SlotActions.TURBO_MODE = 'turboModeOption';
    SlotActions.AUTO_PLAY_PANEL_SLIDER = 'autoPlaySlider';
    // Bet
    SlotActions.SHOW_BET_OPTIONS = 'showBetOptions';
    SlotActions.HIDE_BET_OPTIONS = 'hideBetOptions';
    SlotActions.BUTTON_CONFIRM_BET_OPTIONS = 'confirmBetOptions';
    SlotActions.BET_MAX = 'betMax';
    SlotActions.BET_INCREASE = 'betIncrease';
    SlotActions.BET_DECREASE = 'betDecrease';
    SlotActions.LINE_INCREASE = 'lineIncrease';
    SlotActions.LINE_DECREASE = 'lineDecrease';
    SlotActions.BET_INCREASE_END = 'betIncreaseEnd';
    SlotActions.BET_DECREASE_END = 'betDecreaseEnd';
    SlotActions.LINE_INCREASE_END = 'lineIncreaseEnd';
    SlotActions.LINE_DECREASE_END = 'lineDecreaseEnd';
    SlotActions.SHOW_AUTO_PLAY_PANEL = 'showAutoPlayPanel';
    SlotActions.HIDE_AUTO_PLAY_PANEL = 'hideAutoPlayPanel';
    // Menu
    SlotActions.SHOW_MENU_OPTIONS = 'showMenuOptions';
    SlotActions.HIDE_MENU_OPTIONS = 'hideMenuOptions';
    SlotActions.SHOW_SETTINGS = 'showSettings';
    SlotActions.HIDE_SETTINGS = 'hideSettings';
    SlotActions.HISTORY_SUMMARY = 'historySummary';
    SlotActions.SHOW_PAYTABLE = 'showPaytable';
    SlotActions.SHOW_RULES = 'showRules';
    SlotActions.HISTORY_BUTTON = 'historyButton';
    SlotActions.HOME_BUTTON = 'homeButton';
    // Settings
    SlotActions.SOUND_TOGGLE = 'soundToggle';
    SlotActions.MUSIC_TOGGLE = 'musicToggle';
    SlotActions.MENU_OPTIONS = 'menuOptions';
    // jackpot
    SlotActions.START_JACKPOT = 'startJackpot';
    return SlotActions;
}(Actions_1.Actions));
exports.SlotActions = SlotActions;


/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var WebTextElement_1 = __webpack_require__(405);
var WebLineElement_1 = __webpack_require__(782);
var WebImageElement_1 = __webpack_require__(69);
var WebPayoutElement_1 = __webpack_require__(783);
var WebElementBlock_1 = __webpack_require__(784);
var WebTextContentElement_1 = __webpack_require__(785);
var WebLinePatternElement_1 = __webpack_require__(786);
var WebGeneralPagingElement_1 = __webpack_require__(787);
var WebImageSlideshowElement_1 = __webpack_require__(406);
/**
 * elements that can be produce by core ui element factory.
 */
var WebElementList = {
    'WEB_TEXT_ELEMENT': es5_1.Container.get(WebTextElement_1.WebTextElement),
    'WEB_IMAGE_ELEMENT': es5_1.Container.get(WebImageElement_1.WebImageElement),
    'WEB_ELEMENT_BLOCK': es5_1.Container.get(WebElementBlock_1.WebElementBlock),
    'WEB_TEXT_CONTENT_ELEMENT': es5_1.Container.get(WebTextContentElement_1.WebTextContentElement),
    'WEB_LINE_ELEMENT': es5_1.Container.get(WebLineElement_1.WebLineElement),
    'WEB_PAYOUT_ELEMENT': es5_1.Container.get(WebPayoutElement_1.WebPayoutElement),
    'WEB_LINE_PATTERN_ELEMENT': es5_1.Container.get(WebLinePatternElement_1.WebLinePatternElement),
    'WEB_GENERAL_PAGING_ELEMENT': es5_1.Container.get(WebGeneralPagingElement_1.WebGeneralPagingElement),
    'WEB_IMAGE_SLIDESHOW': es5_1.Container.get(WebImageSlideshowElement_1.WebImageSlideshowElement)
};
/**
 * list for web elements that can preduce by web wlement factory.
 */
var WebFactoryElementType = /** @class */ (function () {
    function WebFactoryElementType() {
    }
    WebFactoryElementType.WEB_TEXT_ELEMENT = WebTextElement_1.WebTextElement.elementType;
    WebFactoryElementType.WEB_IMAGE_ELEMENT = WebImageElement_1.WebImageElement.elementType;
    WebFactoryElementType.WEB_ELEMENT_BLOCK = WebElementBlock_1.WebElementBlock.elementType;
    WebFactoryElementType.WEB_TEXT_CONTENT_ELEMENT = WebTextContentElement_1.WebTextContentElement.elementType;
    WebFactoryElementType.WEB_LINE_ELEMENT = WebLineElement_1.WebLineElement.elementType;
    WebFactoryElementType.WEB_PAYOUT_ELEMENT = WebPayoutElement_1.WebPayoutElement.elementType;
    WebFactoryElementType.WEB_LINE_PATTERN_ELEMENT = WebLinePatternElement_1.WebLinePatternElement.elementType;
    WebFactoryElementType.WEB_GENERAL_PAGING_ELEMENT = WebGeneralPagingElement_1.WebGeneralPagingElement.elementType;
    WebFactoryElementType.WEB_IMAGE_SLIDESHOW = WebImageSlideshowElement_1.WebImageSlideshowElement.elementType;
    return WebFactoryElementType;
}());
exports.WebFactoryElementType = WebFactoryElementType;
/**
 * a factory to create all web element.
 */
var WebElementFactory = /** @class */ (function () {
    function WebElementFactory() {
    }
    WebElementFactory.createInstance = function (webElementConfig) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        var _a;
        if (WebElementList[webElementConfig.type] != undefined) {
            return (_a = WebElementList[webElementConfig.type]).createElement.apply(_a, [webElementConfig].concat(args));
        }
        throw new Error("Class type '" + webElementConfig.type + "' is not in element list");
    };
    WebElementFactory.createWebTextElement = function (webTextConfig) {
        return this.createInstance(webTextConfig);
    };
    WebElementFactory.createWebImageElement = function (webImageConfig) {
        return this.createInstance(webImageConfig);
    };
    WebElementFactory.createWebTextContentElement = function (webTextContentConfig) {
        return this.createInstance(webTextContentConfig);
    };
    WebElementFactory.createWebElementBlock = function (webElementBlockConfig) {
        return this.createInstance(webElementBlockConfig);
    };
    WebElementFactory.createWebLineElement = function (webLineConfig) {
        return this.createInstance(webLineConfig);
    };
    WebElementFactory.createWebPayoutElement = function (webPayoutConfig) {
        return this.createInstance(webPayoutConfig);
    };
    WebElementFactory.createLinePatternElement = function (webLinePatternConfig) {
        return this.createInstance(webLinePatternConfig);
    };
    WebElementFactory.createGeneralPagingElement = function (webPagingConfig) {
        return this.createInstance(webPagingConfig);
    };
    WebElementFactory.createImageSlideshowElement = function (webImageSlideshowElement) {
        return this.createInstance(webImageSlideshowElement);
    };
    return WebElementFactory;
}());
exports.WebElementFactory = WebElementFactory;


/***/ }),
/* 46 */,
/* 47 */,
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var pixi_js_1 = __webpack_require__(4);
var Sprite = /** @class */ (function (_super) {
    __extends(Sprite, _super);
    function Sprite(config) {
        var _this = _super.call(this) || this;
        _this.isOrientationSupported = false;
        _this.name = config.name;
        _this.isOrientationSupported = config.isOrientationSupported;
        _this.updateAttributes(config);
        return _this;
    }
    Sprite.prototype.updateAttributes = function (config) {
        if (config == undefined) {
            return;
        }
        // set texture from config
        this.setTexture(config.assetName);
        // set visible from config
        this.setVisible(config.visible);
        // set position from config
        this.setPosition(config.position);
        // set scale from config
        this.setScale(config.scale);
        // set anchor from config
        this.setAnchor(config.anchor);
        // set blend mode from config
        this.setBlendMode(config.blendMode);
    };
    /**
     * set is sprite texture based on value in config.
     */
    Sprite.prototype.setTexture = function (assetName) {
        if (assetName != undefined) {
            this._texture = pixi_js_1.Texture.from(assetName);
        }
    };
    /**
     * set is visible based on value in config.
     */
    Sprite.prototype.setVisible = function (visible) {
        if (visible != undefined) {
            this.visible = visible;
        }
    };
    /**
     * set position based on value in config.
     */
    Sprite.prototype.setPosition = function (position) {
        if (position != undefined) {
            this.position.set(position.x, position.y);
        }
    };
    /**
     * set scale based on value in config.
     */
    Sprite.prototype.setScale = function (scale) {
        if (scale != undefined) {
            this.scale.set(scale.x, scale.y);
        }
    };
    /**
     * set anchor based on value in config.
     */
    Sprite.prototype.setAnchor = function (anchor) {
        if (anchor != undefined) {
            this.anchor.set(anchor.x, anchor.y);
        }
    };
    /**
     * set the blend mode based on value in config
     */
    Sprite.prototype.setBlendMode = function (blendMode) {
        if (blendMode != undefined) {
            this.blendMode = blendMode;
        }
    };
    Sprite.elementType = 'Sprite';
    return Sprite;
}(PIXI.Sprite));
exports.Sprite = Sprite;


/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var MiniSignal = __webpack_require__(3);
var es5_1 = __webpack_require__(0);
var BankService_1 = __webpack_require__(687);
var SlotBankService = /** @class */ (function (_super) {
    __extends(SlotBankService, _super);
    function SlotBankService() {
        var _this = _super.call(this) || this;
        _this._lines = 0;
        _this.maxLines = 0;
        _this.onLinesUpdatedSignal = new MiniSignal();
        return _this;
    }
    Object.defineProperty(SlotBankService.prototype, "lines", {
        get: function () {
            return this._lines;
        },
        //TODO: Implement minimum lines from server
        set: function (newLines) {
            if (newLines > 0 && newLines <= this.maxLines) {
                this._lines = newLines;
                this.onLinesUpdatedSignal.dispatch(this.lines);
            }
            else {
                console.warn('Bank service can not set lines ' + newLines + ' because that line value is not legal');
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SlotBankService.prototype, "totalBet", {
        get: function () {
            return this.bet * this._lines;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SlotBankService.prototype, "availableLines", {
        //TODO: Implement min lines from server
        get: function () {
            var availableLines = new Array();
            for (var i = 1; i <= this.maxLines; i++) {
                availableLines.push(i);
            }
            return availableLines;
        },
        enumerable: true,
        configurable: true
    });
    SlotBankService.prototype.increaseLine = function () {
        if (this._lines < this.maxLines) {
            ++this._lines;
        }
        else {
            console.warn('You can\'t increaseLine because line == maxLines');
        }
    };
    SlotBankService.prototype.decreaseLine = function () {
        if (this._lines > 1) {
            --this._lines;
        }
        else {
            console.warn('You can\'t decreaseLine because line == 1');
        }
    };
    SlotBankService = __decorate([
        es5_1.Singleton,
        __metadata("design:paramtypes", [])
    ], SlotBankService);
    return SlotBankService;
}(BankService_1.BankService));
exports.SlotBankService = SlotBankService;


/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var SlotNGHttpFormatter_1 = __webpack_require__(20);
var WinLine_1 = __webpack_require__(692);
var SlotNGFeatureDataDefinitions_1 = __webpack_require__(23);
/**
 * general functions for formatting take turn response
 */
var SpinResponseFormatter = /** @class */ (function (_super) {
    __extends(SpinResponseFormatter, _super);
    function SpinResponseFormatter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * get reel symbols in reel set
     * @param reels
     */
    SpinResponseFormatter.prototype.getReelSymbols = function (reels) {
        var reelSymbols = new Array();
        for (var i = 0; i < reels.length; i++) {
            reelSymbols[i] = new Array();
            for (var j = 0; j < reels[i].symbols.length; j++) {
                reelSymbols[i].push(reels[i].symbols[j].symbol);
            }
        }
        return reelSymbols;
    };
    /**
     * set winning data for states
     * @param responseScenario
     * @param message
     */
    SpinResponseFormatter.prototype.setWinningData = function (responseScenario, message) {
        var winData = this.getShowWinningData(message.balance, message.spin_result, message.features, message.bet_value);
        var windataStates = [
            this.stateNames.allReelStopped,
            this.stateNames.showWinningLoop,
            this.stateNames.allLineWin,
            this.stateNames.showWinning,
            this.stateNames.prefeatureWinning,
            this.stateNames.freeSpinsAllLineWin,
            this.stateNames.freeSpinsShowWinning,
            this.stateNames.freeRespinsAllLineWin,
            this.stateNames.freeRespinsShowWinning
        ];
        windataStates.forEach(function (stateName) {
            if (responseScenario.hasStateName(stateName)) {
                responseScenario.setStateData(stateName, winData);
            }
        });
        return responseScenario;
    };
    /**
     * get actual win data in IWinningData format
     * @param current_balance
     * @param spinResult
     */
    SpinResponseFormatter.prototype.getShowWinningData = function (current_balance, spinResult, featureInfo, betValue) {
        var _this = this;
        var winLines = new Array();
        var featureState = null;
        var winTable = this.createWinTable(spinResult);
        if (featureInfo && featureInfo.length > 0) {
            featureState = this.getFeatureState(featureInfo);
        }
        if (spinResult.reel_wins != null && spinResult.reel_wins.length > 0) {
            spinResult.reel_wins.forEach(function (winElement) {
                winLines.push(_this.getWinline(winElement, winTable));
            });
        }
        if (spinResult.scatter_win != null) { // spinResult.scatter_win is an Object
            winLines.push(this.getBaseWinLine(spinResult.scatter_win, winTable));
        }
        return {
            balance: current_balance,
            totalBet: betValue,
            totalWin: spinResult.win_amount,
            winLines: winLines,
            featureState: featureState,
            winTable: winTable
        };
    };
    /**
     * Create an empty winTable accroding to spin result
     *
     * @protected
     * @param {ISpinResult} spinResult
     * @returns {Array<Array<boolean>>}
     * @memberof SpinResponseFormatter
     */
    SpinResponseFormatter.prototype.createWinTable = function (spinResult) {
        var wintable = [];
        spinResult.reels.forEach(function (reel) {
            var reelData = [];
            reel.symbols.forEach(function () {
                reelData.push(false);
            });
            wintable.push(reelData);
        });
        return wintable;
    };
    SpinResponseFormatter.prototype.getBaseWinLine = function (winElement, winTable) {
        var _this = this;
        var reelPositions = [];
        var winningCombinations = [];
        winElement.line_config.forEach(function (reel, x) {
            var winSymbolIndexOnReel = [];
            var winSymbolOnReel = [];
            if (reel.length === 0 || (reel.length === 1 && reel[0] === '*')) { // no win on this reel, skip it
                reelPositions.push(winSymbolIndexOnReel);
                winningCombinations.push(winSymbolOnReel);
                return;
            }
            reel.forEach(function (winSymbolIndex) {
                var y = parseInt(winSymbolIndex);
                winSymbolIndexOnReel.push(y);
                var winningCombination = {
                    index: y,
                    symbol: _this.getSymbolByPosition(winElement.symbol, { x: x, y: y })
                };
                winSymbolOnReel.push(winningCombination);
                winTable[x][y] = true;
            });
            reelPositions.push(winSymbolIndexOnReel);
            winningCombinations.push(winSymbolOnReel);
        });
        var winline = {
            symbol: winElement.symbol,
            payout: winElement.prize,
            line: winElement.line_number != null ? winElement.line_number : 0,
            winningCombinations: winningCombinations,
            reelPositions: reelPositions,
            rightToLeft: winElement !== undefined ? winElement.right_to_left : false
        };
        return winline;
    };
    SpinResponseFormatter.prototype.getFeatureState = function (featureInfo) {
        return featureInfo.find(function (e) { return e.type === SlotNGFeatureDataDefinitions_1.FeatureTypes.FREE_SPIN; });
    };
    /**
     * get win data for each line
     * @param winElement
     * @param reels
     */
    SpinResponseFormatter.prototype.getWinline = function (winElement, winTable, wildConfig) {
        var winLine = this.getBaseWinLine(winElement, winTable);
        var multiplier_list = [];
        if (wildConfig != undefined && wildConfig.wild_config.length > 0) {
            multiplier_list = new Array();
            for (var i = 0; i < wildConfig.wild_config.length; i++) {
                for (var j = 0; j < wildConfig.wild_config[i].length; j++) {
                    if (wildConfig.wild_config[i][j]['index'] != '*') {
                        var wild_multiplier = new WinLine_1.WildMultiplier();
                        wild_multiplier.reel_index = i;
                        wild_multiplier.symbol_index = parseInt(wildConfig.wild_config[i][j]['index']);
                        wild_multiplier.multiplier = wildConfig.wild_config[i][j]['value'];
                        multiplier_list.push(wild_multiplier);
                    }
                }
            }
        }
        // TODO: leave the flexibility for a win more then one symol on one reel
        winLine.wildMultiplier = multiplier_list;
        //winLine.rightToLeft = winElement.right_to_left;
        return winLine;
    };
    SpinResponseFormatter.prototype.getSymbolByPosition = function (symbolSet, position) {
        var symbol = null;
        if (Array.isArray(symbolSet)) {
            symbol = symbolSet[position.x][position.y].symbol;
        }
        else {
            symbol = symbolSet;
        }
        return symbol;
    };
    /**
     * get complete feature scenario for take turn response
     * @param message
     * @param responseScenario
     */
    SpinResponseFormatter.prototype.getFormatFeatureTriggeredsScenario = function (message, responseScenario) {
        for (var i = 0; i < message.spin_result.features_triggered.length; i++) {
            var feature = message.spin_result.features_triggered[i];
            var featureScenario = this.formatFeatureTriggeredScenario(feature, message);
            if (featureScenario) {
                if (responseScenario == undefined) {
                    responseScenario = featureScenario;
                }
                else {
                    responseScenario.addScenario(featureScenario);
                }
                // if feature.complete == false, means we need to create another transaction for this feature
                if (!feature.complete) {
                    break;
                }
            }
        }
        return responseScenario;
    };
    /**
     * format feature into scenario
     * @param feature
     * @param message
     */
    SpinResponseFormatter.prototype.formatFeatureTriggeredScenario = function (feature, message) {
        var responseScenario = null;
        var featureFormatter = this.getFeatureFormatter(feature.type);
        if (featureFormatter != undefined) {
            responseScenario = featureFormatter.triggeredFeatureIncomingMessage(message, feature);
        }
        else {
            responseScenario = this.getGameFeatureScenario(feature, message);
        }
        return responseScenario;
    };
    /**
     * get feature format from formatter list
     * @param type
     */
    SpinResponseFormatter.prototype.getFeatureFormatter = function (type) {
        console.warn('please override to defined feature list for your formatter');
        return null;
    };
    /**
     * for game to override,
     * implement game feature
     * @param feature
     * @param message
     */
    SpinResponseFormatter.prototype.getGameFeatureScenario = function (feature, message) {
        console.warn('please override this feature for game if you want to handle it' + feature.type);
        return null;
    };
    /**
     * get feature scenario from feature formatters by function name
     * @param functionName
     * @param message
     * @param spinStopScenario
     */ SpinResponseFormatter.prototype.getFeatureScenarioByFunction = function (functionName, message, spinStopScenario) {
        var _this = this;
        if (message.spin_result.features_triggered) {
            var features = message.spin_result.features_triggered;
            if (features) {
                features.forEach(function (element) {
                    var featureFormatter = _this.getFeatureFormatter(element.type);
                    if (featureFormatter != undefined && featureFormatter[functionName]) {
                        spinStopScenario = featureFormatter[functionName](spinStopScenario, message, element);
                    }
                });
            }
        }
        return spinStopScenario;
    };
    return SpinResponseFormatter;
}(SlotNGHttpFormatter_1.SlotNGHttpFormatter));
exports.SpinResponseFormatter = SpinResponseFormatter;


/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var UrlParameters_1 = __webpack_require__(14);
var AbstractApi_1 = __webpack_require__(150);
/**
 * game init api
 */
var NGSlotApi = /** @class */ (function (_super) {
    __extends(NGSlotApi, _super);
    function NGSlotApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NGSlotApi.prototype.init = function (transport, config) {
        this.config = config;
        this.transport = transport;
    };
    NGSlotApi.prototype.encapsulation = function (data) {
        //
    };
    Object.defineProperty(NGSlotApi.prototype, "apiPath", {
        get: function () {
            if (UrlParameters_1.UrlParameters.isRealMode()) {
                return this.config.path;
            }
            else {
                return this.config.devPath;
            }
        },
        enumerable: true,
        configurable: true
    });
    return NGSlotApi;
}(AbstractApi_1.AbstractApi));
exports.NGSlotApi = NGSlotApi;


/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var tween_js_1 = __webpack_require__(47);
var es5_1 = __webpack_require__(0);
var TsMap_1 = __webpack_require__(2);
var IReelsConfig_1 = __webpack_require__(66);
/**
 * IMPORTANT!
 * Set all parameters for reels: IReelStripConfig[] first in landscape mode.
 * Them you can set parameters portraitPositionX, portraitPositionY and portraitScale.
 * Reel Component will scale reel contrainer in portrait mode and also the reel container will change
 * position in portrait mode.
 *
 * ReelContainer.x in landscape = 0
 * ReelContainer.y in landscape = 0
 * ReelContainer.scale in landscape = 1
 *
 * ReelContainer.x in portrait = config.portraitPositionX
 * ReelContainer.y in portrait = config.portraitPositionY
 * ReelContainer.scale in portrait = config.portraitScale
 */
var ReelsConfig = /** @class */ (function () {
    function ReelsConfig() {
        var _a;
        this.name = 'reels';
        this.reelY = 800;
        this.basicMask = {
            x: 10,
            y: 523,
            width: 700,
            height: 518
        };
        this.anticipationData = {
            anticipationDelay: 1500,
            animations: [],
            //Each Model needs anticipationData
            modelData: [
                {
                    anticipationSymbolCountTrigger: 2,
                    anticipationSymbolCountRequired: 3,
                },
                {
                    anticipationSymbolCountTrigger: 2,
                    anticipationSymbolCountRequired: 3,
                }
            ]
        };
        this.idleAnimationLoop = true;
        this.idleAnimationDelay = 0;
        this.reelStopNormalTime = 500;
        this.avaliableReelSet = [ReelSet.BASE, ReelSet.FEATURE];
        this.orientationLayoutData = null;
        this.orientationMaskData = null;
        this.defaultReelsMask = new TsMap_1.TsMap([
            [ReelSet.BASE, this.basicMask],
            [ReelSet.FEATURE, this.basicMask]
        ]);
        this.defaultLayoutData = {
            position: { x: -89, y: 650 },
            scale: 0.8
        };
        this.defaultReelPosition = [
            { position: { x: 130, y: 0 } },
            { position: { x: 310, y: 0 } },
            { position: { x: 480, y: 0 } },
            { position: { x: 652, y: 0 } },
            { position: { x: 823, y: 0 } }
        ];
        this.symbolDefinition = {
            generalSymbol: {
                width: 175,
                height: 175
            },
            specialSymbol: {}
        };
        this.reelDefinition = {
            width: 215,
            symbol: {
                width: 175,
                height: 175
            },
            rangeSymbols: ['A', 'K', 'Q', 'J', 'T', 'N', 'PIC1', 'PIC2', 'PIC3', 'PIC4', 'WILD', 'SCATTER'],
            dropSymbols: ['WILD', 'SCATTER'],
            symbolsOnReel: 3,
            reelTween: { duration: 100, ease: tween_js_1.Easing.Linear.None },
            stopTween: { duration: 400, ease: tween_js_1.Easing.Back.Out },
            startReelDelay: 0,
            stopReelNormalDelay: 200,
            countBottomExtraSymbol: 1,
            countTopExtraSymbol: 1
        };
        this.reelSet = (_a = {},
            _a[ReelSet.BASE] = [
                {
                    width: 200,
                    startReelDelay: 0,
                    stopReelNormalDelay: 200
                },
                {
                    startReelDelay: 100
                },
                {
                    startReelDelay: 200
                }, {
                    startReelDelay: 300
                },
                {
                    startReelDelay: 400
                }
            ],
            _a[ReelSet.FEATURE] = [
                {
                    width: 200,
                    startReelDelay: 0,
                    stopReelNormalDelay: 200
                },
                {
                    startReelDelay: 100
                },
                {
                    startReelDelay: 200
                },
                {
                    startReelDelay: 300
                },
                {
                    startReelDelay: 400
                }
            ],
            _a);
        this.reels = [];
        this.individualReelsMask = false;
        this.defaultSpinDirection = IReelsConfig_1.SpinDirection.SpinDown;
    }
    ReelsConfig = __decorate([
        es5_1.Singleton
    ], ReelsConfig);
    return ReelsConfig;
}());
exports.ReelsConfig = ReelsConfig;
var ReelSet = /** @class */ (function () {
    function ReelSet() {
    }
    ReelSet.BASE = 0;
    ReelSet.FEATURE = 1;
    return ReelSet;
}());
exports.ReelSet = ReelSet;
var SymbolSet;
(function (SymbolSet) {
    SymbolSet["N"] = "N";
    SymbolSet["A"] = "A";
    SymbolSet["J"] = "J";
    SymbolSet["Q"] = "Q";
    SymbolSet["K"] = "K";
    SymbolSet["T"] = "T";
    SymbolSet["PIC1"] = "PIC1";
    SymbolSet["PIC2"] = "PIC2";
    SymbolSet["PIC3"] = "PIC3";
    SymbolSet["PIC4"] = "PIC4";
    SymbolSet["SCATTER"] = "SCATTER";
    SymbolSet["SCATTER2"] = "SCATTER2";
    SymbolSet["WILD"] = "WILD";
})(SymbolSet = exports.SymbolSet || (exports.SymbolSet = {}));


/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var ButtonsController_1 = __webpack_require__(134);
var GameConfig_1 = __webpack_require__(24);
var ScenarioManager_1 = __webpack_require__(135);
var StateMachine_1 = __webpack_require__(198);
var ScenarioNames_1 = __webpack_require__(136);
var States_1 = __webpack_require__(74);
var MiniSignal = __webpack_require__(3);
var es5_1 = __webpack_require__(0);
/**
 * GameController is the main class that connects Server, StateMachine and Components.
 * This class is responsible for communications between them.
 */
var GameController = /** @class */ (function () {
    function GameController() {
        this.addEventListeners();
        this.gameReadySignal = new MiniSignal();
    }
    Object.defineProperty(GameController.prototype, "currentStateName", {
        get: function () {
            return this._currentStateName;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Processing actions from component
     */
    GameController.prototype.addEventListeners = function () {
        //
    };
    /**
     * Trigered
     * @param action meta
     */
    GameController.prototype.handleButtonAction = function (action, data) {
        if (typeof this[action] === 'function') {
            this[action](data);
        }
    };
    GameController.prototype.createStateMachine = function (componentManager) {
        if (this.stateMachine == undefined) {
            this.componentManager = componentManager;
            this.stateMachine = es5_1.Container.get(StateMachine_1.StateMachine);
            this.stateMachine.initialize(componentManager);
            this.stateMachine.isPause = true;
            this.stateMachine.stateIsChangedSignal.add(this.onStateIsChanged, this);
            this.stateMachine.finishStackSignal.add(this.onFinishStack, this);
        }
        else {
            throw 'stateMachine is already created';
        }
    };
    GameController.prototype.setServer = function (server) {
        if (this.server == undefined) {
            this.server = server;
            this.server.serverResponseSignal.add(this.onServerResponse, this);
        }
        else {
            throw 'server is already set';
        }
    };
    GameController.prototype.onStateIsChanged = function (stateName, stateData) {
        this._currentStateName = stateName;
        this.buttonsController.applyButtonsTemplate(stateName);
        this.server.processState(stateName, stateData);
        if (stateName === this.stateNames.watingEnterGame) {
            this.stateMachine.isPause = true;
            this.gameReadySignal.dispatch();
        }
    };
    GameController.prototype.onFinishStack = function () {
        //do nothing
    };
    GameController.prototype.onServerResponse = function (scenario) {
        this.stateMachine.pushStates(scenario.getStates());
    };
    GameController.prototype.action_onGameStart = function () {
        this.stateMachine.isPause = false;
    };
    GameController.prototype.send = function (messageType, data) {
        return this.server.send(messageType, data);
    };
    var _a, _b, _c, _d, _e;
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof ButtonsController_1.ButtonsController !== "undefined" && ButtonsController_1.ButtonsController) === "function" && _a || Object)
    ], GameController.prototype, "buttonsController", void 0);
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_b = typeof GameConfig_1.GameConfig !== "undefined" && GameConfig_1.GameConfig) === "function" && _b || Object)
    ], GameController.prototype, "gameConfig", void 0);
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_c = typeof ScenarioManager_1.ScenarioManager !== "undefined" && ScenarioManager_1.ScenarioManager) === "function" && _c || Object)
    ], GameController.prototype, "scenarioManager", void 0);
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_d = typeof ScenarioNames_1.ScenarioNames !== "undefined" && ScenarioNames_1.ScenarioNames) === "function" && _d || Object)
    ], GameController.prototype, "scenarioNames", void 0);
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_e = typeof States_1.States !== "undefined" && States_1.States) === "function" && _e || Object)
    ], GameController.prototype, "stateNames", void 0);
    GameController = __decorate([
        es5_1.Singleton,
        __metadata("design:paramtypes", [])
    ], GameController);
    return GameController;
}());
exports.GameController = GameController;


/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var MiniSignal = __webpack_require__(3);
var es5_1 = __webpack_require__(0);
var TsMap_1 = __webpack_require__(2);
var NAudio_1 = __webpack_require__(619);
var Browser_1 = __webpack_require__(72);
var Viewport_1 = __webpack_require__(6);
var Translator_1 = __webpack_require__(25);
var PartnerHelper_1 = __webpack_require__(202);
var ResourceConfig_1 = __webpack_require__(62);
var GlobalDispatcher_1 = __webpack_require__(7);
var ErrorHandleService_1 = __webpack_require__(197);
var ErrorDialogConfig_1 = __webpack_require__(203);
var AbstractFormatter_1 = __webpack_require__(141);
var AssetLoader = /** @class */ (function () {
    function AssetLoader() {
        /**
         * Dispatched on each resource group completed.
         *
         * @type {MiniSignal}
         * @memberof AssetLoader
         */
        this.onGroupCompleted = new MiniSignal();
        this.onGroupProgress = new MiniSignal();
        this.loader = PIXI.loader;
        /**
         * Determine the image's size according to the device.
         *
         * @private
         * @type {string}
         * @memberof AssetLoader
         */
        this.postfix = '';
        this.isLoading = false;
        /**
         * An url that contains {locale} will be replaced to user's language.
         *
         * @private
         * @memberof AssetLoader
         */
        this.regex = /({locale})/g;
        this.partnerRegex = /({partner})/g;
        /**
         * key: groupIndex
         *
         * @private
         * @type {TsMap<number, ResourceGroupStatus>}
         * @memberof AssetLoader
         */
        this.resourceGroup = new TsMap_1.TsMap();
        /**
         * key: groupIndex
         *
         * @private
         * @type {TsMap<number, Array<Asset>>}
         * @memberof AssetLoader
         */
        this.resourceURLMap = new TsMap_1.TsMap();
        /**
         * {key: resource_file_name, value: groupIndex}
         *
         * @private
         * @type {TsMap<string, number >}
         * @memberof AssetLoader
         */
        this.resourceMap = new TsMap_1.TsMap();
        this.currentGroup = -1;
        this.lazyGroupFileList = new Array();
        this.loadingState = AssetLoaderState.LOADING;
    }
    AssetLoader_1 = AssetLoader;
    Object.defineProperty(AssetLoader.prototype, "errorHandleService", {
        get: function () {
            return this._errorHandleService;
        },
        enumerable: true,
        configurable: true
    });
    AssetLoader.prototype.init = function () {
        this.postfix = Browser_1.Browser.isMobile() ? '@1x.' : '@2x';
        // original resource loader doesn't reconize the .mp3 extension, so add the following code:
        PIXI.loaders.Resource.setExtensionLoadType('mp3', PIXI.loaders.Resource.LOAD_TYPE.XHR);
        PIXI.loaders.Resource.setExtensionXhrType('mp3', PIXI.loaders.Resource.XHR_RESPONSE_TYPE.BLOB);
        PIXI.loaders.Loader.addPixiMiddleware(this.beforeFetchResource.bind(this));
        PIXI.loaders.Loader.addPixiMiddleware(this.beforeFetchAudio.bind(this));
        PIXI.loader.pre(this.beforeFetchAudio.bind(this));
        PIXI.loader.pre(this.beforeFetchResource.bind(this));
        this.setLoadSequence([
            ResourceConfig_1.ResourceConfig.PRELOAD,
            ResourceConfig_1.ResourceConfig.MAIN_GAME
        ]);
        this.addEventListeners();
    };
    AssetLoader.prototype.addEventListeners = function () {
        GlobalDispatcher_1.GlobalDispatcher.addListener(this, AssetLoader_1.MONITOR_GROUP, this.updateLoadPriority);
    };
    /**
     * Trigger loader to load assets.
     *
     * @param {Function} [onComplete]
     * @param {number} [groupIdx] - used for on-demand load
     * @returns {void}
     * @memberof AssetLoader
     */
    AssetLoader.prototype.start = function (onComplete, groupIdx) {
        var _this = this;
        if (this.isLoading) {
            // onDemand load, add it to head.
            if (groupIdx !== undefined && !this.resourceGroup.get(groupIdx).isReady
                && this.order.indexOf(groupIdx) === -1 && groupIdx !== this.currentGroup) {
                this.order.unshift(groupIdx);
            }
            return;
        }
        else if (groupIdx !== undefined) {
            var index = this.order.indexOf(groupIdx);
            if (this.resourceGroup.get(groupIdx).isReady) {
                console.warn("The resource group[" + groupIdx + "] is already loaded.");
                return;
            }
            else if (index !== -1) {
                this.order.splice(index, 1);
            }
        }
        this.reset();
        this.currentGroup = (groupIdx === undefined) ? this.order.shift() : groupIdx;
        console.log('[AssetLoader] START LOAD', this.currentGroup);
        this.resourceURLMap.get(this.currentGroup).forEach(function (asset) {
            _this.loader.add(asset.assetKey, _this.toTargetPath(asset.assetURL));
        });
        this._onComplete = onComplete;
        this.loader.onError.add(this.onError.bind(this));
        this.loader.onComplete.add(this.onComplete.bind(this));
        this.loader.onProgress.add(this.onProgress.bind(this));
        this.loader.load();
        this.isLoading = true;
    };
    AssetLoader.prototype.add = function (target) {
        var _this = this;
        target.forEach(function (asset) {
            var filenameExt = _this.filename(asset.assetURL);
            var groupIdx = (asset.group === undefined) ? ResourceConfig_1.ResourceConfig.MAIN_GAME : asset.group;
            if (Browser_1.Browser.isMobile()) {
                if (_this.viewport.isPortraitMode && asset.group === ResourceConfig_1.ResourceConfig.PORTRAIT_VIEW ||
                    !_this.viewport.isPortraitMode && asset.group === ResourceConfig_1.ResourceConfig.LANDSCAPE_VIEW) {
                    groupIdx = ResourceConfig_1.ResourceConfig.MAIN_GAME;
                }
            }
            else if (asset.group === ResourceConfig_1.ResourceConfig.PORTRAIT_VIEW || asset.group === ResourceConfig_1.ResourceConfig.LANDSCAPE_VIEW) {
                groupIdx = ResourceConfig_1.ResourceConfig.MAIN_GAME;
            }
            if (!_this.resourceURLMap.has(groupIdx)) {
                _this.resourceURLMap.set(groupIdx, []);
            }
            if (!_this.resourceGroup.has(groupIdx)) {
                _this.resourceGroup.set(groupIdx, {
                    isReady: false,
                    onDemandLoad: asset.onDemandLoad || false,
                    files: [],
                    totalNum: 0,
                    loadedNum: 0
                });
            }
            if (!_this.resourceGroup.get(groupIdx).onDemandLoad && _this.order.indexOf(groupIdx) === -1) {
                _this.order.push(groupIdx);
                _this.order.sort(function (a, b) {
                    return a - b;
                });
            }
            _this.resourceURLMap.get(groupIdx).push(asset);
            _this.resourceGroup.get(groupIdx).files.push(filenameExt);
            _this.resourceGroup.get(groupIdx).totalNum += 1;
            _this.resourceMap.set(_this.toTargetPath(asset.assetURL).split('.')[0], groupIdx);
            // create a load file list in group, when error occurred, try to find the file name from list
            if (groupIdx !== ResourceConfig_1.ResourceConfig.PRELOAD && groupIdx !== ResourceConfig_1.ResourceConfig.MAIN_GAME) {
                _this.lazyGroupFileList.push(filenameExt);
                /* this is a temporarily solution, since based on current config setting
                 * we don’t know what kind of resource it is, so there will be few situations
                 *  1. spine file will contains three files
                 *      a. file_name.json
                 *      b. file_name.atlas
                 *      c. file_name.png
                 *  2. texture sprite will contains two files
                 *      a. file_name.json
                 *      b. file_name.png
                 *  3. particle file
                 *      a. file_name.json
                 *  4. language file
                 *      a. file_name.json
                 *
                 * so since we don’t know the correct resource type,
                 * here is assumed all the json resource referring to a spine file
                 */
                if (filenameExt.split('.')[1] === 'json') {
                    var name = filenameExt.split('.')[0];
                    _this.lazyGroupFileList.push(name.concat('.atlas'));
                    _this.lazyGroupFileList.push(name.concat('.png'));
                }
            }
        });
        // console.log( '[AssetLoader] resourceGroup', this.resourceGroup );
        // console.log( '[AssetLoader] resourceURLMap', this.resourceURLMap );
        // console.log( '[AssetLoader] resourceMap', this.resourceMap );
        // console.log( '[AssetLoader] order', this.order );
    };
    AssetLoader.prototype.reset = function (clean) {
        if (clean === void 0) { clean = false; }
        if (this.isLoading) {
            return;
        }
        this.loader.onComplete.detachAll();
        this.loader.onProgress.detachAll();
        this.loader.onError.detachAll();
        if (clean) {
            this.loader.reset();
        }
    };
    AssetLoader.prototype.detachAll = function () {
        if (this.isLoading) {
            return;
        }
        this.loader.onComplete.detachAll();
        this.loader.onProgress.detachAll();
        this.loader.onError.detachAll();
    };
    AssetLoader.prototype.updateLoadPriority = function (message) {
        var _this = this;
        var group = message.data.group;
        var pendingGroups = new Array();
        if (!Array.isArray(group)) {
            return;
        }
        group.forEach(function (name) {
            if (_this.isResourceReady(name) || _this.currentGroup === name) {
                return;
            }
            pendingGroups.push(name);
            var index = _this.order.indexOf(name);
            if (index !== -1) {
                _this.order.splice(index, 1);
            }
        });
        this.order = pendingGroups.concat(this.order);
    };
    AssetLoader.prototype.onProgress = function (_data, resource) {
        var _this = this;
        var groupIdx = this.resourceMap.get(resource.url.split('.')[0]);
        if (groupIdx >= 0) {
            var group = this.resourceGroup.get(groupIdx);
            group.loadedNum += 1;
            this.onGroupProgress.dispatch(+groupIdx, group.loadedNum / group.totalNum);
        }
        this.resourceGroup.forEach(function (group, groupIdx) {
            if (group.loadedNum === group.totalNum && !group.isReady) {
                group.isReady = true;
                _this.onGroupCompleted.dispatch(groupIdx);
            }
        });
    };
    AssetLoader.prototype.onError = function (err, loader, resource) {
        console.error('[AssetLoader] onError:', err);
        var filename = resource.url.replace(/^.*(\\|\/|\:)/, '');
        if (this.isResourceInLazyGroup(filename)) {
            this.loadingState = AssetLoaderState.ERROR;
        }
        else {
            this.loader.reset();
            this.errorHandleService.onReceiveError({ code: '-2' });
        }
    };
    // if Preload and Main game array without this file, it means in Lazy group.
    AssetLoader.prototype.isResourceInLazyGroup = function (filename) {
        return (this.lazyGroupFileList.indexOf(filename) !== -1);
    };
    /**
     * Fires on each time the loader completed.
     *
     * @protected
     * @memberof AssetLoader
     */
    AssetLoader.prototype.onComplete = function () {
        this.isLoading = false;
        console.log('[AssetLoader] FINISISH LOAD', this.currentGroup);
        if (this._onComplete) {
            this._onComplete(this.currentGroup);
        }
        if (this.currentGroup === ResourceConfig_1.ResourceConfig.PRELOAD) {
            this.reset(true);
        }
        if (this.order.length > 0) {
            this.start();
        }
        else {
            this.loadingState = (this.loadingState !== AssetLoaderState.ERROR) ? AssetLoaderState.DONE : this.loadingState;
        }
    };
    /**
     * @example 'assets/{locale}/sprite.png' will transfer to 'assets/cn/sprite.png' when locale === cn
     */
    AssetLoader.prototype.toTargetPath = function (url) {
        url = this.toTargetLanguagePath(url);
        url = this.toTargetPartnerPath(url);
        url = this.toTargetMD5HashPath(url);
        return url;
    };
    AssetLoader.prototype.toTargetLanguagePath = function (url) {
        if (this.regex.test(url)) {
            url = url.replace(this.regex, this.translator.language);
        }
        return url;
    };
    AssetLoader.prototype.toTargetPartnerPath = function (url) {
        if (this.partnerRegex.test(url)) {
            url = url.replace(this.partnerRegex, this.partnerHelper.partner);
        }
        return url;
    };
    AssetLoader.prototype.toTargetMD5HashPath = function (url) {
        try {
            url = "1ae629c8909f7093a8f96c4e6e226e4c" + '_' + url;
        }
        catch (_a) {
            console.warn('please add MD5HASH setting into your project');
        }
        return url;
    };
    Object.defineProperty(AssetLoader.prototype, "resources", {
        get: function () {
            return this.loader.resources;
        },
        enumerable: true,
        configurable: true
    });
    AssetLoader.prototype.setLoadSequence = function (array) {
        this.order = array;
    };
    /**
     * Check if the given resourceGroup id is fully loaded.
     *
     * @param {(number | Array<number>)} groupIndex
     * @returns {boolean}
     * @memberof AssetLoader
     */
    AssetLoader.prototype.isResourceReady = function (groupIndex) {
        var _this = this;
        if (!Array.isArray(groupIndex)) {
            if (!this.resourceGroup.has(groupIndex)) {
                return true;
            }
            else {
                return this.resourceGroup.get(groupIndex).isReady;
            }
        }
        else {
            return groupIndex.reduce(function (accumulator, currentValue) {
                return accumulator && _this.resourceGroup.get(currentValue).isReady;
            }, true);
        }
    };
    AssetLoader.prototype.isLazyResourceReady = function () {
        return this.loadingState;
    };
    AssetLoader.prototype.hasGroup = function (groupIndex) {
        return (this.resourceGroup.get(groupIndex) !== undefined);
    };
    /**
     *  Get completion rate of the group
     *
     * @param {number} groupIndex
     * @returns {number}
     * @memberof AssetLoader
     */
    AssetLoader.prototype.getResourceRatio = function (groupIndex) {
        var ratio = this.resourceGroup.get(groupIndex).loadedNum / this.resourceGroup.get(groupIndex).totalNum;
        return ratio;
    };
    AssetLoader.prototype.beforeFetchResource = function (resource, next) {
        var filenameExt = this.filename(resource.url);
        var filename = resource.url.split('.')[0];
        var groupIndex = this.resourceMap.get(filename);
        if (groupIndex >= 0 && this.resourceGroup.get(groupIndex).files.indexOf(filenameExt) === -1) {
            this.resourceGroup.get(groupIndex).totalNum += 1;
        }
        next();
    };
    AssetLoader.prototype.beforeFetchAudio = function (resource, next) {
        var _this = this;
        var audioExtensions = [AudioExtension.WAV, AudioExtension.OGG, AudioExtension.MP3, AudioExtension.MGEG];
        if (resource && audioExtensions.indexOf(resource.extension) !== -1) {
            // prevent fetch sound resource twice, let Howler.js handle sound loading.
            resource._setFlag(PIXI.loaders.Resource.STATUS_FLAGS.COMPLETE, true);
            resource._setFlag(PIXI.loaders.Resource.STATUS_FLAGS.LOADING, true);
            var options = JSON.parse(JSON.stringify(resource.metadata));
            options.src = [resource.url];
            var audioConfig = __assign({}, options);
            var object = new NAudio_1.NAudio(audioConfig);
            object.on('load', function () {
                resource._setFlag(PIXI.loaders.Resource.STATUS_FLAGS.LOADING, false);
                next();
            });
            object.on('loaderror', function (_id, message) {
                _this.errorHandleService.onReceiveError({ code: '-2' });
                resource.abort(message);
            });
            object.load();
            resource.data = object;
        }
        else {
            next();
        }
    };
    /**
     * Get file name from given URL
     *
     * @private
     * @param {string} url
     * @returns {string}
     * @memberof AssetLoader
     */
    AssetLoader.prototype.filename = function (url, extension) {
        if (extension === void 0) { extension = true; }
        return extension ? url.match(/[^\\/]+$/)[0] : url.match(/[^\\/]+$/)[0].split('.')[0];
    };
    var AssetLoader_1, _a, _b, _c, _d;
    AssetLoader.MONITOR_GROUP = 'MONITOR_GROUP';
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof Translator_1.Translator !== "undefined" && Translator_1.Translator) === "function" && _a || Object)
    ], AssetLoader.prototype, "translator", void 0);
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_b = typeof PartnerHelper_1.PartnerHelper !== "undefined" && PartnerHelper_1.PartnerHelper) === "function" && _b || Object)
    ], AssetLoader.prototype, "partnerHelper", void 0);
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_c = typeof Viewport_1.Viewport !== "undefined" && Viewport_1.Viewport) === "function" && _c || Object)
    ], AssetLoader.prototype, "viewport", void 0);
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_d = typeof ErrorHandleService_1.ErrorHandleService !== "undefined" && ErrorHandleService_1.ErrorHandleService) === "function" && _d || Object)
    ], AssetLoader.prototype, "_errorHandleService", void 0);
    AssetLoader = AssetLoader_1 = __decorate([
        es5_1.Singleton
    ], AssetLoader);
    return AssetLoader;
}());
exports.AssetLoader = AssetLoader;
var AudioExtension;
(function (AudioExtension) {
    AudioExtension["WAV"] = "wav";
    AudioExtension["OGG"] = "ogg";
    AudioExtension["MP3"] = "mp3";
    AudioExtension["MGEG"] = "mpeg";
})(AudioExtension = exports.AudioExtension || (exports.AudioExtension = {}));
var AssetLoadErrorFormatter = /** @class */ (function (_super) {
    __extends(AssetLoadErrorFormatter, _super);
    function AssetLoadErrorFormatter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AssetLoadErrorFormatter.prototype.processIncomingMessage = function (errorResponse) {
        return {
            type: ErrorDialogConfig_1.ErrorDialogType.FULL_SCREEN,
            code: errorResponse.code,
            msg: errorResponse.msg,
            stack: ''
        };
    };
    return AssetLoadErrorFormatter;
}(AbstractFormatter_1.AbstractFormatter));
exports.AssetLoadErrorFormatter = AssetLoadErrorFormatter;
var AssetLoaderState;
(function (AssetLoaderState) {
    AssetLoaderState["DONE"] = "DONE";
    AssetLoaderState["LOADING"] = "LOADING";
    AssetLoaderState["ERROR"] = "ERROR";
})(AssetLoaderState = exports.AssetLoaderState || (exports.AssetLoaderState = {}));


/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var SoundConfig = /** @class */ (function () {
    function SoundConfig() {
    }
    SoundConfig.buttonClick = 'buttonClick';
    return SoundConfig;
}());
exports.SoundConfig = SoundConfig;


/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * A class extends by all customize ui elements
 */
var CoreElement = /** @class */ (function (_super) {
    __extends(CoreElement, _super);
    function CoreElement(config) {
        var _this = _super.call(this) || this;
        _this.isOrientationSupported = false;
        _this.name = config.name;
        _this.config = config;
        _this.isOrientationSupported = config.isOrientationSupported;
        _this.initElement(config);
        _this.updateAttributes(config);
        return _this;
    }
    /**
     * override for to init element
     * @param config
     */
    CoreElement.prototype.initElement = function (config) {
        //
    };
    /**
     * update attributes based on new element config
     * @param config
     */
    CoreElement.prototype.updateAttributes = function (config) {
        if (config == undefined) {
            return;
        }
        //set alpha
        this.setAlpha(config.alpha);
        // set visible
        this.setVisible(config.visible);
        // set position
        this.setPosition(config.position);
        // set scale
        this.setScale(config.scale);
        // set rotation
        this.setRotation(config.rotation);
    };
    /**
     * set alpha based on value in config.
     */
    CoreElement.prototype.setAlpha = function (alpha) {
        if (alpha != undefined) {
            this.alpha = alpha;
        }
    };
    /**
     * set is visible based on value in config.
     */
    CoreElement.prototype.setVisible = function (visible) {
        if (visible != undefined) {
            this.visible = visible;
        }
    };
    /**
     * set position based on value in config.
     */
    CoreElement.prototype.setPosition = function (position) {
        if (position != undefined) {
            this.position.set(position.x, position.y);
        }
    };
    /**
     * set scale based on value in config.
     */
    CoreElement.prototype.setScale = function (scale) {
        if (scale != undefined) {
            this.scale.set(scale.x, scale.y);
        }
    };
    CoreElement.prototype.setRotation = function (rotate) {
        if (rotate) {
            this.rotation = rotate;
        }
    };
    /**
     * override by ui elements, if the ui element need create by CoreUIElementFactory
     */
    CoreElement.elementType = 'CoreElement';
    return CoreElement;
}(PIXI.Container));
exports.CoreElement = CoreElement;


/***/ }),
/* 57 */,
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var CompController_1 = __webpack_require__(43);
var UILocalButtonsController_1 = __webpack_require__(110);
var UIPanelController = /** @class */ (function (_super) {
    __extends(UIPanelController, _super);
    function UIPanelController() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    UIPanelController.prototype.setButtonActionEventListeners = function (buttonConfig) {
        this.localButtonsController.setAction(buttonConfig.action, this);
    };
    var _a;
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof UILocalButtonsController_1.UILocalButtonsController !== "undefined" && UILocalButtonsController_1.UILocalButtonsController) === "function" && _a || Object)
    ], UIPanelController.prototype, "localButtonsController", void 0);
    return UIPanelController;
}(CompController_1.CompController));
exports.UIPanelController = UIPanelController;


/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var MLUIConfig = /** @class */ (function () {
    function MLUIConfig() {
        this.productLine = 'NGMoonlightUI';
    }
    return MLUIConfig;
}());
exports.MLUIConfig = MLUIConfig;


/***/ }),
/* 60 */,
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Viewport_1 = __webpack_require__(6);
var TsMap_1 = __webpack_require__(2);
var MainConfig = /** @class */ (function () {
    function MainConfig() {
        this.version = "12.1.5";
        this.releaseDate = "2020-04-29";
        this.localisation = {
            supportMultipleLoading: false,
            preloadLanguages: ['en'],
            assets: new TsMap_1.TsMap([
                ['en', 'assets/localisation/en.json'],
                ['zh-hant', 'assets/localisation/zh-hant.json'],
                ['zh-hans', 'assets/localisation/zh-hans.json'],
                ['th', 'assets/localisation/th.json'],
                ['in', 'assets/localisation/in.json'],
                ['vi', 'assets/localisation/vi.json']
            ])
        };
        this.partnerConfig = undefined;
        this.showFPS = false;
        this.orientation = Viewport_1.Orientation.BOTH;
        this.resolution = {
            width: 1280,
            height: 720
        };
        this.pauseWhenLoseFocus = true;
    }
    return MainConfig;
}());
exports.MainConfig = MainConfig;


/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ResourceConfig = /** @class */ (function () {
    function ResourceConfig() {
    }
    ResourceConfig.PRELOAD = 1;
    ResourceConfig.MAIN_GAME = 2;
    ResourceConfig.LANDSCAPE_VIEW = 3;
    ResourceConfig.PORTRAIT_VIEW = 4;
    ResourceConfig.LAST_RESERVED_GROUP_ID = ResourceConfig.PORTRAIT_VIEW;
    return ResourceConfig;
}());
exports.ResourceConfig = ResourceConfig;


/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var MiniSignal = __webpack_require__(3);
var TsMap_1 = __webpack_require__(2);
var Animation_1 = __webpack_require__(26);
var CoreElement_1 = __webpack_require__(56);
var CommonAnimation_1 = __webpack_require__(206);
/**
 * General spine control.
 * Reference: http://zh.esotericsoftware.com/spine-api-reference#AnimationState
 *
 * @export
 * @class SpineAnimation
 * @extends {AnimationBase}
 */
var SpineAnimation = /** @class */ (function (_super) {
    __extends(SpineAnimation, _super);
    function SpineAnimation(config) {
        var _this = _super.call(this, config) || this;
        /**
         * The Map that records the track should be cleared when the animation completed.
         * key: trackEntry.animation.name
         *
         * @private
         * @type {TsMap<string, boolean>}
         * @memberof SpineAnimation
         */
        _this.trackMap = new TsMap_1.TsMap();
        /**
         * Level1 key: ${animationName}_${eventType}
         *
         * Level2 key: spriteAttribute.key
         *
         * @private
         * @type {TsMap<string, TsMap<string, PIXI.extras.AnimatedSprite>>}
         * @memberof SpineAnimation
         */
        _this.spriteMap = new TsMap_1.TsMap();
        _this.config = config;
        _this.startSignal = new MiniSignal();
        _this.completeSignal = new MiniSignal();
        _this.mainObject = Animation_1.Animation.createSpineAnimation(config.animationName);
        var scale = _this.config.scale || { x: 1, y: 1 };
        var position = _this.config.position || { x: 0, y: 0 };
        _this.scale.set(scale.x, scale.y);
        _this.position.set(position.x, position.y);
        _this.addChild(_this.mainObject);
        _this.setContainerNames();
        _this.resetCallbacks();
        _this.setupAnimatedSprite();
        _this.addBasicListener();
        return _this;
    }
    Object.defineProperty(SpineAnimation.prototype, "displayObject", {
        /**
         * The spine object
         *
         * @readonly
         * @type {spine.Spine}
         * @memberof SpineAnimation
         */
        get: function () {
            return this.mainObject;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SpineAnimation.prototype, "timeScale", {
        /**
         * Controls the spine's animation speed.
         *
         * @type {number}
         * @memberof SpineAnimation
         */
        get: function () {
            return this.mainObject.state.timeScale;
        },
        set: function (value) {
            this.mainObject.state.timeScale = value;
        },
        enumerable: true,
        configurable: true
    });
    SpineAnimation.prototype.resetCallbacks = function () {
        this.registeredCallbacks = {
            complete: [],
            start: []
        };
    };
    SpineAnimation.prototype.setupAnimatedSprite = function () {
        var _this = this;
        if (!this.config.spriteMap) {
            return;
        }
        this.config.spriteMap.forEach(function (spriteConfig, animationName) {
            var spriteKey = null;
            var animation = null;
            var _loop_1 = function (eventType) {
                if (spriteConfig[eventType]) {
                    var spriteAttributes = spriteConfig[eventType];
                    spriteAttributes.forEach(function (spriteAttribute) {
                        animation = (spriteKey !== spriteAttribute.key) ? Animation_1.Animation.getAnimationFromPool(spriteAttribute.key) : animation;
                        if (!animation) {
                            return;
                        }
                        if (spriteAttribute.tweenConfig) {
                            spriteAttribute.tweenConfig.target = animation;
                        }
                        var subSpriteMap = _this.spriteMap.get(animationName + "_" + eventType) || new TsMap_1.TsMap();
                        subSpriteMap.set(spriteAttribute.key, animation);
                        _this.spriteMap.set(animationName + "_" + eventType, subSpriteMap);
                        if (spriteKey !== spriteAttribute.key) {
                            animation.x = spriteAttribute.x || 0;
                            animation.y = spriteAttribute.y || 0;
                            animation.scale.x = spriteAttribute.scaleX || 1;
                            animation.scale.y = spriteAttribute.scaleY || 1;
                            animation.animationSpeed = spriteAttribute.animationSpeed || animation.totalFrames / 60;
                            animation.visible = false;
                            animation.loop = spriteAttribute.loop || false;
                            _this.addChild(animation);
                        }
                        spriteKey = spriteAttribute.key;
                    });
                }
            };
            for (var eventType in spriteConfig) {
                _loop_1(eventType);
            }
        });
    };
    SpineAnimation.prototype.addBasicListener = function () {
        this.mainObject.state.addListener({
            start: this.onStart.bind(this),
            complete: this.onComplete.bind(this)
        });
    };
    SpineAnimation.prototype.setContainerNames = function () {
        var _this = this;
        this.mainObject.skeleton.slots.forEach(function (value, i) {
            _this.mainObject.slotContainers[i].name = value.data.name;
        });
    };
    /**
     * triggers on each animation started.
     *
     * @protected
     * @param {spine.core.TrackEntry} trackEntry
     * @memberof SpineAnimation
     */
    SpineAnimation.prototype.onStart = function (trackEntry) {
        this.startSignal.dispatch(this, trackEntry);
        this.updateSprite(trackEntry.animation.name, PIXI.spine.core.EventType.start);
        this.callbackRegisteredEvents(trackEntry);
    };
    /**
     * triggers on each animation completed.
     *
     * @protected
     * @param {spine.core.TrackEntry} trackEntry
     * @memberof SpineAnimation
     */
    SpineAnimation.prototype.onComplete = function (trackEntry) {
        this.completeSignal.dispatch(this, trackEntry);
        this.updateSprite(trackEntry.animation.name, PIXI.spine.core.EventType.complete);
        if (this.trackMap[trackEntry.animation.name]) {
            this.mainObject.state.clearTrack(trackEntry.trackIndex);
        }
        this.callbackRegisteredEvents(trackEntry);
    };
    /**
     * Callback to registered events for each animation
     * @param trackEntry
     */
    SpineAnimation.prototype.callbackRegisteredEvents = function (trackEntry) {
        this.registeredCallbacks.complete.forEach(function (callbackItem) {
            // triggers specific animation callback
            if (callbackItem.animationName === trackEntry.animation.name) {
                callbackItem.callback();
            }
        });
    };
    /**
     * update sprite status when event triggered.
     *
     * @protected
     * @param {string} animationName
     * @param {PIXI.spine.core.EventType} eventType
     * @returns {void}
     * @memberof SpineAnimation
     */
    SpineAnimation.prototype.updateSprite = function (animationName, eventType) {
        var _this = this;
        if (!this.hasSpriteOnAnimation(animationName)) {
            return;
        }
        var type = PIXI.spine.core.EventType[eventType];
        var sprites = this.spriteMap.get(animationName + "_" + type);
        if (!sprites) {
            return;
        }
        var spriteAttributes = this.config.spriteMap.get(animationName)[type];
        spriteAttributes.forEach(function (spriteAttribute) {
            var spriteAnimMap = _this.spriteMap.get(animationName + "_" + type);
            var spriteAnimation = spriteAnimMap.get(spriteAttribute.key);
            spriteAnimation.visible = true;
            spriteAnimation.play();
            if (spriteAttribute.tweenConfig) {
                //@ts-ignore
                CommonAnimation_1.CommonAnimation.startTween(spriteAttribute.tweenConfig).start();
            }
        });
    };
    SpineAnimation.prototype.hasSpriteOnAnimation = function (animationName) {
        if (this.config.spriteMap && this.config.spriteMap.has(animationName)) {
            return true;
        }
        return false;
    };
    /**
     * Removes all animations from all tracks, leaving skeletons in their current pose.
     *
     * @memberof SpineAnimation
     */
    SpineAnimation.prototype.stop = function () {
        this.mainObject.state.clearTracks();
    };
    SpineAnimation.prototype.setMix = function (name, mixinName, mixinTime) {
        this.mainObject.stateData.setMix(name, mixinName, mixinTime);
    };
    SpineAnimation.prototype.reset = function (shouldClearTrack) {
        if (shouldClearTrack === void 0) { shouldClearTrack = false; }
        if (shouldClearTrack) {
            this.mainObject.state.clearTracks();
        }
        this.mainObject.skeleton.setToSetupPose();
    };
    SpineAnimation.prototype.tracks = function (index) {
        return this.mainObject.state.tracks[index];
    };
    /**
     * Play by state name
     *
     * @param {string} stateName
     * @param {*} [context]
     * @param {boolean} [skipOnDuplicate=true] set true will prevent play same animation twice
     * @memberof SpineAnimation
     */
    SpineAnimation.prototype.playByStateName = function (stateName, context, skipOnDuplicate) {
        if (skipOnDuplicate === void 0) { skipOnDuplicate = true; }
        var animationsMap = this.config.stateAnimationMap.get(stateName);
        this.playByAnimationMap(animationsMap, context, skipOnDuplicate);
    };
    SpineAnimation.prototype.playByAnimationMap = function (animationsMap, context, skipOnDuplicate) {
        var _this = this;
        if (skipOnDuplicate === void 0) { skipOnDuplicate = true; }
        this.resetCallbacks();
        this.hideAllSprite();
        this.trackMap = new TsMap_1.TsMap();
        if (this.mainObject.state.timeScale === 0) {
            console.warn('Tying to play but timeScale is 0');
        }
        var _loop_2 = function (trackIndex) {
            if (animationsMap[trackIndex]) {
                var trackInfo = animationsMap[trackIndex];
                if (typeof trackInfo === 'string') {
                    if (trackInfo === 'hide') {
                        this_1.hide();
                    }
                }
                else if (trackInfo.length === 0) {
                    this_1.setEmptyAnimation(+trackIndex);
                }
                else {
                    this_1.show();
                    trackInfo.forEach(function (trackItem, index) {
                        if (_this.tracks(+trackIndex) && _this.tracks(+trackIndex).animation.name == trackItem.name && skipOnDuplicate) {
                            return;
                        }
                        var generalTrackConfig = (_this.config.tracks) ? _this.config.tracks[index] : {
                            alpha: 1,
                            mix: 0,
                            delay: 0
                        };
                        var entry;
                        var alpha = generalTrackConfig.alpha || 1;
                        var mixDuration = generalTrackConfig.mix || 0;
                        var delay = generalTrackConfig.delay || 0;
                        delay = trackItem.delay || delay;
                        mixDuration = trackItem.mixDuration || mixDuration;
                        if (trackItem.listener) {
                            trackItem.listener.forEach(function (listenerItem) {
                                var callback = function () { return; };
                                if (context && context[listenerItem.functionName]) {
                                    callback = context[listenerItem.functionName].bind(context);
                                }
                                else if (_this[listenerItem.functionName]) {
                                    callback = _this[listenerItem.functionName];
                                }
                                _this.addCallbacks(listenerItem.event, {
                                    animationName: trackItem.name,
                                    callback: callback
                                });
                            });
                        }
                        if (!trackItem.name) {
                            _this.setEmptyAnimation(+trackIndex);
                        }
                        else {
                            if (index === 0) {
                                entry = _this.play(+trackIndex, trackItem.name, trackItem.loop);
                            }
                            else {
                                entry = _this.append(+trackIndex, trackItem.name, trackItem.loop, delay);
                            }
                            entry.alpha = alpha;
                        }
                        if (trackItem.stop) {
                            _this.appendEmptyAnimation(+trackIndex, mixDuration, delay);
                        }
                        else if (trackItem.clearTrack) {
                            _this.trackMap.set(trackItem.name, true);
                        }
                    });
                }
            }
            else {
                this_1.setEmptyAnimation(+trackIndex);
            }
        };
        var this_1 = this;
        for (var trackIndex in animationsMap) {
            _loop_2(trackIndex);
        }
    };
    SpineAnimation.prototype.hideAllSprite = function () {
        this.spriteMap.forEach(function (spriteMap) {
            for (var key in spriteMap) {
                if (spriteMap[key]) {
                    spriteMap[key].visible = false;
                }
            }
        });
    };
    SpineAnimation.prototype.addCallbacks = function (eventType, callbackItem) {
        this.registeredCallbacks[PIXI.spine.core.EventType[eventType]].push(callbackItem);
    };
    SpineAnimation.prototype.hide = function () {
        this.mainObject.renderable = false;
        this.mainObject.visible = false;
    };
    SpineAnimation.prototype.show = function () {
        this.mainObject.renderable = true;
        this.mainObject.visible = true;
    };
    SpineAnimation.prototype.setEmptyAnimation = function (track, mixDuration) {
        if (mixDuration === void 0) { mixDuration = 0; }
        return this.mainObject.state.setEmptyAnimation(track, mixDuration);
    };
    SpineAnimation.prototype.appendEmptyAnimation = function (track, mixDuration, delay) {
        if (mixDuration === void 0) { mixDuration = 0; }
        if (delay === void 0) { delay = 0; }
        return this.mainObject.state.addEmptyAnimation(track, mixDuration, delay);
    };
    SpineAnimation.prototype.play = function (track, name, loop) {
        if (loop === void 0) { loop = false; }
        this.mainObject.renderable = true;
        return this.mainObject.state.setAnimation(track, name, loop);
    };
    /**
     * Append an animation on given track
     *
     * @param {number} track
     * @param {string} name
     * @param {boolean} [loop=false]
     * @param {number} [delay=0]
     * @returns {spine.core.TrackEntry}
     * @memberof SpineAnimation
     */
    SpineAnimation.prototype.append = function (track, name, loop, delay) {
        if (loop === void 0) { loop = false; }
        if (delay === void 0) { delay = 0; }
        return this.mainObject.state.addAnimation(track, name, loop, delay);
    };
    /**
     * Bind event listener on animationState object
     *
     * @param {spine.core.AnimationStateListener2} listener
     * @memberof SpineAnimation
     */
    SpineAnimation.prototype.addAnimationListener = function (listener) {
        this.mainObject.state.addListener(listener);
    };
    /**
     * Clears all events on animationState object
     *
     * @memberof SpineAnimation
     */
    SpineAnimation.prototype.clearAnimationListeners = function () {
        this.mainObject.state.clearListeners();
    };
    SpineAnimation.elementType = 'SpineAnimation';
    return SpineAnimation;
}(CoreElement_1.CoreElement));
exports.SpineAnimation = SpineAnimation;
var SoundAttribute = /** @class */ (function () {
    function SoundAttribute(key, loop) {
        this.loop = false;
        this.key = key;
        this.loop = loop;
    }
    return SoundAttribute;
}());
exports.SoundAttribute = SoundAttribute;
var SpineEventType;
(function (SpineEventType) {
    SpineEventType["start"] = "start";
    SpineEventType["end"] = "end";
    SpineEventType["complete"] = "complete";
})(SpineEventType = exports.SpineEventType || (exports.SpineEventType = {}));


/***/ }),
/* 64 */,
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var NMath = /** @class */ (function () {
    function NMath() {
    }
    NMath.radiansToDegrees = function (radians) {
        return this.RAD_TO_DEG * radians;
    };
    NMath.degreesToRadians = function (degrees) {
        return this.DEG_TO_RAD * degrees;
    };
    /**
     * Generating random number from interval inclusive minimum and inclusive maximum
     * @param min minimum of interval
     * @param max maximum of interval
     * @param round rounded to the nearest integer
     * @return random number from interval between min and max
     */
    NMath.randomInt = function (min, max, round) {
        if (round === void 0) { round = false; }
        var result = Math.floor(Math.random() * (max - min + 1)) + min;
        if (round) {
            result = Math.round(result);
        }
        return result;
    };
    /**
     * @return angle in degrees
     */
    NMath.angleBetweenPointsDeg = function (p1, p2) {
        return NMath.radiansToDegrees(NMath.angleBetweenPointsRad(p1, p2));
    };
    /**
     * @return angle in radians
     */
    NMath.angleBetweenPointsRad = function (p1, p2) {
        return Math.atan2(p2.y - p1.y, p2.x - p1.x);
    };
    NMath.distanceBetweenPoints = function (p1, p2) {
        return Math.sqrt(Math.pow(p2.x - p1.x, 2) + Math.pow(p2.y - p1.y, 2));
    };
    /**
     * @return 1 if value is >= 0, -1 otherwise
     */
    NMath.sign = function (value) {
        if (value < 0) {
            return -1;
        }
        else {
            return 1;
        }
    };
    /**
     * Constraints value to be between min and max (inclusive).
     */
    NMath.clamp = function (value, min, max) {
        if (value < min) {
            return min;
        }
        else if (value > max) {
            return max;
        }
        else {
            return value;
        }
    };
    NMath.RAD_TO_DEG = 180.0 / Math.PI;
    NMath.DEG_TO_RAD = Math.PI / 180.0;
    return NMath;
}());
exports.NMath = NMath;


/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var AnticipationAnimationType;
(function (AnticipationAnimationType) {
    AnticipationAnimationType["SPINE"] = "spine";
    AnticipationAnimationType["SEQUENCE"] = "sequence";
    AnticipationAnimationType["PARTICLE"] = "particle";
})(AnticipationAnimationType = exports.AnticipationAnimationType || (exports.AnticipationAnimationType = {}));
var SpinDirection;
(function (SpinDirection) {
    SpinDirection[SpinDirection["SpinUp"] = 0] = "SpinUp";
    SpinDirection[SpinDirection["SpinDown"] = 1] = "SpinDown";
})(SpinDirection = exports.SpinDirection || (exports.SpinDirection = {}));
var RotateDirection;
(function (RotateDirection) {
    RotateDirection[RotateDirection["Clockwise"] = 1] = "Clockwise";
    RotateDirection[RotateDirection["CounterClockwise"] = -1] = "CounterClockwise";
})(RotateDirection = exports.RotateDirection || (exports.RotateDirection = {}));


/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Use the same structure for tiers and phases within a tier because
 * they are identical.
 */
var BigWinTierType = /** @class */ (function () {
    function BigWinTierType() {
    }
    /**
    * Don't do anything.
    */
    BigWinTierType.None = 'None';
    /**
    * Count up balance only.
    */
    BigWinTierType.Balance = 'Balance';
    /**
    * Count up balance and numbers only.
    */
    BigWinTierType.Numbers = 'Numbers';
    /**
    * Count up balance, numbers and show coin shower.
    */
    BigWinTierType.Coins = 'Coins';
    /**
    * Count up balance and numbers, show coin shower and big win message.
    */
    BigWinTierType.BigWin = 'BigWin';
    /**
    * Count up balance and numbers, show coin shower and extreme big win message.
    */
    BigWinTierType.ExtremeBigWin = 'ExtremeBigWin';
    /**
    * Count up balance and numbers, show coin shower and ultra extreme big win message.
    */
    BigWinTierType.UltraExtremeBigWin = 'UltraExtremeBigWin';
    return BigWinTierType;
}());
exports.BigWinTierType = BigWinTierType;


/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Base class for all web element
 */
var CoreWebElement = /** @class */ (function () {
    function CoreWebElement() {
    }
    CoreWebElement.prototype.createElement = function (config) {
        return config;
    };
    CoreWebElement.elementType = 'CoreWebElement';
    return CoreWebElement;
}());
exports.CoreWebElement = CoreWebElement;


/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var Helper_1 = __webpack_require__(5);
var AssetLoader_1 = __webpack_require__(54);
var CoreWebElement_1 = __webpack_require__(68);
/**
 * Image element for web page
 */
var WebImageElement = /** @class */ (function (_super) {
    __extends(WebImageElement, _super);
    function WebImageElement() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    WebImageElement.prototype.createElement = function (config) {
        return Helper_1.Helper.mergeTwoObjects(_super.prototype.createElement.call(this, config), {
            type: config.type,
            blockStyle: config.blockStyle,
            imageSource: config.imageSource,
            imageData: this.getImageSourceData(config.imageSource, config.imageData),
            imageStyle: config.imageStyle
        });
    };
    WebImageElement.prototype.getImageSourceData = function (imageSource, imageData) {
        var data = null;
        switch (imageSource) {
            case ImageSourceType.SPRITE:
                data = this.getSpriteData(imageData);
                break;
            case ImageSourceType.TEXTURE:
                data = this.getTextureData(imageData);
                break;
            case ImageSourceType.URL:
                data = this.getURLData(imageData);
                break;
        }
        return data;
    };
    WebImageElement.prototype.getSpriteData = function (spriteData) {
        spriteData.imagePath = this.loader.toTargetPath(spriteData.imagePath);
        return spriteData;
    };
    WebImageElement.prototype.getTextureData = function (textureData) {
        textureData.imagePath = this.loader.toTargetPath(textureData.imagePath);
        return textureData;
    };
    WebImageElement.prototype.getURLData = function (urlData) {
        return urlData;
    };
    var _a;
    WebImageElement.elementType = 'WEB_IMAGE_ELEMENT';
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof AssetLoader_1.AssetLoader !== "undefined" && AssetLoader_1.AssetLoader) === "function" && _a || Object)
    ], WebImageElement.prototype, "loader", void 0);
    return WebImageElement;
}(CoreWebElement_1.CoreWebElement));
exports.WebImageElement = WebImageElement;
var ImageSourceType;
(function (ImageSourceType) {
    ImageSourceType["TEXTURE"] = "TEXTURE";
    ImageSourceType["SPRITE"] = "SPRITE";
    ImageSourceType["URL"] = "URL";
})(ImageSourceType = exports.ImageSourceType || (exports.ImageSourceType = {}));


/***/ }),
/* 70 */,
/* 71 */,
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _a, _b;
var MD = __webpack_require__(517);
var Viewport_1 = __webpack_require__(6);
// The browsers that also using Chrome core:
// ucBrowser, QQBrowser
// Some Browser use Chrome as core, but still use Chrome userAgent:
// 360 browser
// When requestFullScreen, some browser force enter landscape but the device is in portrait. This WLL cause display error.
// 360 browser, SOGOU, LIEBAO, 2345 browser
var BrowserName;
(function (BrowserName) {
    BrowserName["CHROME"] = "Chrome";
    BrowserName["IE"] = "IE";
    BrowserName["EDGE"] = "Edge";
    BrowserName["FIREFOX"] = "Firefox";
    BrowserName["UC_BROWSER"] = "UCBrowser";
    BrowserName["U_BROWSER"] = "UBrowser";
    BrowserName["SAFARI"] = "Safari";
    BrowserName["OPERA"] = "Opera";
    BrowserName["QQ_BROWSER"] = "QQBrowser";
    // unverified browsers
    BrowserName["SOGOU"] = "SOGOU";
    BrowserName["BROWSER_360"] = "360";
    BrowserName["BAIDU"] = "BAIDO";
    BrowserName["LIEBAO"] = "LIEBAO";
    BrowserName["BROWSER_2345"] = "2345";
    BrowserName["GREEN_TEA"] = "GREEN_TEA";
    BrowserName["COC"] = "coc_coc_browser";
    BrowserName["YANDEX"] = "YaBrowser";
    BrowserName["UNDEFINED"] = "Undefined";
})(BrowserName = exports.BrowserName || (exports.BrowserName = {}));
/**
 * Includes device and browser information, and some browser related help function
 *
 * @export
 * @class Browser
 *
 */
var Browser = /** @class */ (function () {
    function Browser() {
    }
    Browser.init = function () {
        Browser.mobileDetect = new MD(window.navigator.userAgent);
        var document = window.document;
        if (typeof document.hidden !== 'undefined') { // Opera 12.10 and Firefox 18 and later support
            Browser.HIDDEN = 'hidden';
            Browser.VISIBILITY_CHANGE = 'visibilitychange';
        }
        else if (typeof document.msHidden !== 'undefined') {
            Browser.HIDDEN = 'msHidden';
            Browser.VISIBILITY_CHANGE = 'msvisibilitychange';
        }
        else if (typeof document.webkitHidden !== 'undefined') {
            Browser.HIDDEN = 'webkitHidden';
            Browser.VISIBILITY_CHANGE = 'webkitvisibilitychange';
        }
    };
    /**
     * Method to figure out if we support full screen or no
     * @returns if current web browser support HTML5 full screen
     */
    Browser.isFullscreenSupported = function () {
        var element = document.body;
        return element.requestFullscreen ||
            element.msRequestFullscreen ||
            element.mozRequestFullScreen ||
            element.webkitRequestFullscreen;
    };
    /**
     * Set the browser to full screen mode. (Some browser may not support this feature). Returns true if successfully executed.
     *
     * @static
     * @returns {boolean}
     * @memberof Browser
     */
    Browser.requestFullScreen = function () {
        var element = document.body;
        if (element.requestFullscreen) {
            element.requestFullscreen();
            return true;
        }
        else if (element.msRequestFullscreen) {
            element.msRequestFullscreen();
            return true;
        }
        else if (element.mozRequestFullScreen) {
            element.mozRequestFullScreen();
            return true;
        }
        else if (element.webkitRequestFullscreen) {
            element.webkitRequestFullscreen();
            return true;
        }
        else {
            return false;
        }
    };
    /**
     * Check if is mobile device
     *
     * @static
     * @returns {boolean}
     * @memberof Browser
     */
    Browser.isMobile = function () {
        return Browser.mobileDetect.mobile() !== null;
    };
    Object.defineProperty(Browser, "iOS", {
        /**
         * Check if is iOS device
         *
         * @static
         * @returns {boolean}
         * @memberof Browser
         */
        get: function () {
            return /iP[ao]d|iPhone/i.test(window.navigator.userAgent);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Get current browser name
     *
     * @static
     * @returns {string}
     * @memberof Browser
     */
    Browser.getName = function () {
        var browsers = Object.keys(Browser.rules);
        var _loop_1 = function (i) {
            var browserName = browsers[i];
            var essentialKeys = Browser.rules[browserName];
            var mappedKeyCount = 0;
            essentialKeys.forEach(function (rule) {
                var regex = new RegExp(Browser.regex[browserName], 'i');
                if (regex.test(window.navigator.userAgent) === true) {
                    mappedKeyCount += 1;
                }
            });
            if (mappedKeyCount === essentialKeys.length) {
                return { value: browserName };
            }
        };
        for (var i = 0; i < browsers.length; i++) {
            var state_1 = _loop_1(i);
            if (typeof state_1 === "object")
                return state_1.value;
        }
        return BrowserName.UNDEFINED;
    };
    /**
     * This mehod checks if the UserAgent has define Chrome or not.
     *
     * @static
     * @returns
     * @memberof Browser
     */
    Browser.isSupportChrome = function () {
        var regex = new RegExp(Browser.regex[BrowserName.CHROME], 'i');
        return regex.test(window.navigator.userAgent);
    };
    /**
     * Foces the browser in full screen.
     * NOTE: in some browser, after called this method the mobile will enter landscape mode while the mobile actual in portrait.
     *
     * @static
     * @param {Orientation} orientation
     * @memberof Browser
     */
    Browser.lockFullScreen = function (orientation) {
        var lockOrientation = screen.orientation ||
            screen.lockOrientation ||
            screen.mozLockOrientation ||
            screen.msLockOrientation;
        if (lockOrientation && (orientation === Viewport_1.Orientation.LANDSCAPE || orientation === Viewport_1.Orientation.PORTRAIT)) {
            if (Browser.getName() === BrowserName.FIREFOX && screen.mozLockOrientation) {
                screen.mozLockOrientation(orientation);
            }
            else {
                lockOrientation.lock(orientation).catch(function () {
                    console.warn('The device may not support orientation-lock feature');
                });
            }
        }
    };
    Browser.isFullScreen = function () {
        var fullscreenElement = document.isFullScreen ||
            document.fullscreenElement ||
            document.webkitFullscreenElement ||
            document.mozFullScreenElement ||
            document.msFullscreenElement;
        if (fullscreenElement === undefined) {
            return document.mozFullScreen || document.webkitIsFullscreen;
        }
        else {
            return fullscreenElement !== null || fullscreenElement === true;
        }
    };
    Browser.tryFullScreen = function () {
        if (!Browser.isFullScreen() && !Browser.isInFullScreenBlackList()) {
            Browser.requestFullScreen();
        }
    };
    Browser.isInFullScreenBlackList = function () {
        if (Browser.getName() == BrowserName.BROWSER_360 ||
            Browser.getName() == BrowserName.BROWSER_2345 ||
            Browser.getName() == BrowserName.SOGOU ||
            Browser.getName() == BrowserName.LIEBAO) {
            return true;
        }
        else if (Browser.getName() == BrowserName.CHROME) { // check if the browser is fake Chrome
            if (window.Intl.RelativeTimeFormat === undefined) {
                return true;
            }
        }
        return false;
    };
    Browser.VISIBILITY_CHANGE = 'visibilitychange';
    Browser.HIDDEN = 'hidden';
    Browser.FULL_SCREEN_CHANGE = ['fullscreenchange', 'mozfullscreenchange', 'webkitfullscreenchange', 'msfullscreenchange'];
    Browser.regex = (_a = {},
        _a[BrowserName.FIREFOX] = 'Firefox\/([0-9\.]+)(?:\s|$)|FxiOS',
        _a[BrowserName.EDGE] = 'Edge\/([0-9\._]+)',
        _a[BrowserName.IE] = 'Trident\/([0-9\._]+)',
        _a[BrowserName.CHROME] = 'Chrome\/([0-9\._]+)|CriOS\/([0-9\._]+)',
        _a[BrowserName.SAFARI] = 'Safari\/([0-9\._]+)',
        _a[BrowserName.OPERA] = 'OPR\/([0-9\._]+)',
        _a[BrowserName.U_BROWSER] = 'UBrowser\/([0-9\._]+)',
        _a[BrowserName.UC_BROWSER] = 'UCBrowser\/([0-9\._]+)',
        _a[BrowserName.QQ_BROWSER] = 'QQBrowser\/([0-9\._]+)',
        _a[BrowserName.BROWSER_2345] = 'Mb2345Browser\/([0-9\._]+)',
        _a[BrowserName.LIEBAO] = 'ACHEETAHI\/([0-9\._]+)',
        _a[BrowserName.BAIDU] = 'baidubrowser\/([0-9\._]+)',
        _a[BrowserName.SOGOU] = 'SogouMobileBrowser\/([0-9\._]+)',
        _a[BrowserName.GREEN_TEA] = 'LeBrowser\/([0-9\._]+)',
        _a[BrowserName.COC] = 'coc_coc_browser\/([0-9\._]+)',
        _a[BrowserName.YANDEX] = 'YaBrowser\/([0-9\._]+)',
        _a);
    Browser.rules = (_b = {},
        _b[BrowserName.U_BROWSER] = [BrowserName.U_BROWSER, BrowserName.CHROME, BrowserName.SAFARI],
        _b[BrowserName.UC_BROWSER] = [BrowserName.UC_BROWSER, BrowserName.CHROME, BrowserName.SAFARI],
        _b[BrowserName.QQ_BROWSER] = [BrowserName.QQ_BROWSER, BrowserName.CHROME, BrowserName.SAFARI],
        _b[BrowserName.COC] = [BrowserName.COC, BrowserName.CHROME, BrowserName.SAFARI],
        _b[BrowserName.YANDEX] = [BrowserName.YANDEX, BrowserName.CHROME, BrowserName.SAFARI],
        _b[BrowserName.BROWSER_2345] = [BrowserName.BROWSER_2345, BrowserName.CHROME, BrowserName.SAFARI],
        _b[BrowserName.LIEBAO] = [BrowserName.LIEBAO, BrowserName.CHROME, BrowserName.SAFARI],
        _b[BrowserName.BAIDU] = [BrowserName.BAIDU, BrowserName.CHROME, BrowserName.SAFARI],
        _b[BrowserName.SOGOU] = [BrowserName.SOGOU, BrowserName.CHROME, BrowserName.SAFARI],
        _b[BrowserName.GREEN_TEA] = [BrowserName.GREEN_TEA, BrowserName.CHROME, BrowserName.SAFARI],
        _b[BrowserName.FIREFOX] = [BrowserName.FIREFOX],
        _b[BrowserName.CHROME] = [BrowserName.CHROME, BrowserName.SAFARI],
        _b[BrowserName.SAFARI] = [BrowserName.SAFARI],
        _b[BrowserName.EDGE] = [BrowserName.EDGE],
        _b[BrowserName.IE] = [BrowserName.IE],
        _b[BrowserName.OPERA] = [BrowserName.OPERA],
        _b);
    return Browser;
}());
exports.Browser = Browser;


/***/ }),
/* 73 */,
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var States = /** @class */ (function () {
    function States() {
        this.connect = 'connect';
        this.init = 'init';
        this.preInit = 'preInit';
        this.watingEnterGame = 'watingEnterGame';
        this.baseGameIdle = 'baseGameIdle';
        this.loading = 'loading';
        this.gameStartTutorial = 'gameStartTutorial';
        this.tutorialOutro = 'tutorialOutro';
    }
    States = __decorate([
        es5_1.Singleton
    ], States);
    return States;
}());
exports.States = States;


/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var States_1 = __webpack_require__(74);
var TsMap_1 = __webpack_require__(2);
var BaseButtonStateSet_1 = __webpack_require__(199);
/**
 * Buttons State Class
 * Set state for the buttons
 */
var ButtonsStateSet = /** @class */ (function (_super) {
    __extends(ButtonsStateSet, _super);
    function ButtonsStateSet() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * set states for the buttons
     */
    ButtonsStateSet.prototype.initStates = function () {
        this.buttonStates.set(ButtonsStateSet.DEFAULT_TEMPLATE, this.default());
        this.buttonStates.set(this.stateNames.init, this.init());
        this.buttonStates.set(this.stateNames.baseGameIdle, this.baseGameIdle());
    };
    ButtonsStateSet.prototype.baseGameIdle = function () {
        var buttonState = new TsMap_1.TsMap();
        return buttonState;
    };
    var _a;
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof States_1.States !== "undefined" && States_1.States) === "function" && _a || Object)
    ], ButtonsStateSet.prototype, "stateNames", void 0);
    return ButtonsStateSet;
}(BaseButtonStateSet_1.BaseButtonsStateSet));
exports.ButtonsStateSet = ButtonsStateSet;
var ButtonBehaviour = /** @class */ (function (_super) {
    __extends(ButtonBehaviour, _super);
    function ButtonBehaviour() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return ButtonBehaviour;
}(BaseButtonStateSet_1.BaseButtonBehaviour));
exports.ButtonBehaviour = ButtonBehaviour;


/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Helper_1 = __webpack_require__(5);
/**
 * CoreState contains the name of state and data needed for this state.
 * For example, data can look like { winning: 150 } what describes the winning after spin
 */
var CoreState = /** @class */ (function () {
    function CoreState(pName, pData, pGroup) {
        if (pGroup === void 0) { pGroup = Helper_1.Helper.EMPTY; }
        this.name = pName;
        if (pData != undefined) {
            this.data = pData;
        }
        else {
            this.data = new Object();
        }
        this.group = pGroup;
    }
    Object.defineProperty(CoreState.prototype, "stateName", {
        get: function () {
            return this.name;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CoreState.prototype, "stateData", {
        get: function () {
            return this.data;
        },
        set: function (pData) {
            this.data = pData;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CoreState.prototype, "stateGroup", {
        get: function () {
            return this.group;
        },
        set: function (group) {
            this.group = group;
        },
        enumerable: true,
        configurable: true
    });
    CoreState.prototype.toString = function () {
        console.log(' ( ' + this.name + ', { ' + this.data + ' } ');
        return ' ( ' + this.name + ', { ' + this.data + ' } ';
    };
    return CoreState;
}());
exports.CoreState = CoreState;


/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var SlotStates_1 = __webpack_require__(31);
var CompController_1 = __webpack_require__(43);
var SlotCompController = /** @class */ (function (_super) {
    __extends(SlotCompController, _super);
    function SlotCompController() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    var _a;
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof SlotStates_1.SlotStates !== "undefined" && SlotStates_1.SlotStates) === "function" && _a || Object)
    ], SlotCompController.prototype, "stateNames", void 0);
    return SlotCompController;
}(CompController_1.CompController));
exports.SlotCompController = SlotCompController;


/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var tween_js_1 = __webpack_require__(47);
var es5_1 = __webpack_require__(0);
var TsMap_1 = __webpack_require__(2);
var IReelsConfig_1 = __webpack_require__(66);
var ReelConfig = /** @class */ (function () {
    function ReelConfig() {
        var _a;
        this.name = 'reels';
        this.basicMask = {
            x: 10,
            y: 523,
            width: 700,
            height: 518
        };
        this.anticipationData = {
            anticipationDelay: 1500,
            animations: [],
            //Each Model needs anticipationData
            modelData: [
                {
                    anticipationSymbolCountTrigger: 2,
                    anticipationSymbolCountRequired: 3,
                },
                {
                    anticipationSymbolCountTrigger: 2,
                    anticipationSymbolCountRequired: 3,
                }
            ]
        };
        this.idleAnimationLoop = true;
        this.idleAnimationRandomChance = null;
        this.idleAnimationDelay = 0;
        this.reelStopNormalTime = 500;
        this.avaliableReelSet = [ReelSet.BASE, ReelSet.FEATURE];
        this.orientationLayoutData = null;
        this.orientationMaskData = null;
        this.defaultReelsMask = new TsMap_1.TsMap([
            [ReelSet.BASE, this.basicMask],
            [ReelSet.FEATURE, this.basicMask]
        ]);
        this.defaultLayoutData = {
            position: { x: -89, y: 650 },
            scale: 0.8
        };
        this.defaultReelPosition = [
            { position: { x: 130, y: 0 } },
            { position: { x: 310, y: 0 } },
            { position: { x: 480, y: 0 } },
            { position: { x: 652, y: 0 } },
            { position: { x: 823, y: 0 } }
        ];
        this.symbolDefinition = {
            generalSymbol: {
                width: 175,
                height: 175
            },
            specialSymbol: {}
        };
        this.reelDefinition = {
            width: 215,
            symbol: {
                width: 175,
                height: 175
            },
            rangeSymbols: ['A', 'K', 'Q', 'J', 'T', 'N', 'PIC1', 'PIC2', 'PIC3', 'PIC4', 'WILD', 'SCATTER'],
            dropSymbols: ['WILD', 'SCATTER'],
            symbolsOnReel: 3,
            reelTween: { duration: 100, ease: tween_js_1.Easing.Linear.None },
            stopTween: { duration: 400, ease: tween_js_1.Easing.Back.Out },
            startReelDelay: 0,
            stopReelNormalDelay: 200,
            countBottomExtraSymbol: 1,
            countTopExtraSymbol: 1
        };
        this.reelSet = (_a = {},
            _a[ReelSet.BASE] = [
                {
                    width: 200,
                    startReelDelay: 0,
                    stopReelNormalDelay: 200
                },
                {
                    startReelDelay: 100
                },
                {
                    startReelDelay: 200
                }, {
                    startReelDelay: 300
                },
                {
                    startReelDelay: 400
                }
            ],
            _a[ReelSet.FEATURE] = [
                {
                    width: 200,
                    startReelDelay: 0,
                    stopReelNormalDelay: 200
                },
                {
                    startReelDelay: 100
                },
                {
                    startReelDelay: 200
                },
                {
                    startReelDelay: 300
                },
                {
                    startReelDelay: 400
                }
            ],
            _a);
        this.reels = [];
        this.individualReelsMask = false;
        this.defaultSpinDirection = IReelsConfig_1.SpinDirection.SpinDown;
    }
    ReelConfig = __decorate([
        es5_1.Singleton
    ], ReelConfig);
    return ReelConfig;
}());
exports.ReelConfig = ReelConfig;
var ReelSet = /** @class */ (function () {
    function ReelSet() {
    }
    ReelSet.BASE = 0;
    ReelSet.FEATURE = 1;
    return ReelSet;
}());
exports.ReelSet = ReelSet;
var SymbolSet;
(function (SymbolSet) {
    SymbolSet["N"] = "N";
    SymbolSet["A"] = "A";
    SymbolSet["J"] = "J";
    SymbolSet["Q"] = "Q";
    SymbolSet["K"] = "K";
    SymbolSet["T"] = "T";
    SymbolSet["PIC1"] = "PIC1";
    SymbolSet["PIC2"] = "PIC2";
    SymbolSet["PIC3"] = "PIC3";
    SymbolSet["PIC4"] = "PIC4";
    SymbolSet["SCATTER"] = "SCATTER";
    SymbolSet["SCATTER2"] = "SCATTER2";
    SymbolSet["WILD"] = "WILD";
})(SymbolSet = exports.SymbolSet || (exports.SymbolSet = {}));


/***/ }),
/* 79 */,
/* 80 */,
/* 81 */,
/* 82 */,
/* 83 */,
/* 84 */,
/* 85 */,
/* 86 */,
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var MiniSignal = __webpack_require__(3);
var es5_1 = __webpack_require__(0);
var Animation_1 = __webpack_require__(26);
var Browser_1 = __webpack_require__(72);
var HeartTicker = /** @class */ (function () {
    function HeartTicker() {
        /**
         * If equal to true, manager is stopped from tick calls.
         */
        this._isPaused = false;
        this.timers = new Array();
        this.savedTimeMs = 0;
        /**
         * Defult turbo mode time scale.
         */
        this.turboTimeScale = 1.5;
        /**
         * Defult time scale without turbo mode.
         */
        this.normalTimeScale = 1.0;
        this.onTimeScaleChanged = new MiniSignal();
        this.setTimeScale(this.normalTimeScale);
        requestAnimationFrame(this.embededUpdate.bind(this));
    }
    HeartTicker_1 = HeartTicker;
    Object.defineProperty(HeartTicker.prototype, "isPaused", {
        /**
         * Get is manager stopped from tick calls.
         */
        get: function () {
            return this._isPaused;
        },
        /**
         * Set this to true to stop manager from tick calls.
         */
        set: function (isPaused) {
            this._isPaused = isPaused;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HeartTicker.prototype, "timeScale", {
        /**
         * get current time scale.
         */
        get: function () {
            return this._timeScale;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HeartTicker.prototype, "tmpTimeScale", {
        get: function () {
            return this._tmpTimeScale;
        },
        set: function (value) {
            this._tmpTimeScale = value;
        },
        enumerable: true,
        configurable: true
    });
    HeartTicker.prototype.init = function (config) {
        if (config.pauseWhenLoseFocus) {
            document.addEventListener(Browser_1.Browser.VISIBILITY_CHANGE, this.onVisibilityChanged.bind(this), false);
        }
    };
    /**
     * set current time scale.
     * It will fire event onTimeScaleChanged when time scale been changed.
     */
    HeartTicker.prototype.setTimeScale = function (timeScale) {
        if (this._timeScale != timeScale) {
            this._timeScale = timeScale;
            Animation_1.Animation.TIME_SCALE = timeScale;
            this.onTimeScaleChanged.dispatch();
        }
    };
    HeartTicker.prototype.onVisibilityChanged = function () {
        var _this = this;
        if (document[Browser_1.Browser.HIDDEN]) {
            window.setTimeout(function () {
                _this.tmpTimeScale = _this.timeScale;
                _this.setTimeScale(0);
            }, 0);
        }
        else {
            window.setTimeout(function () {
                _this.setTimeScale(_this.tmpTimeScale);
                _this.tmpTimeScale = 1;
            }, 50);
        }
    };
    /**
     * callback for embeded JS frame update hook
     * @param timeMs time in ms since app start
     */
    HeartTicker.prototype.embededUpdate = function (timeMs) {
        if (!this.isPaused) {
            this.doTick((timeMs - this.savedTimeMs) * this._timeScale);
        }
        this.savedTimeMs = timeMs;
        requestAnimationFrame(this.embededUpdate.bind(this));
    };
    /**
     * Updates all the listeners and runs the actual update loop
     * @param deltaTimeMs timestamp in miliseconds from the beginning of loop
     */
    HeartTicker.prototype.doTick = function (deltaTimeMs) {
        while (deltaTimeMs > 0) {
            //do update call
            //reversed for loop to manage dead items within same pass
            for (var i = this.timers.length - 1; i >= 0; i--) {
                if (this.timers[i].isAlive()) {
                    this.timers[i].tick(Math.min(deltaTimeMs, HeartTicker_1.MAX_UPDATE_INTERVAL_MS));
                }
                else {
                    this.timers.splice(i, 1);
                }
            }
            deltaTimeMs -= HeartTicker_1.MAX_UPDATE_INTERVAL_MS;
        }
    };
    /**
     * Adds new listener for tick calls
     * @param tickConsumer new listener
     */
    HeartTicker.prototype.register = function (tickConsumer) {
        if (this.timers.indexOf(tickConsumer) > -1) {
            console.log('[HeartTicker:] this listener already in the list! ');
        }
        else {
            this.timers.push(tickConsumer);
        }
    };
    /**
     * Force remove listener from array
     * @param tickConsumer listener
     */
    HeartTicker.prototype.unregister = function (tickConsumer) {
        var i = this.timers.indexOf(tickConsumer);
        if (i > -1) {
            this.timers[i] = null;
        }
        else {
            console.log('[HeartTicker:] can\'t remove element, it is not in the array! ');
        }
    };
    /**
     * Enable turbo mode
     */
    HeartTicker.prototype.turnOnTurbo = function (turboTimeScale) {
        if (turboTimeScale == undefined) {
            turboTimeScale = this.turboTimeScale;
        }
        this.setTimeScale(turboTimeScale);
    };
    /**
     * Enable turbo mode
     */
    HeartTicker.prototype.turnOffTurbo = function () {
        this.setTimeScale(this.normalTimeScale);
    };
    var HeartTicker_1;
    /**
     * Indicates time exceeding what tick method is executed as many as needed to cover long pause
     * between system update calls.
     */
    HeartTicker.MAX_UPDATE_INTERVAL_MS = 5;
    HeartTicker = HeartTicker_1 = __decorate([
        es5_1.Singleton,
        __metadata("design:paramtypes", [])
    ], HeartTicker);
    return HeartTicker;
}());
exports.HeartTicker = HeartTicker;


/***/ }),
/* 88 */,
/* 89 */,
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var MiniSignal = __webpack_require__(3);
var es5_1 = __webpack_require__(0);
var TsMap_1 = __webpack_require__(2);
var Helper_1 = __webpack_require__(5);
var UrlParameters_1 = __webpack_require__(14);
var MoneyFormatter_1 = __webpack_require__(16);
var AbstractSdkController_1 = __webpack_require__(686);
/**
 * integrate with BNG sdk
 */
var NGBNGController = /** @class */ (function (_super) {
    __extends(NGBNGController, _super);
    function NGBNGController() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(NGBNGController, "version", {
        get: function () {
            return NGBNGController._version;
        },
        enumerable: true,
        configurable: true
    });
    NGBNGController.prototype.getSdkAPI = function () {
        var apiMapping = new TsMap_1.TsMap();
        return apiMapping;
    };
    NGBNGController.prototype.init = function () {
        var urlSdkVersion = UrlParameters_1.UrlParameters.sdkVersion;
        if (urlSdkVersion != Helper_1.Helper.EMPTY) {
            NGBNGController._version = UrlParameters_1.UrlParameters.sdkVersion;
        }
        //add listener
        window.addEventListener('message', function (e) {
            var messageFromPortal = JSON.parse(e.data);
            switch (messageFromPortal.method) {
                case 'getPlayerInfo':
                case 'makeBetTx':
                case 'makeSeedTx':
                    NGBNGController.onIframeResponse.dispatch(messageFromPortal);
                    break;
                case 'roundFinished':
                case 'roundStarted':
                    break;
            }
        });
        this.moneyFormatter.precision = 4;
    };
    NGBNGController.prototype.onReceiveError = function (data) {
        var errorData = {
            code: data.code,
            message: data.msg
        };
        if (data.cause) {
            var cause = JSON.parse(data.cause);
            if (cause.traceId) {
                errorData = __assign({}, errorData, { traceId: cause.traceId });
            }
            if (cause.error) {
                if (cause.error.code) {
                    errorData.code = cause.error.code;
                }
                if (cause.error.message) {
                    errorData.message = cause.error.message;
                }
            }
        }
        NGBNGController.postMessage('notifyError', errorData);
    };
    NGBNGController.postMessage = function (method, payload) {
        var data = {
            version: this.version,
            uid: Helper_1.Helper.uuid(),
            method: method
        };
        if (payload) {
            data.payload = payload;
        }
        window.parent.postMessage(JSON.stringify(data), '*');
    };
    var _a;
    NGBNGController.onIframeResponse = new MiniSignal();
    NGBNGController._version = 'v1';
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof MoneyFormatter_1.MoneyFormatter !== "undefined" && MoneyFormatter_1.MoneyFormatter) === "function" && _a || Object)
    ], NGBNGController.prototype, "moneyFormatter", void 0);
    return NGBNGController;
}(AbstractSdkController_1.AbstractSdkController));
exports.NGBNGController = NGBNGController;


/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var SlotNGModel = /** @class */ (function () {
    function SlotNGModel() {
    }
    Object.defineProperty(SlotNGModel.prototype, "gameType", {
        get: function () {
            return this._gameType;
        },
        set: function (value) {
            this._gameType = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SlotNGModel.prototype, "playerId", {
        get: function () {
            return this._playerId;
        },
        set: function (playerId) {
            this._playerId = playerId;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SlotNGModel.prototype, "sessionId", {
        get: function () {
            return this._sessionId;
        },
        set: function (sessionId) {
            this._sessionId = sessionId;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SlotNGModel.prototype, "partnerCode", {
        get: function () {
            return this._partnerCode;
        },
        set: function (partnerCode) {
            this._partnerCode = partnerCode;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SlotNGModel.prototype, "stateTag", {
        get: function () {
            return this._stateTag;
        },
        set: function (stateTag) {
            this._stateTag = stateTag;
        },
        enumerable: true,
        configurable: true
    });
    SlotNGModel = __decorate([
        es5_1.Singleton
    ], SlotNGModel);
    return SlotNGModel;
}());
exports.SlotNGModel = SlotNGModel;


/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var SlotGameType = /** @class */ (function () {
    function SlotGameType() {
    }
    SlotGameType.LINEGAME = 'LINEGAME';
    SlotGameType.FIXED_LINEGAME = 'FIXED_LINEGAME';
    SlotGameType.ALLPAYS = 'ALLPAYS';
    return SlotGameType;
}());
exports.SlotGameType = SlotGameType;


/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var MiniSignal = __webpack_require__(3);
var es5_1 = __webpack_require__(0);
var TsMap_1 = __webpack_require__(2);
var HeartTicker_1 = __webpack_require__(87);
var SoundManager_1 = __webpack_require__(13);
var GlobalDispatcher_1 = __webpack_require__(7);
var SimpleTimer_1 = __webpack_require__(15);
var BigWinView_1 = __webpack_require__(391);
var BigWinConfig_1 = __webpack_require__(235);
var SlotSoundConfig_1 = __webpack_require__(36);
var SlotBankService_1 = __webpack_require__(49);
var SlotCompController_1 = __webpack_require__(77);
var IBigWinConfig_1 = __webpack_require__(67);
var SlotCoinShowerController_1 = __webpack_require__(236);
var BigWinController = /** @class */ (function (_super) {
    __extends(BigWinController, _super);
    function BigWinController(view) {
        var _this = _super.call(this, view) || this;
        _this.targetStates = [
            _this.stateNames.freeRespinsAllLineWin,
            _this.stateNames.freeRespinsShowWinning,
            _this.stateNames.pickFeature,
            _this.stateNames.allLineWin,
            _this.stateNames.skip_allLineWin,
            _this.stateNames.showWinningLoop,
            _this.stateNames.skip_showWinning,
            _this.stateNames.freeSpinsStart,
            _this.stateNames.startSpin,
            _this.stateNames.freeSpinsAllLineWin,
            _this.stateNames.skip_freeSpinsAllLineWin,
            _this.stateNames.prefeatureWinning,
            _this.stateNames.transitionToFreeSpins
        ];
        return _this;
    }
    BigWinController.prototype.init = function () {
        var config = this.gameConfig.getConfig(BigWinConfig_1.BigWinConfig);
        if (this.view != null) {
            this.view.initialize(config);
            this.view.screenTapSignal.add(this.onScreenTap, this);
        }
        this.setupWinTierSettings();
        this.setupSignals();
        this.timeManager.register(this);
        this.finishStateAction();
    };
    BigWinController.prototype.freeRespinsAllLineWin = function (data) {
        this.allLineWin(data);
    };
    BigWinController.prototype.onScreenTap = function () {
        if (this.isCounting) {
            this.completeCountUp();
        }
    };
    BigWinController.prototype.allLineWin = function (data) {
        this.showBigWin(data);
    };
    BigWinController.prototype.skip_allLineWin = function () {
        this.abort(false);
    };
    BigWinController.prototype.freeSpinsAllLineWin = function (data) {
        this.showBigWin(data);
    };
    BigWinController.prototype.skip_freeSpinsAllLineWin = function () {
        this.abort(false);
    };
    BigWinController.prototype.showBigWin = function (data) {
        this.countUpCreditsFrom = data.balance - data.totalWin;
        this.countUpCreditsTo = data.balance;
        this.countUpCreditsTimeElapsed = 0;
        this.currentBigWinTier = IBigWinConfig_1.BigWinTierType.None;
        this.finalBigWinTier = BigWinController.getBigWinTier(this.countUpCreditsTo - this.countUpCreditsFrom, data.totalBet);
        this.view.finalBigWinTier = this.finalBigWinTier;
        this.soundManager.play(SlotSoundConfig_1.SlotSoundConfig.win + "0" + (BigWinController.getBigWinTierIndex(this.finalBigWinTier) + 1), SoundManager_1.AudioTrackName.EFFECT);
        this.countUpCreditsTimeTotal = this.getCountTime(this.finalBigWinTier);
        this.stayTimeAfterCountCompleted = this.getStayTime(this.finalBigWinTier);
        this.bigWinData = data;
        if (data.totalWin != 0 && this.finalBigWinTier != IBigWinConfig_1.BigWinTierType.None) {
            if (this.countUpCreditsTimeTotal != 0) {
                this.beginCountUp();
                GlobalDispatcher_1.GlobalDispatcher.dispatchIntoExpectedStates(BigWinController.BIG_WIN_FINAL_BIGWINTIER_EVENT, this.targetStates, { bigWinTier: this.finalBigWinTier });
            }
            else {
                this.bankService.balance = data.balance;
                this.bankService.win = data.totalWin;
                this.finishStateAction();
            }
        }
        else {
            this.finishStateAction();
        }
    };
    BigWinController.prototype.getStayTime = function (tier) {
        if (BigWinController.winTierSettings.has(tier)) {
            return BigWinController.winTierSettings.get(this.finalBigWinTier).stayTime;
        }
        else {
            return 0;
        }
    };
    BigWinController.prototype.skip_showWinning = function () {
        this.abort(false);
    };
    BigWinController.prototype.prefeatureWinning = function (data) {
        this.showBigWin(data);
    };
    BigWinController.prototype.skip_prefeatureWinning = function () {
        this.abort(false);
    };
    BigWinController.prototype.skip_freeSpinsShowWinning = function () {
        this.abort(false);
    };
    BigWinController.prototype.startSpin = function () {
        this.abort(true);
    };
    BigWinController.prototype.freeSpinsStart = function (data) {
        this.bankService.win = data.currentFeatureWin;
        this.abort(true);
    };
    BigWinController.prototype.transitionToFreeSpins = function () {
        this.abort(true);
    };
    BigWinController.prototype.abort = function (isState) {
        var forceStop = true;
        GlobalDispatcher_1.GlobalDispatcher.dispatchIntoExpectedStates(SlotCoinShowerController_1.SlotCoinShowerController.STOP_COIN_SHOWER_EVENT, this.targetStates);
        if (this.isCounting) {
            this.cancelCountUp(forceStop);
        }
        else if (this.stayTimer !== undefined) {
            this.cancelStay(forceStop);
        }
        else {
            if (isState) {
                this.finishStateAction();
            }
        }
    };
    BigWinController.prototype.setupSignals = function () {
        this.bigWinStartSignal = new MiniSignal();
        this.bigWinUpdateSignal = new MiniSignal();
        this.bigWinCancelSignal = new MiniSignal();
        this.bigWinCompleteSignal = new MiniSignal();
        this.bigWinNewTierReachedSignal = new MiniSignal();
    };
    BigWinController.prototype.beginCountUp = function () {
        this.isCounting = true;
        this.soundManager.play(SlotSoundConfig_1.SlotSoundConfig.creditLoop, SoundManager_1.AudioTrackName.EFFECT, true);
        this.bigWinStartSignal.dispatch();
        if (this.finalBigWinTier != IBigWinConfig_1.BigWinTierType.Balance) {
            this.view.beginCountUp();
        }
    };
    BigWinController.prototype.updateCountUp = function (value) {
        if (!this.isCounting) {
            return;
        }
        this.countUpCreditsTimeElapsed += value;
        if (this.countUpCreditsTimeElapsed > this.countUpCreditsTimeTotal) {
            this.completeCountUp();
        }
        else {
            var prevBigWinTier = this.currentBigWinTier;
            this.currentBigWinTier = this.getCurrentTimeBasedWinTier(this.countUpCreditsTimeElapsed, this.finalBigWinTier);
            if (this.currentBigWinTier != prevBigWinTier) {
                this.newTierReached(this.currentBigWinTier);
            }
            this.bankService.balance = this.countUpCreditsFrom + this.getCurrentWin();
        }
        this.view.updateCountUp(this.getCurrentWin());
        this.bigWinUpdateSignal.dispatch();
    };
    BigWinController.prototype.cancelCountUp = function (forceStop) {
        var _this = this;
        if (forceStop === void 0) { forceStop = false; }
        this.isCounting = false;
        this.soundManager.stop(SlotSoundConfig_1.SlotSoundConfig.creditLoop);
        this.soundManager.play(SlotSoundConfig_1.SlotSoundConfig.creditLoopEnd, SoundManager_1.AudioTrackName.EFFECT);
        this.countUpCreditsTimeElapsed = this.countUpCreditsTimeTotal;
        this.view.updateCountUp(this.countUpCreditsTo - this.countUpCreditsFrom);
        GlobalDispatcher_1.GlobalDispatcher.dispatchIntoExpectedStates(BigWinController.BIG_WIN_CANCEL_COUNT__EVENT, this.targetStates, {
            stateName: this.currentStateName,
            stateData: this.bigWinData
        });
        this.bankService.balance = this.countUpCreditsTo;
        this.bankService.win = this.bankService.win + this.countUpCreditsTo - this.countUpCreditsFrom;
        this.view.cancelCountUp(this.countUpCreditsTo - this.countUpCreditsFrom, forceStop).then(function () {
            _this.bigWinCancelSignal.dispatch();
            _this.finishStateAction();
        });
    };
    BigWinController.prototype.cancelStay = function (forceStop) {
        var _this = this;
        if (forceStop === void 0) { forceStop = false; }
        this.clearStayTimer();
        this.view.cancelCountUp(this.bankService.win, forceStop).then(function () {
            _this.bigWinCancelSignal.dispatch();
            _this.finishStateAction();
        });
    };
    BigWinController.prototype.completeCountUp = function () {
        var _this = this;
        this.isCounting = false;
        this.soundManager.stop(SlotSoundConfig_1.SlotSoundConfig.creditLoop);
        this.soundManager.play(SlotSoundConfig_1.SlotSoundConfig.creditLoopEnd, SoundManager_1.AudioTrackName.EFFECT);
        GlobalDispatcher_1.GlobalDispatcher.dispatchIntoExpectedStates(SlotCoinShowerController_1.SlotCoinShowerController.STOP_COIN_SHOWER_EVENT, this.targetStates);
        this.bankService.balance = this.countUpCreditsTo;
        this.bankService.win = this.bankService.win + this.countUpCreditsTo - this.countUpCreditsFrom;
        this.view.updateCountUp(this.countUpCreditsTo - this.countUpCreditsFrom);
        GlobalDispatcher_1.GlobalDispatcher.dispatchIntoExpectedStates(BigWinController.BIG_WIN_COUNT_COMPLETE_EVENT, this.targetStates, {
            stateName: this.currentStateName,
            stateData: this.bigWinData
        });
        this.countUpCreditsTimeElapsed = this.countUpCreditsTimeTotal;
        this.stayTimer = new SimpleTimer_1.SimpleTimer(this.stayTimeAfterCountCompleted, function () {
            _this.view.completeCountUp(_this.countUpCreditsTo - _this.countUpCreditsFrom).then(function () {
                _this.bigWinCompleteSignal.dispatch();
                _this.finishStateAction();
            });
            _this.clearStayTimer();
        });
    };
    BigWinController.prototype.clearStayTimer = function () {
        if (this.stayTimer !== undefined) {
            this.stayTimer.stop();
            this.stayTimer = undefined;
        }
    };
    BigWinController.getBigWinTierIndex = function (bigWinTier) {
        var tier = [
            IBigWinConfig_1.BigWinTierType.None,
            IBigWinConfig_1.BigWinTierType.Balance,
            IBigWinConfig_1.BigWinTierType.Numbers,
            IBigWinConfig_1.BigWinTierType.Coins,
            IBigWinConfig_1.BigWinTierType.BigWin,
            IBigWinConfig_1.BigWinTierType.ExtremeBigWin,
            IBigWinConfig_1.BigWinTierType.UltraExtremeBigWin
        ];
        return tier.indexOf(bigWinTier);
    };
    BigWinController.prototype.newTierReached = function (bigWinTier) {
        GlobalDispatcher_1.GlobalDispatcher.dispatchIntoExpectedStates(BigWinController.TIER_REACHED_EVENT, this.targetStates, { tier: bigWinTier, finalTier: this.finalBigWinTier });
        this.view.newTierReached(bigWinTier);
        this.bigWinNewTierReachedSignal.dispatch(bigWinTier);
    };
    BigWinController.prototype.getCountTime = function (tier) {
        if (BigWinController.winTierSettings.has(tier)) {
            return BigWinController.winTierSettings.get(this.finalBigWinTier).countTime;
        }
        else {
            return 0;
        }
    };
    BigWinController.prototype.getCurrentWin = function () {
        var totalWon = this.countUpCreditsTo - this.countUpCreditsFrom;
        var value = Math.fround(totalWon * this.getProgressRatio());
        var size = Math.pow(10, 2);
        var win = Math.round(value * size) / size;
        if (win > totalWon) {
            win = totalWon;
        }
        return win;
    };
    BigWinController.prototype.getProgressRatio = function () {
        return Math.min(1, (this.countUpCreditsTimeElapsed / this.countUpCreditsTimeTotal));
    };
    BigWinController.prototype.getCurrentTimeBasedWinTier = function (timeElapsed, baseWinTier) {
        var bigWinTier = BigWinController.winTierSettings.get(baseWinTier);
        var result = IBigWinConfig_1.BigWinTierType.Balance;
        bigWinTier.timeTable.forEach(function (value, key) {
            if ((value.start <= timeElapsed) && (timeElapsed < value.end)) {
                result = key;
            }
        });
        return result;
    };
    BigWinController.getBigWinTier = function (totalWin, bet) {
        var tier = totalWin / bet;
        var result = IBigWinConfig_1.BigWinTierType.None;
        BigWinController.winTierSettings.forEach(function (value, key) {
            if ((value.winSpan.start <= tier) && (tier < value.winSpan.end)) {
                result = key;
            }
        });
        return result;
    };
    BigWinController.prototype.isAlive = function () {
        return true;
    };
    BigWinController.prototype.tick = function (deltaTimeMs) {
        if (this.isCounting) {
            this.updateCountUp(deltaTimeMs);
        }
    };
    BigWinController.prototype.setupWinTierSettings = function () {
        BigWinController.winTierSettings = new TsMap_1.TsMap();
        this.gameConfig.getConfig(BigWinConfig_1.BigWinConfig).winTierSettings.forEach(function (wts) {
            var timeMap = new TsMap_1.TsMap();
            wts.timeTable.forEach(function (element) {
                timeMap.set(element.tier, element.timeSpan);
            });
            BigWinController.winTierSettings.set(wts.tier, {
                countTime: wts.countTime,
                stayTime: wts.stayTime,
                winSpan: wts.winSpan,
                timeTable: timeMap
            });
        });
    };
    var _a, _b, _c;
    BigWinController.TIER_REACHED_EVENT = 'TierReachedEvent';
    BigWinController.BIG_WIN_OUT_COMPLETE_EVENT = 'BigWinOutCompleteEvent';
    BigWinController.BIG_WIN_FINAL_BIGWINTIER_EVENT = 'BigWinFinalBigWinTierEvent';
    BigWinController.BIG_WIN_COUNT_COMPLETE_EVENT = 'BigWinCountCompleteEvent';
    BigWinController.BIG_WIN_CANCEL_COUNT__EVENT = 'BigWinCancelCountEvent';
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof HeartTicker_1.HeartTicker !== "undefined" && HeartTicker_1.HeartTicker) === "function" && _a || Object)
    ], BigWinController.prototype, "timeManager", void 0);
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_b = typeof SlotBankService_1.SlotBankService !== "undefined" && SlotBankService_1.SlotBankService) === "function" && _b || Object)
    ], BigWinController.prototype, "bankService", void 0);
    BigWinController = __decorate([
        __param(0, es5_1.Inject),
        __metadata("design:paramtypes", [typeof (_c = typeof BigWinView_1.BigWinView !== "undefined" && BigWinView_1.BigWinView) === "function" && _c || Object])
    ], BigWinController);
    return BigWinController;
}(SlotCompController_1.SlotCompController));
exports.BigWinController = BigWinController;


/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var CompView_1 = __webpack_require__(34);
var MLUILocalButtonsController_1 = __webpack_require__(402);
/**
 * Base Panel for NGMoonlightUI
 */
var MLUIPanel = /** @class */ (function (_super) {
    __extends(MLUIPanel, _super);
    function MLUIPanel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(MLUIPanel.prototype, "enabled", {
        get: function () {
            return this.mainContainer.interactive;
        },
        /**
         * Makes the component and its children unresponsive to clicks
         */
        set: function (enabled) {
            this.mainContainer.interactive = this.mainContainer.interactiveChildren = enabled;
        },
        enumerable: true,
        configurable: true
    });
    var _a;
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof MLUILocalButtonsController_1.MLUILocalButtonsController !== "undefined" && MLUILocalButtonsController_1.MLUILocalButtonsController) === "function" && _a || Object)
    ], MLUIPanel.prototype, "localButtonsController", void 0);
    return MLUIPanel;
}(CompView_1.CompView));
exports.MLUIPanel = MLUIPanel;


/***/ }),
/* 95 */,
/* 96 */,
/* 97 */,
/* 98 */,
/* 99 */,
/* 100 */,
/* 101 */,
/* 102 */,
/* 103 */,
/* 104 */,
/* 105 */,
/* 106 */,
/* 107 */,
/* 108 */,
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var pixi_js_1 = __webpack_require__(4);
var TextField_1 = __webpack_require__(346);
var BitmapTextField = /** @class */ (function (_super) {
    __extends(BitmapTextField, _super);
    function BitmapTextField() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    BitmapTextField.prototype.initElement = function (config) {
        var text = (config.text) ? config.text : this.getTextByKey(config.key);
        this.label = new pixi_js_1.extras.BitmapText(text, config.style);
        this.addChild(this.label);
        _super.prototype.initElement.call(this, config);
    };
    BitmapTextField.prototype.wrapText = function () {
        this.label.maxWidth = this.maxWidth;
        this.label.calculateBounds();
        this.label.updateTransform();
        this.label.dirty = true;
    };
    BitmapTextField.elementType = 'BitmapTextField';
    return BitmapTextField;
}(TextField_1.TextField));
exports.BitmapTextField = BitmapTextField;


/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var UILocalButtonsStateSet_1 = __webpack_require__(348);
var LocalButtonsController_1 = __webpack_require__(350);
var UILocalButtonsController = /** @class */ (function (_super) {
    __extends(UILocalButtonsController, _super);
    function UILocalButtonsController() {
        var _this = _super.call(this) || this;
        _this.buttonStates = es5_1.Container.get(UILocalButtonsStateSet_1.UILocalButtonsStateSet);
        return _this;
    }
    UILocalButtonsController = __decorate([
        es5_1.Singleton,
        __metadata("design:paramtypes", [])
    ], UILocalButtonsController);
    return UILocalButtonsController;
}(LocalButtonsController_1.LocalButtonsController));
exports.UILocalButtonsController = UILocalButtonsController;


/***/ }),
/* 111 */,
/* 112 */,
/* 113 */,
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var ScenarioNames_1 = __webpack_require__(136);
var SlotScenarioNames = /** @class */ (function (_super) {
    __extends(SlotScenarioNames, _super);
    function SlotScenarioNames() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /** base spin */
        _this.startSpin = 'startSpin';
        _this.baseSpinStop = 'baseSpin';
        _this.baseSpinWithWinning = 'baseSpinWithWinning';
        /** base spin before feature */
        _this.featureWithWinning = 'featureWithWinning';
        /** auto spin*/
        _this.startAutoSpin = 'startAutoSpin';
        _this.winTaken = 'winTaken';
        /** free respin */
        _this.startFreeRespin = 'startFreeRespin';
        _this.freeRespinReels = 'freeRespinReels';
        _this.freeRespinStop = 'freeRespinStop';
        _this.freeRespinWithWinning = 'freeRespinWithWinning';
        _this.freeRespinFinish = 'freeRespinFinish';
        /** free spin */
        _this.freeSpinsIdle = 'freeSpinsIdle';
        _this.transitionToFreeSpins = 'transitionToFreeSpins';
        _this.freeSpinsStop = 'freeSpinsStop';
        _this.freeSpinsWithWinning = 'freeSpinsWithWinning';
        _this.freeSpinContinue = 'freeSpinContinue';
        _this.freeSpinsFinish = 'freeSpinsFinish';
        /** multipliers in free spin */
        _this.freeSpinsWithWildMultipliers = 'freeSpinsWithWildMultipliers';
        /** lock wild feature in free spin */
        _this.wildLockTriggered = 'wildLockTriggered';
        /** re-trigger in free spin */
        _this.freeSpinsRetriggered = 'freeSpinsRetriggered';
        /** rotate reel feature in free spin */
        _this.freeSpinsRotateReelWithWinning = 'freeSpinsRotateReelWithWinning';
        _this.freeSpinsRotateReelNoWinning = 'freeSpinsRotateReelNoWinning';
        /** pick feature */
        _this.runPickFeature = 'runPickFeature';
        _this.pickFeatureNoWinning = 'pickFeatureNoWinning';
        _this.pickFeatureWithWinning = 'pickFeatureWithWinning';
        /** wheel fortune */
        _this.wheelFortune = 'wheelFortune';
        /** jackpot feature */
        _this.jackpotFeatureIdle = 'jackpotFeatureIdle';
        _this.startJackpotFeature = 'startJackpotFeature';
        _this.stopJackpotFeature = 'stopJackpotFeature';
        _this.replacingSymbols = 'replacingSymbols';
        _this.transitionToBonusSpin = 'transitionToBonusSpin';
        _this.bonusSpinsFinish = 'bonusSpinsFinish';
        _this.bonusSpinsIdle = 'bonusSpinsIdle';
        _this.bonusSpinContinue = 'bonusSpinContinue';
        _this.bonusSpinsStop = 'bonusSpinsStop';
        _this.bonusSpinsWithWinning = 'bonusSpinsWithWinning';
        _this.bonusSpinsNoWinning = 'bonusSpinsNoWinning';
        _this.multiplierApplied = 'multiplierApplied';
        _this.multiplierAdded = 'multiplierAdded';
        /** walking wild feature */
        _this.symbolCrawl = 'symbolCrawl';
        return _this;
    }
    SlotScenarioNames = __decorate([
        es5_1.Singleton
    ], SlotScenarioNames);
    return SlotScenarioNames;
}(ScenarioNames_1.ScenarioNames));
exports.SlotScenarioNames = SlotScenarioNames;


/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var ScenarioManager_1 = __webpack_require__(135);
var SlotScenarioNames_1 = __webpack_require__(114);
var SlotStates_1 = __webpack_require__(31);
var es5_1 = __webpack_require__(0);
var SlotScenarioManager = /** @class */ (function (_super) {
    __extends(SlotScenarioManager, _super);
    function SlotScenarioManager() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SlotScenarioManager.prototype.createScenarios = function () {
        this.scenarioFlows.set(this.scenarioName.gameInit, this.getScenarioByStateNames(this.scenarioName.gameInit, [
            this.stateName.preInit,
            this.stateName.watingEnterGame,
            this.stateName.init,
            this.stateName.gameStartTutorial,
            this.stateName.tutorialOutro,
            this.stateName.baseGameIdle
        ]));
        this.scenarioFlows.set(this.scenarioName.gameIdle, this.getScenarioByStateNames(this.scenarioName.gameIdle, [
            this.stateName.baseGameIdle
        ]));
        this.scenarioFlows.set(this.scenarioName.startSpin, this.getScenarioByStateNames(this.scenarioName.startSpin, [
            this.stateName.startSpin,
            this.stateName.spinning
        ]));
        this.scenarioFlows.set(this.scenarioName.startAutoSpin, this.getScenarioByStateNames(this.scenarioName.startAutoSpin, [
            this.stateName.transitionToAutoSpin,
        ]));
        this.scenarioFlows.set(this.scenarioName.baseSpinStop, this.getScenarioByStateNames(this.scenarioName.baseSpinStop, [
            this.stateName.spinStop,
            this.stateName.allReelStopped
        ]));
        this.scenarioFlows.set(this.scenarioName.baseSpinWithWinning, this.getScenarioByStateNames(this.scenarioName.baseSpinWithWinning, [
            this.stateName.allLineWin,
            this.stateName.showWinning,
            this.stateName.showWinningLoop,
            this.stateName.baseGameIdle
        ]));
        this.scenarioFlows.set(this.scenarioName.freeSpinsIdle, this.getScenarioByStateNames(this.scenarioName.freeSpinsIdle, [
            this.stateName.freeSpinsIdle
        ]));
        this.scenarioFlows.set(this.scenarioName.freeSpinContinue, this.getScenarioByStateNames(this.scenarioName.freeSpinContinue, [
            this.stateName.freeSpinsStart,
            this.stateName.freeSpinning
        ]));
        this.scenarioFlows.set(this.scenarioName.transitionToFreeSpins, this.getScenarioByStateNames(this.scenarioName.transitionToFreeSpins, [
            this.stateName.transitionToFreeSpins,
            this.stateName.freeSpinsIntroPopup
        ]));
        this.scenarioFlows.set(this.scenarioName.freeSpinsStop, this.getScenarioByStateNames(this.scenarioName.freeSpinsStop, [
            this.stateName.freeSpinsStop,
            this.stateName.freeSpinsAllReelStopped
        ]));
        this.scenarioFlows.set(this.scenarioName.freeSpinsFinish, this.getScenarioByStateNames(this.scenarioName.freeSpinsFinish, [
            this.stateName.transitionToBaseGame,
            this.stateName.freeSpinsOutroPopup,
            this.stateName.baseGameIdle
        ]));
        this.scenarioFlows.set(this.scenarioName.freeSpinsWithWinning, this.getScenarioByStateNames(this.scenarioName.freeSpinsWithWinning, [
            this.stateName.freeSpinsAllLineWin,
            this.stateName.freeSpinsShowWinning
        ]));
        this.scenarioFlows.set(this.scenarioName.freeSpinsWithWildMultipliers, this.getScenarioByStateNames(this.scenarioName.freeSpinsWithWildMultipliers, [
            this.stateName.freeSpinsWildMultipliers
        ]));
        /** Base game free respin flows */
        this.scenarioFlows.set(this.scenarioName.startFreeRespin, this.getScenarioByStateNames(this.scenarioName.startFreeRespin, [
            this.stateName.startFreeRespin,
            this.stateName.freeRespinReels,
            this.stateName.freeRespinning
        ]));
        this.scenarioFlows.set(this.scenarioName.freeRespinReels, this.getScenarioByStateNames(this.scenarioName.freeRespinReels, [
            this.stateName.freeRespinReels,
            this.stateName.freeRespinning
        ]));
        this.scenarioFlows.set(this.scenarioName.freeRespinStop, this.getScenarioByStateNames(this.scenarioName.freeRespinStop, [
            this.stateName.freeRespinsStop,
            this.stateName.freeRespinsAllReelStopped
        ]));
        this.scenarioFlows.set(this.scenarioName.freeRespinWithWinning, this.getScenarioByStateNames(this.scenarioName.freeRespinWithWinning, [
            this.stateName.freeRespinsAllLineWin,
            this.stateName.freeRespinsShowWinning,
        ]));
        this.scenarioFlows.set(this.scenarioName.freeRespinFinish, this.getScenarioByStateNames(this.scenarioName.freeRespinFinish, [
            this.stateName.freeRespinFinish
        ]));
        this.scenarioFlows.set(this.scenarioName.wildLockTriggered, this.getScenarioByStateNames(this.scenarioName.wildLockTriggered, [
            this.stateName.wildLockTriggered
        ]));
        this.scenarioFlows.set(this.scenarioName.freeSpinsRetriggered, this.getScenarioByStateNames(this.scenarioName.freeSpinsRetriggered, [
            this.stateName.showRetrigger
        ]));
        this.scenarioFlows.set(this.scenarioName.replacingSymbols, this.getScenarioByStateNames(this.scenarioName.replacingSymbols, [
            this.stateName.replacingSymbols
        ]));
        this.scenarioFlows.set(this.scenarioName.runPickFeature, this.getScenarioByStateNames(this.scenarioName.runPickFeature, [
            this.stateName.startPickFeature,
            this.stateName.pickFeature,
            this.stateName.endPickFeature
        ]));
        this.scenarioFlows.set(this.scenarioName.wheelFortune, this.getScenarioByStateNames(this.scenarioName.wheelFortune, [
            this.stateName.transitionToWheelFortune,
            this.stateName.wheelFortuneStart,
            this.stateName.wheelFortunRun,
            this.stateName.wheelFortunStop,
            this.stateName.wheelFortunClose
        ]));
        this.scenarioFlows.set(this.scenarioName.featureWithWinning, this.getScenarioByStateNames(this.scenarioName.featureWithWinning, [
            this.stateName.prefeatureWinning
        ]));
        this.scenarioFlows.set(this.scenarioName.freeSpinsRotateReelNoWinning, this.getScenarioByStateNames(this.scenarioName.freeSpinsRotateReelNoWinning, [
            this.stateName.freeSpinsRotate
        ]));
        this.scenarioFlows.set(this.scenarioName.freeSpinsRotateReelWithWinning, this.getScenarioByStateNames(this.scenarioName.freeSpinsRotateReelWithWinning, [
            this.stateName.freeSpinsRotate,
            this.stateName.freeSpinsAllLineWin,
            this.stateName.freeSpinsShowWinning
        ]));
        this.scenarioFlows.set(this.scenarioName.jackpotFeatureIdle, this.getScenarioByStateNames(this.scenarioName.jackpotFeatureIdle, [
            this.stateName.transitionToJackpot,
            this.stateName.jackpotIdle
        ]));
        this.scenarioFlows.set(this.scenarioName.startJackpotFeature, this.getScenarioByStateNames(this.scenarioName.startJackpotFeature, [
            this.stateName.jackpotStart,
            this.stateName.jackpotRun,
        ]));
        this.scenarioFlows.set(this.scenarioName.stopJackpotFeature, this.getScenarioByStateNames(this.scenarioName.stopJackpotFeature, [
            this.stateName.jackpotStop,
            this.stateName.jackpotShowWinning,
            this.stateName.jackpotClose
        ]));
        this.scenarioFlows.set(this.scenarioName.transitionToBonusSpin, this.getScenarioByStateNames(this.scenarioName.transitionToBonusSpin, [
            this.stateName.transitionToBonusSpins,
        ]));
        this.scenarioFlows.set(this.scenarioName.bonusSpinsFinish, this.getScenarioByStateNames(this.scenarioName.bonusSpinsFinish, [
            this.stateName.transitionBonusToBase,
            this.stateName.baseGameIdle
        ]));
        this.scenarioFlows.set(this.scenarioName.bonusSpinContinue, this.getScenarioByStateNames(this.scenarioName.bonusSpinContinue, [
            this.stateName.freeSpinsStart,
            this.stateName.freeSpinning
        ]));
        this.scenarioFlows.set(this.scenarioName.bonusSpinsIdle, this.getScenarioByStateNames(this.scenarioName.bonusSpinsIdle, [
            this.stateName.freeSpinsIdle
        ]));
        this.scenarioFlows.set(this.scenarioName.bonusSpinsStop, this.getScenarioByStateNames(this.scenarioName.bonusSpinsStop, [
            this.stateName.freeSpinsStop,
            this.stateName.freeSpinsAllReelStopped
        ]));
        this.scenarioFlows.set(this.scenarioName.bonusSpinsWithWinning, this.getScenarioByStateNames(this.scenarioName.bonusSpinsWithWinning, [
            this.stateName.freeSpinsAllLineWin,
            this.stateName.freeSpinsShowWinning,
            this.stateName.freeSpinsIdle
        ]));
        this.scenarioFlows.set(this.scenarioName.bonusSpinsNoWinning, this.getScenarioByStateNames(this.scenarioName.bonusSpinsNoWinning, [
            this.stateName.freeSpinsIdle
        ]));
        this.scenarioFlows.set(this.scenarioName.multiplierAdded, this.getScenarioByStateNames(this.scenarioName.multiplierAdded, [
            this.stateName.multiplierAdded
        ]));
        this.scenarioFlows.set(this.scenarioName.multiplierApplied, this.getScenarioByStateNames(this.scenarioName.multiplierApplied, [
            this.stateName.multiplierApplied
        ]));
        this.scenarioFlows.set(this.scenarioName.symbolCrawl, this.getScenarioByStateNames(this.scenarioName.symbolCrawl, [
            this.stateName.symbolCrawlTriggered
        ]));
    };
    var _a, _b;
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof SlotStates_1.SlotStates !== "undefined" && SlotStates_1.SlotStates) === "function" && _a || Object)
    ], SlotScenarioManager.prototype, "stateName", void 0);
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_b = typeof SlotScenarioNames_1.SlotScenarioNames !== "undefined" && SlotScenarioNames_1.SlotScenarioNames) === "function" && _b || Object)
    ], SlotScenarioManager.prototype, "scenarioName", void 0);
    SlotScenarioManager = __decorate([
        es5_1.Singleton
    ], SlotScenarioManager);
    return SlotScenarioManager;
}(ScenarioManager_1.ScenarioManager));
exports.SlotScenarioManager = SlotScenarioManager;


/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var SlotGameType_1 = __webpack_require__(92);
var SpinResponseFormatter_1 = __webpack_require__(50);
var FeaturesFormatterList_1 = __webpack_require__(148);
/**
 * formatting response for base spin api
 */
var SpinMsgFormatter = /** @class */ (function (_super) {
    __extends(SpinMsgFormatter, _super);
    function SpinMsgFormatter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SpinMsgFormatter.prototype.processIncomingMessage = function (message) {
        var responseScenario = this.scenarioManager.getScenario(this.scenarioNames.baseSpinStop);
        // if triggered feature, format feature
        if (message.spin_result.features_triggered != undefined && message.spin_result.features_triggered.length > 0) {
            // format feature
            responseScenario = this.getFormatFeatureTriggeredsScenario(message, responseScenario);
        }
        responseScenario = this.getFormatFeaturesAfterSpinStopScenario(message, responseScenario);
        // if no feature needed to be handle or triggered
        if (!responseScenario.hasStateName(this.stateNames.prefeatureWinning) &&
            !responseScenario.hasStateName(this.stateNames.startPickFeature) &&
            !responseScenario.hasStateName(this.stateNames.startFreeRespin) &&
            !responseScenario.hasStateName(this.stateNames.transitionToBonusSpins) &&
            !responseScenario.hasStateName(this.stateNames.transitionToFreeSpins) &&
            !responseScenario.hasStateName(this.stateNames.transitionToJackpot)) {
            if (message.spin_result.win_amount > 0 || message.spin_result.scatter_win != undefined) {
                responseScenario.addScenario(this.scenarioManager.getScenario(this.scenarioNames.baseSpinWithWinning));
            }
            else { // base game without win
                responseScenario.addScenario(this.scenarioManager.getScenario(this.scenarioNames.gameIdle));
            }
        }
        // set win data if has wining states
        responseScenario = this.setWinningData(responseScenario, message);
        this.updateBankServiceValue(message);
        responseScenario = this.getSpinStopScenario(responseScenario, message);
        var roundCompleted = false;
        if (!message.features || this.isAllFeatureCompleted(message.features)) {
            roundCompleted = true;
        }
        this.setRoundCompletedFlag(responseScenario, [
            this.stateNames.baseGameIdle,
            this.stateNames.allLineWin,
            this.stateNames.transitionToBaseGame
        ], roundCompleted);
        this.slotNGModel.stateTag = message.state_tag;
        return responseScenario;
    };
    SpinMsgFormatter.prototype.getFeatureFormatter = function (type) {
        return (this.featureFormatterList.inFeatureFormatters.get(type));
    };
    SpinMsgFormatter.prototype.updateBalance = function (value, winAmount) {
        this.bankService.balance = value - winAmount;
    };
    SpinMsgFormatter.prototype.updateBankServiceValue = function (message) {
        this.updateBalance(message.balance, message.spin_result.win_amount);
        if (message.provider == undefined) {
            switch (this.slotNGModel.gameType) {
                case SlotGameType_1.SlotGameType.ALLPAYS:
                    this.bankService.bet = message.bet_value;
                    break;
                case SlotGameType_1.SlotGameType.LINEGAME:
                case SlotGameType_1.SlotGameType.FIXED_LINEGAME:
                    this.bankService.bet = message.bet_per_line;
                    break;
            }
        }
    };
    /**
     * get spin stop scenario with state data
     * @param message
     */
    SpinMsgFormatter.prototype.getSpinStopScenario = function (spinStopScenario, message) {
        if (spinStopScenario.hasStateName(this.stateNames.spinStop)) {
            spinStopScenario.setStateData(this.stateNames.spinStop, {
                balance: this.bankService.balance,
                reelIndexes: this.getReelSymbols(message.spin_result.reels),
                engagementInfo: message.engagement_info
            });
        }
        spinStopScenario = this.getFeatureSpinStopScenario(message, spinStopScenario);
        return spinStopScenario;
    };
    SpinMsgFormatter.prototype.getFeatureSpinStopScenario = function (message, freeSpinStopScenario) {
        return this.getFeatureScenarioByFunction('getFeatureScenarioAfterSpinStop', message, freeSpinStopScenario);
    };
    SpinMsgFormatter.prototype.getFormatFeaturesAfterSpinStopScenario = function (message, responseScenario) {
        var _this = this;
        var features = message.features;
        if (features) {
            features.forEach(function (element) {
                var featureFormatter = _this.getFeatureFormatter(element.type);
                if (featureFormatter != undefined && featureFormatter.getFeatureScenarioAfterSpinStop != undefined) {
                    featureFormatter.getFeatureScenarioAfterSpinStop(responseScenario, message, element);
                }
            });
        }
        return responseScenario;
    };
    var _a;
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof FeaturesFormatterList_1.FeaturesFormatterList !== "undefined" && FeaturesFormatterList_1.FeaturesFormatterList) === "function" && _a || Object)
    ], SpinMsgFormatter.prototype, "featureFormatterList", void 0);
    return SpinMsgFormatter;
}(SpinResponseFormatter_1.SpinResponseFormatter));
exports.SpinMsgFormatter = SpinMsgFormatter;


/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var TsMap_1 = __webpack_require__(2);
var CoreState_1 = __webpack_require__(76);
var Scenario_1 = __webpack_require__(200);
var SlotNGFeatureDataDefinitions_1 = __webpack_require__(23);
var SpinResponseFormatter_1 = __webpack_require__(50);
var FreeSpinFeatureFormatter_1 = __webpack_require__(149);
var FreeRespinReelsFormatter = /** @class */ (function (_super) {
    __extends(FreeRespinReelsFormatter, _super);
    function FreeRespinReelsFormatter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(FreeRespinReelsFormatter.prototype, "featureFormatters", {
        get: function () {
            if (this._featureFormatters == undefined) {
                this._featureFormatters = this.setupFeatureFormatters();
            }
            return this._featureFormatters;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Formatters that receive messages from server
     */
    FreeRespinReelsFormatter.prototype.setupFeatureFormatters = function () {
        var map = new TsMap_1.TsMap();
        map.set(SlotNGFeatureDataDefinitions_1.FeatureTypes.FREE_SPIN, es5_1.Container.get(FreeSpinFeatureFormatter_1.FreeSpinFeatureFormatter));
        map.set(SlotNGFeatureDataDefinitions_1.FeatureTypes.FREE_RESPIN_REELS, es5_1.Container.get(FreeRespinReelsFormatter));
        return map;
    };
    FreeRespinReelsFormatter.prototype.processIncomingMessage = function (message, pendingFeatureInfo) {
        if (pendingFeatureInfo != undefined && pendingFeatureInfo.complete) {
            return null;
        }
        var respinFeatureInfo = message.features.find(function (e) { return e.type === SlotNGFeatureDataDefinitions_1.FeatureTypes.FREE_RESPIN_REELS; });
        var respinDetail = this.getFeatureDetail(respinFeatureInfo);
        // if it's the beginning of the feature
        if (respinDetail.total_free_spin_count) {
            if (respinDetail.total_free_spin_count == respinDetail.free_spins_left) {
                return null;
            }
            else {
                return this.respinResponseScenario(respinDetail, respinFeatureInfo, message);
            }
        }
        else {
            if (respinFeatureInfo.complete) {
                return this.respinResponseScenario(respinDetail, respinFeatureInfo, message);
            }
            else {
                return this.triggeredFeatureIncomingMessage(message, respinFeatureInfo);
            }
        }
    };
    FreeRespinReelsFormatter.prototype.respinResponseScenario = function (respinDetail, featureTriggeredInfo, message) {
        var responseScenario = null;
        responseScenario = this.getFreeRespinStopScenario(respinDetail, featureTriggeredInfo, message);
        var winScenario = this.getFreeRespinWinScenario(respinDetail, featureTriggeredInfo, message);
        if (winScenario) {
            responseScenario.addScenario(winScenario);
        }
        if ((respinDetail.free_spins_left != null && respinDetail.free_spins_left === 0) || featureTriggeredInfo.complete) {
            responseScenario.addScenario(this.getFinishScenario(respinDetail, featureTriggeredInfo, message));
            var isPendingfeatures = false;
            if (message.spin_result.features_triggered != undefined && message.spin_result.features_triggered.length > 0) {
                // format feature
                responseScenario = this.getFormatFeatureTriggeredsScenario(message, responseScenario);
                isPendingfeatures = this.getPendingFeatureTrigger(message.spin_result.features_triggered);
                responseScenario = this.setWinningData(responseScenario, message);
            }
            if (!isPendingfeatures) {
                var freeSpinFeature = message.features.find(function (feature) { return feature.type === SlotNGFeatureDataDefinitions_1.FeatureTypes.FREE_SPIN; });
                if (freeSpinFeature) {
                    if (freeSpinFeature.complete) {
                        var endFreeSpinsScenario = this.scenarioManager.getScenario(this.scenarioNames.freeSpinsFinish);
                        endFreeSpinsScenario.addStateData(this.stateNames.transitionToBaseGame, { featureWin: message.feature_win });
                        endFreeSpinsScenario.addStateData(this.stateNames.freeSpinsOutroPopup, { featureWin: message.feature_win });
                        responseScenario.addScenario(endFreeSpinsScenario);
                    }
                    else {
                        responseScenario.addScenario(this.scenarioManager.getScenario(this.scenarioNames.freeSpinsIdle));
                        responseScenario.addScenario(this.scenarioManager.getScenario(this.scenarioNames.freeSpinContinue));
                    }
                }
                else {
                    responseScenario.addScenario(this.scenarioManager.getScenario(this.scenarioNames.gameIdle));
                }
            }
        }
        else {
            responseScenario.addScenario(this.getRespinningScenario(respinDetail, featureTriggeredInfo, message));
        }
        this.slotNGModel.stateTag = message.state_tag;
        return responseScenario;
    };
    FreeRespinReelsFormatter.prototype.getPendingFeatureTrigger = function (featureTriggered) {
        var isPending = false;
        for (var index = 0; index < featureTriggered.length; index++) {
            var feature = featureTriggered[index];
            if (!feature.complete) {
                isPending = true;
                break;
            }
        }
        return isPending;
    };
    FreeRespinReelsFormatter.prototype.getFeatureFormatter = function (type) {
        return (this.featureFormatters.get(type));
    };
    FreeRespinReelsFormatter.prototype.getFreeRespinStopScenario = function (respinDetail, featureTriggeredInfo, message) {
        var respinStopScenario = null;
        respinStopScenario = this.scenarioManager.getScenario(this.scenarioNames.freeRespinStop);
        if (respinStopScenario.hasStateName(this.stateNames.freeRespinsStop)) {
            respinStopScenario.setStateData(this.stateNames.freeRespinsStop, {
                balance: message.balance,
                bet: this.bankService.bet,
                totalWin: message.spin_result.win_amount,
                reelIndexes: this.getReelSymbols(message.spin_result.reels),
                lines: this.bankService.lines
            });
        }
        return respinStopScenario;
    };
    FreeRespinReelsFormatter.prototype.getFreeRespinWinScenario = function (respinDetail, featureTriggeredInfo, message) {
        var respinWinScenario = null;
        if (respinDetail.total_free_spin_win_amount && respinDetail.total_free_spin_win_amount > 0) {
            respinWinScenario = this.scenarioManager.getScenario(this.scenarioNames.freeRespinWithWinning);
            respinWinScenario = this.setWinningData(respinWinScenario, message);
        }
        return respinWinScenario;
    };
    FreeRespinReelsFormatter.prototype.triggeredFeatureIncomingMessage = function (message, featureTriggeredInfo) {
        var responseScenario = new Scenario_1.Scenario('', []);
        var respinFeatureDetail = featureTriggeredInfo.feature_state;
        responseScenario = this.getTransitionToFreeRepinScenario(responseScenario, respinFeatureDetail, featureTriggeredInfo, message);
        if (respinFeatureDetail.free_spins_left) {
            if (respinFeatureDetail.free_spins_left == respinFeatureDetail.total_free_spin_count) {
                responseScenario.addScenario(this.getStartScenario(respinFeatureDetail, featureTriggeredInfo, message));
            }
            else if (respinFeatureDetail.free_spins_left > 0) {
                responseScenario.addScenario(this.getRespinningScenario(respinFeatureDetail, featureTriggeredInfo, message));
            }
            else {
                responseScenario.addScenario(this.getFinishScenario(respinFeatureDetail, featureTriggeredInfo, message));
            }
        }
        else {
            responseScenario.addScenario(this.getRespinningScenario(respinFeatureDetail, featureTriggeredInfo, message));
        }
        this.slotNGModel.stateTag = message.state_tag;
        return responseScenario;
    };
    FreeRespinReelsFormatter.prototype.getTransitionToFreeRepinScenario = function (responseScenario, respinDetail, featureTriggeredInfo, message) {
        var freeSpinFeatrue = message.features.find(function (e) { return e.type === SlotNGFeatureDataDefinitions_1.FeatureTypes.FREE_SPIN; });
        if (freeSpinFeatrue == undefined) {
            responseScenario.addState(new CoreState_1.CoreState(this.stateNames.prefeatureWinning));
            if (message.spin_result.win_amount > 0) {
                responseScenario.addState(new CoreState_1.CoreState(this.stateNames.showWinning));
            }
        }
        return responseScenario;
    };
    FreeRespinReelsFormatter.prototype.getStartScenario = function (respinDetail, featureTriggeredInfo, message) {
        var startScenario = this.scenarioManager.getScenario(this.scenarioNames.startFreeRespin);
        startScenario.setStateData(this.stateNames.startFreeRespin, respinDetail);
        startScenario.setStateData(this.stateNames.freeRespinReels, respinDetail);
        return startScenario;
    };
    FreeRespinReelsFormatter.prototype.getRespinningScenario = function (respinDetail, featureTriggeredInfo, message) {
        var respinScenario = this.scenarioManager.getScenario(this.scenarioNames.freeRespinReels);
        respinScenario.setStateData(this.stateNames.freeRespinReels, respinDetail);
        return respinScenario;
    };
    FreeRespinReelsFormatter.prototype.getFinishScenario = function (respinDetail, featureTriggeredInfo, message) {
        var finishScenario = this.scenarioManager.getScenario(this.scenarioNames.freeRespinFinish);
        if (respinDetail.total_free_spin_win_amount) {
            finishScenario.setStateData(this.stateNames.freeRespinFinish, respinDetail.total_free_spin_win_amount);
        }
        return finishScenario;
    };
    FreeRespinReelsFormatter.prototype.restoreFeatureIncomingMessage = function (respinDetail, features, type, message) {
        var responseScenario = this.scenarioManager.getScenario(this.scenarioNames.startFreeRespin);
        responseScenario.setStateData(this.stateNames.startFreeRespin, respinDetail);
        responseScenario.setStateData(this.stateNames.freeRespinReels, respinDetail);
        return responseScenario;
    };
    FreeRespinReelsFormatter.prototype.getFeatureDetail = function (featureInfo) {
        return featureInfo.feature_state;
    };
    return FreeRespinReelsFormatter;
}(SpinResponseFormatter_1.SpinResponseFormatter));
exports.FreeRespinReelsFormatter = FreeRespinReelsFormatter;


/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Helper_1 = __webpack_require__(5);
var SlotGameType_1 = __webpack_require__(92);
var SlotNGHttpFormatter_1 = __webpack_require__(20);
/**
 * Format base spin request
 */
var SpinRequestMsgFormatter = /** @class */ (function (_super) {
    __extends(SpinRequestMsgFormatter, _super);
    function SpinRequestMsgFormatter() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.spin_action = 'SPIN';
        return _this;
    }
    /**
     * sends button press emulation package
     * @param data - ignored
     * @returns {any} message object
     */
    SpinRequestMsgFormatter.prototype.codeMessage = function (data) {
        this.updateBalance();
        var msg = this.getRequestPayload(data);
        if (this.slotNGModel.gameType === SlotGameType_1.SlotGameType.LINEGAME) {
            msg.line = this.bankService.lines;
        }
        return msg;
    };
    SpinRequestMsgFormatter.prototype.getRequestPayload = function (data) {
        var requestData = {
            player_id: this.slotNGModel.playerId,
            session_token: this.slotNGModel.sessionId,
            partner_code: this.slotNGModel.partnerCode,
            game_code: this.config.gameCode,
            action: this.spin_action,
            state_tag: this.slotNGModel.stateTag,
            bet_denom_index: this.bankService.currentBetIndex,
            name: SlotNGHttpFormatter_1.SlotNGHttpFormatter.SPIN
        };
        requestData = this.mergeForceSpinData(requestData, data);
        return requestData;
    };
    SpinRequestMsgFormatter.prototype.updateBalance = function () {
        // take total bet off from balance first
        if (this.bankService.balance >= this.bankService.totalBet) {
            this.bankService.balance = this.bankService.balance - this.bankService.totalBet;
        }
    };
    SpinRequestMsgFormatter.prototype.mergeForceSpinData = function (requestData, data) {
        if (data && data.symbols) {
            requestData = Helper_1.Helper.mergeTwoObjects(requestData, { force_data: { reels: this.getMatrix(data.symbols) } });
        }
        return requestData;
    };
    /**
     * get matrix for reel result
     * @param symbolsArray
     */
    SpinRequestMsgFormatter.prototype.getMatrix = function (symbolsArray) {
        var matrix = new Array();
        for (var index = 0; index < symbolsArray.length; index++) {
            matrix.push({
                symbols: this.getMatrixReel(symbolsArray[index])
            });
        }
        return matrix;
    };
    /**
     * get matrix for single reel
     * @param symbolArray
     */
    SpinRequestMsgFormatter.prototype.getMatrixReel = function (symbolArray) {
        var matrix = new Array();
        for (var index = 0; index < symbolArray.length; index++) {
            matrix.push({
                symbol: symbolArray[index]
            });
        }
        return matrix;
    };
    return SpinRequestMsgFormatter;
}(SlotNGHttpFormatter_1.SlotNGHttpFormatter));
exports.SpinRequestMsgFormatter = SpinRequestMsgFormatter;


/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var MiniSignal = __webpack_require__(3);
var pixi_js_1 = __webpack_require__(4);
var SimpleTween_1 = __webpack_require__(27);
var Sprite_1 = __webpack_require__(48);
var CoreElement_1 = __webpack_require__(56);
var CoreUIElementFactory_1 = __webpack_require__(28);
var ScrollMarquee = /** @class */ (function (_super) {
    __extends(ScrollMarquee, _super);
    function ScrollMarquee() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ScrollMarquee.prototype.initElement = function (config) {
        this.config = config;
        this.onMarqueeTweenCompleteSignal = new MiniSignal();
        this.currentDisplayMode = this.config.marqueeDisplayMode;
        this.createBackground();
        this.createMarqueeText();
        this.createForeground();
    };
    ScrollMarquee.prototype.createBackground = function () {
        if (this.config.background == undefined) {
            return;
        }
        this.background = new Sprite_1.Sprite(this.config.background);
        // set default position
        this.setDeafultSpriteSetting(this.background, this.config.background);
        this.addChild(this.background);
    };
    ScrollMarquee.prototype.createMarqueeText = function () {
        this.marqueeMask = new pixi_js_1.Graphics();
        this.marqueeMask.position.set(this.config.mask.x, this.config.mask.y);
        this.marqueeMask.drawRect(0, 0, this.config.mask.width, this.config.mask.height);
        this.addChild(this.marqueeMask);
        this.marqueeText = CoreUIElementFactory_1.CoreUIElementFactory.createInstance(this.config.marqueeText);
        this.marqueeText.mask = this.marqueeMask;
        this.addChild(this.marqueeText);
    };
    ScrollMarquee.prototype.createForeground = function () {
        if (this.config.foreground == undefined) {
            return;
        }
        this.foreground = new Sprite_1.Sprite(this.config.foreground);
        // set default position
        this.setDeafultSpriteSetting(this.foreground, this.config.foreground);
        this.addChild(this.foreground);
    };
    ScrollMarquee.prototype.setDeafultSpriteSetting = function (sprite, spriteConfig) {
        if (sprite) {
            if (!spriteConfig.position) {
                sprite.position.set(this.marqueeMask.x, this.marqueeMask.y);
            }
            else {
                sprite.position.set(spriteConfig.position.x, spriteConfig.position.y);
            }
        }
    };
    ScrollMarquee.prototype.updateAttributes = function (config) {
        if (config == undefined) {
            return;
        }
        _super.prototype.updateAttributes.call(this, config);
        if (config.background) {
            this.background.updateAttributes(config.background);
        }
        if (config.marqueeText) {
            this.marqueeText.updateAttributes(config.marqueeText.elementConfig);
        }
        if (config.mask) {
            this.marqueeMask.position.set(config.mask.x, config.mask.y);
            this.marqueeMask.clear();
            this.marqueeMask.drawRect(0, 0, config.mask.width, config.mask.height);
        }
        this.resetFixedModeMarqueeText();
        if (config.foreground) {
            this.foreground.updateAttributes(config.foreground);
        }
    };
    ScrollMarquee.prototype.setMarqueeText = function (message, mode) {
        if (message == undefined) {
            return;
        }
        this.currentDisplayMode = ((mode) ? mode : this.config.marqueeDisplayMode);
        this.nextMessage = message;
        this.startMarqueeTween(this.marqueeMask.x + (this.marqueeMask.width), this.currentDisplayMode);
    };
    ScrollMarquee.prototype.resetFixedModeMarqueeText = function () {
        if (this.currentDisplayMode == MarqueeDisplayMode.FIXED) {
            this.setMarqueeText(this.marqueeText.text, this.currentDisplayMode);
        }
    };
    ScrollMarquee.prototype.setMessage = function (text) {
        this.marqueeText.text = text;
        this.marqueeText.setAutoscale(this.marqueeMask.width, this.marqueeMask.height);
    };
    ScrollMarquee.prototype.setModeLabelScale = function (startPointX, mode) {
        switch (mode) {
            case MarqueeDisplayMode.FIXED:
                this.marqueeText.setAutoscale(this.marqueeMask.width, this.marqueeMask.height);
                this.marqueeText.position.set(startPointX, this.marqueeText.position.y);
                break;
            case MarqueeDisplayMode.ONCE:
            case MarqueeDisplayMode.LOOP:
                this.marqueeText.setAutoscale(-1, -1);
                break;
        }
    };
    ScrollMarquee.prototype.startMarqueeTween = function (startX, mode) {
        var _this = this;
        var dis;
        var position;
        var duration;
        // if current tween is not finished yet, tween out current massage and tween in next massage
        if (this.tween != undefined) {
            dis = this.getFullDistance();
            // init exit position
            position = new pixi_js_1.Point(-dis, this.marqueeText.position.y);
            // ( dis of current x to exit x ) / speed
            duration = (this.marqueeText.position.x + dis) / this.config.accelerateSpeed;
            this.tween.stop();
            this.tween = new SimpleTween_1.SimpleTween(this.marqueeText);
            this.tween.to(position, duration)
                .onComplete(function () {
                _this.tween = undefined;
                _this.setModeLabelScale(startX, mode);
                _this.setMarqueeText(_this.nextMessage, mode);
            })
                .start();
        }
        else { // if current tween is finished
            this.setMessage(this.nextMessage);
            this.setModeLabelScale(startX, mode);
            this.marqueeText.position.set(startX, this.marqueeText.position.y);
            this.tween = new SimpleTween_1.SimpleTween(this.marqueeText);
            if (mode == MarqueeDisplayMode.FIXED) {
                position = new pixi_js_1.Point(this.getCenterPointX(), this.marqueeText.position.y);
                dis = this.marqueeText.position.x - position.x;
                duration = dis / this.config.accelerateSpeed;
                this.tween.to(position, duration)
                    .start();
            }
            else {
                dis = this.getFullDistance();
                position = new pixi_js_1.Point(-dis, this.marqueeText.position.y);
                duration = dis / this.config.messageSpeed;
                this.tween.to(position, duration)
                    .onComplete(function () {
                    _this.tween = undefined;
                    if (mode == MarqueeDisplayMode.ONCE) {
                        _this.onMarqueeTweenCompleteSignal.dispatch();
                    }
                    else {
                        _this.startMarqueeTween(startX, mode);
                    }
                })
                    .start();
            }
        }
    };
    ScrollMarquee.prototype.getFullDistance = function () {
        var dis;
        if (this.marqueeText.width <= this.marqueeMask.width) {
            dis = (this.marqueeMask.width / 2 + this.marqueeText.width / 2);
        }
        else {
            dis = this.marqueeText.width;
        }
        return dis;
    };
    ScrollMarquee.prototype.getCenterPointX = function () {
        var x;
        if (this.marqueeText.width <= this.marqueeMask.width) {
            x = this.marqueeMask.x + (this.marqueeMask.width / 2) - (this.marqueeText.width / 2);
        }
        else {
            x = this.marqueeMask.x;
        }
        return x;
    };
    return ScrollMarquee;
}(CoreElement_1.CoreElement));
exports.ScrollMarquee = ScrollMarquee;
var MarqueeDisplayMode;
(function (MarqueeDisplayMode) {
    MarqueeDisplayMode[MarqueeDisplayMode["LOOP"] = 0] = "LOOP";
    MarqueeDisplayMode[MarqueeDisplayMode["ONCE"] = 1] = "ONCE";
    MarqueeDisplayMode[MarqueeDisplayMode["FIXED"] = 2] = "FIXED";
})(MarqueeDisplayMode = exports.MarqueeDisplayMode || (exports.MarqueeDisplayMode = {}));


/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var CompView_1 = __webpack_require__(34);
var Translator_1 = __webpack_require__(25);
var Viewport_1 = __webpack_require__(6);
var MoneyFormatter_1 = __webpack_require__(16);
var WinDisplayView = /** @class */ (function (_super) {
    __extends(WinDisplayView, _super);
    function WinDisplayView() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    WinDisplayView.prototype.createElements = function (config) {
        this.config = config;
        //Add payline elements
    };
    WinDisplayView.prototype.setReelsConfig = function (config) {
        this.reelsConfig = config;
    };
    WinDisplayView.prototype.showPayline = function (data) {
        //Add logic to show payline
    };
    WinDisplayView.prototype.hide = function () {
        this.visible = false;
    };
    Object.defineProperty(WinDisplayView.prototype, "layoutData", {
        get: function () {
            var orientationLayout;
            if (this.reelsConfig.orientationLayoutData) {
                orientationLayout = this.reelsConfig.orientationLayoutData.get(this.viewport.properOrientation);
            }
            var layoutData = orientationLayout || this.reelsConfig.defaultLayoutData;
            layoutData.scale = layoutData.scale || 1;
            if (!layoutData) {
                throw new Error('can\'t layout config.');
            }
            return layoutData;
        },
        enumerable: true,
        configurable: true
    });
    WinDisplayView.prototype.getSingleReelLayoutData = function (reelSetIndex, reelIndex) {
        var orientationLayout;
        if (this.viewport.properOrientation === Viewport_1.Orientation.LANDSCAPE) {
            orientationLayout = this.reelsConfig.reelSet[reelSetIndex][reelIndex].landscapePosition;
        }
        else if (this.viewport.properOrientation === Viewport_1.Orientation.PORTRAIT) {
            orientationLayout = this.reelsConfig.reelSet[reelSetIndex][reelIndex].portraitPosition;
        }
        var layoutData = orientationLayout || this.reelsConfig.defaultReelPosition[reelIndex];
        return layoutData;
    };
    var _a, _b;
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof Translator_1.Translator !== "undefined" && Translator_1.Translator) === "function" && _a || Object)
    ], WinDisplayView.prototype, "translator", void 0);
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_b = typeof MoneyFormatter_1.MoneyFormatter !== "undefined" && MoneyFormatter_1.MoneyFormatter) === "function" && _b || Object)
    ], WinDisplayView.prototype, "moneyFormatter", void 0);
    return WinDisplayView;
}(CompView_1.CompView));
exports.WinDisplayView = WinDisplayView;


/***/ }),
/* 121 */,
/* 122 */,
/* 123 */,
/* 124 */,
/* 125 */,
/* 126 */,
/* 127 */,
/* 128 */,
/* 129 */,
/* 130 */,
/* 131 */,
/* 132 */,
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var MiniSignal = __webpack_require__(3);
var es5_1 = __webpack_require__(0);
var TsMap_1 = __webpack_require__(2);
var UrlParameters_1 = __webpack_require__(14);
var ErrorHandleService_1 = __webpack_require__(197);
/**
 * Special non-view controller that handles server's business logic of game
 */
var AbstractServer = /** @class */ (function () {
    function AbstractServer() {
        this.serverResponseSignal = new MiniSignal();
    }
    Object.defineProperty(AbstractServer.prototype, "errorHandleService", {
        get: function () {
            return this._errorHandleService;
        },
        enumerable: true,
        configurable: true
    });
    AbstractServer.prototype.connect = function () {
        //get config first
        this.config = this.getServerConfig();
        this.transport = this.setupTransport();
        //do transport login call
        this.transport.setConfig(this.config);
        this.initAPIs();
        this.transport.onConnect = this.onConnect.bind(this);
        this.transport.onReceive = this.onReceive.bind(this);
        this.transport.onReceiveError.push(this.errorHandleService.onReceiveError.bind(this.errorHandleService));
        this.setupSDKErrorHandle();
        this.transport.onError = this.onNetworkError.bind(this);
        this.handshake();
    };
    AbstractServer.prototype.setupSDKErrorHandle = function () {
        if (UrlParameters_1.UrlParameters.sdk && this.sdkSupportList.has(UrlParameters_1.UrlParameters.sdk)) {
            this.transport.onReceiveError.push(this.sdkSupportList.get(UrlParameters_1.UrlParameters.sdk).onReceiveError);
        }
    };
    /**
     * get server config form sdk or obtainConfig
     * if sdkServerConfig != undefined, it will return sdkServerConfig
     */
    AbstractServer.prototype.getServerConfig = function () {
        var sdkServerConfig = this.getSdkServerConfig();
        if (sdkServerConfig) {
            return sdkServerConfig;
        }
        else {
            return this.obtainConfig();
        }
    };
    /**
     * if there are any sdk been supported,
     * return server config that need to be handle
     */
    AbstractServer.prototype.getSdkServerConfig = function () {
        if (UrlParameters_1.UrlParameters.sdk && this.sdkSupportList.has(UrlParameters_1.UrlParameters.sdk)) {
            return this.sdkSupportList.get(UrlParameters_1.UrlParameters.sdk).serverConfig;
        }
        return null;
    };
    /**
     * init api mapping with sdk apis and server apis,
     * please note if a api key already setup by sdk api, it won't set as server api.
     */
    AbstractServer.prototype.initAPIs = function () {
        var _this = this;
        if (!this.apiMapping) {
            this.apiMapping = new TsMap_1.TsMap();
            // set sdk customize apis
            var apis = this.getSdkAPIs();
            apis.forEach(function (value, key) {
                _this.addAPI(key, value);
            });
            // set ragular apis, skip it if the kay already in the map
            apis = this.getServerAPIs();
            apis.forEach(function (value, key) {
                if (!_this.apiMapping.has(key)) {
                    _this.addAPI(key, value);
                }
            });
        }
    };
    /**
     * if there are any sdk been supported,
     * return the api list that need to be handle
     */
    AbstractServer.prototype.getSdkAPIs = function () {
        if (UrlParameters_1.UrlParameters.sdk && this.sdkSupportList.has(UrlParameters_1.UrlParameters.sdk)) {
            return this.sdkSupportList.get(UrlParameters_1.UrlParameters.sdk).getSdkAPI();
        }
        return new TsMap_1.TsMap();
    };
    /**
     * retrun ragular apis list that need to be handle
     */
    AbstractServer.prototype.getServerAPIs = function () {
        return new TsMap_1.TsMap();
    };
    /**
     * adding new api setting
     * @param messageType
     * @param api
     */
    AbstractServer.prototype.addAPI = function (messageType, api) {
        if (!messageType || !api) {
            return;
        }
        if (!this.apiMapping) {
            this.apiMapping = new TsMap_1.TsMap();
        }
        this.apiMapping.set(messageType, api);
        this.apiMapping.get(messageType).init(this.transport, this.config);
    };
    /**
     * Opens connection and initiate login if required
     */
    AbstractServer.prototype.handshake = function () {
        this.transport.connect();
    };
    /**
     * receives upcoming state
     * @param {string} stateName
     */
    AbstractServer.prototype.processState = function (stateName, stateData) {
        // procesing the state
        if (UrlParameters_1.UrlParameters.sdk && this.sdkSupportList.has(UrlParameters_1.UrlParameters.sdk)) {
            return this.sdkSupportList.get(UrlParameters_1.UrlParameters.sdk).processState(stateName, stateData);
        }
    };
    AbstractServer.prototype.onNetworkError = function (reason) {
        console.warn('[AbstractServer] connection ERROR! reason - ');
        console.warn(reason);
        if (reason.type == 'error') {
            this.errorHandleService.onReceiveError({ code: '-1' });
        }
    };
    AbstractServer.prototype.sendDataHookInfo = function (data) {
        //
    };
    var _a;
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof ErrorHandleService_1.ErrorHandleService !== "undefined" && ErrorHandleService_1.ErrorHandleService) === "function" && _a || Object)
    ], AbstractServer.prototype, "_errorHandleService", void 0);
    return AbstractServer;
}());
exports.AbstractServer = AbstractServer;


/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var TsMap_1 = __webpack_require__(2);
var ButtonsStateSet_1 = __webpack_require__(75);
var BaseButtonsController_1 = __webpack_require__(337);
var ButtonsController = /** @class */ (function (_super) {
    __extends(ButtonsController, _super);
    function ButtonsController() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ButtonsController.prototype.init = function () {
        this.buttons = new TsMap_1.TsMap();
        this.buttonStates = es5_1.Container.get(ButtonsStateSet_1.ButtonsStateSet);
    };
    ButtonsController.prototype.applyButtonsTemplate = function (templateName) {
        _super.prototype.applyButtonsTemplate.call(this, templateName);
        this.lastTemplateName = templateName;
    };
    ButtonsController = __decorate([
        es5_1.Singleton
    ], ButtonsController);
    return ButtonsController;
}(BaseButtonsController_1.BaseButtonsController));
exports.ButtonsController = ButtonsController;


/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var States_1 = __webpack_require__(74);
var Scenario_1 = __webpack_require__(200);
var CoreState_1 = __webpack_require__(76);
var es5_1 = __webpack_require__(0);
var ScenarioNames_1 = __webpack_require__(136);
var TsMap_1 = __webpack_require__(2);
var ScenarioManager = /** @class */ (function () {
    function ScenarioManager() {
        /**
         * set of scenarios for different server responses
         */
        this.scenarioFlows = new TsMap_1.TsMap();
        this.createScenarios();
    }
    ScenarioManager.prototype.createScenarios = function () {
        this.scenarioFlows.set(this.scenarioName.connect, this.getScenarioByStateNames(this.scenarioName.connect, [
            this.stateName.connect
        ]));
        this.scenarioFlows.set(this.scenarioName.gameInit, this.getScenarioByStateNames(this.scenarioName.gameInit, [
            this.stateName.preInit,
            this.stateName.watingEnterGame,
            this.stateName.init,
            this.stateName.gameStartTutorial,
            this.stateName.tutorialOutro,
            this.stateName.baseGameIdle
        ]));
    };
    /**
     * returns scenario by name
     * @param name name of scenario in config file
     */
    ScenarioManager.prototype.getScenario = function (name, clone) {
        if (clone === void 0) { clone = true; }
        return clone ? this.scenarioFlows.get(name).clone() : this.scenarioFlows.get(name);
    };
    ScenarioManager.prototype.getScenarioByStateNames = function (scenarioName, stateNames) {
        var states = new Array();
        stateNames.forEach(function (stateName) {
            states.push(new CoreState_1.CoreState(stateName));
        });
        return new Scenario_1.Scenario(scenarioName, states);
    };
    var _a, _b;
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof States_1.States !== "undefined" && States_1.States) === "function" && _a || Object)
    ], ScenarioManager.prototype, "stateName", void 0);
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_b = typeof ScenarioNames_1.ScenarioNames !== "undefined" && ScenarioNames_1.ScenarioNames) === "function" && _b || Object)
    ], ScenarioManager.prototype, "scenarioName", void 0);
    ScenarioManager = __decorate([
        es5_1.Singleton,
        __metadata("design:paramtypes", [])
    ], ScenarioManager);
    return ScenarioManager;
}());
exports.ScenarioManager = ScenarioManager;


/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var ScenarioNames = /** @class */ (function () {
    function ScenarioNames() {
        this.connect = 'connect';
        this.gameInit = 'gameInit';
        this.gameIdle = 'gameIdle';
    }
    ScenarioNames = __decorate([
        es5_1.Singleton
    ], ScenarioNames);
    return ScenarioNames;
}());
exports.ScenarioNames = ScenarioNames;


/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var CoreEvent = /** @class */ (function () {
    function CoreEvent() {
    }
    /**
     * Fires when all main component finished the INIT state.
     *
     * @static
     * @memberof CoreEvent
     */
    CoreEvent.ON_ALL_COMPONENT_INITIALIZED = 'ON_ALL_COMPONENT_INITIALIZED';
    CoreEvent.ON_OPEN_ERROR_DIALOG = 'ON_OPEN_ERROR_DIALOG';
    CoreEvent.ON_CLOSE_ERROR_DIALOG = 'ON_CLOSE_ERROR_DIALOG';
    return CoreEvent;
}());
exports.CoreEvent = CoreEvent;


/***/ }),
/* 138 */,
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
/**
 * Service for sending data hook data to server.
 */
var DataHookService = /** @class */ (function () {
    function DataHookService() {
    }
    DataHookService.prototype.init = function (server, formatter) {
        this._server = server;
        this._dataHookLogFormatter = formatter;
    };
    DataHookService.prototype.onButtonClicked = function (buttonId, productLine, actionData) {
        if (!this._dataHookLogFormatter && !this._server) {
            return;
        }
        var data = this._dataHookLogFormatter.codeMessage({
            clickDateTime: new Date().getTime(),
            buttonId: buttonId,
            productLine: productLine,
            //userAgent: window.navigator.userAgent,
            actionData: actionData
        });
        this._server.sendDataHookInfo(data);
    };
    DataHookService = __decorate([
        es5_1.Singleton
    ], DataHookService);
    return DataHookService;
}());
exports.DataHookService = DataHookService;


/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var MiniSignal = __webpack_require__(3);
var es5_1 = __webpack_require__(0);
var Helper_1 = __webpack_require__(5);
var Actions_1 = __webpack_require__(22);
var SimpleTimer_1 = __webpack_require__(15);
var GlobalDispatcher_1 = __webpack_require__(7);
var ToolTipEvent_1 = __webpack_require__(344);
var SoundManager_1 = __webpack_require__(13);
var KeyboardManager_1 = __webpack_require__(204);
var CoreElement_1 = __webpack_require__(56);
var InteractiveElement = /** @class */ (function (_super) {
    __extends(InteractiveElement, _super);
    function InteractiveElement(config) {
        var _this = _super.call(this, config) || this;
        _this.elementSignal = new MiniSignal();
        _this.action = Actions_1.Actions.EMPTY;
        if (config.tooltip) {
            _this.toolTipData = config.tooltip;
            _this.on('pointerdown', _this.onToolTipTouchStart, _this);
            _this.on('pointerup', _this.onToolTipTouchStop, _this);
            _this.isFirstTouchEvent = false;
        }
        return _this;
    }
    InteractiveElement.prototype.setAction = function (action) {
        this.action = action;
    };
    InteractiveElement.prototype.getAction = function () {
        return this.action;
    };
    InteractiveElement.prototype.setState = function (stateName) {
        if (this.state !== stateName) {
            this.onStateChanged(stateName);
        }
        this.state = stateName;
    };
    InteractiveElement.prototype.onStateChanged = function (stateName) {
        //TODO
    };
    Object.defineProperty(InteractiveElement.prototype, "enabled", {
        /**
         * Returns whether or not the button is currently enabled
         */
        get: function () {
            return this.state == InteractiveElement.ENABLED_STATE;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InteractiveElement.prototype, "actionKeycodeMap", {
        get: function () {
            return this._actionKeycodeMap;
        },
        set: function (map) {
            var _this = this;
            this._actionKeycodeMap = map;
            this._actionKeycodeMap.forEach(function (_value, key, _map) {
                _this.keyboardManager.register(key, _this);
            });
        },
        enumerable: true,
        configurable: true
    });
    InteractiveElement.prototype.onToolTipTouchStop = function () {
        this.removeTimer();
    };
    InteractiveElement.prototype.onToolTipTouchStart = function () {
        if (this.config.tooltipMode
            && this.isFirstTouchEvent
            && this.config.tooltipMode == InteractiveElementTooltipMode.ONCE) {
            return;
        }
        else {
            this.isFirstTouchEvent = true;
            this.showToolTip();
        }
    };
    InteractiveElement.prototype.showToolTip = function () {
        this.removeTimer();
        var showToolTipDelay = (this.config.showToolTipDelay) ? this.config.showToolTipDelay : 0;
        this.toolTipTimer = new SimpleTimer_1.SimpleTimer(showToolTipDelay, this.dispatchTooltipEvent.bind(this), false);
        this.toolTipTimer.start();
    };
    InteractiveElement.prototype.removeTimer = function () {
        if (this.toolTipTimer) {
            this.toolTipTimer.stop();
            this.toolTipTimer.destroy();
            this.toolTipTimer = undefined;
        }
    };
    InteractiveElement.prototype.dispatchTooltipEvent = function () {
        GlobalDispatcher_1.GlobalDispatcher.dispatchIntoAllStates(ToolTipEvent_1.ToolTipEvent.SHOW_TOOLTIP_EVENT, this.toolTipData);
    };
    InteractiveElement.prototype.playSoundEffect = function () {
        if (this.soundKey != undefined) {
            this.soundManager.play(this.soundKey, SoundManager_1.AudioTrackName.EFFECT);
        }
    };
    InteractiveElement.prototype.updateAttributes = function (config) {
        _super.prototype.updateAttributes.call(this, config);
        if (config.tooltip && this.toolTipData) {
            this.toolTipData = Helper_1.Helper.mergeTwoObjects(this.toolTipData, config.tooltip);
        }
    };
    var _a, _b;
    InteractiveElement.ENABLED_STATE = 'enable';
    InteractiveElement.DISABLED_STATE = 'disable';
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof KeyboardManager_1.KeyboardManager !== "undefined" && KeyboardManager_1.KeyboardManager) === "function" && _a || Object)
    ], InteractiveElement.prototype, "keyboardManager", void 0);
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_b = typeof SoundManager_1.SoundManager !== "undefined" && SoundManager_1.SoundManager) === "function" && _b || Object)
    ], InteractiveElement.prototype, "soundManager", void 0);
    return InteractiveElement;
}(CoreElement_1.CoreElement));
exports.InteractiveElement = InteractiveElement;
var InteractiveElementTooltipMode;
(function (InteractiveElementTooltipMode) {
    InteractiveElementTooltipMode["ONCE"] = "ONCE";
    InteractiveElementTooltipMode["LOOP"] = "LOOP";
})(InteractiveElementTooltipMode = exports.InteractiveElementTooltipMode || (exports.InteractiveElementTooltipMode = {}));


/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var ScenarioManager_1 = __webpack_require__(135);
var GameConfig_1 = __webpack_require__(24);
var es5_1 = __webpack_require__(0);
/**
 * Encapsulates code/encode rules for messages
 */
var AbstractFormatter = /** @class */ (function () {
    function AbstractFormatter() {
    }
    /**
     * does formatting message in structure compatible with end-point server
     * @param data formatter-specific object with set of properties
     * @returns {any} object, ready to send to end point server
     */
    AbstractFormatter.prototype.codeMessage = function (data) {
        return data;
    };
    /**
     * reveals data from servers message into framework-friendly format
     * @param message original server's message
     */
    AbstractFormatter.prototype.processIncomingMessage = function (message) {
        return null;
    };
    AbstractFormatter.prototype.returnScenario = function (scenario) {
        if (scenario != undefined) {
            return scenario;
        }
        else {
            console.error('Response scenario is not specified. Please check message from server.');
        }
    };
    var _a, _b;
    AbstractFormatter.INIT = 'init';
    AbstractFormatter.HISTORY_SUMMARY = 'direct_history_summary';
    AbstractFormatter.HISTORY_DETAIL = 'direct_history_detail';
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof GameConfig_1.GameConfig !== "undefined" && GameConfig_1.GameConfig) === "function" && _a || Object)
    ], AbstractFormatter.prototype, "gameConfig", void 0);
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_b = typeof ScenarioManager_1.ScenarioManager !== "undefined" && ScenarioManager_1.ScenarioManager) === "function" && _b || Object)
    ], AbstractFormatter.prototype, "scenarioManager", void 0);
    return AbstractFormatter;
}());
exports.AbstractFormatter = AbstractFormatter;


/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var pixi_js_1 = __webpack_require__(4);
var CoreElement_1 = __webpack_require__(56);
/**
 * The Window Allows you to stretch the sprite.
 * Reference: http://pixijs.download/dev/docs/PIXI.NineSlicePlane.html
 *
 * @export
 * @class Window
 * @extends {Sprite}
 */
var Window = /** @class */ (function (_super) {
    __extends(Window, _super);
    function Window() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Window.prototype.initElement = function (config) {
        config.assetName = config.assetName ? config.assetName : 'window.png';
        this.plane = this.getCustomWindow(config);
        this.addChild(this.plane);
    };
    Window.prototype.getCustomWindow = function (config) {
        return new pixi_js_1.mesh.NineSlicePlane(pixi_js_1.utils.TextureCache[config.assetName], config.leftWidth, config.topHeight, config.rightWidth, config.bottomHeight);
    };
    Window.prototype.updateAttributes = function (config) {
        if (config == undefined) {
            return;
        }
        _super.prototype.updateAttributes.call(this, config);
        if (config.windowSize) {
            this.plane.width = config.windowSize.x;
            this.plane.height = config.windowSize.y;
        }
    };
    return Window;
}(CoreElement_1.CoreElement));
exports.Window = Window;


/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var MiniSignal = __webpack_require__(3);
var es5_1 = __webpack_require__(0);
/**
 * Test portal for selenium.
 * This object will allow users enter `selenium.method()` in console window to excute method.
 */
var SeleniumPortal = /** @class */ (function () {
    function SeleniumPortal() {
        this.closePreloaderSignal = new MiniSignal();
        this.maxHistoryLength = 50;
        this.messageHistory = [];
        this.currentState = '';
    }
    /**
     * if it's test envriment, create authority for window
     * @param isTestEnvironment
     */
    SeleniumPortal.prototype.setupSelenium = function (isTestEnvironment) {
        this.isTestEnvironment = isTestEnvironment;
        if (isTestEnvironment) {
            global['selenium'] = this;
            window['selenium'] = this;
        }
    };
    SeleniumPortal.prototype.addToHistory = function (message) {
        if (this.isTestEnvironment) {
            this.messageHistory.push(message);
            if (this.messageHistory.length > this.maxHistoryLength) {
                this.messageHistory.shift();
            }
        }
    };
    SeleniumPortal.prototype.setState = function (state) {
        this.currentState = state;
    };
    SeleniumPortal.prototype.getHistory = function () {
        return this.messageHistory;
    };
    SeleniumPortal.prototype.getState = function () {
        return this.currentState;
    };
    SeleniumPortal.prototype.getData = function () {
        return {
            stateName: this.currentState,
            receivedMessageHistory: this.messageHistory
        };
    };
    SeleniumPortal.prototype.closePreloader = function () {
        this.closePreloaderSignal.dispatch();
    };
    SeleniumPortal = __decorate([
        es5_1.Singleton
    ], SeleniumPortal);
    return SeleniumPortal;
}());
exports.SeleniumPortal = SeleniumPortal;
var MessageDirection;
(function (MessageDirection) {
    MessageDirection["INBOUND"] = "inbound";
    MessageDirection["OUTBOUND"] = "outbound";
})(MessageDirection = exports.MessageDirection || (exports.MessageDirection = {}));

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(11)))

/***/ }),
/* 144 */,
/* 145 */,
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var NGServerConfig = /** @class */ (function () {
    function NGServerConfig() {
        this.game = 'GameName';
        this.connectionURL = 'star9ad.com';
        this.historyApiDomain = '{partner_token}-rgs-history.{domain}';
        this.useWebSocket = true;
        // tslint:disable-next-line:max-line-length
        this.notificationPath = 'player-notification-{gs}.{domain}{port}/notifications/?partnerToken={partner}&tokenId={session}&gameCode={game_code}&channel={device}';
        this.directAddressFormat = 'direct:feature:{feature}:partner:{partnerCode}:player:{playerId}';
        this.channelAddressFormat = 'channel:feature:{feature}:partner:{partnerCode}:locale:{locale}';
        this.requestAddressFormat = 'request:feature:{feature}';
        this.directFeatures = [];
        //public channelFeatures= [];
        this.requestFeatures = [
            'data_hook'
        ];
        this.protocol = 'https://';
        this.rgsName = 'nurgs';
        this.connectionPort = ':443';
        this.gameCode = "NG-1023"; /* please setup your gameCode in game level package.json*/
        this.partnerToken = '8c31b93c-24bd-4dfa-aa16-db96c0296b3a';
        this.playPartnerToken = 'a40a269e-f0aa-d16f-63e6-00fd6117afc8';
        this.demoPartnerToken = '760e878c-482a-4e95-92fa-8920a463e525';
        this.devPath = null; /* please override by game */
        this.path = null; /* please override by game */
        this.header = {
            contentType: 'Content-Type',
            userId: 'X-Genesis-UserId',
            partnerToken: 'X-Genesis-PartnerToken'
        };
    }
    return NGServerConfig;
}());
exports.NGServerConfig = NGServerConfig;


/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var NGServerConfig_1 = __webpack_require__(146);
var SlotNGServerConfig = /** @class */ (function (_super) {
    __extends(SlotNGServerConfig, _super);
    function SlotNGServerConfig() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.devPath = {
            init: '/dev/sessions/',
            spin: '/dev/take-turn/',
            historySummaries: '/api/slot/partnercode/{partner_code}/playerid/{player_id}',
            historyDetail: '/api/slot/roundid/{round_id}'
        };
        _this.path = {
            init: '/ng/sessions/',
            spin: '/ng/take-turn/',
            historySummaries: '/api/slot/partnercode/{partner_code}/playerid/{player_id}',
            historyDetail: '/api/slot/roundid/{round_id}'
        };
        _this.header = {
            contentType: 'Content-Type',
            userId: 'X-Genesis-UserId',
            partnerToken: 'X-Genesis-PartnerToken'
        };
        return _this;
    }
    return SlotNGServerConfig;
}(NGServerConfig_1.NGServerConfig));
exports.SlotNGServerConfig = SlotNGServerConfig;


/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var TsMap_1 = __webpack_require__(2);
var es5_1 = __webpack_require__(0);
var SlotNGFeatureDataDefinitions_1 = __webpack_require__(23);
var PickFeatureFormatter_1 = __webpack_require__(214);
var JackpotFeatureFormatter_1 = __webpack_require__(693);
var FreeSpinFeatureFormatter_1 = __webpack_require__(149);
var FreeRespinReelsFormatter_1 = __webpack_require__(117);
/**
 * Features formatter list for run feature, and restore feature.
 * should only be pending type feature in the list here.
 */
var FeaturesFormatterList = /** @class */ (function () {
    function FeaturesFormatterList() {
    }
    Object.defineProperty(FeaturesFormatterList.prototype, "inFeatureFormatters", {
        get: function () {
            if (this._inFeatureFormatters == undefined) {
                this._inFeatureFormatters = this.setupFeatureFormatters();
            }
            return this._inFeatureFormatters;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Formatters that receive messages from server
     */
    FeaturesFormatterList.prototype.setupFeatureFormatters = function () {
        var map = new TsMap_1.TsMap();
        map.set(SlotNGFeatureDataDefinitions_1.FeatureTypes.PICK, es5_1.Container.get(PickFeatureFormatter_1.PickFeatureFormatter));
        map.set(SlotNGFeatureDataDefinitions_1.FeatureTypes.FREE_SPIN, es5_1.Container.get(FreeSpinFeatureFormatter_1.FreeSpinFeatureFormatter));
        map.set(SlotNGFeatureDataDefinitions_1.FeatureTypes.JACKPOT, es5_1.Container.get(JackpotFeatureFormatter_1.JackpotFeatureFormatter));
        map.set(SlotNGFeatureDataDefinitions_1.FeatureTypes.FREE_RESPIN_REELS, es5_1.Container.get(FreeRespinReelsFormatter_1.FreeRespinReelsFormatter));
        return map;
    };
    FeaturesFormatterList = __decorate([
        es5_1.Singleton
    ], FeaturesFormatterList);
    return FeaturesFormatterList;
}());
exports.FeaturesFormatterList = FeaturesFormatterList;


/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var TsMap_1 = __webpack_require__(2);
var SlotNGFeatureDataDefinitions_1 = __webpack_require__(23);
var SpinResponseFormatter_1 = __webpack_require__(50);
var RotateFeatureFormatter_1 = __webpack_require__(694);
var WildLockedFeatureFormatter_1 = __webpack_require__(215);
var WildMultiplierFeatureFormatter_1 = __webpack_require__(695);
var ReplacingSymbolsFeatureFormatter_1 = __webpack_require__(696);
var FreeSpinRetriggeredFeatureFormatter_1 = __webpack_require__(697);
var SingleWildMultiplierFeatureFormatter_1 = __webpack_require__(216);
var FreeRespinReelsFormatter_1 = __webpack_require__(117);
var MultiplierFeatureFormatter_1 = __webpack_require__(698);
var SymbolCrawlFeatureFormatter_1 = __webpack_require__(699);
/**
 *  formatting free spin feature
 */
var FreeSpinFeatureFormatter = /** @class */ (function (_super) {
    __extends(FreeSpinFeatureFormatter, _super);
    function FreeSpinFeatureFormatter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(FreeSpinFeatureFormatter.prototype, "subFeatureFormatters", {
        get: function () {
            if (this._subFeatureFormatters == undefined) {
                this._subFeatureFormatters = this.setupFeatureFormatters();
            }
            return this._subFeatureFormatters;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Formatters that receive messages from server
     */
    FreeSpinFeatureFormatter.prototype.setupFeatureFormatters = function () {
        var map = new TsMap_1.TsMap();
        map.set(SlotNGFeatureDataDefinitions_1.FeatureTypes.RETRIGGER, es5_1.Container.get(FreeSpinRetriggeredFeatureFormatter_1.FreeSpinRetriggeredFeatureFormatter));
        map.set(SlotNGFeatureDataDefinitions_1.FeatureTypes.WILD_MULTIPLIER, es5_1.Container.get(WildMultiplierFeatureFormatter_1.WildMultiplierFeatureFormatter));
        map.set(SlotNGFeatureDataDefinitions_1.FeatureTypes.SINGLE_WILD_MULTIPLIER, es5_1.Container.get(SingleWildMultiplierFeatureFormatter_1.SingleWildMultiplierFeatureFormatter));
        map.set(SlotNGFeatureDataDefinitions_1.FeatureTypes.WILD_LOCKED, es5_1.Container.get(WildLockedFeatureFormatter_1.WildLockedFeatureFormatter));
        map.set(SlotNGFeatureDataDefinitions_1.FeatureTypes.REPLACING_SYMBOLS, es5_1.Container.get(ReplacingSymbolsFeatureFormatter_1.ReplacingSymbolsFeatureFormatter));
        map.set(SlotNGFeatureDataDefinitions_1.FeatureTypes.ROTATE, es5_1.Container.get(RotateFeatureFormatter_1.RotateFeatureFormatter));
        map.set(SlotNGFeatureDataDefinitions_1.FeatureTypes.FREE_RESPIN_REELS, es5_1.Container.get(FreeRespinReelsFormatter_1.FreeRespinReelsFormatter));
        map.set(SlotNGFeatureDataDefinitions_1.FeatureTypes.MULTIPLIER, es5_1.Container.get(MultiplierFeatureFormatter_1.MultiplierFeatureFormatter));
        map.set(SlotNGFeatureDataDefinitions_1.FeatureTypes.SYMBOL_CRAWL, es5_1.Container.get(SymbolCrawlFeatureFormatter_1.SymbolCrawlFeatureFormatter));
        return map;
    };
    /**
     * formatting run feature api response
     * @param message
     */
    FreeSpinFeatureFormatter.prototype.processIncomingMessage = function (message, pendingFeatureInfo) {
        if (pendingFeatureInfo == undefined) {
            return null;
        }
        var freeSpinFeatureState = this.getFeatureDetail(pendingFeatureInfo);
        // if it's the beginning of the feature
        if (freeSpinFeatureState.total_free_spin_count == freeSpinFeatureState.free_spins_left) {
            return this.triggeredFeatureIncomingMessage(message, pendingFeatureInfo);
        }
        else {
            return this.freeSpinResponseScenario(message, pendingFeatureInfo);
        }
    };
    FreeSpinFeatureFormatter.prototype.freeSpinResponseScenario = function (message, pendingFeatureInfo) {
        this.bankService.balance = message.balance - message.spin_result.win_amount;
        var responseScenario = null;
        // format features before free spin stop
        responseScenario = this.getFeatureBeforeSpinStopScenario(message, responseScenario);
        // setup free spin stop scenario
        if (responseScenario) {
            responseScenario.addScenario(this.getFreeSpinStopScenario(message));
        }
        else {
            responseScenario = this.getFreeSpinStopScenario(message);
        }
        // format features after free spin stop
        responseScenario = this.getFormatFeatureTriggeredsScenario(message, responseScenario);
        responseScenario = this.getFormatFeaturesAfterSpinStopScenario(message, responseScenario);
        // setup free spin win scenario
        var winScenario = this.getFreeSpinWinScenario(message);
        if (winScenario) {
            responseScenario.addScenario(winScenario);
        }
        // format features after free spin win/ no win
        responseScenario = this.getFeatureAfterWinScenario(message, responseScenario);
        responseScenario = this.getFreeSpinsScenario(responseScenario, message, pendingFeatureInfo);
        return responseScenario;
    };
    FreeSpinFeatureFormatter.prototype.getFeatureBeforeSpinStopScenario = function (message, freeSpinStopScenario) {
        return this.getFeatureScenarioByFunction('getFeatureScenarioBeforeFreeSpinStop', message, freeSpinStopScenario);
    };
    /**
     * get free spin stop scenario with state data
     * @param message
     */
    FreeSpinFeatureFormatter.prototype.getFreeSpinStopScenario = function (message) {
        var freeSpinStopScenario = this.scenarioManager.getScenario(this.scenarioNames.freeSpinsStop);
        if (freeSpinStopScenario.hasStateName(this.stateNames.freeSpinsStop)) {
            freeSpinStopScenario.setStateData(this.stateNames.freeSpinsStop, {
                balance: message.balance,
                bet: this.bankService.bet,
                totalWin: message.spin_result.win_amount,
                reelIndexes: this.getReelSymbols(message.spin_result.reels),
                lines: this.bankService.lines
            });
        }
        freeSpinStopScenario = this.getFeatureSpinStopScenario(message, freeSpinStopScenario);
        return freeSpinStopScenario;
    };
    FreeSpinFeatureFormatter.prototype.getFeatureSpinStopScenario = function (message, freeSpinStopScenario) {
        return this.getFeatureScenarioByFunction('getFeatureScenarioAfterSpinStop', message, freeSpinStopScenario);
    };
    /**
     * get free spin win or without win scenario with state data
     * @param message
     */
    FreeSpinFeatureFormatter.prototype.getFreeSpinWinScenario = function (message) {
        var freeSpinWinScenario = null;
        if (message.spin_result.win_amount > 0 || message.spin_result.scatter_win != undefined) {
            freeSpinWinScenario = this.scenarioManager.getScenario(this.scenarioNames.freeSpinsWithWinning);
            freeSpinWinScenario = this.setWinningData(freeSpinWinScenario, message);
        }
        return freeSpinWinScenario;
    };
    FreeSpinFeatureFormatter.prototype.getFeatureAfterWinScenario = function (message, freeSpinStopScenario) {
        return this.getFeatureScenarioByFunction('getFeatureScenarioAfterWin', message, freeSpinStopScenario);
    };
    /**
     * formatting feature in feature_triggered
     */
    FreeSpinFeatureFormatter.prototype.triggeredFeatureIncomingMessage = function (message, featureTriggeredInfo) {
        var responseScenario = null;
        if (message.spin_result) {
            if (message.spin_result.win_amount > 0 || message.spin_result.scatter_win != undefined) {
                responseScenario = this.scenarioManager.getScenario(this.scenarioNames.featureWithWinning);
            }
            if (responseScenario) {
                responseScenario.addScenario(this.scenarioManager.getScenario(this.scenarioNames.transitionToFreeSpins));
            }
            else {
                responseScenario = this.scenarioManager.getScenario(this.scenarioNames.transitionToFreeSpins);
            }
        }
        else {
            responseScenario = this.scenarioManager.getScenario(this.scenarioNames.transitionToFreeSpins);
        }
        responseScenario.addScenario(this.scenarioManager.getScenario(this.scenarioNames.freeSpinsIdle));
        responseScenario.addScenario(this.scenarioManager.getScenario(this.scenarioNames.freeSpinContinue));
        return this.getFreeSpinsScenario(responseScenario, message, featureTriggeredInfo);
    };
    /**
     * get feature formatter list
     * @param type
     */
    FreeSpinFeatureFormatter.prototype.getFeatureFormatter = function (type) {
        return (this.subFeatureFormatters.get(type));
    };
    /**
     * get show winning data with feature formatter
     */
    FreeSpinFeatureFormatter.prototype.getShowWinningData = function (current_balance, spinResult, featureInfos, betValue) {
        var _this = this;
        var winningData = _super.prototype.getShowWinningData.call(this, current_balance, spinResult, featureInfos, betValue);
        if (spinResult.features_triggered && spinResult.features_triggered.length > 0) {
            spinResult.features_triggered.forEach(function (element) {
                var featureFormatter = _this.getFeatureFormatter(element.type);
                if (featureFormatter != undefined && featureFormatter['getFeatureShowWinningData']) {
                    winningData = featureFormatter.getFeatureShowWinningData(winningData, spinResult, element);
                }
            });
        }
        return winningData;
    };
    /**
     * reture free spins scenario,
     * include feature triggered in free spin
     * @param message
     */
    FreeSpinFeatureFormatter.prototype.getFreeSpinsScenario = function (responseScenario, message, featureInfo) {
        var freeSpinFeatureState = this.getFeatureDetail(featureInfo);
        var currentFreeSpinCount = freeSpinFeatureState.total_free_spin_count - freeSpinFeatureState.free_spins_left + 1;
        var totalFreeSpinCount = freeSpinFeatureState.total_free_spin_count;
        var currentFeatureWin = message.feature_win;
        if (responseScenario.hasStateName(this.stateNames.transitionToFreeSpins)) {
            responseScenario.setStateData(this.stateNames.transitionToFreeSpins, {
                provider: message.provider,
                spins: freeSpinFeatureState.free_spins_left,
                totalFreeSpinCount: totalFreeSpinCount,
                currentFreeSpinCount: currentFreeSpinCount
            });
            responseScenario.setStateData(this.stateNames.freeSpinsIntroPopup, {
                provider: message.provider,
                spins: freeSpinFeatureState.free_spins_left
            });
            responseScenario.setStateData(this.stateNames.freeSpinsStart, {
                currentFreeSpinCount: currentFreeSpinCount,
                totalFreeSpinCount: totalFreeSpinCount,
                currentFeatureWin: currentFeatureWin
            });
        }
        else if (!this.getPendingSubFeatures(featureInfo.subfeatures, message.features)) {
            // is end of free spin
            if (freeSpinFeatureState.free_spins_left > 0) {
                var continueScenario = this.scenarioManager.getScenario(this.scenarioNames.freeSpinsIdle);
                continueScenario.addScenario(this.scenarioManager.getScenario(this.scenarioNames.freeSpinContinue));
                continueScenario.setStateData(this.stateNames.freeSpinsStart, {
                    currentFreeSpinCount: currentFreeSpinCount,
                    totalFreeSpinCount: totalFreeSpinCount,
                    currentFeatureWin: currentFeatureWin
                });
                responseScenario.addScenario(continueScenario);
            }
            else {
                var endFreeSpinsScenario = this.scenarioManager.getScenario(this.scenarioNames.freeSpinsFinish);
                endFreeSpinsScenario.addStateData(this.stateNames.transitionToBaseGame, { featureWin: message.feature_win });
                endFreeSpinsScenario.addStateData(this.stateNames.freeSpinsOutroPopup, { featureWin: message.feature_win });
                responseScenario.addScenario(endFreeSpinsScenario);
            }
        }
        this.slotNGModel.stateTag = message.state_tag;
        return responseScenario;
    };
    FreeSpinFeatureFormatter.prototype.getFeatureDetail = function (featureInfo) {
        return featureInfo.feature_state;
    };
    /**
     * formatting feature while restore feature
     */
    FreeSpinFeatureFormatter.prototype.restoreFeatureIncomingMessage = function (freeSpinFeatureDetail, features, type, message) {
        var freeSpinFeatureScenario = this.scenarioManager.getScenario(this.scenarioNames.transitionToFreeSpins);
        // restore sub features, if there are any
        var freeSpinFeature = features.find(function (e) { return e.type === SlotNGFeatureDataDefinitions_1.FeatureTypes.FREE_SPIN; });
        var subFeaturesScenario = this.getSubfeaturesScenario(freeSpinFeature.subfeatures, features);
        if (subFeaturesScenario != undefined) {
            freeSpinFeatureScenario.addScenario(subFeaturesScenario);
        }
        // add scenarios to start free spins
        var startFreeSpinScenario = this.getRestoreStartFreeSpinsScenario(freeSpinFeatureDetail, features, type, message);
        if (startFreeSpinScenario != undefined) {
            freeSpinFeatureScenario.addScenario(startFreeSpinScenario);
        }
        freeSpinFeatureScenario.setStateData(this.stateNames.freeSpinsIntroPopup, {
            type: type,
            spins: freeSpinFeatureDetail.free_spins_left,
            isRestore: true
        });
        freeSpinFeatureScenario.setStateData(this.stateNames.transitionToFreeSpins, {
            type: type,
            provider: (message) ? message.state.provider : null,
            spins: freeSpinFeatureDetail.free_spins_left,
            totalFreeSpinCount: freeSpinFeatureDetail.total_free_spin_count,
            currentFreeSpinCount: freeSpinFeatureDetail.total_free_spin_count - freeSpinFeatureDetail.free_spins_left + 1
        });
        freeSpinFeatureScenario = this.getFeatureRestoreScenario(features, freeSpinFeatureScenario);
        return freeSpinFeatureScenario;
    };
    FreeSpinFeatureFormatter.prototype.getRestoreStartFreeSpinsScenario = function (freeSpinFeatureDetail, features, type, message) {
        var startFreeSpinScenario = null;
        var freeSpinFeature = features.find(function (e) { return e.type === SlotNGFeatureDataDefinitions_1.FeatureTypes.FREE_SPIN; });
        if (this.getPendingSubFeatures(freeSpinFeature.subfeatures, features)) {
            return startFreeSpinScenario;
        }
        startFreeSpinScenario = this.scenarioManager.getScenario(this.scenarioNames.freeSpinsIdle);
        startFreeSpinScenario.addScenario(this.scenarioManager.getScenario(this.scenarioNames.freeSpinContinue));
        startFreeSpinScenario.setStateData(this.stateNames.freeSpinsStart, {
            currentFreeSpinCount: freeSpinFeatureDetail.total_free_spin_count - freeSpinFeatureDetail.free_spins_left + 1,
            totalFreeSpinCount: freeSpinFeatureDetail.total_free_spin_count,
            currentFeatureWin: freeSpinFeatureDetail.total_free_spin_win_amount
        });
        return startFreeSpinScenario;
    };
    FreeSpinFeatureFormatter.prototype.getPendingSubFeatures = function (subfeatures, features) {
        var _this = this;
        var pendingSubFeature = false;
        subfeatures.forEach(function (element) {
            var featureFormatter = _this.getFeatureFormatter(element);
            if (featureFormatter != undefined) {
                var subFeature = features.find(function (e) { return e.type === element; });
                if (subFeature != undefined && !subFeature.complete) {
                    pendingSubFeature = true;
                }
            }
        });
        return pendingSubFeature;
    };
    FreeSpinFeatureFormatter.prototype.getSubfeaturesScenario = function (subfeatures, features) {
        var _this = this;
        var subFeaturesScenario = null;
        subfeatures.forEach(function (element) {
            var featureFormatter = _this.getFeatureFormatter(element);
            if (featureFormatter != undefined) {
                var subFeature = features.find(function (e) { return e.type === element; });
                if (subFeature != undefined && subFeature.complete) {
                    var subfeatureScenario = featureFormatter.restoreFeatureIncomingMessage(subFeature.feature_state, features);
                    if (subfeatureScenario != undefined) {
                        if (subFeaturesScenario == undefined) {
                            subFeaturesScenario = subfeatureScenario;
                        }
                        else {
                            subFeaturesScenario.addScenario(subfeatureScenario);
                        }
                    }
                }
            }
        });
        return subFeaturesScenario;
    };
    FreeSpinFeatureFormatter.prototype.getFeatureRestoreScenario = function (features, restoreScenario) {
        var _this = this;
        if (features) {
            features.forEach(function (element) {
                var featureFormatter = _this.getFeatureFormatter(element.type);
                if (featureFormatter != undefined && featureFormatter['getFeatureRestoreScenario']) {
                    restoreScenario = featureFormatter.getFeatureRestoreScenario(restoreScenario, element);
                }
            });
        }
        return restoreScenario;
    };
    FreeSpinFeatureFormatter.prototype.getFormatFeaturesAfterSpinStopScenario = function (message, responseScenario) {
        var _this = this;
        var features = message.features;
        if (features) {
            features.forEach(function (element) {
                var featureFormatter = _this.getFeatureFormatter(element.type);
                if (featureFormatter != undefined && featureFormatter.getFeatureScenarioAfterSpinStop != undefined) {
                    featureFormatter.getFeatureScenarioAfterSpinStop(responseScenario, message, element);
                }
            });
        }
        return responseScenario;
    };
    return FreeSpinFeatureFormatter;
}(SpinResponseFormatter_1.SpinResponseFormatter));
exports.FreeSpinFeatureFormatter = FreeSpinFeatureFormatter;


/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var AbstractApi = /** @class */ (function () {
    function AbstractApi() {
    }
    Object.defineProperty(AbstractApi.prototype, "rawData", {
        get: function () {
            return this._rawData;
        },
        enumerable: true,
        configurable: true
    });
    AbstractApi.prototype.requestFormat = function (data) {
        if (!this.requestFormatter) {
            return;
        }
        this.request = this.requestFormatter.codeMessage(data);
    };
    AbstractApi.prototype.responseFormat = function (data) {
        if (!this.responseFormatter) {
            this.response = data;
            return;
        }
        this.response = this.responseFormatter.processIncomingMessage(data.payload);
    };
    AbstractApi.prototype.send = function (messageType, data) {
        var _this = this;
        this.requestFormat(data);
        var apiPackage = this.encapsulation(messageType);
        return this.transport.psend(apiPackage).then(function (response) {
            _this._rawData = response.payload;
            _this.responseFormat(response);
            return _this.onResponse();
        });
    };
    AbstractApi.prototype.onResponse = function () {
        var _this = this;
        return new Promise(function (resolve) {
            resolve(_this.response);
        });
    };
    AbstractApi.prototype.getScenario = function () {
        return null;
    };
    AbstractApi.prototype.setScenario = function (data) {
        this.responseFormat(data);
    };
    return AbstractApi;
}());
exports.AbstractApi = AbstractApi;


/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var SlotNGHttpFormatter_1 = __webpack_require__(20);
var FeaturesFormatterList_1 = __webpack_require__(148);
/**
 * Formatting all pending feature response.
 * If the game feature didn't support in framework,
 * add game feature in FeaturesFormatterList by override it,
 */
var RunFeaturesMsgFormatter = /** @class */ (function (_super) {
    __extends(RunFeaturesMsgFormatter, _super);
    function RunFeaturesMsgFormatter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    RunFeaturesMsgFormatter.prototype.processIncomingMessage = function (message) {
        var responseScenario = null;
        for (var i = 0; i < message.features.length; i++) {
            var scenario = this.getFeatureScenario(message, message.features[i]);
            if (scenario != undefined) {
                if (responseScenario == undefined) {
                    responseScenario = scenario;
                }
                else {
                    responseScenario.addScenario(scenario);
                }
            }
            if (!message.features[i].complete) {
                break;
            }
        }
        var roundCompleted = false;
        if (!message.features || this.isAllFeatureCompleted(message.features)) {
            roundCompleted = true;
        }
        this.setRoundCompletedFlag(responseScenario, [
            this.stateNames.baseGameIdle
        ], roundCompleted);
        return responseScenario;
    };
    RunFeaturesMsgFormatter.prototype.getFeatureScenario = function (message, feature) {
        var formatter = this.featureFormatterList.inFeatureFormatters.get(feature.type);
        if (formatter != undefined) {
            return formatter.processIncomingMessage(message, feature);
        }
        else {
            return null;
        }
    };
    var _a;
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof FeaturesFormatterList_1.FeaturesFormatterList !== "undefined" && FeaturesFormatterList_1.FeaturesFormatterList) === "function" && _a || Object)
    ], RunFeaturesMsgFormatter.prototype, "featureFormatterList", void 0);
    return RunFeaturesMsgFormatter;
}(SlotNGHttpFormatter_1.SlotNGHttpFormatter));
exports.RunFeaturesMsgFormatter = RunFeaturesMsgFormatter;


/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var AnimationViewConfig = /** @class */ (function () {
    function AnimationViewConfig() {
        this.name = '';
        this.animations = [];
    }
    return AnimationViewConfig;
}());
exports.AnimationViewConfig = AnimationViewConfig;


/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var Actions_1 = __webpack_require__(22);
var ForcingSpinView_1 = __webpack_require__(734);
var ForcingSpinConfig_1 = __webpack_require__(225);
var SlotCompController_1 = __webpack_require__(77);
var GlobalDispatcher_1 = __webpack_require__(7);
var SlotEvent_1 = __webpack_require__(32);
var DemoActions = /** @class */ (function () {
    function DemoActions() {
    }
    DemoActions.SHOW_DEMO_PANEL = 'showDemoPanel';
    DemoActions.HIDE_DEMO_PANEL = 'hideDemoPanel';
    return DemoActions;
}());
exports.DemoActions = DemoActions;
var ForcingSpinController = /** @class */ (function (_super) {
    __extends(ForcingSpinController, _super);
    function ForcingSpinController(view) {
        return _super.call(this, view) || this;
    }
    ForcingSpinController.prototype.onFullScreenUIShow = function () {
        this.view.setInteractive(false, false);
    };
    ForcingSpinController.prototype.onFullScreenUIHide = function () {
        this.view.setInteractive(true, true);
    };
    ForcingSpinController.prototype.init = function (stateData) {
        this.demoPanelConfig = this.gameConfig.getConfig(ForcingSpinConfig_1.ForcingSpinConfig);
        this.view.initialize(this.demoPanelConfig);
        this.demoSymbols = this.demoPanelConfig.selectorData;
        this.view.clickSignal.add(this.onClickHandler, this);
        GlobalDispatcher_1.GlobalDispatcher.addListener(this, SlotEvent_1.SlotEvent.SHOW_FULL_SCREEN_UI, this.onFullScreenUIShow.bind(this));
        GlobalDispatcher_1.GlobalDispatcher.addListener(this, SlotEvent_1.SlotEvent.HIDE_FULL_SCREEN_UI, this.onFullScreenUIHide.bind(this));
        GlobalDispatcher_1.GlobalDispatcher.addListener(this, SlotEvent_1.SlotEvent.SHOW_DEMO_SCREEN_UI, this.updateDemoPanelState.bind(this));
        this.finishStateAction();
    };
    ForcingSpinController.prototype.startSpin = function () {
        this.view.setInteractive(false, false);
        this.view.hideDemoPanel();
        this.finishStateAction();
    };
    ForcingSpinController.prototype.baseGameIdle = function () {
        this.view.setInteractive(true, true);
        this.finishStateAction();
    };
    ForcingSpinController.prototype.allLineWin = function () {
        this.view.setInteractive(true, true);
        this.finishStateAction();
    };
    ForcingSpinController.prototype.onClickHandler = function (action, data) {
        var clickAction = action.substr(Actions_1.Actions.CLICK_ACTION_PREFIX.length);
        switch (clickAction) {
            case DemoActions.SHOW_DEMO_PANEL:
                this.view.showDemoPanel();
                break;
            case DemoActions.HIDE_DEMO_PANEL:
                this.view.hideDemoPanel();
                break;
            default:
                if (this.demoSymbols.has(clickAction)) {
                    var forceData = this.demoSymbols.get(clickAction);
                    this.onForceClick(forceData);
                }
                break;
        }
    };
    ForcingSpinController.prototype.onForceClick = function (data) {
        this.view.hideDemoPanel();
        GlobalDispatcher_1.GlobalDispatcher.dispatchIntoExpectedStates(ForcingSpinController.FORCE_SPIN_RESULTS, [this.stateNames.baseGameIdle, this.stateNames.showWinning, this.stateNames.showWinningLoop], { symbols: data });
    };
    ForcingSpinController.prototype.updateDemoPanelState = function () {
        if (this.view.showDemoPanelstate) {
            this.view.showDemoPanel();
        }
        else {
            this.view.hideDemoPanel();
        }
    };
    var _a;
    ForcingSpinController.FORCE_SPIN_RESULTS = 'forceSpinResults';
    ForcingSpinController = __decorate([
        __param(0, es5_1.Inject),
        __metadata("design:paramtypes", [typeof (_a = typeof ForcingSpinView_1.ForcingSpinView !== "undefined" && ForcingSpinView_1.ForcingSpinView) === "function" && _a || Object])
    ], ForcingSpinController);
    return ForcingSpinController;
}(SlotCompController_1.SlotCompController));
exports.ForcingSpinController = ForcingSpinController;


/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var pixi_js_1 = __webpack_require__(4);
var Button_1 = __webpack_require__(19);
var WebTextField_1 = __webpack_require__(35);
var TextButton = /** @class */ (function (_super) {
    __extends(TextButton, _super);
    function TextButton(data, localButtonController) {
        var _this = _super.call(this, data, localButtonController) || this;
        if (data.text != undefined) {
            var textData = _this.getTextData(data);
            _this.textField = new WebTextField_1.WebTextField(textData);
            var inverseScaleX = 1 / _this.scale.x;
            var inverseScaleY = 1 / _this.scale.y;
            _this.textField.scale.set(inverseScaleX, inverseScaleY);
            if (textData.position != undefined) {
                _this.textField.position.set(textData.position.x, textData.position.y);
            }
            else {
                _this.textField.position.set(1 * _this.scale.x, -1 * _this.scale.y);
            }
            _this.addChild(_this.textField);
        }
        _this.setAction(data.action);
        return _this;
    }
    TextButton.prototype.getTextData = function (buttonConfig) {
        var data = buttonConfig.text;
        if (data.autoscale == undefined) {
            data.autoscale = { x: this.width - 2, y: this.height - 2 };
        }
        return data;
    };
    TextButton.prototype.updateAttributes = function (buttonConfig) {
        _super.prototype.updateAttributes.call(this, buttonConfig);
        if (buttonConfig.text && this.textField) {
            this.textField.updateAttributes(buttonConfig.text);
        }
    };
    TextButton.prototype.setText = function (text) {
        this.textField.text = text;
    };
    TextButton.prototype.setLabelVisible = function (visible) {
        this.textField.visible = visible;
    };
    Object.defineProperty(TextButton.prototype, "anchor", {
        set: function (anchorPoint) {
            this.activeElement.anchor.set(anchorPoint.x, anchorPoint.y);
            this.textField.anchor = new pixi_js_1.Point(anchorPoint.x, anchorPoint.y);
            this.updateHitArea(anchorPoint);
        },
        enumerable: true,
        configurable: true
    });
    return TextButton;
}(Button_1.Button));
exports.TextButton = TextButton;


/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var SlotFreeSpinsView_1 = __webpack_require__(382);
var SoundManager_1 = __webpack_require__(13);
var SlotCompController_1 = __webpack_require__(77);
var GlobalDispatcher_1 = __webpack_require__(7);
var SlotSoundConfig_1 = __webpack_require__(36);
var SlotFreeSpinsConfig_1 = __webpack_require__(227);
var SlotFreeSpinsController = /** @class */ (function (_super) {
    __extends(SlotFreeSpinsController, _super);
    function SlotFreeSpinsController(view) {
        return _super.call(this, view) || this;
    }
    SlotFreeSpinsController.prototype.addEventListeners = function () {
        this.view.beforePickSignal.add(this.beforePickSelection, this);
        this.view.pickSignal.add(this.onPickSelection, this);
        this.view.outroSignal.add(this.onOutroAnimationComplete, this);
        this.view.freeSpinsIntroSignal.add(this.onFreeSpinIntroAnimationComplete, this);
    };
    SlotFreeSpinsController.prototype.init = function () {
        this.config = this.gameConfig.getConfig(SlotFreeSpinsConfig_1.SlotFreeSpinsConfig);
        if (this.view != null) {
            this.view.initialize(this.config);
        }
        this.finishStateAction();
    };
    SlotFreeSpinsController.prototype.beforePickSelection = function () {
        this.soundManager.play(SlotSoundConfig_1.SlotSoundConfig.cardPick, SoundManager_1.AudioTrackName.EFFECT);
    };
    SlotFreeSpinsController.prototype.onPickSelection = function (pick) {
        GlobalDispatcher_1.GlobalDispatcher.dispatchIntoExpectedStates(SlotFreeSpinsController.PICK_SELECT_EVENT, [
            this.stateNames.endPickFeature,
            this.stateNames.pickFeature
        ], { pick: pick });
        this.finishStateAction();
    };
    SlotFreeSpinsController.prototype.startPickFeature = function (data) {
        this.view.setPicks(data.playerChoices);
        this.view.playIntro();
        this.finishStateAction();
    };
    SlotFreeSpinsController.prototype.pickFeature = function () {
        this.view.enableSelection(true);
    };
    SlotFreeSpinsController.prototype.endPickFeature = function () {
        this.view.playOutro();
        //Finish State action called on animation complete
    };
    SlotFreeSpinsController.prototype.onOutroAnimationComplete = function () {
        this.finishStateAction();
    };
    SlotFreeSpinsController.prototype.onFreeSpinIntroAnimationComplete = function () {
        this.finishStateAction();
    };
    var _a;
    SlotFreeSpinsController.PICK_FEATURE = 'pickFeature';
    SlotFreeSpinsController.FREE_SPINS_FINISH = 'freeSpinsFinish';
    SlotFreeSpinsController.TYPE_FREE_SPINS = 'free_spins';
    SlotFreeSpinsController.PICK_SELECT_EVENT = 'pickSelectEvent';
    SlotFreeSpinsController = __decorate([
        __param(0, es5_1.Inject),
        __metadata("design:paramtypes", [typeof (_a = typeof SlotFreeSpinsView_1.SlotFreeSpinsView !== "undefined" && SlotFreeSpinsView_1.SlotFreeSpinsView) === "function" && _a || Object])
    ], SlotFreeSpinsController);
    return SlotFreeSpinsController;
}(SlotCompController_1.SlotCompController));
exports.SlotFreeSpinsController = SlotFreeSpinsController;


/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var TsMap_1 = __webpack_require__(2);
var Helper_1 = __webpack_require__(5);
var SimpleTimer_1 = __webpack_require__(15);
var GlobalDispatcher_1 = __webpack_require__(7);
var Spin_1 = __webpack_require__(383);
var ReelModel_1 = __webpack_require__(735);
var ReelConfig_1 = __webpack_require__(78);
var ReelsEnums_1 = __webpack_require__(37);
var Spinning_1 = __webpack_require__(386);
var SpinDown_1 = __webpack_require__(387);
var ReelStripModel_1 = __webpack_require__(385);
var SlotCompController_1 = __webpack_require__(77);
var ReelActionHandler_1 = __webpack_require__(736);
var ReelControllerView_1 = __webpack_require__(229);
var SlotEvent_1 = __webpack_require__(32);
var ReelController = /** @class */ (function (_super) {
    __extends(ReelController, _super);
    function ReelController(view) {
        var _this = _super.call(this, view) || this;
        _this.isFeatureReelsInited = false;
        _this.initData = null;
        _this.zoom = false;
        return _this;
    }
    Object.defineProperty(ReelController.prototype, "spinDirection", {
        get: function () {
            return this._spinDirection;
        },
        set: function (spinDirection) {
            this._spinDirection = spinDirection;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReelController.prototype, "activeReelsID", {
        get: function () {
            var _this = this;
            if (!this._activeReelsID) {
                this._activeReelsID = new Array();
                this.currentReelSet.forEach(function (stripConfig, index) {
                    _this._activeReelsID.push(index);
                });
            }
            return this._activeReelsID;
        },
        set: function (value) {
            this._activeReelsID = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReelController.prototype, "currentReelSet", {
        get: function () {
            return this.reelSet[this.reelModel.currentReelSetIndex];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReelController.prototype, "stopReelDelay", {
        get: function () {
            var _this = this;
            if (this._stopReelDelay) {
                return this._stopReelDelay;
            }
            this._stopReelDelay = new TsMap_1.TsMap([
                [ReelConfig_1.ReelSet.BASE, new Array()], [ReelConfig_1.ReelSet.FEATURE, new Array()]
            ]);
            var _loop_1 = function (reelSetIndex) {
                if (this_1.componentConfig.reelSet.hasOwnProperty(reelSetIndex)) {
                    this_1.componentConfig.reelSet[reelSetIndex].forEach(function (reelStrip) {
                        _this._stopReelDelay.get(+reelSetIndex).push(reelStrip.stopReelNormalDelay);
                    });
                }
            };
            var this_1 = this;
            for (var reelSetIndex in this.componentConfig.reelSet) {
                _loop_1(reelSetIndex);
            }
            return this._stopReelDelay;
        },
        enumerable: true,
        configurable: true
    });
    ReelController.prototype.addEventListeners = function () {
        GlobalDispatcher_1.GlobalDispatcher.addListener(this, ReelController.SHOW_WIN_LINE_NOTIFICATION, this.onShowWinLine);
    };
    ReelController.prototype.onShowWinLine = function (e) {
        var winLine = e.data;
        this.view.setSymbolStateFromPositions(winLine.winTable, ReelsEnums_1.SymbolState.STATIC, ReelsEnums_1.SymbolState.LOSE);
        this.view.showWinLine(winLine);
    };
    ReelController.prototype.init = function (data) {
        this.initReelsConfig();
        this.initData = data;
        this.reelModel = es5_1.Container.get(ReelModel_1.ReelModel);
        this.reelModel.initialize({
            countTopExtraSymbol: this.componentConfig.reelDefinition.countTopExtraSymbol,
            countBottomExtraSymbol: this.componentConfig.reelDefinition.countBottomExtraSymbol,
            symbolDefinition: this.componentConfig.symbolDefinition
        });
        this.initViewController();
        this.initReelStripViewAndModel(data.strips, data.idleSymbols);
        this.initReelActionHandler();
        this.finishStateAction();
    };
    ReelController.prototype.initViewController = function () {
        this.view.initialize(this.componentConfig);
        this.view.bindModel(this.reelModel);
    };
    ReelController.prototype.initReelsConfig = function () {
        var _this = this;
        this.componentConfig = this.gameConfig.getConfig(ReelConfig_1.ReelConfig);
        this.reelSet = this.componentConfig.reelSet;
        this.spinDirection = this.componentConfig.defaultSpinDirection;
        this.componentConfig.avaliableReelSet.forEach(function (reelSetIndex) {
            var reelSet = _this.reelSet[reelSetIndex];
            var reels = [];
            reelSet.forEach(function (reel, index) {
                var base = Helper_1.Helper.mergeTwoObjects({}, _this.componentConfig.reelDefinition);
                var reelStripConfig = Helper_1.Helper.mergeTwoObjects(base, reel);
                reelStripConfig.id = index;
                reels.push(reelStripConfig);
            });
            _this.reelSet[reelSetIndex] = reels;
        });
        this.reelBackgroundConfig = this.componentConfig.reelBackground;
    };
    ReelController.prototype.initReelStripViewAndModel = function (strips, idleSymbols) {
        var _this = this;
        this.reels = new Array();
        var stripIndex = 0;
        var currentSymbolsOutcome = new Array();
        this.currentReelSet.forEach(function (stripConfig, index) {
            var reelStripModel = es5_1.Container.get(ReelStripModel_1.ReelStripModel);
            reelStripModel.setConfig(stripConfig, _this.componentConfig.symbolDefinition);
            if (strips == undefined || strips.length == 0) {
                reelStripModel.allStripSymbols = undefined;
                stripIndex = index % _this.activeReelsID.length;
            }
            else {
                stripIndex = index % strips.length;
                reelStripModel.allStripSymbols = strips[stripIndex];
            }
            // if last spin didn't exist
            if (idleSymbols == undefined || idleSymbols.length == 0) {
                reelStripModel.symbolsOutcome = _this.getIdleSymbolFromReelStrip(reelStripModel.allStripSymbols);
            }
            else {
                reelStripModel.symbolsOutcome = idleSymbols[stripIndex];
            }
            currentSymbolsOutcome.push(reelStripModel.symbolsOutcome);
            reelStripModel.initReel(reelStripModel.symbolsOutcome);
            _this.view.reelInitView(index, reelStripModel);
            _this.reels.push(reelStripModel);
        });
        if (!this.reelModel) {
            this.reelModel = new ReelModel_1.ReelModel();
        }
        this.reelModel.currentSymbolsOutcome = currentSymbolsOutcome.slice(0);
        this.reelModel.setReelStripModel(this.reelModel.currentReelSetIndex, this.reels);
        this.view.updateVisibleByActiveReelSet();
    };
    ReelController.prototype.initReelActionHandler = function () {
        this.reelActionHandler = es5_1.Container.get(ReelActionHandler_1.ReelActionHandler);
        this.reelActionHandler.initialize(this.reelModel, this.view, this.getReelActionHandlerConfig());
    };
    ReelController.prototype.getReelActionHandlerConfig = function () {
        return {
            startSpin: {
                model: es5_1.Container.get(Spin_1.Spin),
                config: {
                    symbolDefinition: this.componentConfig.symbolDefinition,
                    duration: this.componentConfig.reelDefinition.reelTween.duration
                }
            },
            spinning: { model: es5_1.Container.get(Spinning_1.Spinning) },
            allReelStopped: null,
            spinStop: {
                model: es5_1.Container.get(SpinDown_1.SpinDown),
                config: {
                    anticipationData: this.componentConfig.anticipationData,
                    dropSymbols: this.componentConfig.reelDefinition.dropSymbols,
                    symbolDefinition: this.componentConfig.symbolDefinition,
                    stopReelNormalDelay: this.stopReelDelay.get(this.reelModel.currentReelSetIndex)
                }
            },
            featureAction: null,
            customActionMap: null
        };
    };
    ReelController.prototype.setReelSet = function (set) {
        this.reelModel.currentReelSetIndex = set;
        this.view.updateVisibleByActiveReelSet();
    };
    ReelController.prototype.updateSymbolsOutcome = function () {
        //Override it if you want to modify the symbol outcome like Repacing or wild lock.
    };
    /**
     * Get idleSymbols from reel strips
     * @param strips
     */
    ReelController.prototype.getIdleSymbolFromReelStrip = function (strip) {
        var idleSymbols = new Array();
        var sample = this.currentReelSet[0];
        for (var i = 0; i < sample.symbolsOnReel; i++) {
            idleSymbols.push(strip[i + 1]);
        }
        return idleSymbols;
    };
    ReelController.prototype.idleAnimationsComplete = function () {
        if (this.componentConfig.idleAnimationLoop) {
            this.idleTimer = new SimpleTimer_1.SimpleTimer(this.componentConfig.idleAnimationDelay, this.playIdleAnimations.bind(this));
        }
    };
    ReelController.prototype.playIdleAnimations = function () {
        if (this.componentConfig.idleAnimationLoop) {
            this.view.playIdleAnimationsLoop();
        }
        else {
            this.idleRandomTimer = new SimpleTimer_1.SimpleTimer(this.componentConfig.idleAnimationRandomChance.time, this.view.playRandomIdleAnimations.bind(this.view), true);
        }
    };
    ReelController.prototype.executeFeatureAction = function (data) {
        var _this = this;
        this.reelActionHandler.featureAction(data).then(function () {
            _this.finishStateAction();
        });
    };
    //#region STATE_FUNCTIONS
    ReelController.prototype.baseGameIdle = function () {
        this.view.deleteAllAnimations();
        this.view.setSymbolsStateForAll(ReelsEnums_1.SymbolState.STATIC);
        this.idleTimer = new SimpleTimer_1.SimpleTimer(this.componentConfig.idleAnimationDelay, this.playIdleAnimations.bind(this));
        this.finishStateAction();
    };
    ReelController.prototype.startSpin = function () {
        var _this = this;
        this.resetReels();
        this.reelModel.reset();
        this.reelActionHandler.startSpin({
            reels: this.activeReelsID,
            spinDirection: this.spinDirection
        }).then(function () {
            _this.finishStateAction();
        });
    };
    ReelController.prototype.respin = function (index) {
        this.resetReels();
        this.reelActionHandler.startSpin({
            reels: [index],
            spinDirection: this.spinDirection
        });
        this.finishStateAction();
    };
    ReelController.prototype.freeRespinReels = function (data) {
        var _this = this;
        //TODO
        this.reelActionHandler.featureAction(data).then(function () {
            GlobalDispatcher_1.GlobalDispatcher.dispatchIntoExpectedState(SlotEvent_1.SlotEvent.RESPIN_REELS, _this.stateNames.freeRespinReels);
            _this.finishStateAction();
        });
    };
    ReelController.prototype.wildLockTriggered = function (data) {
        //TODO
        this.executeFeatureAction(data);
    };
    ReelController.prototype.spinning = function () {
        this.normalTimer = new SimpleTimer_1.SimpleTimer(this.componentConfig.reelStopNormalTime, this.onSpinningComepleted.bind(this));
    };
    ReelController.prototype.spinStop = function (stateData) {
        var _this = this;
        if (stateData && stateData.reelIndexes) {
            this.reelModel.isLegalResponse = true;
            this.reelModel.currentSymbolsOutcome = stateData.reelIndexes.slice(0);
            this.reelModel.setSymbolOutcome(stateData.reelIndexes);
            this.reelModel.setScatterDropped(stateData.reelIndexes);
        }
        else {
            this.reelModel.isLegalResponse = false;
        }
        this.reelActionHandler.spinStop(__assign({ reels: this.activeReelsID, spinDirection: this.spinDirection }, stateData)).then(function () {
            _this.finishStateAction();
        });
    };
    ReelController.prototype.pickFeature = function () {
        this.view.visible = false;
        this.finishStateAction();
    };
    ReelController.prototype.transitionToFreeSpins = function () {
        this.setReelSet(ReelConfig_1.ReelSet.FEATURE);
        this.reelModel.lastSymbolsOutcome = this.reelModel.currentSymbolsOutcome.slice(0);
        if (!this.isFeatureReelsInited) {
            this.initReelStripViewAndModel(this.initData.strips, this.initData.idleSymbols);
            this.isFeatureReelsInited = true;
        }
        this.setSymbolsToTransition(this.reelModel.lastSymbolsOutcome);
        this.view.positionUpdateOnTransition();
        this.view.visible = true;
        this.finishStateAction();
    };
    ReelController.prototype.freeSpinsIntroPopup = function () {
        this.view.setSymbolsStateForAll(ReelsEnums_1.SymbolState.STATIC);
        this.finishStateAction();
    };
    ReelController.prototype.freeSpinsOutroPopup = function () {
        this.view.cleanAllOverlays();
        this.finishStateAction();
    };
    ReelController.prototype.freeSpinsStart = function () {
        this.startSpin();
    };
    ReelController.prototype.freeSpinning = function () {
        this.spinning();
    };
    ReelController.prototype.freeSpinsStop = function (stateData) {
        this.spinStop(stateData);
    };
    ReelController.prototype.freeRespinsStop = function (stateData) {
        this.freeSpinsStop(stateData);
    };
    ReelController.prototype.replacingSymbols = function (data) {
        //TODO
        this.executeFeatureAction(data);
    };
    ReelController.prototype.transitionToBaseGame = function () {
        this.setReelSet(ReelConfig_1.ReelSet.BASE);
        this.setSymbolsToTransition(this.reelModel.currentSymbolsOutcome);
        this.view.positionUpdateOnTransition();
        this.view.visible = true;
        this.finishStateAction();
    };
    ReelController.prototype.setSymbolsToTransition = function (symbolsOutcome) {
        var _this = this;
        symbolsOutcome.forEach(function (reel, reelIndex) {
            reel.forEach(function (symbol, symbolIndex) {
                _this.view.setSymbolNameWithState({
                    reelIndex: reelIndex,
                    symbolIndex: symbolIndex
                }, symbol, ReelsEnums_1.SymbolState.STATIC);
            });
        });
    };
    /**
     * player clicked spin for skip spinning animation
     */
    ReelController.prototype.skip_spinning = function () {
        this.normalTimer.stop();
        this.reelModel.isFastStopPending = true;
        this.finishStateAction();
    };
    /**
     * player clicked spin for skip stop animations
     */
    ReelController.prototype.skip_spinStop = function () {
        this.reelModel.isFastStopPending = true;
    };
    ReelController.prototype.skip_freeSpinning = function () {
        this.skip_spinning();
    };
    ReelController.prototype.skip_freeSpinsStop = function () {
        this.skip_spinStop();
    };
    //#endregion STATE_FUNCTIONS
    /**
     * Triggered when minimum spinning duration elapsed.
     *
     * @protected
     * @memberof ReelController
     */
    ReelController.prototype.onSpinningComepleted = function () {
        this.reelActionHandler.spinning(null);
        this.finishStateAction();
    };
    /**
     * spin timeout handler
     */
    ReelController.prototype.onSpinTimeout = function () {
        if (this.currentStateName !== this.stateNames.spinStop) {
            console.error('server spin response timeout');
        }
    };
    /**
     * spin timeout handler
     */
    ReelController.prototype.onFreeSpinTimeout = function () {
        if (this.currentStateName !== this.stateNames.freeSpinsStop) {
            console.error('server free spin response timeout');
        }
    };
    ReelController.prototype.resetReels = function () {
        this.view.deleteAllAnimations();
        this.view.setSymbolsStateForAll(ReelsEnums_1.SymbolState.STATIC);
        this.view.cleanOverlays([this.view.baseOverlayIndex]);
        this.view.resetOverlay(this.view.baseOverlayIndex);
        if (this.idleTimer != null) {
            this.idleTimer.stop();
        }
        if (this.idleRandomTimer != null) {
            this.idleRandomTimer.stop();
        }
    };
    ReelController.prototype.setState = function (state) {
        if (this.reelActionHandler) {
            this.reelActionHandler.setState(state);
        }
        return _super.prototype.setState.call(this, state);
    };
    var _a;
    ReelController.SHOW_WIN_LINE_NOTIFICATION = 'reelsShowWinLineNotification';
    ReelController.ANTICIPATE_REEL_NOTIFICATION = 'anticipateReel';
    ReelController.ANTICIPATE_END_NOTIFICATION = 'anticipateEnd';
    ReelController = __decorate([
        __param(0, es5_1.Inject),
        __metadata("design:paramtypes", [typeof (_a = typeof ReelControllerView_1.ReelControllerView !== "undefined" && ReelControllerView_1.ReelControllerView) === "function" && _a || Object])
    ], ReelController);
    return ReelController;
}(SlotCompController_1.SlotCompController));
exports.ReelController = ReelController;


/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var MiniSignal = __webpack_require__(3);
var tween_js_1 = __webpack_require__(47);
var pixi_js_1 = __webpack_require__(4);
var SimpleTween_1 = __webpack_require__(27);
var Animation_1 = __webpack_require__(26);
var AbstractSymbol_1 = __webpack_require__(230);
var ReelsEnums_1 = __webpack_require__(37);
var BaseSymbol = /** @class */ (function (_super) {
    __extends(BaseSymbol, _super);
    function BaseSymbol() {
        var _this = _super.call(this) || this;
        _this.animationCompleteSignal = new MiniSignal();
        _this.symbolLayer = new pixi_js_1.Sprite();
        _this.symbolLayer.anchor.set(0.5, 0.5);
        _this.textureName = '';
        _this.animationLayer = new pixi_js_1.Container();
        _this._symbolContainer = new pixi_js_1.Container();
        _this._symbolContainer.name = 'symbolContainer';
        _this._symbolContainer.addChild(_this.symbolLayer);
        _this._symbolContainer.addChild(_this.animationLayer);
        return _this;
    }
    Object.defineProperty(BaseSymbol.prototype, "anchor", {
        get: function () {
            return this.symbolLayer.anchor;
        },
        set: function (value) {
            this.symbolLayer.anchor = value;
            if (this.itemAnimation !== undefined) {
                this.itemAnimation.anchor = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    BaseSymbol.addWinAnimationOverrides = function (symbolNames, tweenData) {
        this.winAnimationOverrides = symbolNames;
        this.winTweenData = tweenData;
    };
    BaseSymbol.prototype.setId = function (id) {
        this.id = id;
    };
    BaseSymbol.prototype.setConfig = function (config) {
        this.config = config;
    };
    BaseSymbol.prototype.setSymbolNameWithState = function (symbolName, state) {
        this.symbolName = symbolName;
        this.setSymbolState(state);
    };
    BaseSymbol.prototype.setSymbolState = function (state) {
        if (this.textureName == this.getFullSymbolName(state)) {
            return;
        }
        this.symbolState = state;
        var texture;
        try {
            this.textureName = this.getFullSymbolName(state);
            texture = pixi_js_1.Sprite.fromFrame(this.textureName).texture;
        }
        catch (e) {
            if (state == ReelsEnums_1.SymbolState.BLUR || state == ReelsEnums_1.SymbolState.LOSE) {
                this.textureName = this.getFullSymbolName(ReelsEnums_1.SymbolState.STATIC);
                texture = pixi_js_1.Sprite.fromFrame(this.textureName).texture;
            }
            else {
                throw 'not found texture, this.textureName = ' + this.textureName;
            }
        }
        var symbolSize = this.getSymbolSize();
        this.symbolLayer.position.set(symbolSize.width / 2, symbolSize.height / 2);
        this.symbolLayer.texture = texture;
    };
    BaseSymbol.prototype.getSymbolSize = function () {
        var size = {
            width: this.config.generalSymbol.width,
            height: this.config.generalSymbol.height,
        };
        if (this.config.specialSymbol[this.symbolName]) {
            var symbol = this.config.specialSymbol[this.symbolName];
            size.width = symbol.width;
            size.height = symbol.height;
        }
        return size;
    };
    BaseSymbol.prototype.getAssetPostfixForState = function (state) {
        switch (state) {
            case ReelsEnums_1.SymbolState.STATIC:
                return ReelsEnums_1.SymbolStatePostfix.STATIC;
            case ReelsEnums_1.SymbolState.LOSE:
                return ReelsEnums_1.SymbolStatePostfix.LOSE;
            case ReelsEnums_1.SymbolState.BLUR:
                return ReelsEnums_1.SymbolStatePostfix.BLUR;
        }
    };
    BaseSymbol.prototype.deleteAnimation = function () {
        this.stopAnimation();
        this.stopTweens();
        this.resetSymbol();
        this.animationLayer.removeChildren();
        this.symbolLayer.visible = true;
    };
    BaseSymbol.prototype.stopAnimation = function () {
        if (this.itemAnimation != null) {
            this.itemAnimation.gotoAndStop(0);
        }
    };
    BaseSymbol.prototype.stopTweens = function () {
        if (this.animationTween) {
            this.animationTween.stop();
            this.animationTween.stopChainedTweens();
            this.animationTween = undefined;
        }
    };
    BaseSymbol.prototype.resetSymbol = function () {
        this.symbolLayer.scale.set(1, 1);
    };
    BaseSymbol.prototype.playAnimation = function (type, useNativeSpeed) {
        var _this = this;
        if (useNativeSpeed === void 0) { useNativeSpeed = false; }
        this.symbolLayer.visible = true;
        var introAnimation;
        if (type == ReelsEnums_1.SymbolAnimationPostfix.WIN) {
            if (this.isSymbolWinOverriden()) {
                this.playWinAnimationOverride();
                return true;
            }
            introAnimation = Animation_1.Animation.getAnimationFromPool('symbol_' + this.symbolName + ReelsEnums_1.SymbolAnimationPostfix.WIN_INTRO);
        }
        this.itemAnimation = Animation_1.Animation.getAnimationFromPool('symbol_' + this.symbolName + type);
        if (this.itemAnimation == undefined) {
            return false;
        }
        this.symbolLayer.visible = false;
        if (!useNativeSpeed) {
            this.itemAnimation.animationSpeed = this.itemAnimation.totalFrames / BaseSymbol.SYMBOL_ANIMATION_FRAME_COUNT;
        }
        this.itemAnimation.anchor.set(0.5);
        var symbolSize = this.getSymbolSizeByName(this.symbolName);
        this.itemAnimation.x = symbolSize.width / 2;
        this.itemAnimation.y = symbolSize.height / 2;
        this.animationLayer.removeChildren();
        this.animationLayer.addChild(this.itemAnimation);
        this.itemAnimation.gotoAndStop(0);
        this.itemAnimation.loop = false;
        this.itemAnimation.onComplete = this.onCompleteItemAnimation.bind(this, type); // todo sometimes lost context
        if (introAnimation != undefined) {
            this.itemAnimation.visible = false;
            introAnimation.anchor.set(0.5);
            introAnimation.x = symbolSize.width / 2;
            introAnimation.y = symbolSize.height / 2;
            introAnimation.gotoAndStop(0);
            introAnimation.loop = false;
            introAnimation.visible = true;
            this.animationLayer.addChild(introAnimation);
            introAnimation.onComplete = function () {
                introAnimation.visible = false;
                introAnimation.removeChild(introAnimation);
                introAnimation = undefined;
                if (_this.itemAnimation != undefined) {
                    _this.itemAnimation.visible = true;
                    _this.itemAnimation.gotoAndPlay(0);
                }
                else {
                    _this.animationCompleteSignal.dispatch(_this.id, ReelsEnums_1.SymbolAnimationPostfix.WIN);
                }
            };
            introAnimation.gotoAndPlay(0);
        }
        else {
            this.itemAnimation.gotoAndPlay(0);
        }
        return true;
    };
    BaseSymbol.prototype.playWinAnimationOverride = function () {
        var _this = this;
        this.stopTweens();
        this.setSymbolState(ReelsEnums_1.SymbolState.STATIC);
        var tweenData = { scale: 1 };
        var tweenOut = new SimpleTween_1.SimpleTween(tweenData)
            .to({ scale: 1 }, BaseSymbol.winTweenData.outDuration)
            .delay(BaseSymbol.winTweenData.outDelay)
            .onUpdate(function () {
            _this.symbolLayer.scale.set(tweenData.scale, tweenData.scale);
        })
            .onComplete(this.onCompleteItemAnimation.bind(this, ReelsEnums_1.SymbolAnimationPostfix.WIN));
        var tweenIn = new SimpleTween_1.SimpleTween(tweenData)
            .to({ scale: BaseSymbol.winTweenData.scale }, BaseSymbol.winTweenData.inDuration)
            .onUpdate(function () {
            _this.symbolLayer.scale.set(tweenData.scale, tweenData.scale);
        })
            .easing(BaseSymbol.winTweenData.ease ? BaseSymbol.winTweenData.ease : tween_js_1.Easing.Linear.None)
            .chain(tweenOut);
        this.animationTween = tweenIn.start();
    };
    BaseSymbol.prototype.onCompleteItemAnimation = function (type) {
        this.animationCompleteSignal.dispatch(this.position, type);
    };
    BaseSymbol.prototype.getFullSymbolName = function (state) {
        if (state === void 0) { state = this.symbolState; }
        return 'symbol_' + this.symbolName + this.getAssetPostfixForState(state) + '.png';
    };
    Object.defineProperty(BaseSymbol.prototype, "symbolContainer", {
        get: function () {
            return this._symbolContainer;
        },
        enumerable: true,
        configurable: true
    });
    BaseSymbol.prototype.isSymbolWinOverriden = function () {
        return BaseSymbol.winAnimationOverrides.indexOf(this.symbolName) != -1;
    };
    BaseSymbol.prototype.playShaking = function () {
        if (this.config.shakeConfig == undefined) {
            return;
        }
        this.playShakingIn();
    };
    BaseSymbol.prototype.stopShaking = function (restorePosX, restorePosY) {
        if (this.shakingTweenTo != undefined) {
            this.shakingTweenTo.stop();
            this.shakingTweenTo = undefined;
        }
        if (this.shakingTweenBack != undefined) {
            this.shakingTweenBack.stop();
            this.shakingTweenBack = undefined;
        }
        this._symbolContainer.x = restorePosX;
        this._symbolContainer.y = restorePosY;
    };
    BaseSymbol.prototype.playShakingIn = function () {
        var _this = this;
        var intensity = this.config.shakeConfig.intensity;
        var delay = this.config.shakeConfig.delay;
        this.shakingTweenTo = new SimpleTween_1.SimpleTween(this._symbolContainer)
            .to({ x: this._symbolContainer.x + intensity, y: this._symbolContainer.y + intensity }, delay)
            .onComplete(function () {
            _this.shakingTweenTo = new SimpleTween_1.SimpleTween(_this._symbolContainer)
                .to({ x: _this._symbolContainer.x - intensity, y: _this._symbolContainer.y - intensity }, delay)
                .onComplete(function () {
                _this.playShakingOut();
            })
                .start();
        })
            .start();
    };
    BaseSymbol.prototype.playShakingOut = function () {
        var _this = this;
        var intensity = this.config.shakeConfig.intensity;
        var delay = this.config.shakeConfig.delay;
        this.shakingTweenBack = new SimpleTween_1.SimpleTween(this._symbolContainer)
            .to({ x: this._symbolContainer.x + intensity, y: this._symbolContainer.y - intensity }, delay)
            .onComplete(function () {
            _this.shakingTweenBack = new SimpleTween_1.SimpleTween(_this._symbolContainer)
                .to({ x: _this._symbolContainer.x - intensity, y: _this._symbolContainer.y + intensity }, delay)
                .onComplete(function () {
                _this.playShakingIn();
            })
                .start();
        })
            .start();
    };
    BaseSymbol.prototype.getSymbolSizeByName = function (symbolName) {
        if (this.config.specialSymbol[symbolName]) {
            return this.config.specialSymbol[symbolName];
        }
        else {
            return this.config.generalSymbol;
        }
    };
    BaseSymbol.SYMBOL_ANIMATION_FRAME_COUNT = 60;
    BaseSymbol.winAnimationOverrides = new Array();
    return BaseSymbol;
}(AbstractSymbol_1.AbstractSymbol));
exports.BaseSymbol = BaseSymbol;


/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var SlotStates_1 = __webpack_require__(31);
var UILocalButtonsController_1 = __webpack_require__(110);
var SlotUILocalButtonsController = /** @class */ (function (_super) {
    __extends(SlotUILocalButtonsController, _super);
    function SlotUILocalButtonsController() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SlotUILocalButtonsController.prototype.gameControllerButtonAction = function (action, data) {
        this.gameController.handleButtonAction(action, data);
    };
    var _a;
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof SlotStates_1.SlotStates !== "undefined" && SlotStates_1.SlotStates) === "function" && _a || Object)
    ], SlotUILocalButtonsController.prototype, "gameStates", void 0);
    SlotUILocalButtonsController = __decorate([
        es5_1.Singleton
    ], SlotUILocalButtonsController);
    return SlotUILocalButtonsController;
}(UILocalButtonsController_1.UILocalButtonsController));
exports.SlotUILocalButtonsController = SlotUILocalButtonsController;


/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var TsMap_1 = __webpack_require__(2);
var MarqueeConfig_1 = __webpack_require__(222);
var SlotMarqueeConfig = /** @class */ (function (_super) {
    __extends(SlotMarqueeConfig, _super);
    function SlotMarqueeConfig() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.stateToTextMap = new TsMap_1.TsMap([
            ['baseGameIdle', ['spinToPlay']],
            ['spinning', ['goodLuck']],
            ['freeSpinsIntroPopup', ['goodLuck']]
        ]);
        _this.marqueeLabelTotalWinKey = 'marqueeTotalWin';
        _this.marqueeLabelLineWinKey = 'marqueeLineWin';
        _this.marqueeLabelAllPaysWinKey = 'marqueeAllPaysWin';
        _this.marqueeLabelPrefeatureNoWinKey = 'marqueePrefeatureNoWin';
        _this.marqueeLabelFeatureTotalWinKey = 'marqueeFeatureTotalWin';
        return _this;
    }
    return SlotMarqueeConfig;
}(MarqueeConfig_1.MarqueeConfig));
exports.SlotMarqueeConfig = SlotMarqueeConfig;


/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var SlotNPSModel = /** @class */ (function () {
    function SlotNPSModel() {
    }
    Object.defineProperty(SlotNPSModel.prototype, "playerInfo", {
        get: function () {
            return this._playerInfo;
        },
        set: function (value) {
            this._playerInfo = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SlotNPSModel.prototype, "makeBetInfo", {
        get: function () {
            return this._makeBetInfo;
        },
        set: function (value) {
            this._makeBetInfo = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SlotNPSModel.prototype, "makeSeedInfo", {
        get: function () {
            return this._makeSeedInfo;
        },
        set: function (value) {
            this._makeSeedInfo = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SlotNPSModel.prototype, "fraction", {
        get: function () {
            return this._fraction;
        },
        set: function (value) {
            this._fraction = value;
        },
        enumerable: true,
        configurable: true
    });
    SlotNPSModel = __decorate([
        es5_1.Singleton
    ], SlotNPSModel);
    return SlotNPSModel;
}());
exports.SlotNPSModel = SlotNPSModel;


/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var CompController_1 = __webpack_require__(43);
var GlobalDispatcher_1 = __webpack_require__(7);
var ReelsConfig_1 = __webpack_require__(52);
var WinDisplayView_1 = __webpack_require__(120);
var WinDisplayConfig_1 = __webpack_require__(239);
var WinDisplayController = /** @class */ (function (_super) {
    __extends(WinDisplayController, _super);
    function WinDisplayController(view) {
        return _super.call(this, view) || this;
    }
    WinDisplayController.prototype.init = function () {
        var config = this.gameConfig.getConfig(WinDisplayConfig_1.WinDisplayConfig);
        this.view.setReelsConfig(this.gameConfig.getConfig(ReelsConfig_1.ReelsConfig));
        this.view.initialize(config);
        this.finishStateAction();
    };
    WinDisplayController.prototype.addEventListeners = function () {
        GlobalDispatcher_1.GlobalDispatcher.addListener(this, WinDisplayController.SHOW_WIN_LINE, this.onShowWinLine);
    };
    WinDisplayController.prototype.baseGameIdle = function () {
        this.view.hide();
        this.finishStateAction();
    };
    WinDisplayController.prototype.onShowWinLine = function (e) {
        this.view.showPayline(e.data);
    };
    var _a;
    WinDisplayController.SHOW_WIN_LINE = 'paylinesShowWinLine';
    WinDisplayController.SHOW_WIN_TABLE = 'showWinTable';
    WinDisplayController = __decorate([
        __param(0, es5_1.Inject),
        __metadata("design:paramtypes", [typeof (_a = typeof WinDisplayView_1.WinDisplayView !== "undefined" && WinDisplayView_1.WinDisplayView) === "function" && _a || Object])
    ], WinDisplayController);
    return WinDisplayController;
}(CompController_1.CompController));
exports.WinDisplayController = WinDisplayController;


/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var UIButtonId_1 = __webpack_require__(349);
/**
 * Slot Button ID. Format: {elementType}_{elementName}
 *
 * @export
 * @class SlotUIButtonId
 * @extends {UIButtonId}
 */
var SlotUIButtonId = /** @class */ (function (_super) {
    __extends(SlotUIButtonId, _super);
    function SlotUIButtonId() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SlotUIButtonId.BUTTON_AUTO_PLAY_SELECT_SPINS = 'BUTTON_AUTO_PLAY_SELECT_SPINS';
    // spin
    SlotUIButtonId.BUTTON_START_SPIN = 'BUTTON_START_SPIN';
    SlotUIButtonId.BUTTON_STOP_SPIN = 'BUTTON_STOP_SPIN';
    // turbo
    SlotUIButtonId.BUTTON_TURBO_MODE = 'BUTTON_TURBO_MODE';
    // demo
    SlotUIButtonId.BUTTON_SHOW_DEMO_PANEL = 'BUTTON_SHOW_DEMO_PANEL';
    // Auto Play Panel
    SlotUIButtonId.BUTTON_SHOW_AUTO_PLAY = 'BUTTON_SHOW_AUTO_PLAY';
    SlotUIButtonId.TOGGLE_SINGLE_WIN_LIMIT = 'TOGGLE_SINGLE_WIN_LIMIT';
    SlotUIButtonId.TOGGLE_WIN_LIMIT = 'TOGGLE_WIN_LIMIT';
    SlotUIButtonId.TOGGLE_LOSE_LIMIT = 'TOGGLE_LOSE_LIMIT';
    SlotUIButtonId.BUTTON_AUTO_PLAY_SPIN = 'BUTTON_AUTO_PLAY_SPIN';
    SlotUIButtonId.BUTTON_AUTO_PLAY_BACK = 'BUTTON_AUTO_PLAY_BACK';
    SlotUIButtonId.BUTTON_STOP_AUTO_PLAY = 'BUTTON_STOP_AUTO_PLAY';
    // Bet Panel
    SlotUIButtonId.BUTTON_HIDE_BET_OPTIONS = 'BUTTON_HIDE_BET_OPTIONS';
    SlotUIButtonId.BUTTON_CONFIRM_BET_OPTIONS = 'BUTTON_CONFIRM_BET_OPTIONS';
    SlotUIButtonId.BUTTON_BET_MAX = 'BUTTON_BET_MAX';
    SlotUIButtonId.BUTTON_BET_INCREASE = 'BUTTON_BET_INCREASE';
    SlotUIButtonId.BUTTON_BET_DECREASE = 'BUTTON_BET_DECREASE';
    SlotUIButtonId.BUTTON_BET_INCREASE_END = 'BUTTON_BET_INCREASE_END';
    SlotUIButtonId.BUTTON_BET_DECREASE_END = 'BUTTON_BET_DECREASE_END';
    SlotUIButtonId.BUTTON_LINE_INCREASE = 'BUTTON_LINE_INCREASE';
    SlotUIButtonId.BUTTON_LINE_DECREASE = 'BUTTON_LINE_DECREASE';
    SlotUIButtonId.BUTTON_LINE_INCREASE_END = 'BUTTON_LINE_INCREASE_END';
    SlotUIButtonId.BUTTON_LINE_DECREASE_END = 'BUTTON_LINE_DECREASE_END';
    return SlotUIButtonId;
}(UIButtonId_1.UIButtonId));
exports.SlotUIButtonId = SlotUIButtonId;


/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var MiniSignal = __webpack_require__(3);
var pixi_js_1 = __webpack_require__(4);
var MLUIPanel_1 = __webpack_require__(94);
/**
 * A Base panel that includes a blurred background of the current viewport state
 */
var MLUIFullScreenPanel = /** @class */ (function (_super) {
    __extends(MLUIFullScreenPanel, _super);
    function MLUIFullScreenPanel() {
        var _this = _super.call(this) || this;
        _this.showPopupSignal = new MiniSignal();
        _this.hidePopupSignal = new MiniSignal();
        return _this;
    }
    MLUIFullScreenPanel.prototype.addChild = function (child) {
        if (this.isCoreElement(child)) {
            this.orientationCoreElements.push(child);
        }
        return this.panelContainer.addChild(child);
    };
    MLUIFullScreenPanel.prototype.addChildAt = function (child, index) {
        if (this.isCoreElement(child)) {
            this.orientationCoreElements.push(child);
        }
        return this.panelContainer.addChildAt(child, index);
    };
    /**
     * Creates elements for panel
     */
    MLUIFullScreenPanel.prototype.createElements = function (config) {
        _super.prototype.createElements.call(this, config);
        this.closedContainer = new pixi_js_1.Container();
        this.mainContainer.addChild(this.closedContainer);
        this.panelContainer = new pixi_js_1.Container();
        this.mainContainer.addChild(this.panelContainer);
        this.createBackground();
    };
    MLUIFullScreenPanel.prototype.createBackground = function () {
        this.background = new pixi_js_1.Graphics();
        this.background.beginFill(0, 0.8);
        this.background.drawRect(0, 0, this.viewport.width, this.viewport.height);
        this.background.endFill();
        this.background.interactive = true;
        this.panelContainer.addChildAt(this.background, 0);
    };
    MLUIFullScreenPanel.prototype.showPopup = function () {
        this.panelContainer.visible = true;
        this.closedContainer.visible = false;
        this.showPopupSignal.dispatch();
    };
    MLUIFullScreenPanel.prototype.hidePopup = function () {
        this.panelContainer.visible = false;
        this.closedContainer.visible = true;
        this.hidePopupSignal.dispatch();
    };
    MLUIFullScreenPanel.prototype.layoutElements = function () {
        _super.prototype.layoutElements.call(this);
        if (this.background) {
            this.background.height = this.viewport.height;
            this.background.width = this.viewport.width;
        }
    };
    return MLUIFullScreenPanel;
}(MLUIPanel_1.MLUIPanel));
exports.MLUIFullScreenPanel = MLUIFullScreenPanel;


/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var Helper_1 = __webpack_require__(5);
var Translator_1 = __webpack_require__(25);
var GlobalDispatcher_1 = __webpack_require__(7);
var ExternalModuleController_1 = __webpack_require__(781);
var MLUIExternalModuleManager_1 = __webpack_require__(404);
var MLUIExternalModuleController = /** @class */ (function (_super) {
    __extends(MLUIExternalModuleController, _super);
    function MLUIExternalModuleController() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * marge localisation map by given language keys
     * @param loader
     */
    MLUIExternalModuleController.prototype.getLocalisationMap = function (loader) {
        var languageData = loader.resources[this.translator.language].data;
        var localisationMap = languageData[this.config.localisationKeys[0]] || {};
        for (var i = 1; i < this.config.localisationKeys.length; i++) {
            if (languageData[this.config.localisationKeys[i]]) {
                localisationMap = Helper_1.Helper.mergeTwoObjects(localisationMap, languageData[this.config.localisationKeys[i]]);
            }
        }
        return localisationMap;
    };
    MLUIExternalModuleController.prototype.getExternalModuleConfig = function (data) {
        return this.config;
    };
    MLUIExternalModuleController.prototype.getPortraitContainerConfig = function () {
        return this.config.portraitLayoutConfig.containerConfig;
    };
    MLUIExternalModuleController.prototype.getLandscapeContainerConfig = function () {
        return this.config.landscapeLayoutConfig.containerConfig;
    };
    MLUIExternalModuleController.prototype.onOpen = function () {
        _super.prototype.onOpen.call(this);
        GlobalDispatcher_1.GlobalDispatcher.dispatchIntoAllStates(MLUIExternalModuleController.OPEN_EXTERNAL_MODULE);
        return null;
    };
    MLUIExternalModuleController.prototype.onClose = function () {
        _super.prototype.onClose.call(this);
        GlobalDispatcher_1.GlobalDispatcher.dispatchIntoAllStates(MLUIExternalModuleController.CLOSE_EXTERNAL_MODULE);
        return null;
    };
    var _a, _b;
    MLUIExternalModuleController.CLOSE_EXTERNAL_MODULE = 'closeExternalModule';
    MLUIExternalModuleController.OPEN_EXTERNAL_MODULE = 'openExternalModule';
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof Translator_1.Translator !== "undefined" && Translator_1.Translator) === "function" && _a || Object)
    ], MLUIExternalModuleController.prototype, "translator", void 0);
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_b = typeof MLUIExternalModuleManager_1.MLUIExternalModuleManager !== "undefined" && MLUIExternalModuleManager_1.MLUIExternalModuleManager) === "function" && _b || Object)
    ], MLUIExternalModuleController.prototype, "externalModule", void 0);
    return MLUIExternalModuleController;
}(ExternalModuleController_1.ExternalModuleController));
exports.MLUIExternalModuleController = MLUIExternalModuleController;


/***/ }),
/* 165 */,
/* 166 */,
/* 167 */,
/* 168 */,
/* 169 */,
/* 170 */,
/* 171 */,
/* 172 */,
/* 173 */,
/* 174 */,
/* 175 */,
/* 176 */,
/* 177 */,
/* 178 */,
/* 179 */,
/* 180 */,
/* 181 */,
/* 182 */,
/* 183 */,
/* 184 */,
/* 185 */,
/* 186 */,
/* 187 */,
/* 188 */,
/* 189 */,
/* 190 */,
/* 191 */,
/* 192 */,
/* 193 */,
/* 194 */,
/* 195 */,
/* 196 */,
/* 197 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var MiniSignal = __webpack_require__(3);
var es5_1 = __webpack_require__(0);
var ErrorHandleService = /** @class */ (function () {
    function ErrorHandleService() {
        this.onReceiveErrorSignal = new MiniSignal();
    }
    ErrorHandleService.prototype.init = function (formatter) {
        this.formatter = formatter;
    };
    ErrorHandleService.prototype.onReceiveError = function (e) {
        if (!this.formatter) {
            return;
        }
        var data = this.formatter.processIncomingMessage(e);
        if (data) {
            if (data.stack) {
                console.error(data.stack);
            }
        }
        this.onReceiveErrorSignal.dispatch(data);
    };
    ErrorHandleService = __decorate([
        es5_1.Singleton
    ], ErrorHandleService);
    return ErrorHandleService;
}());
exports.ErrorHandleService = ErrorHandleService;


/***/ }),
/* 198 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var MiniSignal = __webpack_require__(3);
var GameConfig_1 = __webpack_require__(24);
var es5_1 = __webpack_require__(0);
var States_1 = __webpack_require__(74);
var GlobalDispatcher_1 = __webpack_require__(7);
var CoreEvent_1 = __webpack_require__(137);
/**
 * State Machine.
 * Handles scenarios and delivering states to component manager.
 */
var StateMachine = /** @class */ (function () {
    function StateMachine() {
        this.alreadySkipped = false;
        this._states = new Array();
        this.stateIsChangedSignal = new MiniSignal();
        this.finishStackSignal = new MiniSignal();
    }
    Object.defineProperty(StateMachine.prototype, "states", {
        get: function () {
            return this._states;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StateMachine.prototype, "isPause", {
        get: function () {
            return this._isPause;
        },
        set: function (value) {
            this._isPause = value;
            if (!value && this.componentManager.isReadyForNextState) {
                this.goToNextState();
            }
        },
        enumerable: true,
        configurable: true
    });
    StateMachine.prototype.initialize = function (componentManager) {
        this.componentManager = componentManager;
        // If all components are ready to go to the next state, we do it.
        this.componentManager.componentsFinishedStateSignal.add(this.onComponentsFinishedState, this);
    };
    /**
     * Adds new set of states to processing stack
     * @param {Array<CoreState>} states new set to inject
     * @param {boolean} ignoreCurrentFlow if 'true' - SM starts from first state in provided set
     */
    StateMachine.prototype.pushStates = function (states, ignoreCurrentFlow) {
        if (ignoreCurrentFlow === void 0) { ignoreCurrentFlow = false; }
        if (ignoreCurrentFlow) {
            this._states = new Array();
            // We push the current state to queue in order to skip current state
            this._states.push(this.currentState);
        }
        var isEmptyStack = this._states.length == 0;
        this._states = this._states.concat(states);
        if (this.componentManager.isReadyForNextState) {
            if (!isEmptyStack && this.currentState && this.currentState.stateName === this._states[0].stateName) {
                // prevent second time trigger same state
                this._states.shift();
            }
            this.goToNextState();
        }
        else if (ignoreCurrentFlow) {
            this.skipState(this.currentState.stateName);
        }
    };
    StateMachine.prototype.stopCurrentFlow = function () {
        this._states = new Array();
        // We push the current state to queue in order to skip current state
        this._states.push(this.currentState);
        this.skipState(this.currentState.stateName);
    };
    StateMachine.prototype.skipState = function (stateName) {
        if (!this.alreadySkipped) {
            this.alreadySkipped = true;
            if (stateName == this.currentState.stateName) {
                console.log('skip state - ' + this.currentState.stateName);
                this.stateIsChangedSignal.dispatch(StateMachine.PREFIX_SKIP + this.currentState.stateName);
                this.componentManager.skipState(this.currentState);
            }
            else {
                console.warn('try skip state: ' + stateName + ' but current state is: ' + this.currentState.stateName);
            }
        }
    };
    /**
     *  skip n states, current state will be skip, the rest n - 1 states will be IGNORED.
     *
     * @param {number} count
     * @memberof StateMachine
     */
    StateMachine.prototype.skipStates = function (count) {
        var _this = this;
        if (!count) {
            return;
        }
        var currentIndex;
        var skippedCount = 1;
        this._states.forEach(function (state, index) {
            if (state.stateName === _this.currentState.stateName) {
                currentIndex = index;
            }
        });
        while (this._states[currentIndex + 1] !== undefined && skippedCount < count) {
            this._states.splice(currentIndex + 1, 1);
            skippedCount++;
        }
        this.skipState(this.currentState.stateName);
    };
    /**
     * Finish processing of all states from stack.
     */
    StateMachine.prototype.onFinishStack = function () {
        this.finishStackSignal.dispatch();
    };
    StateMachine.prototype.onComponentsFinishedState = function () {
        if (this.componentManager.isReadyForNextState) {
            if (this.currentState.stateName === this.gameStates.init) {
                GlobalDispatcher_1.GlobalDispatcher.dispatchIntoAllStates(CoreEvent_1.CoreEvent.ON_ALL_COMPONENT_INITIALIZED);
            }
            this._states.shift();
            this.goToNextState();
        }
    };
    /**
     * Go to the next state if actions for current state are finished in all components.
     * If we are processing the last state in scenario we invoke this.finishScenario();
     */
    StateMachine.prototype.goToNextState = function () {
        if (this.isPause) {
            return;
        }
        this.alreadySkipped = false;
        if (this._states.length > 0) {
            this.setState(this._states[0]);
        }
        else {
            this.onFinishStack();
        }
    };
    /**
     * Set state for game and all components
     * @param state
     */
    StateMachine.prototype.setState = function (state) {
        console.log('current state - ' + state.stateName);
        this.currentState = state;
        this.stateIsChangedSignal.dispatch(state.stateName, state.stateData);
        this.componentManager.setState(state);
    };
    var _a, _b;
    StateMachine.PREFIX_SKIP = 'skip_';
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof GameConfig_1.GameConfig !== "undefined" && GameConfig_1.GameConfig) === "function" && _a || Object)
    ], StateMachine.prototype, "gameConfig", void 0);
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_b = typeof States_1.States !== "undefined" && States_1.States) === "function" && _b || Object)
    ], StateMachine.prototype, "gameStates", void 0);
    return StateMachine;
}());
exports.StateMachine = StateMachine;


/***/ }),
/* 199 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var TsMap_1 = __webpack_require__(2);
var BaseButtonsStateSet = /** @class */ (function () {
    function BaseButtonsStateSet() {
        this.buttonStates = new TsMap_1.TsMap();
        this.initStates();
    }
    /**
     * to check if a state name contains in buttonStates
     * @param stateName
     */
    BaseButtonsStateSet.prototype.has = function (stateName) {
        return this.buttonStates.has(stateName);
    };
    /**
     * get list of local button behaviours by state name
     * @param stateName
     */
    BaseButtonsStateSet.prototype.get = function (stateName) {
        return this.buttonStates.get(stateName);
    };
    /**
     * set states for the buttons
     */
    BaseButtonsStateSet.prototype.initStates = function () {
        this.buttonStates.set(BaseButtonsStateSet.DEFAULT_TEMPLATE, this.default());
    };
    BaseButtonsStateSet.prototype.default = function () {
        return new TsMap_1.TsMap();
    };
    BaseButtonsStateSet.prototype.init = function () {
        return new TsMap_1.TsMap();
    };
    BaseButtonsStateSet.DEFAULT_TEMPLATE = 'default';
    return BaseButtonsStateSet;
}());
exports.BaseButtonsStateSet = BaseButtonsStateSet;
var BaseButtonBehaviour = /** @class */ (function () {
    function BaseButtonBehaviour(enabled, visible, interactive) {
        if (enabled === void 0) { enabled = true; }
        if (visible === void 0) { visible = true; }
        if (interactive === void 0) { interactive = true; }
        this.enabled = enabled;
        this.visible = visible;
        this.interactive = interactive;
    }
    return BaseButtonBehaviour;
}());
exports.BaseButtonBehaviour = BaseButtonBehaviour;


/***/ }),
/* 200 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var CoreState_1 = __webpack_require__(76);
var Helper_1 = __webpack_require__(5);
/**
 * Contains set of states that describes the game flow.
 */
var Scenario = /** @class */ (function () {
    /**
     * Create clones of states and put them into this.states
     * @param name of scenario
     * @param states order of states
     */
    function Scenario(name, states) {
        var _this = this;
        this._name = name;
        this.states = new Array();
        if (states != undefined) {
            states.forEach(function (element) {
                _this.states.push(new CoreState_1.CoreState(element.stateName, Helper_1.Helper.mergeTwoObjects({}, element.stateData), element.stateGroup));
            });
        }
    }
    Object.defineProperty(Scenario.prototype, "length", {
        get: function () {
            return this.states.length;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Scenario.prototype, "name", {
        get: function () {
            return this._name;
        },
        enumerable: true,
        configurable: true
    });
    Scenario.prototype.addState = function (state) {
        this.states.push(state);
    };
    Scenario.prototype.addStateAt = function (state, index) {
        if (index <= this.states.length - 1) {
            this.states.splice(index, 0, state);
        }
        else {
            throw 'The index [' + index + '] is out of range [' + (this.states.length - 1) + ']';
        }
    };
    Scenario.prototype.setStateData = function (stateName, data, group) {
        if (group === void 0) { group = Helper_1.Helper.EMPTY; }
        this.getStateByName(stateName, group).stateData = data;
    };
    Scenario.prototype.addStateData = function (stateName, data, group) {
        if (group === void 0) { group = Helper_1.Helper.EMPTY; }
        var state = this.getStateByName(stateName, group);
        state.stateData = Helper_1.Helper.mergeTwoObjects(state.stateData, data);
    };
    Scenario.prototype.getStateByName = function (stateName, stateGroup) {
        if (stateGroup === void 0) { stateGroup = Helper_1.Helper.EMPTY; }
        for (var index = 0; index < this.states.length; index++) {
            var state = this.states[index];
            if (state.stateName == stateName && state.stateGroup == stateGroup) {
                return state;
            }
        }
        throw 'invalid name of state: ' + stateName;
    };
    Scenario.prototype.getStatesByGroup = function (stateGroup) {
        var result = [];
        for (var i = 0; i < this.states.length; i++) {
            if (this.states[i].stateGroup === stateGroup) {
                result.push(this.states[i]);
            }
        }
        return result;
    };
    Scenario.prototype.getStates = function () {
        return this.states;
    };
    Scenario.prototype.removeStateByName = function (stateName, stateGroup) {
        if (stateGroup === void 0) { stateGroup = Helper_1.Helper.EMPTY; }
        for (var i = this.states.length - 1; i >= 0; i--) {
            if (this.states[i].stateName === stateName && this.states[i].stateGroup === stateGroup) {
                this.states.splice(i, 1);
            }
        }
    };
    Scenario.prototype.removeStatesByGroup = function (stateGroup) {
        for (var i = this.states.length - 1; i >= 0; i--) {
            if (this.states[i].stateGroup === stateGroup) {
                this.states.splice(i, 1);
            }
        }
    };
    Scenario.prototype.getGroupsByStateName = function (stateName) {
        var result = [];
        for (var i = 0; i < this.states.length; i++) {
            if (this.states[i].stateName === stateName) {
                result.push(this.states[i].stateGroup);
            }
        }
        return result;
    };
    Scenario.prototype.clone = function () {
        return new Scenario(this.name, this.states);
    };
    Scenario.prototype.addScenario = function (scenarioToAdd) {
        var _this = this;
        scenarioToAdd.states.forEach(function (state) {
            _this.states.push(state);
        });
    };
    Scenario.prototype.hasStateName = function (stateName, stateGroup) {
        if (stateGroup === void 0) { stateGroup = Helper_1.Helper.EMPTY; }
        for (var index = 0; index < this.states.length; index++) {
            var state = this.states[index];
            if (state.stateName == stateName && state.stateGroup == stateGroup) {
                return true;
            }
        }
        return false;
    };
    Scenario.prototype.hasStateGroup = function (stateGroup) {
        for (var i = 0; i < this.states.length; i++) {
            if (this.states[i].stateGroup === stateGroup) {
                return true;
            }
        }
        return false;
    };
    Scenario.prototype.setAllStatesGroup = function (stateGroup) {
        for (var i = 0; i < this.states.length; i++) {
            this.states[i].stateGroup = stateGroup;
        }
    };
    return Scenario;
}());
exports.Scenario = Scenario;


/***/ }),
/* 201 */,
/* 202 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var GameConfig_1 = __webpack_require__(24);
var UrlParameters_1 = __webpack_require__(14);
var PartnerHelper = /** @class */ (function () {
    function PartnerHelper() {
    }
    Object.defineProperty(PartnerHelper.prototype, "partner", {
        get: function () {
            return this.partnerCode;
        },
        enumerable: true,
        configurable: true
    });
    PartnerHelper.prototype.init = function () {
        this.setPartner();
    };
    PartnerHelper.prototype.setPartner = function () {
        var partner = this.partnerCodeRouter();
        var partnerConfig = this.gameConfig.mainConfig.partnerConfig;
        if (partnerConfig != undefined) {
            if (partner == undefined || !partnerConfig.certainPartners.includes(partner)) {
                partner = partnerConfig.defaultPartner;
            }
        }
        this.partnerCode = partner;
    };
    PartnerHelper.prototype.partnerCodeRouter = function () {
        var partner = UrlParameters_1.UrlParameters.partnerCode;
        if (partner == 'GPKTEST' || partner == 'GPK_Staging') {
            partner = 'GPK';
        }
        if (partner == 'GTDemo') {
            partner = 'GT';
        }
        return partner;
    };
    var _a;
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof GameConfig_1.GameConfig !== "undefined" && GameConfig_1.GameConfig) === "function" && _a || Object)
    ], PartnerHelper.prototype, "gameConfig", void 0);
    PartnerHelper = __decorate([
        es5_1.Singleton
    ], PartnerHelper);
    return PartnerHelper;
}());
exports.PartnerHelper = PartnerHelper;


/***/ }),
/* 203 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var TsMap_1 = __webpack_require__(2);
var Helper_1 = __webpack_require__(5);
var Actions_1 = __webpack_require__(22);
var Viewport_1 = __webpack_require__(6);
var Button_1 = __webpack_require__(19);
/**
 * WITH_OPTION: The dialog with YES or NO, and close button
 * WITHOUT_OPTION: The dialog only with close button
 * FULL_SCREEN: The dialog which has no button
 *
 * @export
 * @enum {number}
 */
var ErrorDialogType;
(function (ErrorDialogType) {
    ErrorDialogType[ErrorDialogType["WITH_OPTION"] = 0] = "WITH_OPTION";
    ErrorDialogType[ErrorDialogType["WITHOUT_OPTION"] = 1] = "WITHOUT_OPTION";
    ErrorDialogType[ErrorDialogType["FULL_SCREEN"] = 2] = "FULL_SCREEN";
})(ErrorDialogType = exports.ErrorDialogType || (exports.ErrorDialogType = {}));
var ErrorDialogConfig = /** @class */ (function () {
    function ErrorDialogConfig() {
        this.name = 'errorDialog';
        this.background = { color: 0, alpha: 0.8 };
        this.closeButton = {
            elementConfig: {
                name: 'closeButton',
                position: {
                    x: 648,
                    y: 96
                },
                anchor: { x: 0.5, y: 0.5 },
                id: 'ERROR_CLOSE',
                productLine: 'NGF',
                assetName: 'close',
                action: Actions_1.Actions.CLOSE_ERROR_DIALOG,
                isLocal: true,
                visible: false,
                isOrientationSupported: true
            },
            elementType: Button_1.Button.elementType
        };
        this.errorCode = {
            name: 'errorCode',
            key: '',
            style: {
                fontFamily: Helper_1.Helper.DEFAULT_FONTS,
                fontSize: 48,
                fontWeight: 'bold',
                fill: 'white',
                align: 'left',
                padding: 50
            },
            anchor: { x: 0.5, y: 0.5 }
        };
        this.errorCodeOffset = new PIXI.Point(0, -100);
        this.errorMsg = {
            name: 'errorMsg',
            key: '',
            style: {
                fontFamily: Helper_1.Helper.DEFAULT_FONTS,
                fontSize: 22,
                fill: 'white',
                align: 'center',
            },
            anchor: { x: 0.5, y: 0.5 }
        };
        this.errorMsgOffset = new PIXI.Point(0, 40);
        this.onCloseDialog = function () { return null; };
        this.coreElementOrientationConfig = new TsMap_1.TsMap([
            [
                Viewport_1.Orientation.PORTRAIT, new TsMap_1.TsMap([
                    [
                        this.closeButton.elementConfig.name, {
                            name: this.closeButton.elementConfig.name,
                            position: this.closeButton.elementConfig.position
                        }
                    ]
                ])
            ],
            [
                Viewport_1.Orientation.LANDSCAPE, new TsMap_1.TsMap([
                    [
                        this.closeButton.elementConfig.name, {
                            name: this.closeButton.elementConfig.name,
                            position: { x: 1120, y: 80 }
                        }
                    ]
                ])
            ]
        ]);
    }
    return ErrorDialogConfig;
}());
exports.ErrorDialogConfig = ErrorDialogConfig;


/***/ }),
/* 204 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var GameController_1 = __webpack_require__(53);
var KeyboardManager = /** @class */ (function () {
    function KeyboardManager() {
        this.buttonMap = {};
        this.isInited = false;
    }
    KeyboardManager.prototype.init = function () {
        if (!this.isInited) {
            onkeypress = this.handle.bind(this);
            this.isInited = true;
        }
    };
    /**
     * Handles keyboard event, called by the browser. Do not invoke directly
     * @param e DOM Keyboard event
     */
    KeyboardManager.prototype.handle = function (e) {
        var target = this.buttonMap[e.keyCode];
        if (target && target.interactive) {
            if (!target.actionKeycodeMap) { // assume it is button
                target.emit('pointertap');
            }
            else {
                target.actionKeycodeMap[e.keyCode]();
            }
        }
    };
    KeyboardManager.prototype.register = function (key, target) {
        if (!this.buttonMap[key]) {
            this.buttonMap[key] = target;
        }
        else {
            console.warn("Keycode[" + Keycode[key] + "] is already bind.");
        }
    };
    var _a;
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof GameController_1.GameController !== "undefined" && GameController_1.GameController) === "function" && _a || Object)
    ], KeyboardManager.prototype, "gameController", void 0);
    KeyboardManager = __decorate([
        es5_1.Singleton
    ], KeyboardManager);
    return KeyboardManager;
}());
exports.KeyboardManager = KeyboardManager;
//Additional keys: https://www.cambiaresearch.com/articles/15/javascript-char-codes-key-codes
//KeyboardEvent.keyCode is the only reliable cross-browser indicator
var Keycode;
(function (Keycode) {
    Keycode[Keycode["backspace"] = 8] = "backspace";
    Keycode[Keycode["tab"] = 9] = "tab";
    Keycode[Keycode["enter"] = 13] = "enter";
    Keycode[Keycode["shift"] = 16] = "shift";
    Keycode[Keycode["ctrl"] = 17] = "ctrl";
    Keycode[Keycode["alt"] = 18] = "alt";
    Keycode[Keycode["pause_break"] = 19] = "pause_break";
    Keycode[Keycode["caps_lock"] = 20] = "caps_lock";
    Keycode[Keycode["escape"] = 27] = "escape";
    Keycode[Keycode["space"] = 32] = "space";
    Keycode[Keycode["page_up"] = 33] = "page_up";
    Keycode[Keycode["page_down"] = 34] = "page_down";
    Keycode[Keycode["end"] = 35] = "end";
    Keycode[Keycode["home"] = 36] = "home";
    Keycode[Keycode["left_arrow"] = 37] = "left_arrow";
    Keycode[Keycode["up_arrow"] = 38] = "up_arrow";
    Keycode[Keycode["right_arrow"] = 39] = "right_arrow";
    Keycode[Keycode["down_arrow"] = 40] = "down_arrow";
    Keycode[Keycode["insert"] = 45] = "insert";
    Keycode[Keycode["delete"] = 46] = "delete";
    Keycode[Keycode["number_0"] = 48] = "number_0";
    Keycode[Keycode["number_1"] = 49] = "number_1";
    Keycode[Keycode["number_2"] = 50] = "number_2";
    Keycode[Keycode["number_3"] = 51] = "number_3";
    Keycode[Keycode["number_4"] = 52] = "number_4";
    Keycode[Keycode["number_5"] = 53] = "number_5";
    Keycode[Keycode["number_6"] = 54] = "number_6";
    Keycode[Keycode["number_7"] = 55] = "number_7";
    Keycode[Keycode["number_8"] = 56] = "number_8";
    Keycode[Keycode["number_9"] = 57] = "number_9";
    Keycode[Keycode["a"] = 65] = "a";
    Keycode[Keycode["b"] = 66] = "b";
    Keycode[Keycode["c"] = 67] = "c";
    Keycode[Keycode["d"] = 68] = "d";
    Keycode[Keycode["e"] = 69] = "e";
    Keycode[Keycode["f"] = 70] = "f";
    Keycode[Keycode["g"] = 71] = "g";
    Keycode[Keycode["h"] = 72] = "h";
    Keycode[Keycode["i"] = 73] = "i";
    Keycode[Keycode["j"] = 74] = "j";
    Keycode[Keycode["k"] = 75] = "k";
    Keycode[Keycode["l"] = 76] = "l";
    Keycode[Keycode["m"] = 77] = "m";
    Keycode[Keycode["n"] = 78] = "n";
    Keycode[Keycode["o"] = 79] = "o";
    Keycode[Keycode["p"] = 80] = "p";
    Keycode[Keycode["q"] = 81] = "q";
    Keycode[Keycode["r"] = 82] = "r";
    Keycode[Keycode["s"] = 83] = "s";
    Keycode[Keycode["t"] = 84] = "t";
    Keycode[Keycode["u"] = 85] = "u";
    Keycode[Keycode["v"] = 86] = "v";
    Keycode[Keycode["w"] = 87] = "w";
    Keycode[Keycode["x"] = 88] = "x";
    Keycode[Keycode["y"] = 89] = "y";
    Keycode[Keycode["z"] = 90] = "z";
})(Keycode = exports.Keycode || (exports.Keycode = {}));


/***/ }),
/* 205 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var PIXI = __webpack_require__(4);
var es5_1 = __webpack_require__(0);
/**
 * Pixi container manager.
 *
 * @export
 * @class GameContainerManager
 */
var GameContainerManager = /** @class */ (function () {
    function GameContainerManager() {
    }
    Object.defineProperty(GameContainerManager.prototype, "stageContainer", {
        /**
         * Containter that holds the game content
         */
        get: function () {
            return this._stageContainer;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GameContainerManager.prototype, "preloaderContainer", {
        /**
         * Containter that holds the preloader content
         */
        get: function () {
            return this._preloaderContainer;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GameContainerManager.prototype, "errorDialogContainer", {
        /**
         * Containter that holds the errorDialog content
         */
        get: function () {
            return this._errorDialogContainer;
        },
        enumerable: true,
        configurable: true
    });
    GameContainerManager.prototype.init = function (pixi) {
        this._pixi = pixi;
        this._preloaderContainer = new PIXI.Container();
        this._errorDialogContainer = new PIXI.Container();
        this._stageContainer = new PIXI.Container();
        this._pixi.stage.addChild(this.stageContainer);
        this._pixi.stage.addChild(this.preloaderContainer);
        this._pixi.stage.addChild(this.errorDialogContainer);
    };
    /**
     * Turns on or off interactive events on the main gameContainer
     * @param enabled - boolean whether to disable or enable interaction on the gameContainer
     */
    GameContainerManager.prototype.enableGameInteraction = function (enabled) {
        this.stageContainer.visible = enabled;
        this.stageContainer.interactive = this.stageContainer.interactiveChildren = enabled;
    };
    GameContainerManager.prototype.enablePreloaderInteraction = function (enabled) {
        this.preloaderContainer.visible = enabled;
        this.preloaderContainer.interactive = this.stageContainer.interactiveChildren = enabled;
    };
    /**
     * Adds children to the preloader container.
     * @param child - The DisplayObject to add to the preloader container
     * @return Child that was added.
     */
    GameContainerManager.prototype.addToPreloader = function (child) {
        return this.preloaderContainer.addChild(child);
    };
    /**
     * Removes child from the preloader container.
     * @param child - The DisplayObject to remove from the container
     * @return Child that was removed.
     */
    GameContainerManager.prototype.removeFromPreloader = function (child) {
        return this.preloaderContainer.removeChild(child);
    };
    /**
     * Adds children to the container.
     * @param child - The DisplayObject to add to the container
     * @return Child that was added.
     */
    GameContainerManager.prototype.addChild = function (child) {
        return this.stageContainer.addChild(child);
    };
    /**
     * Adds children to the container at the specified index.
     * @param child - The DisplayObject to add to the container
     * @param index - The index in the array to add the display object
     * @return Child that was added.
     */
    GameContainerManager.prototype.addChildAt = function (child, index) {
        return this.stageContainer.addChildAt(child, index);
    };
    /**
     * Removes children from the container.
     * @param  child - The DisplayObject remove
     * @return Child that was removed.
     */
    GameContainerManager.prototype.removeChild = function (child) {
        return this._pixi.stage.removeChild(child);
    };
    GameContainerManager = __decorate([
        es5_1.Singleton
    ], GameContainerManager);
    return GameContainerManager;
}());
exports.GameContainerManager = GameContainerManager;


/***/ }),
/* 206 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var SimpleTween_1 = __webpack_require__(27);
var tween_js_1 = __webpack_require__(47);
var CommonAnimation = /** @class */ (function () {
    function CommonAnimation() {
    }
    CommonAnimation.startTween = function (config) {
        if (config.tweenConfig.from) {
            for (var property in config.tweenConfig.from) {
                if (config.target[property] === undefined) {
                    continue;
                }
                config.target[property] = config.tweenConfig.from[property];
            }
        }
        var easing = config.easing || tween_js_1.Easing.Linear.None;
        return new SimpleTween_1.SimpleTween(config.target)
            .to(config.tweenConfig.to, config.tweenConfig.duration)
            .easing(easing)
            .onComplete(function () {
            if (config.onComplete) {
                config.onComplete();
            }
        });
    };
    return CommonAnimation;
}());
exports.CommonAnimation = CommonAnimation;


/***/ }),
/* 207 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var UIBankConfig = /** @class */ (function () {
    function UIBankConfig() {
        this.name = 'bankPanel';
    }
    return UIBankConfig;
}());
exports.UIBankConfig = UIBankConfig;


/***/ }),
/* 208 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var UIPanelView_1 = __webpack_require__(347);
var CoreUIElementFactory_1 = __webpack_require__(28);
var MoneyFormatter_1 = __webpack_require__(16);
var UIBankPanelView = /** @class */ (function (_super) {
    __extends(UIBankPanelView, _super);
    function UIBankPanelView() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(UIBankPanelView.prototype, "totalBet", {
        set: function (value) {
            this.setTotalBetLabel(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UIBankPanelView.prototype, "balance", {
        set: function (value) {
            this.setBalanceLabel(value);
        },
        enumerable: true,
        configurable: true
    });
    UIBankPanelView.prototype.createElements = function (config) {
        if (config != null) {
            this.config = config;
            this.createIcons(config);
            this.createLabels(config);
        }
    };
    UIBankPanelView.prototype.createIcons = function (config) {
        // bet
        this.betIcon = CoreUIElementFactory_1.CoreUIElementFactory.createInstance(config.totalBetIcon);
        this.addChild(this.betIcon);
        // wallet
        this.balanceIcon = CoreUIElementFactory_1.CoreUIElementFactory.createInstance(config.balanceIcon);
        this.addChild(this.balanceIcon);
    };
    UIBankPanelView.prototype.createLabels = function (config) {
        this.totalBetLabel = CoreUIElementFactory_1.CoreUIElementFactory.createInstance(config.totalBetValue);
        this.addChild(this.totalBetLabel);
        this.balanceLabel = CoreUIElementFactory_1.CoreUIElementFactory.createInstance(config.balanceValue);
        this.addChild(this.balanceLabel);
    };
    UIBankPanelView.prototype.setTotalBetLabel = function (value) {
        if (this.totalBetLabel != null) {
            this.totalBetLabel.text = this.moneyFormatter.formatMoney(value, MoneyFormatter_1.NumberDisplayMode.VALUE_WITH_CURRENCY);
        }
    };
    UIBankPanelView.prototype.setBalanceLabel = function (value) {
        if (this.balanceLabel != null) {
            this.balanceLabel.text = this.moneyFormatter.formatMoney(value, MoneyFormatter_1.NumberDisplayMode.VALUE_WITH_CURRENCY);
            //align right
            this.balanceLabel.x = this.viewport.width - this.config.spacing.padding - this.balanceLabel.width;
            if (this.balanceIcon != null) {
                this.balanceIcon.x = this.balanceLabel.x - this.config.spacing.iconSpacing - this.balanceIcon.width;
            }
        }
    };
    var _a;
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof MoneyFormatter_1.MoneyFormatter !== "undefined" && MoneyFormatter_1.MoneyFormatter) === "function" && _a || Object)
    ], UIBankPanelView.prototype, "moneyFormatter", void 0);
    return UIBankPanelView;
}(UIPanelView_1.UIPanelView));
exports.UIBankPanelView = UIBankPanelView;


/***/ }),
/* 209 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var TsMap_1 = __webpack_require__(2);
var BaseButtonStateSet_1 = __webpack_require__(199);
/**
 * Local Buttons State Class
 * Set state for the local buttons
 */
var LocalButtonsStateSet = /** @class */ (function (_super) {
    __extends(LocalButtonsStateSet, _super);
    function LocalButtonsStateSet() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    LocalButtonsStateSet.prototype.has = function (stateName) {
        return this.buttonStates.has(stateName);
    };
    LocalButtonsStateSet.prototype.get = function (stateName) {
        return this.buttonStates.get(stateName);
    };
    LocalButtonsStateSet.prototype.initStates = function () {
        this.buttonStates.set(LocalButtonsStateSet.DEFAULT_TEMPLATE, this.default());
    };
    LocalButtonsStateSet.prototype.default = function () {
        return new TsMap_1.TsMap();
    };
    LocalButtonsStateSet.prototype.init = function () {
        return new TsMap_1.TsMap();
    };
    return LocalButtonsStateSet;
}(BaseButtonStateSet_1.BaseButtonsStateSet));
exports.LocalButtonsStateSet = LocalButtonsStateSet;
var LocalButtonBehaviour = /** @class */ (function (_super) {
    __extends(LocalButtonBehaviour, _super);
    function LocalButtonBehaviour() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return LocalButtonBehaviour;
}(BaseButtonStateSet_1.BaseButtonBehaviour));
exports.LocalButtonBehaviour = LocalButtonBehaviour;


/***/ }),
/* 210 */,
/* 211 */,
/* 212 */,
/* 213 */,
/* 214 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var SpinResponseFormatter_1 = __webpack_require__(50);
/**
 *  formatting pick feature
 */
var PickFeatureFormatter = /** @class */ (function (_super) {
    __extends(PickFeatureFormatter, _super);
    function PickFeatureFormatter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * formatting run feature api response
     * @param message
     */
    PickFeatureFormatter.prototype.processIncomingMessage = function (message, pickFeatureInfo) {
        if (pickFeatureInfo == undefined || pickFeatureInfo.complete) {
            return null;
        }
        var responseScenario = null;
        if (message.spin_result.features_triggered != undefined) {
            this.getFormatFeatureTriggeredsScenario(message, responseScenario);
        }
        return responseScenario;
    };
    /**
     * formatting feature in feature_triggered
     */
    PickFeatureFormatter.prototype.triggeredFeatureIncomingMessage = function (message, pickFeatureInfo) {
        if (pickFeatureInfo == undefined) {
            return null;
        }
        var responseScenario = null;
        if (message.spin_result.win_amount > 0 || message.spin_result.scatter_win != undefined) {
            responseScenario = this.scenarioManager.getScenario(this.scenarioNames.featureWithWinning);
        }
        if (responseScenario) {
            responseScenario.addScenario(this.scenarioManager.getScenario(this.scenarioNames.runPickFeature));
        }
        else {
            responseScenario = this.scenarioManager.getScenario(this.scenarioNames.runPickFeature);
        }
        var pickFeatureDetail = this.getFeatureDetail(pickFeatureInfo);
        responseScenario.setStateData(this.stateNames.startPickFeature, {
            playerChoices: this.getPickFeatureDetailChoices(pickFeatureDetail)
        });
        return responseScenario;
    };
    PickFeatureFormatter.prototype.getFeatureDetail = function (featureInfo) {
        return featureInfo.feature_state;
    };
    /**
     * formatting feature while restore feature
     */
    PickFeatureFormatter.prototype.restoreFeatureIncomingMessage = function (pickFeatureDetail) {
        var pickFeatureScenario = this.scenarioManager.getScenario(this.scenarioNames.runPickFeature);
        // TODO: pass reel set to view
        pickFeatureScenario.setStateData(this.stateNames.startPickFeature, {
            playerChoices: this.getPickFeatureDetailChoices(pickFeatureDetail)
        });
        return pickFeatureScenario;
    };
    PickFeatureFormatter.prototype.getPickFeatureDetailChoices = function (pickFeatureDetail) {
        return pickFeatureDetail.choices;
    };
    return PickFeatureFormatter;
}(SpinResponseFormatter_1.SpinResponseFormatter));
exports.PickFeatureFormatter = PickFeatureFormatter;


/***/ }),
/* 215 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var SpinResponseFormatter_1 = __webpack_require__(50);
/**
 * formatting wild locked feature
 */
var WildLockedFeatureFormatter = /** @class */ (function (_super) {
    __extends(WildLockedFeatureFormatter, _super);
    function WildLockedFeatureFormatter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * formatting run feature api response
     * @param message
     */
    WildLockedFeatureFormatter.prototype.processIncomingMessage = function (message, featureInfo) {
        console.warn('here shouldn\'t be triggered, since wild locked feature don\'t need another transaction to complete feature');
        return null;
    };
    WildLockedFeatureFormatter.prototype.getFeatureScenarioBeforeFreeSpinStop = function (freeSpinStopScenario, message, featureInfo) {
        return freeSpinStopScenario;
    };
    WildLockedFeatureFormatter.prototype.getFeatureScenarioAfterSpinStop = function (freeSpinStopScenario, message, featureInfo) {
        if (freeSpinStopScenario.hasStateName(this.stateNames.freeSpinsStop)) {
            this.margeScenarioStateData(freeSpinStopScenario, this.stateNames.freeSpinsStop, { wildLocked: this.getWildLocked(featureInfo) });
        }
        if (freeSpinStopScenario.hasStateName(this.stateNames.freeSpinsOutroPopup)) {
            this.margeScenarioStateData(freeSpinStopScenario, this.stateNames.freeSpinsOutroPopup, { wildLocked: this.getWildLocked(featureInfo) });
        }
        return freeSpinStopScenario;
    };
    /**
     * formatting feature in feature_triggered
     */
    WildLockedFeatureFormatter.prototype.triggeredFeatureIncomingMessage = function (message, featureInfo) {
        return this.getWildLockedScenario(message, featureInfo);
    };
    /**
     * get wild locked scenario
     * @param message
     * @param featureInfo
     */
    WildLockedFeatureFormatter.prototype.getWildLockedScenario = function (message, featureInfo) {
        var responseScenario = this.scenarioManager.getScenario(this.scenarioNames.wildLockTriggered);
        responseScenario.setStateData(this.stateNames.wildLockTriggered, this.getWildLocked(featureInfo));
        return responseScenario;
    };
    WildLockedFeatureFormatter.prototype.getWildLocked = function (featureInfo) {
        return featureInfo.feature_state;
    };
    WildLockedFeatureFormatter.prototype.getFeatureShowWinningData = function (winningData, spinResult, featureInfo) {
        return winningData;
    };
    WildLockedFeatureFormatter.prototype.getFeatureScenarioAfterWin = function (freeSpinStopScenario, message, featureInfo) {
        return freeSpinStopScenario;
    };
    /**
     * formatting feature while restore feature
     */
    WildLockedFeatureFormatter.prototype.restoreFeatureIncomingMessage = function (wildLockedFeatureDetail) {
        if (wildLockedFeatureDetail == undefined) {
            return null;
        }
        var wildLockedFeatureScenario = this.scenarioManager.getScenario(this.scenarioNames.wildLockTriggered);
        wildLockedFeatureScenario.setStateData(this.stateNames.wildLockTriggered, wildLockedFeatureDetail);
        return wildLockedFeatureScenario;
    };
    WildLockedFeatureFormatter.prototype.getFeatureRestoreScenario = function (restoreScenario, featureInfo) {
        if (restoreScenario.hasStateName(this.stateNames.freeSpinsIntroPopup)) {
            this.margeScenarioStateData(restoreScenario, this.stateNames.freeSpinsIntroPopup, { wildLocked: this.getWildLocked(featureInfo) });
        }
        return restoreScenario;
    };
    return WildLockedFeatureFormatter;
}(SpinResponseFormatter_1.SpinResponseFormatter));
exports.WildLockedFeatureFormatter = WildLockedFeatureFormatter;


/***/ }),
/* 216 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var SlotNGHttpFormatter_1 = __webpack_require__(20);
/**
 * formatting single wild multiplier feature
 */
var SingleWildMultiplierFeatureFormatter = /** @class */ (function (_super) {
    __extends(SingleWildMultiplierFeatureFormatter, _super);
    function SingleWildMultiplierFeatureFormatter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * formatting run feature api response
     * @param message
     */
    SingleWildMultiplierFeatureFormatter.prototype.processIncomingMessage = function (message, featureInfo) {
        console.warn('here shouldn\'t be triggered, since single wild multiplier feature don\'t need another transaction to complete feature');
        return null;
    };
    SingleWildMultiplierFeatureFormatter.prototype.getFeatureScenarioBeforeFreeSpinStop = function (freeSpinStopScenario, message, featureInfo) {
        var scenario = this.getWildMultiplierScenario(message, featureInfo);
        if (freeSpinStopScenario) {
            freeSpinStopScenario.addScenario(scenario);
        }
        else {
            freeSpinStopScenario = scenario;
        }
        return freeSpinStopScenario;
    };
    /**
     * formatting feature in feature_triggered
     */
    SingleWildMultiplierFeatureFormatter.prototype.triggeredFeatureIncomingMessage = function (message, featureInfo) {
        return null;
    };
    SingleWildMultiplierFeatureFormatter.prototype.getWildMultiplierScenario = function (message, featureInfo) {
        var responseScenario = this.scenarioManager.getScenario(this.scenarioNames.freeSpinsWithWildMultipliers);
        var wildMultiplierFeatureDetail = this.getFeatureDetail(featureInfo);
        responseScenario.setStateData(this.stateNames.freeSpinsWildMultipliers, {
            wildMultiplier: wildMultiplierFeatureDetail.wild_multiplier
        });
        return responseScenario;
    };
    SingleWildMultiplierFeatureFormatter.prototype.getFeatureScenarioAfterSpinStop = function (freeSpinStopScenario, message, featureInfo) {
        return freeSpinStopScenario;
    };
    SingleWildMultiplierFeatureFormatter.prototype.getFeatureShowWinningData = function (winningData, spinResult, featureInfo) {
        return winningData;
    };
    SingleWildMultiplierFeatureFormatter.prototype.getFeatureScenarioAfterWin = function (freeSpinStopScenario, message, featureInfo) {
        return freeSpinStopScenario;
    };
    SingleWildMultiplierFeatureFormatter.prototype.getFeatureDetail = function (featureInfo) {
        return featureInfo.feature_state;
    };
    /**
     * formatting feature while restore feature
     */
    SingleWildMultiplierFeatureFormatter.prototype.restoreFeatureIncomingMessage = function (wildMultiplierFeatureDetail) {
        var wildMultiplierFeatureScenario = null;
        console.warn('didn\'t plan for restore single wild multiplie feature, since it won\'t create another transection');
        return wildMultiplierFeatureScenario;
    };
    SingleWildMultiplierFeatureFormatter.prototype.getFeatureRestoreScenario = function (restoreScenario, featureInfo) {
        return restoreScenario;
    };
    return SingleWildMultiplierFeatureFormatter;
}(SlotNGHttpFormatter_1.SlotNGHttpFormatter));
exports.SingleWildMultiplierFeatureFormatter = SingleWildMultiplierFeatureFormatter;


/***/ }),
/* 217 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var SpinRequestMsgFormatter_1 = __webpack_require__(118);
/**
 * force all symbols on reel
 */
var ForceSpinMsgFormatter = /** @class */ (function (_super) {
    __extends(ForceSpinMsgFormatter, _super);
    function ForceSpinMsgFormatter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ForceSpinMsgFormatter.prototype.codeMessage = function (data) {
        var spinRequest = _super.prototype.codeMessage.call(this, data);
        if (data && data.symbols) {
            spinRequest.reels = this.getMatrix(data.symbols);
        }
        if (spinRequest.force_data) {
            delete spinRequest.force_data;
        }
        return spinRequest;
    };
    return ForceSpinMsgFormatter;
}(SpinRequestMsgFormatter_1.SpinRequestMsgFormatter));
exports.ForceSpinMsgFormatter = ForceSpinMsgFormatter;


/***/ }),
/* 218 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var Viewport_1 = __webpack_require__(6);
/**
 * A class for ExternalModule Control. An extra module is added to ExternalModuleManager when external JS module is executed.
 *
 * @export
 * @class ExternalModuleManager
 */
var ExternalModuleManager = /** @class */ (function () {
    function ExternalModuleManager() {
        this.domId = 'external-module';
    }
    ExternalModuleManager.prototype.init = function () {
        this.viewport.onResizeSignal.add(this.setWidth.bind(this));
        this.container = document.getElementById(this.domId);
        this.container.ontouchmove = function (event) {
            if (event.scale && event.scale !== 1) {
                event.preventDefault();
                //FIXES pinch to zoom bug
            }
        };
        this.setWidth();
    };
    ExternalModuleManager.prototype.setWidth = function () {
        if (this.container) {
            this.container.style.width = this.viewport.canvas.width + "px";
            this.container.style.marginTop = this.viewport.canvas.marginTop + "px";
            this.container.style.marginLeft = this.viewport.canvas.marginLeft + "px";
            this.container.style.zIndex = '1';
        }
    };
    var _a;
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof Viewport_1.Viewport !== "undefined" && Viewport_1.Viewport) === "function" && _a || Object)
    ], ExternalModuleManager.prototype, "viewport", void 0);
    ExternalModuleManager = __decorate([
        es5_1.Singleton
    ], ExternalModuleManager);
    return ExternalModuleManager;
}());
exports.ExternalModuleManager = ExternalModuleManager;


/***/ }),
/* 219 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var MiniSignal = __webpack_require__(3);
var pixi_js_1 = __webpack_require__(4);
var CompView_1 = __webpack_require__(34);
var Viewport_1 = __webpack_require__(6);
var SimpleTween_1 = __webpack_require__(27);
var Button_1 = __webpack_require__(19);
var Sprite_1 = __webpack_require__(48);
var LoadingBar_1 = __webpack_require__(728);
var SpineLoadingBar_1 = __webpack_require__(729);
var SmartPreloaderView = /** @class */ (function (_super) {
    __extends(SmartPreloaderView, _super);
    function SmartPreloaderView() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.onClickEnterGameSignal = new MiniSignal();
        return _this;
    }
    SmartPreloaderView.prototype.getAssetsList = function () {
        return [
            {
                assetKey: 'preloaderBackground',
                assetURL: 'assets/preloader/{locale}/preloaderBackground.json'
            },
            {
                assetKey: 'preloaderUI',
                assetURL: 'assets/preloader/{locale}/preloaderUI.json'
            }
        ];
    };
    SmartPreloaderView.prototype.initialize = function (config) {
        this.config = config;
        this.mainContainer = new pixi_js_1.Container();
        this.gameContainerManager.addToPreloader(this.mainContainer);
        this.setMainContainerName(config);
        this.createElements(config);
        this.registerEvents();
        this.initialized = true;
    };
    /**
     * Show preloader and preloader bar on stage
     */
    SmartPreloaderView.prototype.showPreloader = function () {
        this.preloadBackground = new Sprite_1.Sprite(this.config.background);
        this.addChild(this.preloadBackground);
        if (this.isSpineLoadingBarConfig(this.config.loadingBar)) {
            this.preloadBar = new SpineLoadingBar_1.SpineLoadingBar(this.config.loadingBar);
        }
        else {
            this.preloadBar = new LoadingBar_1.LoadingBar(this.config.loadingBar);
        }
        this.addChild(this.preloadBar);
        this.startButton = new Button_1.Button(this.config.preloaderButton);
        this.startButton.setEnable(false);
        if (this.config.preloaderButton.rectangleHitArea) {
            this.startButton.setRectangleHitArea(this.config.preloaderButton.rectangleHitArea.width, this.config.preloaderButton.rectangleHitArea.height);
        }
        this.addChild(this.startButton);
        this.layoutElements();
    };
    SmartPreloaderView.prototype.portraitLayout = function () {
        this.buttonPositionY = this.config.coreElementOrientationConfig.get(Viewport_1.Orientation.PORTRAIT).get(this.config.preloaderButton.name).position.y;
        this.buttonStartYPosition = this.config.buttonStartYPositionPortrait;
        _super.prototype.portraitLayout.call(this);
    };
    SmartPreloaderView.prototype.landscapeLayout = function () {
        this.buttonPositionY = this.config.coreElementOrientationConfig.get(Viewport_1.Orientation.LANDSCAPE).get(this.config.preloaderButton.name).position.y;
        this.buttonStartYPosition = this.config.buttonStartYPositionLandscape;
        _super.prototype.landscapeLayout.call(this);
    };
    SmartPreloaderView.prototype.layoutElements = function () {
        if (this.preloadBackground == undefined) {
            return;
        }
        _super.prototype.layoutElements.call(this);
    };
    SmartPreloaderView.prototype.setProgress = function (progress) {
        if (this.preloadBar != undefined) {
            this.preloadBar.update(progress * 0.99);
        }
    };
    SmartPreloaderView.prototype.setLoaderBarComplete = function () {
        var _this = this;
        if (this.preloadBar != undefined) {
            var tweenData_1 = { percent: 0.99 };
            var tweenTo = { percent: 1 };
            new SimpleTween_1.SimpleTween(tweenData_1)
                .to(tweenTo, 5000)
                .onUpdate(function () {
                _this.preloadBar.update(tweenData_1.percent);
            })
                .start();
        }
    };
    SmartPreloaderView.prototype.enablePreloader = function (isEnable) {
        this.gameContainerManager.enablePreloaderInteraction(isEnable);
    };
    SmartPreloaderView.prototype.finishLoading = function () {
        this.preloadBar.finishedLoadingSignal.add(this.showStartButton, this);
        this.preloadBar.playCompleteAnimation();
    };
    SmartPreloaderView.prototype.showStartButton = function () {
        var _this = this;
        this.startButton.position.y = this.buttonStartYPosition;
        var buttonTween = new SimpleTween_1.SimpleTween(this.startButton)
            .to({ alpha: 1, scaleY: 1, y: this.buttonPositionY }, 150)
            .onComplete(function () {
            _this.startButton.setEnable(true);
            _this.startButton.position.y = _this.buttonPositionY;
            _this.mainContainer.on('pointertap', _this.onClickEnterGame, _this);
            _this.mainContainer.interactive = true;
            _this.buttonTweening = new SimpleTween_1.SimpleTween(_this.startButton)
                .to({ scaleX: 1.2, scaleY: 1.2 }, 1000)
                .yoyo(true)
                .repeat(Infinity)
                .start();
        });
        var loadingBarTween = new SimpleTween_1.SimpleTween(this.preloadBar)
            .to({ alpha: 0 }, 250)
            .onComplete(function () {
            buttonTween.start();
        });
        loadingBarTween.start();
    };
    SmartPreloaderView.prototype.onClickEnterGame = function () {
        this.startButton.triggerClick();
        this.startButton.destroy();
        this.mainContainer.interactive = false;
        this.onClickEnterGameSignal.dispatch();
    };
    SmartPreloaderView.prototype.destroy = function () {
        var _this = this;
        if (this.buttonTweening != undefined) {
            this.buttonTweening.stop();
            this.buttonTweening = undefined;
        }
        new SimpleTween_1.SimpleTween(this.mainContainer)
            .to({ alpha: 0 }, 500)
            .onComplete(function () {
            _this.gameContainerManager.removeFromPreloader(_this.mainContainer);
            _this.mainContainer.removeChild(_this.startButton);
            if (_this.startButton != undefined) {
                _this.startButton.destroy();
                _this.startButton = undefined;
            }
            _super.prototype.destroy.call(_this);
        })
            .start();
    };
    SmartPreloaderView.prototype.isSpineLoadingBarConfig = function (loadingBarConfig) {
        return loadingBarConfig.animationConfig !== undefined;
    };
    return SmartPreloaderView;
}(CompView_1.CompView));
exports.SmartPreloaderView = SmartPreloaderView;


/***/ }),
/* 220 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var MiniSignal = __webpack_require__(3);
var pixi_js_1 = __webpack_require__(4);
var es5_1 = __webpack_require__(0);
var SimpleTween_1 = __webpack_require__(27);
var CoreUIElementFactory_1 = __webpack_require__(28);
var Translator_1 = __webpack_require__(25);
var SimpleTimer_1 = __webpack_require__(15);
var TransitionSceneView_1 = __webpack_require__(378);
var DialogView = /** @class */ (function (_super) {
    __extends(DialogView, _super);
    function DialogView() {
        var _this = _super.call(this) || this;
        _this.clickToHide = true;
        _this.isClosed = true;
        _this.dialogClosedSignal = new MiniSignal();
        return _this;
    }
    DialogView.prototype.registerEvents = function () {
        _super.prototype.registerEvents.call(this);
        this.mainContainer.on('pointertap', this.onClick, this);
    };
    DialogView.prototype.createElements = function (config) {
        this.config = config;
        this.background = new pixi_js_1.Graphics();
        this.background.beginFill(0, 0.8);
        this.background.drawRect(0, 0, this.viewport.width, this.viewport.height);
        this.window = pixi_js_1.Sprite.fromFrame(this.config.windowAsset);
        this.window.anchor.set(0.5, 0.5);
        this.window.position.set(this.config.position.x, this.config.position.y);
        this.title = CoreUIElementFactory_1.CoreUIElementFactory.createInstance(this.config.title);
        this.text = CoreUIElementFactory_1.CoreUIElementFactory.createInstance(this.config.text);
        this.addChild(this.background);
        this.addChild(this.window);
        this.window.addChild(this.title);
        this.window.addChild(this.text);
        this.visible = false;
    };
    DialogView.prototype.showDialogFromKey = function (titleKey, textKey, time, delay, clickToHide, interactive) {
        if (delay === void 0) { delay = 0; }
        if (clickToHide === void 0) { clickToHide = true; }
        if (interactive === void 0) { interactive = true; }
        return this.showDialogFromString(this.translator.t(titleKey), this.translator.t(textKey), time, delay, clickToHide, interactive);
    };
    DialogView.prototype.setTitleLayout = function () {
        this.title.position.set(0 - this.title.width / 2, 0 - (this.window.height / 2) + this.title.height);
    };
    DialogView.prototype.showDialogFromString = function (title, text, time, delay, clickToHide, interactive) {
        if (delay === void 0) { delay = 0; }
        if (clickToHide === void 0) { clickToHide = true; }
        if (interactive === void 0) { interactive = true; }
        this.title.text = title;
        this.setTitleLayout();
        this.text.text = text;
        this.text.position.set(0 - this.text.width / 2, 0);
        this.clickToHide = clickToHide;
        this.visible = true;
        this.mainContainer.alpha = 0;
        this.setInteractive(interactive);
        return this.openDialog(delay, time);
    };
    DialogView.prototype.openDialog = function (delay, time, fadeInDuration) {
        var _this = this;
        if (time === void 0) { time = 3000; }
        if (fadeInDuration === void 0) { fadeInDuration = 100; }
        return new Promise(function (resolve) {
            _this.resolveForCloseDialog = resolve;
            new SimpleTween_1.SimpleTween(_this.mainContainer)
                .to({ alpha: 1 }, fadeInDuration)
                .delay(delay)
                .onComplete(function () {
                _this.isClosed = false;
                new SimpleTimer_1.SimpleTimer(time, _this.onTimerEnd.bind(_this), false);
            })
                .start();
        });
    };
    DialogView.prototype.closeDialog = function () {
        var _this = this;
        this.isClosed = true;
        new SimpleTween_1.SimpleTween(this.mainContainer)
            .to({ alpha: 0 }, 100)
            .onComplete(function () {
            _this.title.text = '';
            _this.text.text = '';
            _this.visible = false;
            _this.setInteractive(false);
            _this.dialogClosedSignal.dispatch();
        })
            .start();
    };
    DialogView.prototype.onClick = function () {
        if (this.clickToHide && !this.isClosed) {
            this.closeDialog();
        }
    };
    DialogView.prototype.onTimerEnd = function () {
        if (this.resolveForCloseDialog) {
            this.resolveForCloseDialog();
            this.resolveForCloseDialog = null;
        }
        if (!this.isClosed && this.mainContainer.interactive) {
            this.closeDialog();
        }
    };
    DialogView.prototype.setInteractive = function (value) {
        this.mainContainer.interactive = value;
    };
    var _a;
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof Translator_1.Translator !== "undefined" && Translator_1.Translator) === "function" && _a || Object)
    ], DialogView.prototype, "translator", void 0);
    return DialogView;
}(TransitionSceneView_1.TransitionSceneView));
exports.DialogView = DialogView;


/***/ }),
/* 221 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var MiniSignal = __webpack_require__(3);
var es5_1 = __webpack_require__(0);
var CompView_1 = __webpack_require__(34);
var Translator_1 = __webpack_require__(25);
var ScrollMarquee_1 = __webpack_require__(119);
var MarqueeView = /** @class */ (function (_super) {
    __extends(MarqueeView, _super);
    function MarqueeView() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MarqueeView.prototype.createElements = function (config) {
        if (config == undefined) {
            return;
        }
        this.onMarqueeTweenCompleteSignal = new MiniSignal();
        this.scrollMarquee = new ScrollMarquee_1.ScrollMarquee(config.scrollMarqueeConfig);
        this.scrollMarquee.onMarqueeTweenCompleteSignal.add(this.onMarqueeTweenComplete, this);
        this.addChild(this.scrollMarquee);
    };
    MarqueeView.prototype.onMarqueeTweenComplete = function () {
        this.onMarqueeTweenCompleteSignal.dispatch();
    };
    MarqueeView.prototype.setMarqueeLabel = function (message, mode) {
        this.scrollMarquee.setMarqueeText(message, mode);
    };
    var _a;
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof Translator_1.Translator !== "undefined" && Translator_1.Translator) === "function" && _a || Object)
    ], MarqueeView.prototype, "translator", void 0);
    return MarqueeView;
}(CompView_1.CompView));
exports.MarqueeView = MarqueeView;


/***/ }),
/* 222 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var pixi_js_1 = __webpack_require__(4);
var Helper_1 = __webpack_require__(5);
var WebTextField_1 = __webpack_require__(35);
var ScrollMarquee_1 = __webpack_require__(119);
var MarqueeConfig = /** @class */ (function () {
    function MarqueeConfig() {
        this.name = 'marquee';
        this.scrollMarqueeConfig = this.getScrollMarqueeConfig();
    }
    MarqueeConfig.prototype.getScrollMarqueeConfig = function () {
        return {
            name: 'scrollMarquee',
            messageSpeed: 0.13,
            accelerateSpeed: 3,
            mask: new pixi_js_1.Rectangle(16, 0, 686, 40),
            marqueeDisplayMode: ScrollMarquee_1.MarqueeDisplayMode.FIXED,
            marqueeText: {
                elementType: WebTextField_1.WebTextField.elementType,
                elementConfig: {
                    name: 'marquee',
                    key: '',
                    position: { x: null, y: 8 },
                    autoscale: { x: 670, y: 32 },
                    style: {
                        fontFamily: Helper_1.Helper.DEFAULT_FONTS,
                        fontSize: 30,
                        fontWeight: 'bold',
                        fill: 'white',
                        align: 'center'
                    }
                }
            }
        };
    };
    return MarqueeConfig;
}());
exports.MarqueeConfig = MarqueeConfig;


/***/ }),
/* 223 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Helper_1 = __webpack_require__(5);
var WebTextField_1 = __webpack_require__(35);
var DialogConfig = /** @class */ (function () {
    function DialogConfig() {
        this.name = 'DialogWindow';
        this.windowAsset = 'dialogWindow.png';
        this.position = {
            x: 360,
            y: 640
        };
        this.title = {
            elementType: WebTextField_1.WebTextField.elementType,
            elementConfig: {
                name: 'dialogTitle',
                key: '',
                style: {
                    fontFamily: Helper_1.Helper.DEFAULT_FONTS,
                    fontSize: 44,
                    fill: 'white',
                    fontWeight: 'bold',
                    strokeThickness: 4,
                    align: 'center'
                }
            }
        };
        this.text = {
            elementType: WebTextField_1.WebTextField.elementType,
            elementConfig: {
                name: 'dialogText',
                key: '',
                style: {
                    fontFamily: Helper_1.Helper.DEFAULT_FONTS,
                    fontSize: 24,
                    fill: 'white',
                    fontWeight: 'bold',
                    strokeThickness: 4,
                    align: 'left'
                }
            }
        };
    }
    return DialogConfig;
}());
exports.DialogConfig = DialogConfig;


/***/ }),
/* 224 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var AnimationViewConfig_1 = __webpack_require__(152);
var BackgroundConfig = /** @class */ (function (_super) {
    __extends(BackgroundConfig, _super);
    function BackgroundConfig() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.name = 'background';
        _this.staticImages = [];
        return _this;
    }
    return BackgroundConfig;
}(AnimationViewConfig_1.AnimationViewConfig));
exports.BackgroundConfig = BackgroundConfig;


/***/ }),
/* 225 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var pixi_js_1 = __webpack_require__(4);
var TsMap_1 = __webpack_require__(2);
var Helper_1 = __webpack_require__(5);
var Viewport_1 = __webpack_require__(6);
var ForcingSpinConfig = /** @class */ (function () {
    function ForcingSpinConfig() {
        this.name = 'forcingSpin';
        this.title = {
            name: 'forcingSpinTitle',
            key: 'forcingSpinTitle',
            position: {
                x: 81,
                y: 100
            },
            style: {
                fontFamily: Helper_1.Helper.DEFAULT_FONTS,
                fontSize: 48,
                fontWeight: 'bold',
                fill: 'white',
                align: 'center',
                padding: 50,
            }
        };
        this.closeButton = {
            isOrientationSupported: true,
            name: 'closeForcingSpinButton',
            id: 'hideForcingSpinId',
            productLine: 'NGF',
            action: 'hideForcingSpinPanel',
            position: {
                x: 600,
                y: 132
            },
            assetName: 'close',
            isLocal: false
        };
        this.autoToggleData = {
            name: 'autoToggle',
            position: {
                x: 81,
                y: 215
            },
            id: '',
            productLine: 'NGF',
            action: 'forcingAutoPlay',
            assetName: 'toggle_switch',
            text: {
                name: 'forcingAutoPlay',
                key: 'forcingAutoPlay',
                style: {
                    fontFamily: Helper_1.Helper.DEFAULT_FONTS,
                    fontWeight: 'lighter',
                    fontSize: 36,
                    align: 'left',
                    fill: 'white'
                },
                position: { x: -230, y: 15 }
            },
            selected: true
        };
        this.selectorData = new TsMap_1.TsMap([
            [
                'Pic1', [
                    ['PIC1', 'A', 'A'],
                    ['PIC1', 'J', 'J'],
                    ['PIC1', 'Q', 'Q'],
                    ['PIC1', 'K', 'K'],
                    ['PIC1', 'T', 'T']
                ]
            ],
            [
                'Pic2', [
                    ['PIC2', 'A', 'A'],
                    ['PIC2', 'J', 'J'],
                    ['PIC2', 'Q', 'Q'],
                    ['PIC2', 'K', 'K'],
                    ['PIC2', 'T', 'T']
                ]
            ],
            [
                'Pic3', [
                    ['PIC3', 'A', 'A'],
                    ['PIC3', 'J', 'J'],
                    ['PIC3', 'Q', 'Q'],
                    ['PIC3', 'K', 'K'],
                    ['PIC3', 'T', 'T']
                ]
            ],
            [
                'Pic4', [
                    ['PIC4', 'A', 'A'],
                    ['PIC4', 'J', 'J'],
                    ['PIC4', 'Q', 'Q'],
                    ['PIC4', 'K', 'K'],
                    ['PIC4', 'T', 'T']
                ]
            ],
            [
                'Ace', [
                    ['A', 'J', 'J'],
                    ['A', 'Q', 'Q'],
                    ['A', 'K', 'K'],
                    ['A', 'T', 'T'],
                    ['A', 'J', 'J']
                ]
            ],
            [
                'King', [
                    ['K', 'J', 'A'],
                    ['K', 'Q', 'J'],
                    ['K', 'K', 'Q'],
                    ['K', 'T', 'T'],
                    ['K', 'J', 'T']
                ]
            ],
            [
                'Queen', [
                    ['Q', 'A', 'A'],
                    ['Q', 'J', 'J'],
                    ['Q', 'Q', 'Q'],
                    ['Q', 'K', 'K'],
                    ['Q', 'T', 'T']
                ]
            ],
            [
                'Jack', [
                    ['J', 'A', 'A'],
                    ['J', 'Q', 'Q'],
                    ['J', 'T', 'T'],
                    ['J', 'K', 'K'],
                    ['J', 'A', 'A']
                ]
            ],
            [
                'Ten', [
                    ['T', 'A', 'A'],
                    ['T', 'J', 'J'],
                    ['T', 'Q', 'Q'],
                    ['T', 'K', 'K'],
                    ['T', 'N', 'T']
                ]
            ],
            [
                'Nine', [
                    ['N', 'A', 'A'],
                    ['N', 'J', 'K'],
                    ['N', 'Q', 'J'],
                    ['N', 'K', 'Q'],
                    ['N', 'N', 'N']
                ]
            ],
            [
                'Wild', [
                    ['A', 'A', 'A'],
                    ['WILD', 'J', 'J'],
                    ['WILD', 'Q', 'Q'],
                    ['WILD', 'K', 'K'],
                    ['WILD', 'T', 'T']
                ]
            ],
            [
                'Scatter', [
                    ['SCATTER', 'A', 'A'],
                    ['SCATTER', 'J', 'J'],
                    ['SCATTER', 'Q', 'Q'],
                    ['A', 'K', 'K'],
                    ['J', 'T', 'T']
                ]
            ],
        ]);
        this.coreElementOrientationConfig = new TsMap_1.TsMap([
            [
                Viewport_1.Orientation.PORTRAIT, new TsMap_1.TsMap([
                    [
                        this.closeButton.name, {
                            position: this.closeButton.position
                        }
                    ]
                ])
            ],
            [
                Viewport_1.Orientation.LANDSCAPE, new TsMap_1.TsMap([
                    [
                        this.closeButton.name, {
                            position: { x: 1120, y: 132 }
                        }
                    ]
                ])
            ]
        ]);
        this.selectorButtonConfig = this.getSelectorButtonConfig();
    }
    ForcingSpinConfig.prototype.getSelectorButtonConfig = function () {
        return {
            name: 'selectorButton',
            startX: 149,
            startY: 433,
            buttonOffset: 4,
            widthX: 142,
            heightY: 100,
            scaleX: 0.595,
            scaleY: 2,
            selectorButton: {
                name: 'demoSelectorButton',
                position: {
                    x: 0,
                    y: 0
                },
                action: '',
                id: '',
                productLine: 'NGF',
                assetName: 'genericToggle',
                isLocal: true,
                scale: new pixi_js_1.Point(1, 1),
                text: {
                    name: '',
                    key: '',
                    style: {
                        fontFamily: Helper_1.Helper.DEFAULT_FONTS,
                        fontSize: 20,
                        fontWeight: 'bold',
                        fill: 'white',
                        align: 'center',
                        padding: 50,
                    }
                }
            }
        };
    };
    return ForcingSpinConfig;
}());
exports.ForcingSpinConfig = ForcingSpinConfig;


/***/ }),
/* 226 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var CompView_1 = __webpack_require__(34);
var SlotStates_1 = __webpack_require__(31);
var es5_1 = __webpack_require__(0);
var SlotCompView = /** @class */ (function (_super) {
    __extends(SlotCompView, _super);
    function SlotCompView() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    var _a;
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof SlotStates_1.SlotStates !== "undefined" && SlotStates_1.SlotStates) === "function" && _a || Object)
    ], SlotCompView.prototype, "stateNames", void 0);
    return SlotCompView;
}(CompView_1.CompView));
exports.SlotCompView = SlotCompView;


/***/ }),
/* 227 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Helper_1 = __webpack_require__(5);
var SlotFreeSpinsConfig = /** @class */ (function () {
    function SlotFreeSpinsConfig() {
        this.name = 'slotFreeSpins';
        this.pickNamePrefix = Helper_1.Helper.EMPTY;
        this.pickName = Helper_1.Helper.EMPTY;
        this.textSlotName = Helper_1.Helper.EMPTY;
        this.titleSlotName = Helper_1.Helper.EMPTY;
        this.pickLabelOffsetX = 0;
        this.pickLabelOffsetY = -200;
        this.titleLabelOffsetX = 0;
        this.titleLabelOffsetY = -405;
        this.introAnimation = Helper_1.Helper.EMPTY;
        this.outroAnimation = Helper_1.Helper.EMPTY;
        this.idleAnimation = Helper_1.Helper.EMPTY;
        this.pickAnimation = Helper_1.Helper.EMPTY;
        this.titleFont = {
            style: {
                font: {
                    name: Helper_1.Helper.DEFAULT_FONTS,
                    size: 64,
                },
                align: 'center',
            },
            name: 'bonusTitle',
            key: 'bonusTitle',
        };
        this.pickFont = {
            style: {
                font: {
                    name: Helper_1.Helper.DEFAULT_FONTS,
                    size: 74,
                },
                align: 'center',
            },
            name: '',
            key: '',
        };
        this.introAnimationTrack = 0;
        this.idleAnimationTrack = 1;
        this.pickAnimationTrack = 2;
        this.pickAsset = Helper_1.Helper.EMPTY;
        this.backgroundAsset = Helper_1.Helper.EMPTY;
        this.backgroundIntroAnimation = Helper_1.Helper.EMPTY;
        this.backgroundOutroAnimation = Helper_1.Helper.EMPTY;
    }
    return SlotFreeSpinsConfig;
}());
exports.SlotFreeSpinsConfig = SlotFreeSpinsConfig;


/***/ }),
/* 228 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var SoundManager_1 = __webpack_require__(13);
var ReelActionModel = /** @class */ (function () {
    function ReelActionModel() {
    }
    ReelActionModel.prototype.initialize = function (reelModel, view, onStateChanged, config) {
        this.reelModel = reelModel;
        this.view = view;
        this.setup(config);
        onStateChanged.add(this.onStateChanged.bind(this));
    };
    ReelActionModel.prototype.setup = function (config) {
        //
    };
    ReelActionModel.prototype.onStateChanged = function (stateName) {
        //
    };
    var _a;
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof SoundManager_1.SoundManager !== "undefined" && SoundManager_1.SoundManager) === "function" && _a || Object)
    ], ReelActionModel.prototype, "soundManager", void 0);
    return ReelActionModel;
}());
exports.ReelActionModel = ReelActionModel;


/***/ }),
/* 229 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var pixi_js_1 = __webpack_require__(4);
var MiniSignal = __webpack_require__(3);
var es5_1 = __webpack_require__(0);
var TsMap_1 = __webpack_require__(2);
var Viewport_1 = __webpack_require__(6);
var SimpleTimer_1 = __webpack_require__(15);
var Animation_1 = __webpack_require__(26);
var GlobalDispatcher_1 = __webpack_require__(7);
var SlotCompView_1 = __webpack_require__(226);
var Anticipation_1 = __webpack_require__(737);
var ReelStripView_1 = __webpack_require__(388);
var ReelConfig_1 = __webpack_require__(78);
var ReelsEnums_1 = __webpack_require__(37);
var ReelStripOverlay_1 = __webpack_require__(389);
var ReelControllerView = /** @class */ (function (_super) {
    __extends(ReelControllerView, _super);
    function ReelControllerView() {
        var _this = _super.call(this) || this;
        /**
         * this container only for reelsOverlay
         */
        _this.reelsOverlayContainer = new PIXI.Container();
        _this.maskContainer = new PIXI.Container();
        _this.reelsContainer = new PIXI.Container();
        /**
         * Describe how many animations are completed right now on strips.
         */
        _this.completedAnimationCounter = 0;
        /**
         * array of items that only with static picture
         * and have reel mask
         */
        _this.reelViewStripMap = new TsMap_1.TsMap();
        _this.reelViewMap = new TsMap_1.TsMap();
        _this.reelOverlayMap = new TsMap_1.TsMap(); // layer index | ReelStripOverlay, index start from zero.
        /**
         * The number of layers
         *
         * @private
         * @type {number}
         * @memberof ReelControllerView
         */
        _this.overlaySize = 0;
        /**
         * The presentation layer index that used for win display.
         *
         * @protected
         * @type {number}
         * @memberof ReelControllerView
         */
        _this.baseOverlayIndex = 0;
        _this.idleAnimationsCompleteSignal = new MiniSignal();
        _this.idleTimerArray = new Array();
        return _this;
    }
    Object.defineProperty(ReelControllerView.prototype, "currentReelSetIndex", {
        get: function () {
            if (!this.reelModel) {
                return ReelConfig_1.ReelSet.BASE;
            }
            return this.reelModel.currentReelSetIndex;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReelControllerView.prototype, "currentReelSet", {
        get: function () {
            return this.reelSet[this.currentReelSetIndex];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReelControllerView.prototype, "currentReelView", {
        get: function () {
            return this.reelViewStripMap.get(this.currentReelSetIndex);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReelControllerView.prototype, "maskConfig", {
        get: function () {
            var config = (this.reelConfig.orientationMaskData)
                ? this.reelConfig.orientationMaskData.get(this.currentReelSetIndex).get(this.viewport.properOrientation)
                : null;
            var maskConfig = config || this.reelConfig.defaultReelsMask.get(this.currentReelSetIndex);
            if (!maskConfig) {
                throw new Error('can\'t find mask layout config');
            }
            return maskConfig;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReelControllerView.prototype, "layoutData", {
        get: function () {
            var orientationLayout;
            if (this.reelConfig.orientationLayoutData) {
                orientationLayout = this.reelConfig.orientationLayoutData.get(this.viewport.properOrientation);
            }
            var layoutData = orientationLayout || this.reelConfig.defaultLayoutData;
            if (!layoutData) {
                throw new Error('can\'t layout config.');
            }
            return layoutData;
        },
        enumerable: true,
        configurable: true
    });
    //#region INIT
    ReelControllerView.prototype.bindModel = function (model) {
        var _this = this;
        this.reelModel = model;
        this.reelOverlayMap.forEach(function (overlay) {
            overlay.bindModel(_this.reelModel);
        });
    };
    ReelControllerView.prototype.createElements = function (reelConfig) {
        this.reelSet = reelConfig.reelSet;
        this.reelConfig = reelConfig;
        this.maskContainer.name = 'maskContainer';
        this.reelsContainer.name = 'reelsContainer';
        this.mainContainer.addChild(this.maskContainer);
        this.maskContainer.addChild(this.reelsContainer);
        this.initReelsBackground();
        this.initReelsView();
        this.initReelsOverlay();
        this.initReelsFrame();
        this.createAnticipations();
        this.createSymbolAnimationPool();
    };
    /**
     * Add reel background to stage according to setting in config
     */
    ReelControllerView.prototype.initReelsBackground = function () {
        if (this.reelConfig.reelBackground != null) {
            this.reelBackground = pixi_js_1.Sprite.fromFrame(this.reelConfig.reelBackground.assetName);
            this.reelBackground.position.set(this.reelConfig.reelBackground.x, this.reelConfig.reelBackground.y);
            this.addChild(this.reelBackground);
        }
    };
    /**
     * initialize array with static picture and with reel mask
     */
    ReelControllerView.prototype.initReelsView = function () {
        var _this = this;
        this.reelsViewContainer = new PIXI.Container();
        this.reelsViewContainer.name = 'reelsView';
        var _loop_1 = function (reelSetIndex) {
            this_1.reelViewStripMap.set(+reelSetIndex, []);
            var reelSetContainer = new PIXI.Container();
            reelSetContainer.name = "" + reelSetIndex;
            this_1.reelViewMap.set(+reelSetIndex, reelSetContainer);
            this_1.reelSet[reelSetIndex].forEach(function (reelConfig, reelIndex) {
                var layoutData = _this.getSingleReelLayoutData(+reelSetIndex, reelIndex);
                var baseReelView = _this.createReelStripView();
                baseReelView.position = new PIXI.Point(layoutData.position.x, layoutData.position.y);
                // default visible = true, if config has visible setting, it will follow this.
                if (reelConfig.visible !== undefined) {
                    baseReelView.visible = reelConfig.visible;
                }
                if (_this.reelConfig.individualReelsMask) {
                    var reelMask = _this.getReelMask(0, 0, reelConfig.width, reelConfig.symbol.height * reelConfig.symbolsOnReel);
                    baseReelView.setMask(reelMask);
                }
                reelSetContainer.addChild(baseReelView.container);
                baseReelView.id = reelIndex;
                _this.reelViewStripMap.get(+reelSetIndex).push(baseReelView);
            });
            this_1.reelsViewContainer.addChild(reelSetContainer);
        };
        var this_1 = this;
        for (var _i = 0, _a = Object.keys(this.reelSet); _i < _a.length; _i++) {
            var reelSetIndex = _a[_i];
            _loop_1(reelSetIndex);
        }
        this.reelsContainer.addChild(this.reelsViewContainer);
    };
    /**
     * initialize array of items that only may the size of symbol can be larger than usual
     */
    ReelControllerView.prototype.initReelsOverlay = function () {
        this.reelsOverlayContainer.name = 'overlay-container';
        this.appendBasicOverlay();
        this.reelsContainer.addChild(this.reelsOverlayContainer);
    };
    /**
     * Append basic overlay used for symbol win display
     *
     * @private
     * @memberof ReelControllerView
     */
    ReelControllerView.prototype.appendBasicOverlay = function () {
        this.appendOverlay({
            overlayType: ReelStripOverlay_1.OverlayType.SYMBOL,
            rangeSymbols: this.reelConfig.reelDefinition.rangeSymbols,
            symbolConfig: this.reelConfig.symbolDefinition
        });
        this.baseOverlayIndex = this.overlaySize - 1;
    };
    //#endregion INIT
    /**
     * Append additional overlay to view for further control. reference: WildLock, Replacing
     *
     * @protected
     * @param {IReelStripOverlayConfig} config
     * @memberof ReelControllerView
     */
    ReelControllerView.prototype.appendOverlay = function (config) {
        var overlay = es5_1.Container.get(ReelStripOverlay_1.ReelStripOverlay);
        overlay.init(config);
        overlay.createPool(config.name, config.size);
        overlay.symbolAnimationCompleteSignal.add(this.onSymbolAnimationComplete, this);
        this.reelOverlayMap.set(this.overlaySize, overlay);
        this.reelsOverlayContainer.addChild(overlay.mainContainer);
        this.overlaySize++;
    };
    ReelControllerView.prototype.resetOverlay = function (layer) {
        this.reelOverlayMap.get(layer).reset();
    };
    ReelControllerView.prototype.cleanAllOverlays = function () {
        this.reelOverlayMap.forEach(function (overlay) {
            if (overlay.lock === false) {
                overlay.clean();
            }
        });
    };
    ReelControllerView.prototype.cleanOverlays = function (layers) {
        var _this = this;
        layers.forEach(function (layer) {
            if (_this.reelOverlayMap.get(layer).lock === false) {
                _this.reelOverlayMap.get(layer).clean();
            }
        });
    };
    ReelControllerView.prototype.hideAllOverlays = function () {
        this.reelOverlayMap.forEach(function (overlay) {
            if (overlay.lock === false) {
                overlay.visible = false;
            }
        });
    };
    /**
     * Return overlay objects by given layer and reel index.
     *
     * @param {number} layer
     * @param {number} reelIndex
     * @returns {Array<SymbolObject>}
     * @memberof ReelControllerView
     */
    ReelControllerView.prototype.getObjectsAtOverlay = function (layer, reelIndex) {
        return this.reelOverlayMap.get(layer).getObjectsByReel(reelIndex);
    };
    /**
     * lock the layer will prevent the layer hide/clean by cleanAllOverlays()/hideAllOverlays().
     *
     * @param {number} layer
     * @param {boolean} [value=true]
     * @memberof ReelControllerView
     */
    ReelControllerView.prototype.lockOverlay = function (layer, value) {
        if (value === void 0) { value = true; }
        this.reelOverlayMap.get(layer).lock = value;
    };
    ReelControllerView.prototype.lockOverlayPosition = function (layer, position) {
        var overlay = this.reelOverlayMap.get(layer);
        overlay.lockPosition(position);
    };
    ReelControllerView.prototype.updateOverlayLayout = function (positions) {
        this.reelOverlayMap.forEach(function (overlay) {
            overlay.updateLayout(positions);
        });
    };
    ReelControllerView.prototype.updateOverlayPosition = function (layer, position) {
        this.reelOverlayMap.get(layer).updateLayerPosition(position);
    };
    /**
     * Get object's position if given position in its triggerPostions.
     *
     * @param {number} layer
     * @param {SymbolPosition} symbolPosition
     * @returns {SymbolPosition}
     * @memberof ReelControllerView
     */
    ReelControllerView.prototype.getActualPosition = function (layer, symbolPosition) {
        var object = this.getSymbolObject(layer, symbolPosition);
        if (object && object.isContain(symbolPosition)) {
            return object.position;
        }
        else {
            return symbolPosition;
        }
    };
    /**
     * Get overlay's symbol object
     *
     * @param {number} layer
     * @param {SymbolPosition} symbolPosition
     * @returns {SymbolObject}
     * @memberof ReelControllerView
     */
    ReelControllerView.prototype.getSymbolObject = function (layer, symbolPosition) {
        var overlay = this.reelOverlayMap.get(layer);
        return overlay.getObjectByPosition(symbolPosition);
    };
    /**
     * Play animation on specific layer
     *
     * @param {(string | SymbolAnimationPostfix)} animationName
     * @param {number} layer
     * @param {SymbolPosition} position
     * @param {Array<SymbolPosition>} [triggerPositions] - assign multiple positions that can be trigger animation. Defaults to param:position.
     * @param {boolean} [hideBaseLayer=true]
     * @returns {boolean}
     * @memberof ReelControllerView
     */
    ReelControllerView.prototype.playOverlayAnimation = function (animationName, layer, position, triggerPositions, hideBaseLayer) {
        if (hideBaseLayer === void 0) { hideBaseLayer = true; }
        if (!this.reelOverlayMap.has(layer)) {
            console.error('Out of range.');
            return;
        }
        var overlay = this.reelOverlayMap.get(layer);
        var object = overlay.getObjectByPosition(position);
        var result;
        if (!object) {
            object = overlay.getObjectAt(animationName, position);
            if (!object.triggerPositions) {
                object.triggerPositions = (triggerPositions) ? triggerPositions : [position];
            }
            overlay.setSymbolMapAt(object, position);
            var result_1 = overlay.playAnimationAt(animationName, position);
            if (result_1 && hideBaseLayer) {
                this.currentReelView[position.reelIndex].hideSymbol(position.symbolIndex);
            }
        }
        else {
            result = overlay.playAnimationAt(animationName, object.position);
            if (result && hideBaseLayer) {
                this.currentReelView[object.position.reelIndex].hideSymbol(object.position.symbolIndex);
            }
        }
        return result;
    };
    ReelControllerView.prototype.placeOverlayAnimationAt = function (animationName, layer, position) {
        if (!this.reelOverlayMap.has(layer)) {
            console.error('Out of range.');
            return;
        }
        var overlay = this.reelOverlayMap.get(layer);
        var object = overlay.placeAnimationAt(animationName, position);
        return object;
    };
    ReelControllerView.prototype.hideOverlaySymbol = function (layer, position) {
        var overlay = this.reelOverlayMap.get(layer);
        overlay.hideSymbol(position);
    };
    ReelControllerView.prototype.getSingleReelLayoutData = function (reelSetIndex, reelIndex) {
        var orientationLayout;
        if (this.viewport.properOrientation === Viewport_1.Orientation.LANDSCAPE) {
            orientationLayout = this.reelConfig.reelSet[reelSetIndex][reelIndex].landscapePosition;
        }
        else if (this.viewport.properOrientation === Viewport_1.Orientation.PORTRAIT) {
            orientationLayout = this.reelConfig.reelSet[reelSetIndex][reelIndex].portraitPosition;
        }
        var layoutData = orientationLayout || this.reelConfig.defaultReelPosition[reelIndex];
        return layoutData;
    };
    ReelControllerView.prototype.getReelMask = function (x, y, width, height) {
        var reelMask = new pixi_js_1.Graphics();
        reelMask.beginFill(0);
        reelMask.drawRect(0, 0, width, height);
        reelMask.endFill();
        reelMask.position.x = x;
        reelMask.position.y = y;
        return reelMask;
    };
    ReelControllerView.prototype.createReelStripView = function () {
        return es5_1.Container.get(ReelStripView_1.ReelStripView);
    };
    /**
     * Add reel frame to stage according to setting in config
     */
    ReelControllerView.prototype.initReelsFrame = function () {
        if (this.reelConfig.reelsFrames != null) {
            if (this.reelFrames == undefined) {
                this.reelFrames = new Array();
            }
            for (var i = 0; i < this.reelConfig.reelsFrames.length; i++) {
                var reelsFrame = this.reelConfig.reelsFrames[i];
                this.reelFrames.push(pixi_js_1.Sprite.fromImage(reelsFrame.assetName));
                this.reelFrames[i].position.set(reelsFrame.x, reelsFrame.y);
                if (reelsFrame.scaleX != undefined && reelsFrame.scaleY != undefined) {
                    this.reelFrames[i].scale.set(reelsFrame.scaleX, reelsFrame.scaleY);
                }
                this.addChild(this.reelFrames[i]);
            }
        }
    };
    ReelControllerView.prototype.createAnticipations = function () {
        if (this.reelConfig.anticipationData.animations == undefined || this.reelConfig.anticipationData.animations.length == 0) {
            return;
        }
        this.anticipation = es5_1.Container.get(Anticipation_1.Anticipation);
        this.anticipation.initialize(this.reelConfig);
        this.addChild(this.anticipation);
    };
    ReelControllerView.prototype.createSymbolAnimationPool = function () {
        var symbols = this.reelConfig.reelDefinition.rangeSymbols;
        var numColumns = new Array();
        for (var reelSetIndex in this.reelSet) {
            if (this.reelSet.hasOwnProperty(reelSetIndex)) {
                numColumns.push(this.reelSet[reelSetIndex].length);
            }
        }
        var maxAnimNeeded = Math.max.apply(Math, numColumns);
        symbols.forEach(function (symbolName) {
            for (var type in ReelsEnums_1.SymbolAnimationPostfix) {
                if (typeof type === 'string') {
                    var name = 'symbol_' + symbolName + ReelsEnums_1.SymbolAnimationPostfix[type];
                    Animation_1.Animation.createAnimationPool(name, maxAnimNeeded);
                }
            }
        });
    };
    ReelControllerView.prototype.setSymbolsStateForAll = function (state) {
        var _this = this;
        this.currentReelSet.forEach(function (reel, reelIndex) {
            for (var symbolIndex = 0; symbolIndex < _this.currentReelSet[reelIndex].symbolsOnReel; symbolIndex++) {
                _this.currentReelView[reelIndex].showSymbol(symbolIndex);
                _this.currentReelView[reelIndex].setSymbolState(symbolIndex, state);
            }
        });
    };
    ReelControllerView.prototype.setSymbolNameWithState = function (position, symbolName, state, ignoreExtra) {
        if (ignoreExtra === void 0) { ignoreExtra = true; }
        this.currentReelView[position.reelIndex].setSymbolNameWithState(position.symbolIndex, symbolName, state, ignoreExtra);
    };
    ReelControllerView.prototype.reelInitView = function (reelIndex, reelStripModel) {
        this.currentReelView[reelIndex].reelInit(reelStripModel);
    };
    ReelControllerView.prototype.onSymbolAnimationComplete = function (position, type) {
        this.reelOverlayMap.get(this.baseOverlayIndex).hideSymbol(position);
        this.currentReelView[position.reelIndex].showSymbol(position.symbolIndex);
        if (type != ReelsEnums_1.SymbolAnimationPostfix.DROPPED && type != ReelsEnums_1.SymbolAnimationPostfix.ANTICIPATION) {
            this.completedAnimationCounter--;
            if (this.completedAnimationCounter == 0) {
                if (type == ReelsEnums_1.SymbolAnimationPostfix.WIN || this.checkWildMultiplierAnimationType(type)) {
                    this.dispatchAllSymbolsAnimationComplete();
                }
                else if (type == ReelsEnums_1.SymbolAnimationPostfix.IDLE) {
                    this.idleAnimationsCompleteSignal.dispatch();
                }
            }
        }
    };
    ReelControllerView.prototype.dispatchAllSymbolsAnimationComplete = function () {
        GlobalDispatcher_1.GlobalDispatcher.dispatchIntoExpectedStates(ReelControllerView.ALL_SYMBOLS_ANIMATION_COMPLETE, [
            this.stateNames.allLineWin,
            this.stateNames.skip_allLineWin,
            this.stateNames.showWinning,
            this.stateNames.showWinningLoop,
            this.stateNames.prefeatureWinning,
            this.stateNames.freeSpinsAllLineWin,
            this.stateNames.skip_freeSpinsAllLineWin,
            this.stateNames.freeSpinsShowWinning
        ]);
    };
    ReelControllerView.prototype.checkWildMultiplierAnimationType = function (type) {
        if (type == ReelsEnums_1.SymbolAnimationPostfix.WILD_X2 ||
            type == ReelsEnums_1.SymbolAnimationPostfix.WILD_X3 ||
            type == ReelsEnums_1.SymbolAnimationPostfix.WILD_X4) {
            return true;
        }
        return false;
    };
    ReelControllerView.prototype.updateContainerPosition = function () {
        this.reelsViewContainer.position.x = this.layoutData.position.x;
        this.reelsViewContainer.position.y = this.layoutData.position.y;
        var scale = this.layoutData.scale || 1;
        this.reelsViewContainer.scale.set(scale, scale);
        this.reelsOverlayContainer.position.x = this.reelsViewContainer.position.x;
        this.reelsOverlayContainer.position.y = this.reelsViewContainer.position.y;
        this.reelsOverlayContainer.scale.set(this.reelsViewContainer.scale.x, this.reelsViewContainer.scale.y);
    };
    ReelControllerView.prototype.updateReelPosition = function (orientation) {
        var reelSet = this.reelSet[this.currentReelSetIndex];
        var viewContainer = this.reelViewMap.get(this.currentReelSetIndex);
        if (viewContainer.children.length === 0) {
            return;
        }
        var reelPositions = new Array();
        for (var index = 0; index < reelSet.length; index++) {
            var positionData = (orientation === Viewport_1.Orientation.PORTRAIT) ? reelSet[index].portraitPosition : reelSet[index].landscapePosition;
            positionData = positionData || this.reelConfig.defaultReelPosition[index];
            viewContainer.children[index].position.x = positionData.position.x;
            viewContainer.children[index].position.y = positionData.position.y;
            reelPositions.push(positionData.position);
        }
        this.updateOverlayLayout(reelPositions);
    };
    /**
     * when we try show win line animation, we hide static symbol and show overlay symbol
     * @param {WinLine} winItemsData for show win symbols
     * @param {Array< Array <number> >} loseSymbolsPosition the position of symbols that we should transform
     * to LOSE state
     */
    ReelControllerView.prototype.showWinLine = function (winItemsData) {
        var _this = this;
        this.deleteAllAnimations();
        var isWildMultiplier = false;
        winItemsData.winTable.forEach(function (reel, reelIndex) {
            if (reel === null || reel.length === 0) {
                return;
            }
            reel.forEach(function (value, symbolIndex) {
                if (!value) { // skip lose symbol
                    return;
                }
                // if the symbol type is wild and wild_multiplier feature, we need change wild animation.
                isWildMultiplier = false;
                var symbolId = symbolIndex + _this.reelModel.countTopExtraSymbol;
                if (winItemsData.wildMultiplier != undefined && winItemsData.wildMultiplier.length > 0) {
                    winItemsData.wildMultiplier.forEach(function (feature) {
                        var wildId = feature.symbol_index + _this.reelModel.countTopExtraSymbol;
                        if (feature.reel_index == reelIndex && wildId == symbolId) { // is wild Symbol
                            isWildMultiplier = true;
                            _this.playWildMultiplierAnimation(reelIndex, symbolIndex, feature.multiplier);
                        }
                    });
                }
                if (!isWildMultiplier) {
                    var displaylayers = _this.getWinDisplayLayers();
                    var objectArray_1 = [];
                    displaylayers.forEach(function (layer) {
                        var object = _this.getSymbolObject(layer, { reelIndex: reelIndex, symbolIndex: symbolIndex });
                        if (object) {
                            objectArray_1.push({ layer: layer, object: object });
                        }
                    });
                    if (objectArray_1.length > 0) {
                        objectArray_1.forEach(function (item) {
                            var position = _this.getActualPosition(item.layer, { reelIndex: reelIndex, symbolIndex: symbolIndex });
                            _this.playOverlayAnimation(ReelsEnums_1.SymbolAnimationPostfix.WIN, item.layer, position);
                        });
                    }
                    else {
                        var position = _this.getActualPosition(_this.baseOverlayIndex, { reelIndex: reelIndex, symbolIndex: symbolIndex });
                        _this.playOverlayAnimation(ReelsEnums_1.SymbolAnimationPostfix.WIN, _this.baseOverlayIndex, position);
                    }
                    _this.completedAnimationCounter++;
                }
            });
        });
        // if ( this.completedAnimationCounter == 0 ) { // when we do not symbols animation
        // 	this.debugAnimationTimer = new SimpleTimer( 3000, this.dispatchAllSymbolsAnimationComplete.bind( this ) );
        // }
    };
    /**
     * The list of avaliable layers that will be looped when show win line
     *
     * @protected
     * @returns {Array<number>}
     * @memberof ReelControllerView
     */
    ReelControllerView.prototype.getWinDisplayLayers = function () {
        return [this.baseOverlayIndex];
    };
    ReelControllerView.prototype.updateVisibleByActiveReelSet = function () {
        var _this = this;
        this.reelsViewContainer.children.forEach(function (reelSetView, index) {
            reelSetView.visible = (index === _this.currentReelSetIndex);
        });
        this.updateMainReelMask();
    };
    ReelControllerView.prototype.playWildMultiplierAnimation = function (reelIndex, symbolIndex, multiplier) {
        var wildType;
        switch (multiplier) {
            case 2:
                wildType = ReelsEnums_1.SymbolAnimationPostfix.WILD_X2;
                break;
            case 3:
                wildType = ReelsEnums_1.SymbolAnimationPostfix.WILD_X3;
                break;
            case 4:
                wildType = ReelsEnums_1.SymbolAnimationPostfix.WILD_X4;
                break;
        }
        if (wildType != undefined) {
            this.currentReelView[reelIndex].hideSymbol(symbolIndex);
            this.playOverlayAnimation(wildType, this.baseOverlayIndex, {
                reelIndex: reelIndex,
                symbolIndex: symbolIndex
            });
            this.completedAnimationCounter++;
        }
    };
    ReelControllerView.prototype.hideSymbolFromCurrentView = function (reelIndex, symbolIndex) {
        this.currentReelView[reelIndex].hideSymbol(symbolIndex);
    };
    ReelControllerView.prototype.showSymbolFromCurrentView = function (reelIndex, symbolIndex) {
        this.currentReelView[reelIndex].showSymbol(symbolIndex);
    };
    ReelControllerView.prototype.moveLastSymbolToTop = function (reelIndex, symbolData, state, spinDirection) {
        this.currentReelView[reelIndex].moveLastSymbolToTop(symbolData, state, spinDirection);
    };
    ReelControllerView.prototype.tweenSymbolsUpdate = function (reelIndex, symbolIndex, y) {
        this.currentReelView[reelIndex].tweenSymbolsUpdate(symbolIndex, y);
    };
    ReelControllerView.prototype.setSymbolStateFromPositions = function (winTable, winState, loseState) {
        var _this = this;
        winTable.forEach(function (reelPosition, reelIndex) {
            reelPosition.forEach(function (value, symbolIndex) {
                var symbolState = (value) ? winState : loseState;
                _this.currentReelView[reelIndex].setSymbolState(symbolIndex, symbolState);
            });
        });
    };
    ReelControllerView.prototype.deleteAllAnimations = function () {
        var numTimers = this.idleTimerArray.length;
        for (var i = 0; i < numTimers; i++) {
            var timer = this.idleTimerArray.pop();
            timer.stop();
            timer.destroy();
        }
        this.completedAnimationCounter = 0;
    };
    /**
     * when we try show drop animation, we hide static symbol and show overlay symbol
     */
    ReelControllerView.prototype.symbolDropAnimation = function (reelIndex, symbolIndex) {
        this.playOverlayAnimation(ReelsEnums_1.SymbolAnimationPostfix.DROPPED, this.baseOverlayIndex, {
            reelIndex: reelIndex,
            symbolIndex: symbolIndex
        });
    };
    //#region IDLE_SYMBOL_HANDLE
    /**
     * when we try show idle animation, we hide static symbol and show overlay symbol
     */
    ReelControllerView.prototype.playIdleAnimationsLoop = function () {
        var _this = this;
        this.deleteAllAnimations();
        this.currentReelSet.forEach(function (reel, reelIndex) {
            for (var symbolIndex = 0; symbolIndex < reel.symbolsOnReel; symbolIndex++) {
                _this.playOverlayAnimation(ReelsEnums_1.SymbolAnimationPostfix.IDLE, _this.baseOverlayIndex, {
                    reelIndex: reelIndex,
                    symbolIndex: symbolIndex
                });
            }
        });
    };
    ReelControllerView.prototype.playRandomIdleAnimations = function () {
        var _this = this;
        this.deleteAllAnimations();
        this.currentReelSet.forEach(function (reel, reelIndex) {
            var _loop_2 = function (symbolIndex) {
                var randomData = _this.reelConfig.idleAnimationRandomChance;
                if (Math.random() < randomData.percent) {
                    var time = 1000 * ((Math.random() * randomData.startDelayMax) + randomData.startDelayMin);
                    _this.idleTimerArray.push(new SimpleTimer_1.SimpleTimer(time, function () {
                        _this.playOverlayAnimation(ReelsEnums_1.SymbolAnimationPostfix.IDLE, _this.baseOverlayIndex, {
                            reelIndex: reelIndex,
                            symbolIndex: symbolIndex
                        });
                    }));
                }
            };
            for (var symbolIndex = 0; symbolIndex < reel.symbolsOnReel; symbolIndex++) {
                _loop_2(symbolIndex);
            }
        });
    };
    //#endregion IDLE_SYMBOL_HANDLE
    //#region SHAKING_EFFECT
    ReelControllerView.prototype.playShaking = function (reelIndex) {
        if (!this.reelConfig.symbolDefinition.shakeConfig) {
            return false;
        }
        for (var symbolIndex = 0; symbolIndex < this.currentReelSet[reelIndex].symbolsOnReel; symbolIndex++) {
            this.currentReelView[reelIndex].hideSymbol(symbolIndex);
            this.reelOverlayMap.get(this.baseOverlayIndex).playSymbolShaking({
                reelIndex: reelIndex,
                symbolIndex: symbolIndex
            });
        }
        return true;
    };
    ReelControllerView.prototype.stopShaking = function () {
        var _this = this;
        this.currentReelSet.forEach(function (reel, reelIndex) {
            for (var symbolIndex = 0; symbolIndex < reel.symbolsOnReel; symbolIndex++) {
                var restorePosition = {
                    x: _this.currentReelView[reelIndex].getSymbolContainer(symbolIndex).x,
                    y: _this.currentReelView[reelIndex].getSymbolContainer(symbolIndex).y,
                };
                _this.currentReelView[reelIndex].showSymbol(symbolIndex);
                _this.reelOverlayMap.get(_this.baseOverlayIndex).stopSymbolShaking({
                    reelIndex: reelIndex,
                    symbolIndex: symbolIndex
                }, restorePosition);
            }
        });
        this.cleanAllOverlays();
    };
    //#endregion SHAKING_EFFECT
    //#region ANTICIPATE_HANDLE
    ReelControllerView.prototype.anticipateReel = function (reelId) {
        if (!this.anticipation) {
            return;
        }
        this.anticipation.anticipateReel(this.currentReelView[reelId], reelId);
    };
    ReelControllerView.prototype.playAnticipationIntro = function (reelId) {
        if (!this.anticipation) {
            return;
        }
        this.anticipation.playAnticipationIntro(this.currentReelView[reelId], reelId);
    };
    ReelControllerView.prototype.anticipateScatters = function (currentReelIndex, dropped) {
        var _this = this;
        dropped.forEach(function (position, index) {
            if (position.reelIndex === currentReelIndex) {
                _this.playOverlayAnimation(ReelsEnums_1.SymbolAnimationPostfix.ANTICIPATION, _this.baseOverlayIndex, position);
            }
        });
    };
    ReelControllerView.prototype.stopAnticipate = function () {
        if (!this.anticipation) {
            return;
        }
        this.anticipation.stopAnticipate();
    };
    //#endregion ANTICIPATE_HANDLE
    ReelControllerView.prototype.zoom = function (scale, position) {
        this.reelsContainer.scale = new PIXI.Point(scale, scale);
        this.reelsContainer.position = position;
    };
    ReelControllerView.prototype.getReelStripPosition = function (index) {
        return this.currentReelView[index].position;
    };
    ReelControllerView.prototype.setReelStripPosition = function (index, position) {
        this.currentReelView[index].position = position;
    };
    ReelControllerView.prototype.getStripOriginalPosition = function (index) {
        return this.currentReelView[index].originalPosition;
    };
    //#region LAYOUT_HANDLE
    ReelControllerView.prototype.positionUpdateOnTransition = function () {
        this.updateReelPosition(this.viewport.orientation);
    };
    ReelControllerView.prototype.portraitLayout = function () {
        _super.prototype.portraitLayout.call(this);
        this.updateContainerPosition();
        this.updateReelPosition(Viewport_1.Orientation.PORTRAIT);
        this.updateMainReelMask();
    };
    ReelControllerView.prototype.landscapeLayout = function () {
        _super.prototype.landscapeLayout.call(this);
        this.updateContainerPosition();
        this.updateReelPosition(Viewport_1.Orientation.LANDSCAPE);
        this.updateMainReelMask();
    };
    //#endregion LAYOUT_HANDLE
    //#region MASK_CONTROL
    ReelControllerView.prototype.updateMainReelMask = function () {
        if (this.maskContainer.mask) {
            var oldMask = this.maskContainer.mask;
            this.maskContainer.mask = undefined;
            this.maskContainer.removeChild(oldMask);
        }
        var mask = this.createReelMask();
        this.maskContainer.mask = mask;
        this.maskContainer.addChild(mask);
    };
    ReelControllerView.prototype.createReelMask = function () {
        if (this.reelConfig.orientationMaskData || this.reelConfig.defaultReelsMask) {
            var mask = this.maskConfig;
            if (this.isMaskData(mask)) {
                return this.getReelMask(mask.x, mask.y, mask.width, mask.height);
            }
            else {
                return pixi_js_1.Sprite.fromFrame(mask);
            }
        }
        else {
            return this.getDefaultGameMask();
        }
    };
    ReelControllerView.prototype.getDefaultGameMask = function () {
        var firstConfig = this.reelSet[this.currentReelSetIndex][0];
        var firstConfigPosition = this.getSingleReelLayoutData(this.currentReelSetIndex, 0).position;
        var lastConfig = this.reelSet[this.currentReelSetIndex][this.reelSet[this.currentReelSetIndex].length - 1];
        var lastConfigPosition = this.getSingleReelLayoutData(this.currentReelSetIndex, this.reelSet[this.currentReelSetIndex].length - 1).position;
        return this.getReelMask(firstConfigPosition.x, firstConfigPosition.y, lastConfigPosition.x + lastConfig.width - firstConfigPosition.x, firstConfig.symbol.height * firstConfig.symbolsOnReel);
    };
    ReelControllerView.prototype.isMaskData = function (mask) {
        return mask.x !== undefined;
    };
    ReelControllerView.ALL_SYMBOLS_ANIMATION_COMPLETE = 'allSymbolsAnimationComplete';
    return ReelControllerView;
}(SlotCompView_1.SlotCompView));
exports.ReelControllerView = ReelControllerView;


/***/ }),
/* 230 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var AbstractSymbol = /** @class */ (function () {
    function AbstractSymbol() {
        this.triggerPositions = null;
    }
    Object.defineProperty(AbstractSymbol.prototype, "x", {
        get: function () {
            return this._symbolContainer.x;
        },
        set: function (value) {
            this._symbolContainer.x = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractSymbol.prototype, "y", {
        get: function () {
            return this._symbolContainer.y;
        },
        set: function (value) {
            this._symbolContainer.y = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractSymbol.prototype, "name", {
        get: function () {
            return this._symbolContainer.name;
        },
        set: function (value) {
            this._symbolContainer.name = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractSymbol.prototype, "visible", {
        get: function () {
            return this._symbolContainer.visible;
        },
        set: function (value) {
            this._symbolContainer.visible = value;
        },
        enumerable: true,
        configurable: true
    });
    AbstractSymbol.prototype.isContain = function (symbolPosition) {
        var result = false;
        this.triggerPositions.forEach(function (item) {
            if (item.reelIndex === symbolPosition.reelIndex && item.symbolIndex === symbolPosition.symbolIndex) {
                result = true;
            }
        });
        return result;
    };
    return AbstractSymbol;
}());
exports.AbstractSymbol = AbstractSymbol;


/***/ }),
/* 231 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var SlotStates_1 = __webpack_require__(31);
var SlotUIStates = /** @class */ (function (_super) {
    __extends(SlotUIStates, _super);
    function SlotUIStates() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.dashboardIdle = 'dashboardIdle';
        _this.dashboardDisable = 'dashboardDisable';
        _this.spinStopReady = 'spinStopReady';
        _this.freeSpinStopReady = 'freeSpinStopReady';
        _this.autoSpinDashboardIdle = 'autoSpinDashboardIdle';
        _this.autoSpinStartSpin = 'autoSpinStartSpin';
        _this.autoSpinSpinning = 'autoSpinSpinning';
        _this.autoSpinSpinStop = 'autoSpinSpinStop';
        _this.autoSpinSpinStopReady = 'autoSpinSpinStopReady';
        _this.skip_autoSpinSpinning = 'skip_autoSpinSpinning';
        _this.skip_autoSpinSpinStop = 'skip_autoSpinSpinStop';
        _this.autoSpinAllLineWin = 'autoSpinAllLineWin';
        _this.autoSpinShowWinning = 'autoSpinShowWinning';
        _this.skip_autoSpinShowWinning = 'skip_autoSpinShowWinning';
        _this.genplusSpinning = 'genplusSpinning';
        return _this;
    }
    SlotUIStates = __decorate([
        es5_1.Singleton
    ], SlotUIStates);
    return SlotUIStates;
}(SlotStates_1.SlotStates));
exports.SlotUIStates = SlotUIStates;


/***/ }),
/* 232 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var DialogView_1 = __webpack_require__(220);
var SlotDialogView = /** @class */ (function (_super) {
    __extends(SlotDialogView, _super);
    function SlotDialogView() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SlotDialogView.prototype.getAssetsList = function () {
        var asset = [
            {
                assetKey: 'dialog',
                assetURL: 'assets/dialog/dialog.json'
            }
        ];
        return asset;
    };
    return SlotDialogView;
}(DialogView_1.DialogView));
exports.SlotDialogView = SlotDialogView;


/***/ }),
/* 233 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var MarqueeView_1 = __webpack_require__(221);
var SlotMarqueeView = /** @class */ (function (_super) {
    __extends(SlotMarqueeView, _super);
    function SlotMarqueeView() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SlotMarqueeView.prototype.transitionToFreeSpins = function () {
        //
    };
    SlotMarqueeView.prototype.transitionToBaseGame = function () {
        //
    };
    return SlotMarqueeView;
}(MarqueeView_1.MarqueeView));
exports.SlotMarqueeView = SlotMarqueeView;


/***/ }),
/* 234 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var SimpleTween_1 = __webpack_require__(27);
var BitmapTextField_1 = __webpack_require__(109);
var TweenBitmapTextField = /** @class */ (function (_super) {
    __extends(TweenBitmapTextField, _super);
    function TweenBitmapTextField() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TweenBitmapTextField.prototype.startTween = function (tweenConfig, callback) {
        var _this = this;
        this.stopTween();
        this.labelTween = null;
        if (!tweenConfig) {
            tweenConfig = this.config.tweenConfig;
        }
        // init to starting point
        for (var property in tweenConfig.tweenStarting) {
            if (this.label[property] === undefined) {
                continue;
            }
            this.label[property] = tweenConfig.tweenStarting[property];
        }
        // setup destination
        this.labelTween = new SimpleTween_1.SimpleTween(this.label)
            .to(tweenConfig.tweenDestination, tweenConfig.duration)
            .onComplete(function () {
            _this.labelTween = null;
            if (callback) {
                callback();
            }
        })
            .delay((tweenConfig.startDelay ? tweenConfig.startDelay : 0))
            .start();
    };
    TweenBitmapTextField.prototype.stopTween = function () {
        if (this.labelTween != undefined) {
            this.labelTween.stop();
        }
    };
    TweenBitmapTextField.elementType = 'TweenBitmapTextField';
    return TweenBitmapTextField;
}(BitmapTextField_1.BitmapTextField));
exports.TweenBitmapTextField = TweenBitmapTextField;


/***/ }),
/* 235 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var TsMap_1 = __webpack_require__(2);
var Viewport_1 = __webpack_require__(6);
var IBigWinConfig_1 = __webpack_require__(67);
var BigWinConfig = /** @class */ (function () {
    function BigWinConfig() {
        this.name = 'bigWin';
        this.valueLabelTweenInConfig = {
            duration: 500,
            tweenStarting: { y: 500, alpha: 0 },
            tweenDestination: { y: 850, alpha: 1 }
        };
        this.valueLabelTweenOutConfig = {
            duration: 500,
            tweenStarting: { alpha: 1 },
            tweenDestination: { alpha: 0 }
        };
        this.bigWinValueLabel = {
            name: 'bigWinValueLabel',
            key: 'bigWinValueLabel',
            isOrientationSupported: true,
            position: { x: 360, y: 0 },
            anchor: { x: 0.5, y: 0.5 },
            style: {
                font: {
                    name: 'BigWinFont',
                    size: 120,
                },
                align: 'center',
            },
            tweenConfig: this.valueLabelTweenInConfig
        };
        this.bigWinAnimation = {
            name: 'bigwinSpineAnimation',
            animationName: 'bigwinSpineAnimation',
            isOrientationSupported: true,
            position: { x: 360, y: 550 }
        };
        this.winTierSettings = [
            {
                tier: IBigWinConfig_1.BigWinTierType.Numbers,
                winSpan: {
                    start: 0,
                    end: 10
                },
                countTime: 1000,
                stayTime: 1500,
                timeTable: [
                    {
                        tier: IBigWinConfig_1.BigWinTierType.Numbers,
                        timeSpan: {
                            start: 0,
                            end: 1000
                        }
                    }
                ]
            },
            {
                tier: IBigWinConfig_1.BigWinTierType.Balance,
                winSpan: {
                    start: 10,
                    end: 20
                },
                countTime: 2000,
                stayTime: 1500,
                timeTable: [
                    {
                        tier: IBigWinConfig_1.BigWinTierType.Balance,
                        timeSpan: {
                            start: 0,
                            end: 2000
                        }
                    }
                ]
            }, {
                tier: IBigWinConfig_1.BigWinTierType.Coins,
                winSpan: {
                    start: 20,
                    end: 30
                },
                countTime: 3000,
                stayTime: 1500,
                timeTable: [
                    {
                        tier: IBigWinConfig_1.BigWinTierType.Numbers,
                        timeSpan: {
                            start: 0,
                            end: 2000
                        }
                    }, {
                        tier: IBigWinConfig_1.BigWinTierType.Coins,
                        timeSpan: {
                            start: 2000,
                            end: 3000
                        }
                    }
                ]
            }, {
                tier: IBigWinConfig_1.BigWinTierType.BigWin,
                winSpan: {
                    start: 30,
                    end: 50
                },
                countTime: 5000,
                stayTime: 1500,
                timeTable: [
                    {
                        tier: IBigWinConfig_1.BigWinTierType.Numbers,
                        timeSpan: {
                            start: 0,
                            end: 1000
                        }
                    }, {
                        tier: IBigWinConfig_1.BigWinTierType.Coins,
                        timeSpan: {
                            start: 1000,
                            end: 2000
                        }
                    }, {
                        tier: IBigWinConfig_1.BigWinTierType.BigWin,
                        timeSpan: {
                            start: 2000,
                            end: 5000
                        }
                    }
                ]
            }, {
                tier: IBigWinConfig_1.BigWinTierType.ExtremeBigWin,
                winSpan: {
                    start: 50,
                    end: 100
                },
                countTime: 8000,
                stayTime: 1500,
                timeTable: [
                    {
                        tier: IBigWinConfig_1.BigWinTierType.Numbers,
                        timeSpan: {
                            start: 0,
                            end: 1000
                        }
                    }, {
                        tier: IBigWinConfig_1.BigWinTierType.Coins,
                        timeSpan: {
                            start: 1000,
                            end: 2000
                        }
                    }, {
                        tier: IBigWinConfig_1.BigWinTierType.BigWin,
                        timeSpan: {
                            start: 2000,
                            end: 4000
                        }
                    }, {
                        tier: IBigWinConfig_1.BigWinTierType.ExtremeBigWin,
                        timeSpan: {
                            start: 4000,
                            end: 8000
                        }
                    }
                ]
            }, {
                tier: IBigWinConfig_1.BigWinTierType.UltraExtremeBigWin,
                winSpan: {
                    start: 100,
                    end: 99999
                },
                countTime: 10000,
                stayTime: 1500,
                timeTable: [
                    {
                        tier: IBigWinConfig_1.BigWinTierType.Numbers,
                        timeSpan: {
                            start: 0,
                            end: 1000
                        }
                    }, {
                        tier: IBigWinConfig_1.BigWinTierType.Coins,
                        timeSpan: {
                            start: 1000,
                            end: 2000
                        }
                    }, {
                        tier: IBigWinConfig_1.BigWinTierType.BigWin,
                        timeSpan: {
                            start: 2000,
                            end: 4000
                        }
                    }, {
                        tier: IBigWinConfig_1.BigWinTierType.ExtremeBigWin,
                        timeSpan: {
                            start: 4000,
                            end: 7000
                        }
                    }, {
                        tier: IBigWinConfig_1.BigWinTierType.UltraExtremeBigWin,
                        timeSpan: {
                            start: 7000,
                            end: 10000
                        }
                    }
                ]
            }
        ];
        this.coreElementOrientationConfig = new TsMap_1.TsMap([
            [
                Viewport_1.Orientation.PORTRAIT, new TsMap_1.TsMap([
                    [
                        this.bigWinValueLabel.name, {
                            position: this.bigWinValueLabel.position
                        }
                    ],
                    [
                        this.bigWinAnimation.name, {
                            position: this.bigWinAnimation.position
                        }
                    ]
                ])
            ],
            [
                Viewport_1.Orientation.LANDSCAPE, new TsMap_1.TsMap([
                    [
                        this.bigWinValueLabel.name, {
                            position: { x: 700, y: -290 }
                        }
                    ],
                    [
                        this.bigWinAnimation.name, {
                            position: { x: 720, y: 360 }
                        }
                    ]
                ])
            ]
        ]);
    }
    return BigWinConfig;
}());
exports.BigWinConfig = BigWinConfig;


/***/ }),
/* 236 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var GlobalDispatcher_1 = __webpack_require__(7);
var CompController_1 = __webpack_require__(43);
var SimpleTimer_1 = __webpack_require__(15);
var IBigWinConfig_1 = __webpack_require__(67);
var BigWinController_1 = __webpack_require__(93);
var CoinShowerConfig_1 = __webpack_require__(237);
var SlotCoinShowerView_1 = __webpack_require__(238);
var SlotCoinShowerController = /** @class */ (function (_super) {
    __extends(SlotCoinShowerController, _super);
    function SlotCoinShowerController(view) {
        var _this = _super.call(this, view) || this;
        _this.showering = false;
        _this.coinShowerView = view;
        return _this;
    }
    SlotCoinShowerController.prototype.init = function () {
        this.config = this.gameConfig.getConfig(CoinShowerConfig_1.CoinShowerConfig);
        if (this.coinShowerView != null) {
            this.coinShowerView.initialize(this.config);
        }
        this.finishStateAction();
    };
    SlotCoinShowerController.prototype.addEventListeners = function () {
        GlobalDispatcher_1.GlobalDispatcher.addListener(this, BigWinController_1.BigWinController.TIER_REACHED_EVENT, this.onTierReached);
        GlobalDispatcher_1.GlobalDispatcher.addListener(this, SlotCoinShowerController.STOP_COIN_SHOWER_EVENT, this.onCoinShowerStop);
    };
    SlotCoinShowerController.prototype.onTierReached = function (e) {
        if (e.data.tier == IBigWinConfig_1.BigWinTierType.Coins) {
            switch (e.data.finalTier) {
                case IBigWinConfig_1.BigWinTierType.ExtremeBigWin: {
                    this.startCoinShower(this.config.mediumShowerParticleDelay);
                }
                case IBigWinConfig_1.BigWinTierType.UltraExtremeBigWin: {
                    this.startCoinShower(this.config.largeShowerParticleDelay);
                }
                default: {
                    this.startCoinShower(this.config.smallShowerParticleDelay);
                }
            }
        }
    };
    SlotCoinShowerController.prototype.onCoinShowerStop = function (e) {
        this.stopCoinShower();
    };
    SlotCoinShowerController.prototype.baseGameIdle = function () {
        this.stopCoinShower();
        this.finishStateAction();
    };
    SlotCoinShowerController.prototype.transitionToBaseGame = function () {
        this.stopCoinShower();
        this.finishStateAction();
    };
    SlotCoinShowerController.prototype.stopCoinShower = function () {
        if (this.showering) {
            this.respawnTimer.stop();
            this.respawnTimer.destroy();
            this.respawnTimer = null;
            this.showering = false;
        }
    };
    SlotCoinShowerController.prototype.onRespawnTimer = function () {
        this.coinShowerView.filterCoins();
        this.coinShowerView.emmitCoin();
    };
    SlotCoinShowerController.prototype.startCoinShower = function (respawnTime) {
        if (!this.showering) {
            this.showering = true;
            this.respawnTimer = new SimpleTimer_1.SimpleTimer(respawnTime, this.onRespawnTimer.bind(this), true);
        }
    };
    var _a;
    SlotCoinShowerController.STOP_COIN_SHOWER_EVENT = 'StopCoinShowerEvent';
    SlotCoinShowerController = __decorate([
        __param(0, es5_1.Inject),
        __metadata("design:paramtypes", [typeof (_a = typeof SlotCoinShowerView_1.SlotCoinShowerView !== "undefined" && SlotCoinShowerView_1.SlotCoinShowerView) === "function" && _a || Object])
    ], SlotCoinShowerController);
    return SlotCoinShowerController;
}(CompController_1.CompController));
exports.SlotCoinShowerController = SlotCoinShowerController;


/***/ }),
/* 237 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var CoinShowerConfig = /** @class */ (function () {
    function CoinShowerConfig() {
        this.name = 'coinShower';
        this.largeShowerParticleDelay = 50;
        this.mediumShowerParticleDelay = 100;
        this.smallShowerParticleDelay = 150;
        this.assetList = [
            'Gencoin_01.png',
            'Gencoin_02.png',
            'Gencoin_03.png',
            'Gencoin_04.png',
            'Gencoin_05.png',
            'Gencoin_06.png',
            'Gencoin_07.png',
            'Gencoin_08.png',
            'Gencoin_09.png',
            'Gencoin_10.png',
            'Gencoin_11.png',
            'Gencoin_12.png'
        ];
        this.emitters = [
            {
                speedMultiplier: 20,
                numberOfCoins: 100,
                gravity: 800,
                minimumInitialVelocityY: -900,
                maximumInitialVelocityY: -1100,
                minimumInitialVelocityX: -200,
                maximumInitialVelocityX: 200,
                minimumScaleSpeed: 0,
                maximumScaleSpeed: 0.6,
                maximumScale: 1.75,
                minimumScale: 0.75,
                emitterX: 0,
                emitterY: 400,
                xOffsetRange: 50,
                yOffsetRange: 0,
                angularVelocity: 8,
                angularAcceleration: 1,
                animationSpeed: 0.1,
                animationAcceleration: 0.1
            }
        ];
    }
    return CoinShowerConfig;
}());
exports.CoinShowerConfig = CoinShowerConfig;


/***/ }),
/* 238 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var pixi_js_1 = __webpack_require__(4);
var CompView_1 = __webpack_require__(34);
var SlotCoinParticle_1 = __webpack_require__(743);
var SlotCoinShowerView = /** @class */ (function (_super) {
    __extends(SlotCoinShowerView, _super);
    function SlotCoinShowerView() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SlotCoinShowerView.prototype.createElements = function (config) {
        this.coinContainer = new pixi_js_1.Container();
        this.addChild(this.coinContainer);
        this.coinSystem = [];
        for (var i = 0; i < config.emitters.length; i++) {
            var system = {
                coins: [],
                coinPool: []
            };
            var emmiter = config.emitters[i];
            for (var n = 0; n < emmiter.numberOfCoins; n++) {
                var coin = new SlotCoinParticle_1.SlotCoinParticle(config.assetList, emmiter);
                this.coinContainer.addChild(coin);
                system.coinPool.push(coin);
            }
            this.coinSystem.push(system);
        }
        this.setBackgroundMask(this.createBackgroundMask());
    };
    SlotCoinShowerView.prototype.setBackgroundMask = function (mask) {
        this.backgroundMask = mask;
        this.mainContainer.mask = this.backgroundMask;
        this.addChild(this.backgroundMask);
    };
    SlotCoinShowerView.prototype.createBackgroundMask = function () {
        var bgMask = new pixi_js_1.Graphics();
        bgMask.beginFill(0);
        bgMask.drawRect(0, 0, this.viewport.width, this.viewport.height);
        bgMask.endFill();
        return bgMask;
    };
    SlotCoinShowerView.prototype.layoutElements = function () {
        _super.prototype.layoutElements.call(this);
        this.backgroundMask.width = this.viewport.width;
        this.backgroundMask.height = this.viewport.height;
        this.coinContainer.position.set(this.viewport.width / 2, this.viewport.height / 2);
    };
    /**
     * Move "dead" coins from alive array to pool
     */
    SlotCoinShowerView.prototype.filterCoins = function () {
        for (var i = 0; i < this.coinSystem.length; i++) {
            var system = this.coinSystem[i];
            for (var n = 0; n < system.coins.length; n++) {
                var coin = system.coins[n];
                if (!coin.alive) {
                    system.coinPool.push(coin);
                }
            }
            system.coins = system.coins.filter(function (coin) { return coin.alive; });
        }
    };
    /**
     * Add new coin to stage, If their total number  does not exceed "numberOfCoins" value
     */
    SlotCoinShowerView.prototype.emmitCoin = function () {
        for (var i = 0; i < this.coinSystem.length; i++) {
            var system = this.coinSystem[i];
            if (system.coinPool.length > 0) {
                var coin = system.coinPool.pop();
                coin.alive = true;
                system.coins.push(coin);
            }
        }
    };
    SlotCoinShowerView.prototype.getAssetsList = function () {
        return [
            {
                assetKey: 'coinShower',
                assetURL: 'assets/coinShower/coinShower.json'
            }
        ];
    };
    return SlotCoinShowerView;
}(CompView_1.CompView));
exports.SlotCoinShowerView = SlotCoinShowerView;


/***/ }),
/* 239 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var WinDisplayConfig = /** @class */ (function () {
    function WinDisplayConfig() {
        this.name = 'WinDisplay';
    }
    return WinDisplayConfig;
}());
exports.WinDisplayConfig = WinDisplayConfig;


/***/ }),
/* 240 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var BackgroundConfig_1 = __webpack_require__(224);
var SlotBackgroundConfig = /** @class */ (function (_super) {
    __extends(SlotBackgroundConfig, _super);
    function SlotBackgroundConfig() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return SlotBackgroundConfig;
}(BackgroundConfig_1.BackgroundConfig));
exports.SlotBackgroundConfig = SlotBackgroundConfig;


/***/ }),
/* 241 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var MiniSignal = __webpack_require__(3);
var pixi_js_1 = __webpack_require__(4);
var LazyCompView_1 = __webpack_require__(379);
var CoreUIElementFactory_1 = __webpack_require__(28);
/**
 * Basic spine view handler
 *
 * TODO: support playing sprite.
 *
 * @export
 * @class AnimationView
 * @extends {CompView}
 */
var AnimationView = /** @class */ (function (_super) {
    __extends(AnimationView, _super);
    function AnimationView() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.animations = new Array();
        _this.animationCompleteSignal = new MiniSignal();
        return _this;
    }
    AnimationView.prototype.initialize = function (config) {
        this.config = config;
        _super.prototype.initialize.call(this, config);
    };
    AnimationView.prototype.getAssetsList = function () {
        return [];
    };
    AnimationView.prototype.createElements = function (config) {
        _super.prototype.createElements.call(this, config);
        this.setupAnimation();
        this.setupMask();
    };
    AnimationView.prototype.setupAnimation = function () {
        var _this = this;
        this.config.animations.forEach(function (animationElementData) {
            var animationData = animationElementData.elementConfig;
            var animation = CoreUIElementFactory_1.CoreUIElementFactory.createInstance(animationElementData);
            var scale = animationData.scale || { x: 1, y: 1 };
            animation.scale.set(scale.x, scale.y);
            var position = animationData.position || { x: 0, y: 0 };
            animation.position.x = position.x;
            animation.position.y = position.y;
            animation.displayObject.visible = false;
            animation.completeSignal.add(_this.onComplete.bind(_this));
            if (animationData.mixins) {
                animationData.mixins.forEach(function (mixins, animationName) {
                    mixins.forEach(function (mixin) {
                        animation.setMix(animationName, mixin.animationName, mixin.mixinTime);
                    });
                });
            }
            _this.addChild(animation);
            _this.animations.push(animation);
        });
    };
    AnimationView.prototype.setupMask = function () {
        if (this.config.mask) {
            var maskRect = this.config.mask;
            var mask = new pixi_js_1.Graphics();
            mask.beginFill(0);
            mask.drawRect(maskRect.x, maskRect.y, maskRect.width, maskRect.height);
            this.mainContainer.mask = mask;
            this.addChild(mask);
        }
    };
    AnimationView.prototype.playAnimation = function (stateName, context, skipOnDuplicate) {
        var _this = this;
        if (skipOnDuplicate === void 0) { skipOnDuplicate = true; }
        this.animations.forEach(function (spineAnimation, index) {
            var animationConfig = _this.config.animations[index];
            if (!animationConfig.elementConfig.stateAnimationMap.has(stateName)) {
                return;
            }
            spineAnimation.playByStateName(stateName, context, skipOnDuplicate);
        });
    };
    AnimationView.prototype.onComplete = function (animation, track) {
        if (track.loop) {
            return;
        }
        this.animationCompleteSignal.dispatch(track.animation.name);
    };
    return AnimationView;
}(LazyCompView_1.LazyCompView));
exports.AnimationView = AnimationView;


/***/ }),
/* 242 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var SlotUIButtonId_1 = __webpack_require__(162);
var es5_1 = __webpack_require__(0);
var ButtonsStateSet_1 = __webpack_require__(75);
var SlotUIStates_1 = __webpack_require__(231);
var LocalButtonsStateSet_1 = __webpack_require__(209);
/**
 * Local Buttons State Class
 * Set state for the local buttons
 */
var SlotUILocalButtonsStateSet = /** @class */ (function (_super) {
    __extends(SlotUILocalButtonsStateSet, _super);
    function SlotUILocalButtonsStateSet() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * set states for the buttons
     */
    SlotUILocalButtonsStateSet.prototype.initStates = function () {
        this.buttonStates.set(LocalButtonsStateSet_1.LocalButtonsStateSet.DEFAULT_TEMPLATE, this.default());
        this.buttonStates.set(this.stateNames.init, this.init());
        this.buttonStates.set(this.stateNames.autoSpinDashboardIdle, this.autoSpinDashboardEnable());
        this.buttonStates.set(this.stateNames.baseGameIdle, this.dashboardEnable());
        this.buttonStates.set(this.stateNames.dashboardIdle, this.dashboardEnable());
        this.buttonStates.set(this.stateNames.dashboardDisable, this.dashboardDisable());
        this.buttonStates.set(this.stateNames.startPickFeature, this.startPickFeature());
        this.buttonStates.set(this.stateNames.endPickFeature, this.endPickFeature());
        this.buttonStates.set(this.stateNames.transitionToAutoSpin, this.transitionToAutoSpin());
        this.buttonStates.set(this.stateNames.startSpin, this.startSpin());
        this.buttonStates.set(this.stateNames.spinning, this.spinning());
        this.buttonStates.set(this.stateNames.skip_spinning, this.skipSpinning());
        this.buttonStates.set(this.stateNames.spinStopReady, this.gameReadyForStopSpin());
        this.buttonStates.set(this.stateNames.spinStop, this.spinStop());
        this.buttonStates.set(this.stateNames.allLineWin, this.showWinning());
        this.buttonStates.set(this.stateNames.showWinning, this.showWinning());
        this.buttonStates.set(this.stateNames.autoSpinStartSpin, this.autoSpinStartSpin());
        this.buttonStates.set(this.stateNames.autoSpinSpinning, this.autoSpinSpinning());
        this.buttonStates.set(this.stateNames.skip_autoSpinSpinning, this.skip_autoSpinSpinning());
        this.buttonStates.set(this.stateNames.autoSpinSpinStopReady, this.autoSpinReadyForStopSpin());
        this.buttonStates.set(this.stateNames.autoSpinSpinStop, this.autoSpinSpinStop());
        this.buttonStates.set(this.stateNames.autoSpinShowWinning, this.autoSpinShowWinning());
        this.buttonStates.set(this.stateNames.prefeatureWinning, this.prefeatureWinning());
        this.buttonStates.set(this.stateNames.transitionToFreeSpins, this.transitionToFreeSpins());
        this.buttonStates.set(this.stateNames.transitionToBaseGame, this.transitionToBaseGame());
        this.buttonStates.set(this.stateNames.freeSpinsStart, this.freeSpinsStart());
        this.buttonStates.set(this.stateNames.freeSpinning, this.freeSpinning());
        this.buttonStates.set(this.stateNames.skip_freeSpinning, this.skipFreeSpinning());
        this.buttonStates.set(this.stateNames.freeSpinStopReady, this.gameReadyForStopSpin());
        this.buttonStates.set(this.stateNames.freeSpinsStop, this.freeSpinsStop());
        this.buttonStates.set(this.stateNames.freeSpinsAllLineWin, this.freeSpinsShowWinning());
        this.buttonStates.set(this.stateNames.freeSpinsShowWinning, this.freeSpinsShowWinning());
        this.buttonStates.set(this.stateNames.freeSpinsWildMultipliers, this.freeSpinsShowWinning());
        this.buttonStates.set(this.stateNames.startFreeRespin, this.startFreeRespin());
        this.buttonStates.set(this.stateNames.freeRespinReels, this.freeRespinReels());
        this.buttonStates.set(this.stateNames.freeRespinning, this.freeRespinning());
        this.buttonStates.set(this.stateNames.freeRespinsStop, this.freeRespinsStop());
        this.buttonStates.set(this.stateNames.freeRespinsAllLineWin, this.freeRespinsShowWinning());
        this.buttonStates.set(this.stateNames.freeRespinsShowWinning, this.freeRespinsShowWinning());
        this.buttonStates.set(this.stateNames.transitionToJackpot, this.transitionToJackpot());
        this.buttonStates.set(this.stateNames.jackpotClose, this.jackpotClose());
        this.buttonStates.set(this.stateNames.genplusSpinning, this.genplusSpinning());
    };
    SlotUILocalButtonsStateSet.prototype.default = function () {
        var buttonState = _super.prototype.default.call(this);
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_START_SPIN, new ButtonsStateSet_1.ButtonBehaviour(false, true));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_STOP_SPIN, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_BET_MAX, new ButtonsStateSet_1.ButtonBehaviour(false, true));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_STOP_AUTO_PLAY, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_AUTO_PLAY_BACK, new ButtonsStateSet_1.ButtonBehaviour(true, true));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_AUTO_PLAY_SPIN, new ButtonsStateSet_1.ButtonBehaviour(true, true));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_SHOW_AUTO_PLAY, new ButtonsStateSet_1.ButtonBehaviour(true, true));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_SHOW_MENU_OPTIONS, new ButtonsStateSet_1.ButtonBehaviour(true, true));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_SHOW_BET_OPTIONS, new ButtonsStateSet_1.ButtonBehaviour(true, true));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_TURBO_MODE, new ButtonsStateSet_1.ButtonBehaviour(true, true));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.TOGGLE_WIN_LIMIT, new ButtonsStateSet_1.ButtonBehaviour(true, true));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.TOGGLE_LOSE_LIMIT, new ButtonsStateSet_1.ButtonBehaviour(true, true));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_AUTO_PLAY_SELECT_SPINS, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        return buttonState;
    };
    SlotUILocalButtonsStateSet.prototype.init = function () {
        var buttonState = _super.prototype.init.call(this);
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_START_SPIN, new ButtonsStateSet_1.ButtonBehaviour(false, true));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_STOP_SPIN, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_BET_MAX, new ButtonsStateSet_1.ButtonBehaviour(true, true));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_STOP_AUTO_PLAY, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_TURBO_MODE, new ButtonsStateSet_1.ButtonBehaviour(true, true));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_SHOW_MENU_OPTIONS, new ButtonsStateSet_1.ButtonBehaviour(true, true));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_SHOW_BET_OPTIONS, new ButtonsStateSet_1.ButtonBehaviour(true, true));
        return buttonState;
    };
    SlotUILocalButtonsStateSet.prototype.dashboardEnable = function () {
        var buttonState = this.default();
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_BET_MAX, new ButtonsStateSet_1.ButtonBehaviour(true, true));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_START_SPIN, new ButtonsStateSet_1.ButtonBehaviour(true, true));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_AUTO_PLAY_SPIN, new ButtonsStateSet_1.ButtonBehaviour(false, true));
        return buttonState;
    };
    SlotUILocalButtonsStateSet.prototype.endPickFeature = function () {
        var buttonState = this.default();
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_START_SPIN, new ButtonsStateSet_1.ButtonBehaviour(true, true));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_AUTO_PLAY_SPIN, new ButtonsStateSet_1.ButtonBehaviour(false, true));
        return buttonState;
    };
    SlotUILocalButtonsStateSet.prototype.autoSpinDashboardEnable = function () {
        var buttonState = this.default();
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_START_SPIN, new ButtonsStateSet_1.ButtonBehaviour(false, true));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_SHOW_AUTO_PLAY, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_STOP_AUTO_PLAY, new ButtonsStateSet_1.ButtonBehaviour(true, true));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_SHOW_MENU_OPTIONS, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_SHOW_BET_OPTIONS, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        return buttonState;
    };
    SlotUILocalButtonsStateSet.prototype.dashboardDisable = function () {
        var buttonState = _super.prototype.default.call(this);
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_START_SPIN, new ButtonsStateSet_1.ButtonBehaviour(false, true));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_STOP_SPIN, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_STOP_AUTO_PLAY, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_SHOW_AUTO_PLAY, new ButtonsStateSet_1.ButtonBehaviour(false, true));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_TURBO_MODE, new ButtonsStateSet_1.ButtonBehaviour(false, true));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_SHOW_MENU_OPTIONS, new ButtonsStateSet_1.ButtonBehaviour(false, true));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_SHOW_BET_OPTIONS, new ButtonsStateSet_1.ButtonBehaviour(false, true));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_AUTO_PLAY_SPIN, new ButtonsStateSet_1.ButtonBehaviour(false, true));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_BET_MAX, new ButtonsStateSet_1.ButtonBehaviour(false, true));
        return buttonState;
    };
    SlotUILocalButtonsStateSet.prototype.transitionToAutoSpin = function () {
        var buttonState = this.default();
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_START_SPIN, new ButtonsStateSet_1.ButtonBehaviour(true, true));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_STOP_SPIN, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_STOP_AUTO_PLAY, new ButtonsStateSet_1.ButtonBehaviour(false, true));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_TURBO_MODE, new ButtonsStateSet_1.ButtonBehaviour(true, true));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_SHOW_BET_OPTIONS, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_SHOW_MENU_OPTIONS, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        return buttonState;
    };
    SlotUILocalButtonsStateSet.prototype.startSpin = function () {
        var buttonState = this.default();
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_START_SPIN, new ButtonsStateSet_1.ButtonBehaviour(false, true));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_STOP_SPIN, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_SHOW_AUTO_PLAY, new ButtonsStateSet_1.ButtonBehaviour(false, true));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_STOP_AUTO_PLAY, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_TURBO_MODE, new ButtonsStateSet_1.ButtonBehaviour(true, true));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_SHOW_MENU_OPTIONS, new ButtonsStateSet_1.ButtonBehaviour(false, true));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_SHOW_BET_OPTIONS, new ButtonsStateSet_1.ButtonBehaviour(false, true));
        return buttonState;
    };
    SlotUILocalButtonsStateSet.prototype.autoSpinStartSpin = function () {
        var buttonState = this.default();
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_START_SPIN, new ButtonsStateSet_1.ButtonBehaviour(false, true));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_STOP_SPIN, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_SHOW_AUTO_PLAY, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_STOP_AUTO_PLAY, new ButtonsStateSet_1.ButtonBehaviour(true, true));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_TURBO_MODE, new ButtonsStateSet_1.ButtonBehaviour(true, true));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_SHOW_MENU_OPTIONS, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_SHOW_BET_OPTIONS, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        return buttonState;
    };
    SlotUILocalButtonsStateSet.prototype.spinning = function () {
        var buttonState = this.default();
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_START_SPIN, new ButtonsStateSet_1.ButtonBehaviour(false, true, false));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_STOP_SPIN, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_SHOW_AUTO_PLAY, new ButtonsStateSet_1.ButtonBehaviour(false, true));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_STOP_AUTO_PLAY, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_TURBO_MODE, new ButtonsStateSet_1.ButtonBehaviour(true, true));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_SHOW_MENU_OPTIONS, new ButtonsStateSet_1.ButtonBehaviour(false, true));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_SHOW_BET_OPTIONS, new ButtonsStateSet_1.ButtonBehaviour(false, true));
        return buttonState;
    };
    SlotUILocalButtonsStateSet.prototype.autoSpinSpinning = function () {
        return this.autoSpinStartSpin();
    };
    SlotUILocalButtonsStateSet.prototype.skipSpinning = function () {
        return this.spinStop();
    };
    SlotUILocalButtonsStateSet.prototype.skipFreeSpinning = function () {
        var buttonState = this.default();
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_START_SPIN, new ButtonsStateSet_1.ButtonBehaviour(true, true));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_STOP_SPIN, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_SHOW_AUTO_PLAY, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_STOP_AUTO_PLAY, new ButtonsStateSet_1.ButtonBehaviour(false, true));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_TURBO_MODE, new ButtonsStateSet_1.ButtonBehaviour(true, true));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_SHOW_MENU_OPTIONS, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_SHOW_BET_OPTIONS, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        return buttonState;
    };
    SlotUILocalButtonsStateSet.prototype.skip_autoSpinSpinning = function () {
        return this.autoSpinSpinStop();
    };
    SlotUILocalButtonsStateSet.prototype.spinStop = function () {
        var buttonState = this.default();
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_START_SPIN, new ButtonsStateSet_1.ButtonBehaviour(true, true));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_STOP_SPIN, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_SHOW_AUTO_PLAY, new ButtonsStateSet_1.ButtonBehaviour(false, true));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_STOP_AUTO_PLAY, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_TURBO_MODE, new ButtonsStateSet_1.ButtonBehaviour(true, true));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_SHOW_MENU_OPTIONS, new ButtonsStateSet_1.ButtonBehaviour(false, true));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_SHOW_BET_OPTIONS, new ButtonsStateSet_1.ButtonBehaviour(false, true));
        return buttonState;
    };
    SlotUILocalButtonsStateSet.prototype.autoSpinSpinStop = function () {
        var buttonState = this.default();
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_START_SPIN, new ButtonsStateSet_1.ButtonBehaviour(true, true));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_STOP_SPIN, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_SHOW_AUTO_PLAY, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_STOP_AUTO_PLAY, new ButtonsStateSet_1.ButtonBehaviour(true, true));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_TURBO_MODE, new ButtonsStateSet_1.ButtonBehaviour(true, true));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_SHOW_MENU_OPTIONS, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_SHOW_BET_OPTIONS, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        return buttonState;
    };
    SlotUILocalButtonsStateSet.prototype.showWinning = function () {
        var buttonState = this.default();
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_START_SPIN, new ButtonsStateSet_1.ButtonBehaviour(true, true));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_STOP_SPIN, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_BET_MAX, new ButtonsStateSet_1.ButtonBehaviour(true, true));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_SHOW_AUTO_PLAY, new ButtonsStateSet_1.ButtonBehaviour(true, true));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_STOP_AUTO_PLAY, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_TURBO_MODE, new ButtonsStateSet_1.ButtonBehaviour(true, true));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_SHOW_MENU_OPTIONS, new ButtonsStateSet_1.ButtonBehaviour(true, true));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_SHOW_BET_OPTIONS, new ButtonsStateSet_1.ButtonBehaviour(true, true));
        return buttonState;
    };
    SlotUILocalButtonsStateSet.prototype.autoSpinShowWinning = function () {
        return this.autoSpinSpinStop();
    };
    SlotUILocalButtonsStateSet.prototype.transitionToBaseGame = function () {
        var buttonState = this.default();
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_START_SPIN, new ButtonsStateSet_1.ButtonBehaviour(false, true));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_STOP_SPIN, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_SHOW_AUTO_PLAY, new ButtonsStateSet_1.ButtonBehaviour(false, true));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_STOP_AUTO_PLAY, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_SHOW_BET_OPTIONS, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_SHOW_MENU_OPTIONS, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_TURBO_MODE, new ButtonsStateSet_1.ButtonBehaviour(false, true));
        return buttonState;
    };
    SlotUILocalButtonsStateSet.prototype.transitionToFreeSpins = function () {
        return this.transitionToBaseGame();
    };
    SlotUILocalButtonsStateSet.prototype.freeSpinsStart = function () {
        var buttonState = this.default();
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_START_SPIN, new ButtonsStateSet_1.ButtonBehaviour(true, true));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_STOP_SPIN, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_SHOW_AUTO_PLAY, new ButtonsStateSet_1.ButtonBehaviour(false, true));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_STOP_AUTO_PLAY, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_TURBO_MODE, new ButtonsStateSet_1.ButtonBehaviour(true, true));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_SHOW_BET_OPTIONS, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_SHOW_MENU_OPTIONS, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        return buttonState;
    };
    SlotUILocalButtonsStateSet.prototype.freeSpinning = function () {
        var buttonState = this.default();
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_START_SPIN, new ButtonsStateSet_1.ButtonBehaviour(true, true, false));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_STOP_SPIN, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_STOP_AUTO_PLAY, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_SHOW_AUTO_PLAY, new ButtonsStateSet_1.ButtonBehaviour(false, true));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_TURBO_MODE, new ButtonsStateSet_1.ButtonBehaviour(true, true));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_SHOW_BET_OPTIONS, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_SHOW_MENU_OPTIONS, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        return buttonState;
    };
    SlotUILocalButtonsStateSet.prototype.gameReadyForStopSpin = function () {
        var buttonState = this.default();
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_START_SPIN, new ButtonsStateSet_1.ButtonBehaviour(true, true));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_STOP_SPIN, new ButtonsStateSet_1.ButtonBehaviour(true, true));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_SHOW_AUTO_PLAY, new ButtonsStateSet_1.ButtonBehaviour(false, true));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_STOP_AUTO_PLAY, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_TURBO_MODE, new ButtonsStateSet_1.ButtonBehaviour(true, true));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_SHOW_MENU_OPTIONS, new ButtonsStateSet_1.ButtonBehaviour(false, true));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_SHOW_BET_OPTIONS, new ButtonsStateSet_1.ButtonBehaviour(false, true));
        return buttonState;
    };
    SlotUILocalButtonsStateSet.prototype.autoSpinReadyForStopSpin = function () {
        return this.autoSpinSpinStop();
    };
    SlotUILocalButtonsStateSet.prototype.freeSpinsStop = function () {
        var buttonState = this.default();
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_START_SPIN, new ButtonsStateSet_1.ButtonBehaviour(true, true, true));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_STOP_SPIN, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_SHOW_AUTO_PLAY, new ButtonsStateSet_1.ButtonBehaviour(false, true));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_STOP_AUTO_PLAY, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_TURBO_MODE, new ButtonsStateSet_1.ButtonBehaviour(true, true));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_SHOW_BET_OPTIONS, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_SHOW_MENU_OPTIONS, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        return buttonState;
    };
    SlotUILocalButtonsStateSet.prototype.freeSpinsShowWinning = function () {
        return this.freeSpinsStop();
    };
    SlotUILocalButtonsStateSet.prototype.prefeatureWinning = function () {
        var buttonState = this.default();
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_START_SPIN, new ButtonsStateSet_1.ButtonBehaviour(false, true));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_STOP_SPIN, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_SHOW_AUTO_PLAY, new ButtonsStateSet_1.ButtonBehaviour(false, true));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_STOP_AUTO_PLAY, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_TURBO_MODE, new ButtonsStateSet_1.ButtonBehaviour(true, true));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_SHOW_BET_OPTIONS, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_SHOW_MENU_OPTIONS, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        return buttonState;
    };
    SlotUILocalButtonsStateSet.prototype.startPickFeature = function () {
        var buttonState = this.default();
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_START_SPIN, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_STOP_SPIN, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_SHOW_AUTO_PLAY, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_STOP_AUTO_PLAY, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_TURBO_MODE, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_SHOW_BET_OPTIONS, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_SHOW_MENU_OPTIONS, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        return buttonState;
    };
    SlotUILocalButtonsStateSet.prototype.startFreeRespin = function () {
        return this.prefeatureWinning();
    };
    SlotUILocalButtonsStateSet.prototype.freeRespinReels = function () {
        return this.freeSpinsStart();
    };
    SlotUILocalButtonsStateSet.prototype.freeRespinning = function () {
        return this.freeSpinning();
    };
    SlotUILocalButtonsStateSet.prototype.freeRespinsStop = function () {
        return this.freeSpinsStop();
    };
    SlotUILocalButtonsStateSet.prototype.freeRespinsShowWinning = function () {
        return this.freeSpinsShowWinning();
    };
    SlotUILocalButtonsStateSet.prototype.transitionToJackpot = function () {
        var buttonState = this.default();
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_START_SPIN, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_STOP_SPIN, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_STOP_AUTO_PLAY, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_TURBO_MODE, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_SHOW_BET_OPTIONS, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_SHOW_MENU_OPTIONS, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        return buttonState;
    };
    SlotUILocalButtonsStateSet.prototype.jackpotClose = function () {
        var buttonState = this.default();
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_START_SPIN, new ButtonsStateSet_1.ButtonBehaviour(true, true));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_STOP_SPIN, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_STOP_AUTO_PLAY, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_TURBO_MODE, new ButtonsStateSet_1.ButtonBehaviour(true, true));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_SHOW_MENU_OPTIONS, new ButtonsStateSet_1.ButtonBehaviour(true, true));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_SHOW_BET_OPTIONS, new ButtonsStateSet_1.ButtonBehaviour(true, true));
        return buttonState;
    };
    SlotUILocalButtonsStateSet.prototype.genplusSpinning = function () {
        var buttonState = this.default();
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_START_SPIN, new ButtonsStateSet_1.ButtonBehaviour(false, true));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_STOP_SPIN, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_STOP_AUTO_PLAY, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_SHOW_AUTO_PLAY, new ButtonsStateSet_1.ButtonBehaviour(false, true));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_TURBO_MODE, new ButtonsStateSet_1.ButtonBehaviour(true, true));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_SHOW_MENU_OPTIONS, new ButtonsStateSet_1.ButtonBehaviour(false, true));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_SHOW_BET_OPTIONS, new ButtonsStateSet_1.ButtonBehaviour(false, true));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_AUTO_PLAY_SPIN, new ButtonsStateSet_1.ButtonBehaviour(false, true));
        return buttonState;
    };
    var _a;
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof SlotUIStates_1.SlotUIStates !== "undefined" && SlotUIStates_1.SlotUIStates) === "function" && _a || Object)
    ], SlotUILocalButtonsStateSet.prototype, "stateNames", void 0);
    SlotUILocalButtonsStateSet = __decorate([
        es5_1.Singleton
    ], SlotUILocalButtonsStateSet);
    return SlotUILocalButtonsStateSet;
}(LocalButtonsStateSet_1.LocalButtonsStateSet));
exports.SlotUILocalButtonsStateSet = SlotUILocalButtonsStateSet;
// WEBPACK FOOTER //
// ./slotngf/src/components/ui/buttons/SlotUILocalButtonsStateSet.ts


/***/ }),
/* 243 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var MLUISoundConfig = /** @class */ (function () {
    function MLUISoundConfig() {
    }
    MLUISoundConfig.spin = 'Spin';
    MLUISoundConfig.betDown = 'BetDown';
    MLUISoundConfig.betUp = 'BetUp';
    MLUISoundConfig.menuEnter = 'Menu_Enter';
    MLUISoundConfig.menuExit = 'Menu_Exit';
    return MLUISoundConfig;
}());
exports.MLUISoundConfig = MLUISoundConfig;


/***/ }),
/* 244 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Helper_1 = __webpack_require__(5);
/**
 * preset pixi font styles for mlui
 */
var spinButtonAutoSpin = {
    fontFamily: Helper_1.Helper.DEFAULT_FONTS,
    fontSize: 36,
    fill: 0xf6ab00,
    align: 'center',
    padding: 0
};
exports.SpinButtonAutoSpinStyle = spinButtonAutoSpin;
var sliderMinMaxStyle = {
    fontFamily: Helper_1.Helper.DEFAULT_FONTS,
    fontSize: 32,
    fontWeight: 'bold',
    fill: 'white',
    align: 'left',
    padding: 0
};
exports.SliderMinMaxStyle = sliderMinMaxStyle;
var optionTitleStyle = {
    fontFamily: Helper_1.Helper.DEFAULT_FONTS,
    fontSize: 26,
    fontWeight: 'bold',
    fill: 'white',
    align: 'left',
    padding: 0
};
exports.OptionTitleStyle = optionTitleStyle;
var regularTitleStyle = {
    fontFamily: Helper_1.Helper.DEFAULT_FONTS,
    fontSize: 48,
    align: 'left',
    padding: 8,
    fill: 'white'
};
exports.RegularTitleStyle = regularTitleStyle;
var regularSubTitleStyle = {
    fontFamily: Helper_1.Helper.DEFAULT_FONTS,
    fontSize: 24,
    align: 'left',
    fill: 'white',
    padding: 8
};
exports.RegularSubTitleStyle = regularSubTitleStyle;
var betPanelSubTitleStyle = {
    fontFamily: Helper_1.Helper.DEFAULT_FONTS,
    fontSize: 28,
    fill: 'white',
    align: 'left',
    padding: 0
};
exports.BetPanelSubTitleStyle = betPanelSubTitleStyle;
var betPanelHighlightStyle = {
    fontFamily: Helper_1.Helper.DEFAULT_FONTS,
    fontSize: 28,
    fill: '0xf6ab00',
    align: 'left',
    padding: 0
};
exports.BetPanelHighlightStyle = betPanelHighlightStyle;
var betPanelTotalBetStyle = {
    fontFamily: Helper_1.Helper.DEFAULT_FONTS,
    fontSize: 36,
    fill: 'white',
    align: 'left',
    padding: 0
};
exports.BetPanelTotalBetStyle = betPanelTotalBetStyle;


/***/ }),
/* 245 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var MLUISpinPanel_1 = __webpack_require__(403);
var MLUISpinConfig_1 = __webpack_require__(776);
var UIPanelController_1 = __webpack_require__(58);
var MLUISpinController = /** @class */ (function (_super) {
    __extends(MLUISpinController, _super);
    function MLUISpinController(view) {
        return _super.call(this, view) || this;
    }
    MLUISpinController.prototype.init = function (data) {
        var config = this.gameConfig.getConfig(MLUISpinConfig_1.MLUISpinConfig);
        this.view.initialize(config);
        this.finishStateAction();
    };
    MLUISpinController.prototype.onAutoSpinEvent = function () {
        this.view.onPressEvent();
    };
    MLUISpinController.prototype.startSpin = function (data) {
        this.view.showStopSpinButton();
        this.view.onSpinStart();
        this.finishStateAction();
    };
    MLUISpinController.prototype.spinStop = function (data) {
        this.view.showStopReelButton();
        this.view.onSpinStop();
        this.finishStateAction();
    };
    MLUISpinController.prototype.showWinning = function () {
        this.view.showSpinButton();
        this.finishStateAction();
    };
    MLUISpinController.prototype.allLineWin = function () {
        this.view.showSpinButton();
        this.finishStateAction();
    };
    MLUISpinController.prototype.baseGameIdle = function (data) {
        this.view.checkAndStopAutoSpins();
        this.view.showSpinButton();
        this.finishStateAction();
    };
    MLUISpinController.prototype.autoSpinStartSpin = function (data) {
        this.startSpin(data);
        this.finishStateAction();
    };
    MLUISpinController.prototype.autoSpinDashboardIdle = function (data) {
        this.baseGameIdle(data);
        this.finishStateAction();
    };
    MLUISpinController.prototype.autoSpinShowWinning = function () {
        this.view.showSpinButton();
        this.finishStateAction();
    };
    MLUISpinController.prototype.freeSpinsIdle = function (data) {
        this.view.showSpinButton();
        this.finishStateAction();
    };
    MLUISpinController.prototype.showRetrigger = function (data) {
        this.view.updateClickData(data.currentCount, data.totalFreeSpinCount);
        this.finishStateAction();
    };
    MLUISpinController.prototype.freeSpinsStart = function (data) {
        this.startSpin(data);
        this.finishStateAction();
    };
    MLUISpinController.prototype.freeSpinsStop = function (data) {
        this.view.onSpinStop();
        this.view.showStopReelButton();
        this.finishStateAction();
    };
    MLUISpinController.prototype.skip_spinning = function (data) {
        this.view.showStopReelButton();
        this.finishStateAction();
    };
    MLUISpinController.prototype.skip_freeSpinning = function (data) {
        this.view.showStopReelButton();
        this.finishStateAction();
    };
    MLUISpinController.prototype.transitionToAutoSpin = function (data) {
        var spins = (data.spins === 'infinite') ? -1 : +data.spins;
        this.view.setSpinButtonAutoSpins(spins, data.currentCount);
        this.finishStateAction();
    };
    MLUISpinController.prototype.transitionToFreeSpins = function (data) {
        this.view.transitionToFreeSpins(data.currentFreeSpinCount, data.totalFreeSpinCount);
        this.view.setInteractive(false);
        this.finishStateAction();
    };
    MLUISpinController.prototype.transitionToBaseGame = function () {
        this.view.setInteractive(true);
        this.view.transitionToBaseGame();
        this.finishStateAction();
    };
    MLUISpinController.prototype.setSpinButtonFreeSpins = function (currentCount, totalCount) {
        this.view.setSpinButtonFreeSpins(currentCount, totalCount);
    };
    MLUISpinController.prototype.stopAutoSpins = function () {
        this.view.stopAutoSpins();
    };
    MLUISpinController.prototype.autoSpinSpinStop = function () {
        this.view.onSpinStop();
        this.view.showStopReelButton();
        this.finishStateAction();
    };
    MLUISpinController.prototype.dashboardDisable = function () {
        this.view.showDisabledButton();
        this.finishStateAction();
    };
    var _a;
    MLUISpinController = __decorate([
        __param(0, es5_1.Inject),
        __metadata("design:paramtypes", [typeof (_a = typeof MLUISpinPanel_1.MLUISpinPanel !== "undefined" && MLUISpinPanel_1.MLUISpinPanel) === "function" && _a || Object])
    ], MLUISpinController);
    return MLUISpinController;
}(UIPanelController_1.UIPanelController));
exports.MLUISpinController = MLUISpinController;


/***/ }),
/* 246 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var pixi_js_1 = __webpack_require__(4);
var es5_1 = __webpack_require__(0);
var CompView_1 = __webpack_require__(34);
var Button_1 = __webpack_require__(19);
var LocalButtonsController_1 = __webpack_require__(350);
/**
 * Create dom container for external .ejs template.
 * If the ejs file contains a script, the code will be excuted in ExternalModuleController. (Only support one script tag for now. )
 * @export
 * @class ExternalModuleView
 * @extends {CompView}
 */
var ExternalModuleView = /** @class */ (function (_super) {
    __extends(ExternalModuleView, _super);
    function ExternalModuleView() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.loader = PIXI.loader;
        return _this;
    }
    Object.defineProperty(ExternalModuleView.prototype, "onOrientationChangeSignal", {
        get: function () {
            return this.viewport.onOrientationChangedSignal;
        },
        enumerable: true,
        configurable: true
    });
    ExternalModuleView.prototype.createButton = function (config) {
        if (config && config.debug) {
            this.button = new Button_1.Button(config.buttonConfig, this.localButtonsController);
            this.button.anchor = new pixi_js_1.Point(0.5, 0.5);
            this.addChild(this.button);
        }
    };
    ExternalModuleView.prototype.createElements = function (config) {
        _super.prototype.createElements.call(this, config);
        this.createButton(config);
        var innerHTML = this.loader.resources[config.externalKey].data;
        var element = document.getElementById(config.domID);
        var node = document.createElement('div');
        node.id = config.moduleName;
        element.appendChild(node);
        node.innerHTML = innerHTML;
        var scripts = element.getElementsByTagName('script');
        this.code = scripts[scripts.length - 1].innerHTML;
    };
    var _a;
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof LocalButtonsController_1.LocalButtonsController !== "undefined" && LocalButtonsController_1.LocalButtonsController) === "function" && _a || Object)
    ], ExternalModuleView.prototype, "localButtonsController", void 0);
    return ExternalModuleView;
}(CompView_1.CompView));
exports.ExternalModuleView = ExternalModuleView;


/***/ }),
/* 247 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var TsMap_1 = __webpack_require__(2);
var Helper_1 = __webpack_require__(5);
var WebElementFactory_1 = __webpack_require__(45);
var MLUIButtonId_1 = __webpack_require__(38);
var GeneralWebPageConfig_1 = __webpack_require__(248);
var SoundConfig_1 = __webpack_require__(55);
var WebImageElement_1 = __webpack_require__(69);
var MLUIRulesConfig = /** @class */ (function (_super) {
    __extends(MLUIRulesConfig, _super);
    function MLUIRulesConfig() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.name = 'rule';
        _this.externalKey = 'external-helpscreens';
        _this.moduleName = 'GenesisRule';
        _this.localisationKeys = ['rules_HowToWin', 'rules_InterfaceAndShortcuts', 'rules_Others', 'rules_Interruption', 'rules_RTP'];
        return _this;
    }
    MLUIRulesConfig.prototype.getButtonIds = function () {
        return new TsMap_1.TsMap([
            [
                'closeButton', MLUIButtonId_1.MLUIButtonId.BUTTON_HIDE_RULES
            ]
        ]);
    };
    MLUIRulesConfig.prototype.getPortraitContainerConfig = function () {
        return Helper_1.Helper.mergeTwoObjects(_super.prototype.getPortraitContainerConfig.call(this), {
            paragraphs: this.getPortraitGameElements()
        });
    };
    MLUIRulesConfig.prototype.getPortraitGameElements = function () {
        return [];
    };
    /**
     * config portrait "How to win" block content
     */
    MLUIRulesConfig.prototype.getPortraitHowToWinElement = function () {
        return [
            WebElementFactory_1.WebElementFactory.createWebElementBlock({
                type: WebElementFactory_1.WebFactoryElementType.WEB_ELEMENT_BLOCK,
                config: [
                    this.getPortraitWebLineConfig(),
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_ELEMENT,
                        blockStyle: "\n\t\t\t\t\t\t\ttext-align: center;\n\t\t\t\t\t\t",
                        languageKey: 'howToWinTitle1'
                    },
                    {
                        blockStyle: "\n\t\t\t\t\t\t\tmargin: 35px 0px 7px;\n\t\t\t\t\t\t\tfont-size: 21px;",
                        type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_ELEMENT,
                        languageKey: 'howToWinSubtitle1'
                    },
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_CONTENT_ELEMENT,
                        languageKey: 'howToWinContent1'
                    },
                    {
                        blockStyle: "\n\t\t\t\t\t\t\tmargin: 35px 0px 7px;\n\t\t\t\t\t\t\tfont-size: 21px;",
                        type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_ELEMENT,
                        languageKey: 'howToWinSubtitle2'
                    },
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_CONTENT_ELEMENT,
                        languageKey: 'howToWinContent2'
                    }
                ]
            })
        ];
    };
    /**
     * set up portrait rtp block
     */
    MLUIRulesConfig.prototype.getPortraitRTPElements = function (rtp) {
        return [
            WebElementFactory_1.WebElementFactory.createWebElementBlock({
                type: WebElementFactory_1.WebFactoryElementType.WEB_ELEMENT_BLOCK,
                config: [
                    this.getPortraitWebLineConfig(),
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_ELEMENT,
                        languageKey: 'rtpTitle'
                    },
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_CONTENT_ELEMENT,
                        languageKey: 'rtpContent',
                        textToReplace: [
                            {
                                replaceKey: '{rtp}',
                                replaceValue: rtp
                            }
                        ]
                    },
                ]
            })
        ];
    };
    /**
     * config portrait "Others" block content
     */
    MLUIRulesConfig.prototype.getPortraitOthersElement = function (additionalElements) {
        if (additionalElements == undefined || additionalElements == Helper_1.Helper.EMPTY) {
            return [];
        }
        else {
            return [
                WebElementFactory_1.WebElementFactory.createWebElementBlock({
                    type: WebElementFactory_1.WebFactoryElementType.WEB_ELEMENT_BLOCK,
                    config: [
                        this.getPortraitWebLineConfig(),
                        {
                            type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_ELEMENT,
                            blockStyle: "\n\t\t\t\t\t\t\t\ttext-align: center;\n\t\t\t\t\t\t\t",
                            languageKey: 'othersTitle1'
                        },
                        {
                            type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_CONTENT_ELEMENT,
                            languageKey: additionalElements
                        }
                    ]
                })
            ];
        }
    };
    /**
     * Style grid lines between paragraphs
     */
    MLUIRulesConfig.prototype.getPortraitWebLineConfig = function () {
        return WebElementFactory_1.WebElementFactory.createWebLineElement({
            type: WebElementFactory_1.WebFactoryElementType.WEB_LINE_ELEMENT,
            show: true
        });
    };
    MLUIRulesConfig.prototype.getLandscapeContainerConfig = function () {
        return Helper_1.Helper.mergeTwoObjects(_super.prototype.getLandscapeContainerConfig.call(this), {
            paragraphs: this.getLandscapeGameElements()
        });
    };
    /**
     * Landscape screen config
     */
    MLUIRulesConfig.prototype.getLandscapeGameElements = function () {
        return [
            WebElementFactory_1.WebElementFactory.createGeneralPagingElement({
                type: WebElementFactory_1.WebFactoryElementType.WEB_GENERAL_PAGING_ELEMENT,
                blockStyle: "\n\t\t\t\t\tposition: absolute;\n\t\t\t\t\twidth: 616px;\n\t\t\t\t\theight: 364px;\n\t\t\t\t",
                pagingConfig: {
                    arrowButton: {
                        blockStyle: 'top:0;',
                        pageDot: {},
                        nextButton: {
                            dataHookTrackerConfig: {
                                buttonID: MLUIButtonId_1.MLUIButtonId.BUTTON_PAYTABLE_NEXT
                            },
                            soundKey: SoundConfig_1.SoundConfig.buttonClick,
                            buttonImage: WebElementFactory_1.WebElementFactory.createWebImageElement({
                                type: WebElementFactory_1.WebFactoryElementType.WEB_IMAGE_ELEMENT,
                                blockStyle: "\n\t\t\t\t\t\t\t\t\tright:-105px;\n\t\t\t\t\t\t\t\t\ttop:140px;\n\t\t\t\t\t\t\t\t\ttransform:scaleX(-1);\n\t\t\t\t\t\t\t\t\tz-index: 10;\n\t\t\t\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\t\t\t",
                                imageSource: WebImageElement_1.ImageSourceType.SPRITE,
                                imageData: {
                                    assetName: 'mlui_menu',
                                    imageName: 'arrow_Enabled.png',
                                    ratio: 0.55
                                },
                            })
                        },
                        preButton: {
                            dataHookTrackerConfig: {
                                buttonID: MLUIButtonId_1.MLUIButtonId.BUTTON_PAYTABLE_PREV
                            },
                            soundKey: SoundConfig_1.SoundConfig.buttonClick,
                            buttonImage: WebElementFactory_1.WebElementFactory.createWebImageElement({
                                type: WebElementFactory_1.WebFactoryElementType.WEB_IMAGE_ELEMENT,
                                blockStyle: "\n\t\t\t\t\t\t\t\t\tleft:-105px;\n\t\t\t\t\t\t\t\t\ttop:140px;\n\t\t\t\t\t\t\t\t\tz-index: 10;\n\t\t\t\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\t\t\t",
                                imageSource: WebImageElement_1.ImageSourceType.SPRITE,
                                imageData: {
                                    assetName: 'mlui_menu',
                                    imageName: 'arrow_Enabled.png',
                                    ratio: 0.55
                                },
                            })
                        }
                    }
                },
                pages: this.getLandscapeGerneralPagingElementPages(),
            })
        ];
    };
    MLUIRulesConfig.prototype.getLandscapeGerneralPagingElementPages = function () {
        return [];
    };
    // remove defualt main title
    MLUIRulesConfig.prototype.getLandscapeHeaderMainTitleConfig = function () {
        return null;
    };
    /**
     * config landscape "How to win" block content
     */
    MLUIRulesConfig.prototype.getLandscapeHowToWinElement = function () {
        return [
            WebElementFactory_1.WebElementFactory.createWebElementBlock({
                type: WebElementFactory_1.WebFactoryElementType.WEB_ELEMENT_BLOCK,
                config: [
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_ELEMENT,
                        blockStyle: this.getLandscapeMainTitleStyle(),
                        languageKey: 'howToWinTitle1'
                    },
                    {
                        blockStyle: "\n\t\t\t\t\t\t\tmargin: 35px 0px 7px;\n\t\t\t\t\t\t",
                        type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_ELEMENT,
                        languageKey: 'howToWinSubtitle1',
                        concentStyle: "\n\t\t\t\t\t\t\tfont-size: 21px;\n\t\t\t\t\t\t"
                    },
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_CONTENT_ELEMENT,
                        languageKey: 'howToWinContent1'
                    }
                ]
            }),
            WebElementFactory_1.WebElementFactory.createWebElementBlock({
                type: WebElementFactory_1.WebFactoryElementType.WEB_ELEMENT_BLOCK,
                config: [
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_ELEMENT,
                        blockStyle: this.getLandscapeMainTitleStyle(),
                        languageKey: 'howToWinTitle1'
                    },
                    {
                        blockStyle: "\n\t\t\t\t\t\t\tmargin: 35px 0px 7px;\n\t\t\t\t\t\t",
                        type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_ELEMENT,
                        languageKey: 'howToWinSubtitle2',
                        concentStyle: "\n\t\t\t\t\t\t\tfont-size: 21px;\n\t\t\t\t\t\t"
                    },
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_CONTENT_ELEMENT,
                        languageKey: 'howToWinContent2'
                    }
                ]
            })
        ];
    };
    /**
     * set up landscape rtp block
     */
    MLUIRulesConfig.prototype.getLandscapeRTPElements = function (rtp) {
        return [
            WebElementFactory_1.WebElementFactory.createWebElementBlock({
                type: WebElementFactory_1.WebFactoryElementType.WEB_ELEMENT_BLOCK,
                config: [
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_ELEMENT,
                        blockStyle: this.getLandscapeMainTitleStyle(),
                        languageKey: 'rtpTitle'
                    },
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_CONTENT_ELEMENT,
                        languageKey: 'rtpContent',
                        textToReplace: [
                            {
                                replaceKey: '{rtp}',
                                replaceValue: rtp
                            }
                        ]
                    },
                ]
            })
        ];
    };
    /**
     * config landscape "Others" block content
     */
    MLUIRulesConfig.prototype.getLandscapeOthersElement = function (additionalElements) {
        if (additionalElements == undefined || additionalElements == Helper_1.Helper.EMPTY) {
            return [];
        }
        else {
            return [
                WebElementFactory_1.WebElementFactory.createWebElementBlock({
                    type: WebElementFactory_1.WebFactoryElementType.WEB_ELEMENT_BLOCK,
                    config: [
                        {
                            type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_ELEMENT,
                            blockStyle: this.getLandscapeMainTitleStyle(),
                            languageKey: 'othersTitle1'
                        },
                        {
                            type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_CONTENT_ELEMENT,
                            languageKey: additionalElements
                        }
                    ]
                })
            ];
        }
    };
    return MLUIRulesConfig;
}(GeneralWebPageConfig_1.GeneralWebPageConfig));
exports.MLUIRulesConfig = MLUIRulesConfig;


/***/ }),
/* 248 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var TsMap_1 = __webpack_require__(2);
var Translator_1 = __webpack_require__(25);
var SoundConfig_1 = __webpack_require__(55);
var IMLUIConfig_1 = __webpack_require__(59);
var WebpageElement_1 = __webpack_require__(249);
var WebImageElement_1 = __webpack_require__(69);
/**
 * common default config in webpage (rule, paytable, history)
 */
var GeneralWebPageConfig = /** @class */ (function (_super) {
    __extends(GeneralWebPageConfig, _super);
    function GeneralWebPageConfig() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.name = '';
        _this.externalKey = '';
        _this.domID = 'external-module';
        _this.moduleName = '';
        _this.assetNames = ['symbols', 'mlui_menu'];
        _this.localisationKeys = [''];
        _this.debug = false;
        _this.soundKey = SoundConfig_1.SoundConfig;
        _this.buttonIds = _this.getButtonIds();
        /**
         * variable for portrait layout
         */
        _this.portraitLayoutConfig = _this.getPortraitLayoutConfig();
        /**
         * variable for landscape layout config
         */
        _this.landscapeLayoutConfig = _this.getLandscapeLayoutConfig();
        return _this;
    }
    GeneralWebPageConfig.prototype.getButtonIds = function () {
        return new TsMap_1.TsMap([]);
    };
    /**
     * layout for portrait screen
     */
    GeneralWebPageConfig.prototype.getPortraitLayoutConfig = function () {
        return {
            width: 504,
            height: 896,
            blockStyle: "\n\t\t\t\tdisplay: flex;\n\t\t\t\tflex-direction: column;\n\t\t\t",
            headerConfig: this.getPortraitHeaderConfig(),
            containerConfig: this.getPortraitContainerConfig(),
        };
    };
    /**
     * portrait header config
     */
    GeneralWebPageConfig.prototype.getPortraitHeaderConfig = function () {
        return {
            blockStyle: "\n\t\t\t\tpadding: 0 56px;\n\t\t\t\twidth: 504px;\n\t\t\t",
            //header title
            titleConfig: {
                type: WebpageElement_1.WebElementType.WEB_TEXT_ELEMENT,
                blockStyle: "\n\t\t\t\t\tfont-size:34px;\n\t\t\t\t\twhite-space: pre;\n\t\t\t\t\tfont-weight: bold;\n\t\t\t\t\tline-height: 145px;\n\t\t\t\t",
                languageKey: 'mainTitle',
                maxAmount: 10,
            },
            //header close button
            closeButton: {
                dataHookTrackerConfig: {
                    buttonID: this.getButtonIds().get('closeButton')
                },
                soundKey: SoundConfig_1.SoundConfig.buttonClick,
                buttonImage: {
                    type: WebpageElement_1.WebElementType.WEB_IMAGE_ELEMENT,
                    blockStyle: "\n\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\ttop: 45px;\n\t\t\t\t\t\tright: 55px;\n\t\t\t\t\t\twidth: 75px;\n\t\t\t\t\t\theight: 75px;\n\t\t\t\t\t\tborder-radius: 50%;\n\t\t\t\t\t\tcursor: pointer;\n\t\t\t\t\t\tuser-select: none;\n\t\t\t\t\t",
                    imageSource: WebImageElement_1.ImageSourceType.SPRITE,
                    imageData: {
                        assetName: 'mlui_menu',
                        imageName: 'close_Enabled.png',
                        ratio: 0.7
                    }
                }
            }
        };
    };
    /**
     * portrait container config
     */
    GeneralWebPageConfig.prototype.getPortraitContainerConfig = function () {
        return {
            innerBlockStyle: 'padding: 0 56px 56px;',
            blockStyle: "\n\t\t\t\tflex-grow: 1;\n\t\t\t\tflex-shrink: 1;\n\t\t\t",
        };
    };
    /**
     * layout for landscape screen
     */
    GeneralWebPageConfig.prototype.getLandscapeLayoutConfig = function () {
        return {
            width: 896,
            height: 504,
            blockStyle: "\n\t\t\t\tdisplay: flex;\n\t\t\t\tflex-direction: column;\n\t\t\t",
            headerConfig: this.getLandscapeHeaderConfig(),
            containerConfig: this.getLandscapeContainerConfig(),
        };
    };
    /**
     * Landscape header config
     */
    GeneralWebPageConfig.prototype.getLandscapeHeaderConfig = function () {
        return {
            blockStyle: "\n\t\t\t\twidth:896px;\n\t\t\t\theight:105px;\n\t\t\t\tpadding:0 56px;\n\t\t\t",
            titleConfig: this.getLandscapeHeaderMainTitleConfig(),
            closeButton: {
                dataHookTrackerConfig: {
                    buttonID: this.getButtonIds().get('closeButton')
                },
                soundKey: SoundConfig_1.SoundConfig.buttonClick,
                buttonImage: {
                    type: WebpageElement_1.WebElementType.WEB_IMAGE_ELEMENT,
                    blockStyle: "\n\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\ttop: 45px;\n\t\t\t\t\t\tright: 55px;\n\t\t\t\t\t\tborder-radius: 50%;\n\t\t\t\t\t\tcursor: pointer;\n\t\t\t\t\t\tuser-select: none;\n\t\t\t\t\t",
                    imageSource: WebImageElement_1.ImageSourceType.SPRITE,
                    imageData: {
                        assetName: 'mlui_menu',
                        imageName: 'close_Enabled.png',
                        ratio: 0.7
                    }
                }
            }
        };
    };
    /**
     * Landscape header title config
     */
    GeneralWebPageConfig.prototype.getLandscapeHeaderMainTitleConfig = function () {
        return {
            type: WebpageElement_1.WebElementType.WEB_TEXT_ELEMENT,
            blockStyle: "\n\t\t\t\tfont-size:33px;\n\t\t\t\twhite-space: pre;\n\t\t\t\tfont-weight: bold;\n\t\t\t\tline-height: 140px;\n\t\t\t",
            languageKey: 'mainTitle',
            maxAmount: 10,
        };
    };
    /**
     * Landscape container config
     */
    GeneralWebPageConfig.prototype.getLandscapeContainerConfig = function () {
        return {
            innerBlockStyle: 'padding: 0 140px',
            blockStyle: "\n\t\t\t\tflex-grow: 1;\n\t\t\t\tflex-shrink: 1;\n\t\t\t",
        };
    };
    /**
     * set up main title style
     */
    GeneralWebPageConfig.prototype.getLandscapeMainTitleStyle = function () {
        return "\n\t\t\tfont-size: 33px;\n\t\t\tposition: absolute;\n\t\t\ttop: -45.5px;\n\t\t\tleft:-14px;\n\t\t\tz-index: 11;\n\t\t\twhite-space: pre;\n\t\t\tfont-weight: bold;\n\t\t";
    };
    var _a;
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof Translator_1.Translator !== "undefined" && Translator_1.Translator) === "function" && _a || Object)
    ], GeneralWebPageConfig.prototype, "translator", void 0);
    return GeneralWebPageConfig;
}(IMLUIConfig_1.MLUIConfig));
exports.GeneralWebPageConfig = GeneralWebPageConfig;


/***/ }),
/* 249 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var DataHookType;
(function (DataHookType) {
    DataHookType["GENERAL"] = "GENERAL";
    DataHookType["GENPLUS"] = "GENPLUS";
})(DataHookType = exports.DataHookType || (exports.DataHookType = {}));
var WebElementType;
(function (WebElementType) {
    WebElementType["WEB_ELEMENT_BLOCK"] = "WEB_ELEMENT_BLOCK";
    WebElementType["WEB_IMAGE_ELEMENT"] = "WEB_IMAGE_ELEMENT";
    WebElementType["WEB_TEXT_CONTENT_ELEMENT"] = "WEB_TEXT_CONTENT_ELEMENT";
    WebElementType["WEB_LINE_ELEMENT"] = "WEB_LINE_ELEMENT";
    WebElementType["WEB_TEXT_ELEMENT"] = "WEB_TEXT_ELEMENT";
    WebElementType["WEB_PAYOUT_ELEMENT"] = "WEB_PAYOUT_ELEMENT";
    //FOOTER = 'FOOTER',
    //RTP = 'RTP',
    //SYMBOL_BLOCKS = 'SYMBOL_BLOCKS',
    WebElementType["HELPSCREEN_PAGING"] = "HELPSCREEN_PAGING";
    WebElementType["LINE_PATTERN"] = "LINE_PATTERN";
    WebElementType["RESULTS_PAGING"] = "RESULTS_PAGING";
    WebElementType["REEL_RESULTS"] = "REEL_RESULTS";
    WebElementType["GIANT_REEL_RESULTS"] = "GIANT_REEL_RESULTS";
    WebElementType["REELWINS_PAGING"] = "REELWINS_PAGING";
    WebElementType["FEATURES"] = "FEATRUES";
    WebElementType["WEBPAGE_ELEMENT"] = "WEBPAGE_ELEMENT";
    WebElementType["DATA_SOURCE"] = "DATA_SOURCE";
})(WebElementType = exports.WebElementType || (exports.WebElementType = {}));


/***/ }),
/* 250 */,
/* 251 */,
/* 252 */,
/* 253 */,
/* 254 */,
/* 255 */,
/* 256 */,
/* 257 */,
/* 258 */,
/* 259 */,
/* 260 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var TsMap_1 = __webpack_require__(2);
var Helper_1 = __webpack_require__(5);
var SoundConfig_1 = __webpack_require__(55);
var WebImageElement_1 = __webpack_require__(69);
var WebElementFactory_1 = __webpack_require__(45);
var WebpageElement_1 = __webpack_require__(249);
var SlotEvent_1 = __webpack_require__(32);
var MLUIButtonId_1 = __webpack_require__(38);
var GeneralWebPageConfig_1 = __webpack_require__(248);
var MLUIHistoryConfig = /** @class */ (function (_super) {
    __extends(MLUIHistoryConfig, _super);
    function MLUIHistoryConfig() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.name = 'history';
        _this.externalKey = 'external-history';
        _this.moduleName = 'GenesisHistory';
        _this.localisationKey = 'history';
        _this.localisationKeys = ['history_General'];
        return _this;
    }
    MLUIHistoryConfig.prototype.getButtonIds = function () {
        return new TsMap_1.TsMap([
            [
                'closeButton', MLUIButtonId_1.MLUIButtonId.BUTTON_HIDE_HISTORY
            ],
            [
                'backButton', MLUIButtonId_1.MLUIButtonId.BUTTON_HISTORY_RETURN
            ]
        ]);
    };
    MLUIHistoryConfig.prototype.getPortraitLayoutConfig = function () {
        return Helper_1.Helper.mergeTwoObjects(_super.prototype.getPortraitLayoutConfig.call(this), {
            subHeaderConfig: this.getPortraitSubHeaderConfig(),
        });
    };
    /**
     * set up portrait subheader config
     */
    MLUIHistoryConfig.prototype.getPortraitSubHeaderConfig = function () {
        return {
            blockStyle: "\n\t\t\t\ttext-align: left;\n\t\t\t\tposition:relative;\n\t\t\t\theight:101px;\n\t\t\t\tpadding: 0 56px;\n\t\t\t",
            config: [
                WebElementFactory_1.WebElementFactory.createWebTextElement({
                    type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_ELEMENT,
                    blockStyle: this.getPortraitSubTitleTextStyle(),
                    languageKey: 'time'
                }),
                WebElementFactory_1.WebElementFactory.createWebTextElement({
                    type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_ELEMENT,
                    blockStyle: this.getPortraitSubTitleTextStyle(),
                    languageKey: 'bet'
                }),
                WebElementFactory_1.WebElementFactory.createWebTextElement({
                    type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_ELEMENT,
                    blockStyle: this.getPortraitSubTitleTextStyle(),
                    languageKey: 'won'
                })
            ]
        };
    };
    /**
     * set up portrait body config
     */
    MLUIHistoryConfig.prototype.getPortraitContainerConfig = function () {
        return Helper_1.Helper.mergeTwoObjects(_super.prototype.getPortraitContainerConfig.call(this), {
            innerBlockStyle: 'padding: 0;',
            blockStyle: "\n\t\t\t\t\tbackground-color: rgb(28, 28, 28);\n\t\t\t\t\tflex-basis: 100%;\n\t\t\t\t\toverflow: hidden scroll;\n\t\t\t\t",
            historyTabConfigs: this.getPortraitHistoryQuetyConfig(),
        });
    };
    /**
     * set up portrait header config
     */
    MLUIHistoryConfig.prototype.getPortraitHeaderConfig = function () {
        return {
            blockStyle: "\n\t\t\t\tpadding: 0 56px;\n\t\t\t\twidth:504px;\n\t\t\t",
            //header title
            titleConfig: {
                type: WebpageElement_1.WebElementType.WEB_TEXT_ELEMENT,
                blockStyle: "\n\t\t\t\t\tfont-size:34px;\n\t\t\t\t\twhite-space: pre;\n\t\t\t\t\tfont-weight: bold;\n\t\t\t\t\tline-height: 145px;\n\t\t\t\t",
                languageKey: 'summaryTitle',
                maxAmount: 10,
            },
            //header close button
            closeButton: {
                dataHookTrackerConfig: {
                    buttonID: this.getButtonIds().get('closeButton')
                },
                soundKey: SoundConfig_1.SoundConfig.buttonClick,
                buttonImage: {
                    type: WebpageElement_1.WebElementType.WEB_IMAGE_ELEMENT,
                    blockStyle: "\n\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\ttop: 45px;\n\t\t\t\t\t\tright: 55px;\n\t\t\t\t\t\twidth: 75px;\n\t\t\t\t\t\theight: 75px;\n\t\t\t\t\t\tborder-radius: 50%;\n\t\t\t\t\t\tz-index:20;\n\t\t\t\t\t\tcursor: pointer;\n\t\t\t\t\t\tuser-select: none;\n\t\t\t\t\t",
                    imageSource: WebImageElement_1.ImageSourceType.SPRITE,
                    imageData: {
                        assetName: 'mlui_menu',
                        imageName: 'close_Enabled.png',
                        ratio: 0.7
                    }
                }
            },
            backButton: {
                dataHookTrackerConfig: {
                    buttonID: this.getButtonIds().get('backButton')
                },
                soundKey: SoundConfig_1.SoundConfig.buttonClick,
                buttonImage: WebElementFactory_1.WebElementFactory.createWebImageElement({
                    type: WebElementFactory_1.WebFactoryElementType.WEB_IMAGE_ELEMENT,
                    blockStyle: "\n\t\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\t\ttop: 45px;\n\t\t\t\t\t\t\twidth: 75px;\n\t\t\t\t\t\t\theight: 75px;\n\t\t\t\t\t\t\tcursor: pointer;\n\t\t\t\t\t\t\tuser-select: none;\n\t\t\t\t\t\t",
                    imageSource: WebImageElement_1.ImageSourceType.SPRITE,
                    imageData: {
                        assetName: 'mlui_menu',
                        imageName: 'back_Enabled.png',
                        ratio: 0.7
                    }
                })
            },
            dateFilterConfig: this.getPortraitFilterConfig(),
            dateDisplayBar: {
                type: WebpageElement_1.WebElementType.DATA_SOURCE,
                blockStyle: "\n\t\t\t\t\tfont-family: 'HelveticaNeue-Light', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n\t\t\t\t\tline-height: 45.5px;\n\t\t\t\t\tfont-size: 21px;\n\t\t\t\t\twidth:392px;\n\t\t\t\t",
                variableName: 'date',
            }
        };
    };
    /**
     * set up portrait date filter config
     */
    MLUIHistoryConfig.prototype.getPortraitFilterConfig = function () {
        return {
            filterLanguageKey: 'filter',
            style: "white-space: pre;",
            closeBoxAreaStyle: "width:504px;",
            dateFilterMenuConfig: {
                blockStyle: "\n\t\t\t\t\ttop: 154px;\n\t\t\t\t\tleft: 130px;\n\t\t\t\t",
                closeButton: {
                    blockStyle: "\n\t\t\t\t\t\tcursor: pointer;\n\t\t\t\t\t\tdisplay:inline-block;\n\t\t\t\t\t\theight:20px;\n\t\t\t\t\t",
                    soundKey: SoundConfig_1.SoundConfig.buttonClick,
                    buttonImage: WebElementFactory_1.WebElementFactory.createWebImageElement({
                        type: WebElementFactory_1.WebFactoryElementType.WEB_IMAGE_ELEMENT,
                        imageSource: WebImageElement_1.ImageSourceType.TEXTURE,
                        imageData: {
                            imagePath: 'assets/helpscreens/fork.png',
                            width: 90,
                            height: 90,
                            ratio: 0.7
                        },
                        imageStyle: "\n\t\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\t\ttop: 7px;\n\t\t\t\t\t\t"
                    })
                }
            }
        };
    };
    /**
     * set up portrait summary title config
     */
    MLUIHistoryConfig.prototype.getPortraitSummaryTitleConfig = function () {
        return {
            blockStyle: "\n\t\t\t\ttext-align: left;\n\t\t\t\tborder-bottom: 1px solid #fff;\n\t\t\t\tmargin: 0 56px;\n\t\t\t\tposition:relative;\n\t\t\t\theight:120px;\n\t\t\t",
            config: [
                {
                    type: WebpageElement_1.WebElementType.DATA_SOURCE,
                    blockStyle: 'font-size: 21px;width:392px;',
                    variableName: 'date',
                },
                {
                    type: WebpageElement_1.WebElementType.WEB_TEXT_ELEMENT,
                    blockStyle: this.getPortraitSubTitleTextStyle(),
                    languageKey: 'time',
                },
                {
                    type: WebpageElement_1.WebElementType.WEB_TEXT_ELEMENT,
                    blockStyle: this.getPortraitSubTitleTextStyle(),
                    languageKey: 'bet',
                },
                {
                    type: WebpageElement_1.WebElementType.WEB_TEXT_ELEMENT,
                    blockStyle: this.getPortraitSubTitleTextStyle(),
                    languageKey: 'won',
                }
            ]
        };
    };
    /**
     * set up portrait summary quety
     */
    MLUIHistoryConfig.prototype.getPortraitHistoryQuetyConfig = function () {
        return new TsMap_1.TsMap([
            [
                SlotEvent_1.SlotEvent.HISTORY_SUMMARY, {
                    type: SlotEvent_1.SlotEvent.HISTORY_SUMMARY,
                    summaryConfig: this.getPortraitGeneralSummaryConfig(),
                    detailConfig: this.getPortraitGeneralDetailConfig(),
                    withDetailHeader: WebElementFactory_1.WebElementFactory.createWebTextElement({
                        type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_ELEMENT,
                        blockStyle: "\n\t\t\t\t\t\t\t\ttransform-origin: center center;\n\t\t\t\t\t\t\t\ttext-align: center;\n\t\t\t\t\t\t\t\twhite-space: pre;\n\t\t\t\t\t\t\t\theight: 126px;\n\t\t\t\t\t\t\t\tmargin:0px 70px;\n\t\t\t\t\t\t\t\tline-height: 161px;\n\t\t\t\t\t\t\t\tfont-weight: bold;\n\t\t\t\t\t\t\t\tfont-size: 25px;\n\t\t\t\t\t\t\t",
                        maxAmount: 15,
                        languageKey: 'historyDetail'
                    })
                }
            ]
        ]);
    };
    /**
     * set up portrait general summary config (transaction)
     */
    MLUIHistoryConfig.prototype.getPortraitGeneralSummaryConfig = function () {
        return {
            blockStyle: "\n\t\t\t\tpadding-bottom: 70px;\n\t\t\t",
            titleHeight: 120,
            rowHeight: 63,
            pageSize: 200,
            noSummaryConfig: this.getPortraitGeneralNoSummaryConfig(),
            rowStyle: "padding: 0 56px;",
            extraWinConfig: this.getPortraitExtraWinConfig(),
            titleConfig: this.getPortraitSummaryTitleConfig(),
            pagingButtonConfig: {
                blockStyle: "\n\t\t\t\t\tposition:relative;\n\t\t\t\t\tfont-size:15px;\n\t\t\t\t\theight:0px;\n\t\t\t\t\tbottom:13px;\n\t\t\t\t",
                nextButton: {
                    dataHookTrackerConfig: {
                        buttonID: MLUIButtonId_1.MLUIButtonId.BUTTON_HISTORY_NEXT,
                    },
                    soundKey: SoundConfig_1.SoundConfig.buttonClick,
                    blockStyle: "\n\t\t\t\t\t\tdisplay:inline-block;\n\t\t\t\t\t\tposition: relative;\n\t\t\t\t\t\ttop: 7px;\n\t\t\t\t\t\tleft: 0px;\n\t\t\t\t\t",
                    buttonImage: WebElementFactory_1.WebElementFactory.createWebImageElement({
                        type: WebElementFactory_1.WebFactoryElementType.WEB_IMAGE_ELEMENT,
                        blockStyle: "\n\t\t\t\t\t\t\tposition: relative;\n\t\t\t\t\t\t\twidth:42px;\n\t\t\t\t\t\t\theight:42px;\n\t\t\t\t\t\t\ttop: 10px;",
                        imageSource: WebImageElement_1.ImageSourceType.TEXTURE,
                        imageData: {
                            imagePath: 'assets/helpscreens/arrow.png',
                            width: 60,
                            height: 60,
                            ratio: 0.7
                        },
                        imageStyle: "\n\t\t\t\t\t\t"
                    })
                },
                preButton: {
                    dataHookTrackerConfig: {
                        buttonID: MLUIButtonId_1.MLUIButtonId.BUTTON_HISTORY_PREV,
                    },
                    soundKey: SoundConfig_1.SoundConfig.buttonClick,
                    blockStyle: "\n\t\t\t\t\t\tdisplay:inline-block;\n\t\t\t\t\t\tposition: relative;\n\t\t\t\t\t\ttop: 7px;\n\t\t\t\t\t\tleft: 0px;\n\t\t\t\t\t",
                    buttonImage: WebElementFactory_1.WebElementFactory.createWebImageElement({
                        type: WebElementFactory_1.WebFactoryElementType.WEB_IMAGE_ELEMENT,
                        blockStyle: "\n\t\t\t\t\t\t\tposition: relative;\n\t\t\t\t\t\t\twidth:42px;\n\t\t\t\t\t\t\theight:42px;\n\t\t\t\t\t\t\ttop: 10px;\n\t\t\t\t\t\t\ttransform: scaleX(-1);",
                        imageSource: WebImageElement_1.ImageSourceType.TEXTURE,
                        imageData: {
                            imagePath: 'assets/helpscreens/arrow.png',
                            width: 60,
                            height: 60,
                            ratio: 0.7
                        },
                        imageStyle: ""
                    })
                }
            },
            rowDataHookConfig: {
                buttonID: MLUIButtonId_1.MLUIButtonId.BUTTON_HISTORY_TRANDETAIL
            },
            rowConfig: [
                {
                    type: WebpageElement_1.WebElementType.DATA_SOURCE,
                    blockStyle: 'cursor: pointer;',
                    variableName: 'time',
                },
                {
                    type: WebpageElement_1.WebElementType.DATA_SOURCE,
                    blockStyle: 'cursor: pointer;',
                    variableName: 'bet',
                },
                {
                    type: WebpageElement_1.WebElementType.DATA_SOURCE,
                    blockStyle: 'width: 153px;cursor: pointer;',
                    variableName: 'win',
                },
                WebElementFactory_1.WebElementFactory.createWebImageElement({
                    type: WebElementFactory_1.WebFactoryElementType.WEB_IMAGE_ELEMENT,
                    blockStyle: "\n\t\t\t\t\t\tposition: relative;\n\t\t\t\t\t\twidth: 7px;\n\t\t\t\t\t\theight: 7px;\n\t\t\t\t\t\tcursor: pointer;\n\t\t\t\t\t",
                    imageSource: WebImageElement_1.ImageSourceType.TEXTURE,
                    imageData: {
                        imagePath: 'assets/helpscreens/arrow.png',
                        width: 60,
                        height: 60,
                        ratio: 0.56
                    },
                    imageStyle: "\n\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\ttop: -13px;\n\t\t\t\t\t\tright: -35px;\n\t\t\t\t\t"
                })
            ],
        };
    };
    /**
     * set up portrait general summary without data
     */
    MLUIHistoryConfig.prototype.getPortraitGeneralNoSummaryConfig = function () {
        return {
            blockStyle: "margin-top: 210px;",
            config: [
                WebElementFactory_1.WebElementFactory.createWebTextElement({
                    type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_ELEMENT,
                    blockStyle: "\n\t\t\t\t\t\tcolor: #C2C2C2;\n\t\t\t\t\t\ttext-align: center;\n\t\t\t\t\t\tfont-size: 25px;\n\t\t\t\t\t\tpadding: 0px 97px;\n\t\t\t\t\t",
                    languageKey: 'noSummary'
                })
            ]
        };
    };
    /**
     * set up portrait general summary when there is no summary
     */
    MLUIHistoryConfig.prototype.getPortraitGeneralDetailConfig = function () {
        return {
            blockStyle: '',
            informationConfig: this.getPortraitDetailInformationConfig(),
            resultConfig: this.getPortraitDetailResultConfig(),
        };
    };
    /**
     * set up portrait detail information (ex: transaction ID or bet win)
     */
    MLUIHistoryConfig.prototype.getPortraitDetailInformationConfig = function () {
        return {
            textStyle: "\n\t\t\t\ttop:-42px;\n\t\t\t\tleft:24.5px;\n\t\t\t",
            boosterImageConfig: {
                sourceName: 'genHistory',
                imageName: 'icon_{name}.png',
                ratio: 0.7
            },
            boosterStyle: "\n\t\t\t\ttop: -22px;\n\t\t\t",
            idBlockConfig: {
                blockStyle: "\n\t\t\t\t\twidth: 100%;\n\t\t\t\t",
                titleConfig: WebElementFactory_1.WebElementFactory.createWebTextElement({
                    type: WebpageElement_1.WebElementType.WEB_TEXT_ELEMENT,
                    blockStyle: this.getPortraitInformationBlockTitleStyle(),
                    languageKey: 'transactionId',
                }),
                valueConfig: {
                    type: WebpageElement_1.WebElementType.DATA_SOURCE,
                    blockStyle: this.getPortraitInformationBlockVavlueStyle(),
                    variableName: 'transactionID',
                }
            },
            betBlockConfig: {
                blockStyle: "\n\t\t\t\t\twidth: 50%;\n\t\t\t\t",
                titleConfig: WebElementFactory_1.WebElementFactory.createWebTextElement({
                    type: WebpageElement_1.WebElementType.WEB_TEXT_ELEMENT,
                    blockStyle: this.getPortraitInformationBlockTitleStyle(),
                    languageKey: 'betPaid',
                }),
                valueConfig: {
                    type: WebpageElement_1.WebElementType.DATA_SOURCE,
                    blockStyle: this.getPortraitInformationBlockVavlueStyle(),
                    variableName: 'bet',
                }
            },
            winBlockConfig: {
                blockStyle: "\n\t\t\t\t\twidth: 50%;\n\t\t\t\t",
                titleConfig: WebElementFactory_1.WebElementFactory.createWebTextElement({
                    type: WebpageElement_1.WebElementType.WEB_TEXT_ELEMENT,
                    blockStyle: this.getPortraitInformationBlockTitleStyle(),
                    languageKey: 'totalWon',
                }),
                valueConfig: {
                    type: WebpageElement_1.WebElementType.DATA_SOURCE,
                    blockStyle: this.getPortraitInformationBlockVavlueStyle(),
                    variableName: 'win',
                }
            },
            balanceBlockConfig: {
                blockStyle: "\n\t\t\t\t\twidth: 50%;\n\t\t\t\t",
                titleConfig: WebElementFactory_1.WebElementFactory.createWebTextElement({
                    type: WebpageElement_1.WebElementType.WEB_TEXT_ELEMENT,
                    blockStyle: this.getPortraitInformationBlockTitleStyle(),
                    languageKey: 'balance',
                }),
                valueConfig: {
                    type: WebpageElement_1.WebElementType.DATA_SOURCE,
                    blockStyle: this.getPortraitInformationBlockVavlueStyle(),
                    variableName: 'balance',
                }
            }
        };
    };
    /**
     * set up portrait detail result
     */
    MLUIHistoryConfig.prototype.getPortraitDetailResultConfig = function () {
        return {
            type: WebpageElement_1.WebElementType.RESULTS_PAGING,
            blockStyle: "\n\t\t\t\tpadding:0 56px 7px;\n\t\t\t\tbackground-color: #121212;\n\t\t\t\twidth:392px;\n\t\t\t\ttop: 52.5px;\n\t\t\t",
            pagingConfig: {
                arrowButton: {
                    blockStyle: 'width:392px; top: 329px;',
                    nextButton: {
                        dataHookTrackerConfig: {
                            buttonID: MLUIButtonId_1.MLUIButtonId.BUTTON_HISTORY_NEXT
                        },
                        soundKey: SoundConfig_1.SoundConfig.buttonClick,
                        buttonImage: WebElementFactory_1.WebElementFactory.createWebImageElement({
                            type: WebElementFactory_1.WebFactoryElementType.WEB_IMAGE_ELEMENT,
                            blockStyle: "\n\t\t\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\t\t\tright:-50.4px;\n\t\t\t\t\t\t\t\ttransform: scaleX(-1);\n\t\t\t\t\t\t\t",
                            imageSource: WebImageElement_1.ImageSourceType.SPRITE,
                            imageData: {
                                assetName: 'mlui_menu',
                                imageName: 'arrow_Enabled.png',
                                ratio: 0.56
                            }
                        })
                    },
                    preButton: {
                        dataHookTrackerConfig: {
                            buttonID: MLUIButtonId_1.MLUIButtonId.BUTTON_HISTORY_PREV
                        },
                        soundKey: SoundConfig_1.SoundConfig.buttonClick,
                        buttonImage: WebElementFactory_1.WebElementFactory.createWebImageElement({
                            type: WebElementFactory_1.WebFactoryElementType.WEB_IMAGE_ELEMENT,
                            blockStyle: "\n\t\t\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\t\t\tleft:-50.4px;\n\t\t\t\t\t\t\t",
                            imageSource: WebImageElement_1.ImageSourceType.SPRITE,
                            imageData: {
                                assetName: 'mlui_menu',
                                imageName: 'arrow_Enabled.png',
                                ratio: 0.56
                            }
                        })
                    }
                },
                dropDownBox: {
                    blockStyle: "\n\t\t\t\t\t\twidth: 400px;\n\t\t\t\t\t\theight: 10.5px;\n\t\t\t\t\t\ttop: -56px;\n\t\t\t\t\t\tposition: relative;\n\t\t\t\t\t",
                    dataHookTrackerConfig: {
                        buttonID: MLUIButtonId_1.MLUIButtonId.DROPDOWN_HISTORY_DETAIL_TRANSACTION
                    },
                    soundKey: SoundConfig_1.SoundConfig.buttonClick,
                    dropDownStyle: "\n\t\t\t\t\t\tline-height: 63px;\n\t\t\t\t\t",
                    dropDownMenuStyle: "\n\t\t\t\t\t\ttop: 50px;\n\t\t\t\t\t\tleft: -50px;\n\t\t\t\t\t\twidth: 392px;\n\t\t\t\t\t\tbackground-color: rgb(28,28,28);\n\t\t\t\t\t",
                    arrowTurnStyle: "\n\t\t\t\t\t\ttop:0px;\n\t\t\t\t\t\tmargin-left: 5px;\n\t\t\t\t\t",
                    arrowImage: WebElementFactory_1.WebElementFactory.createWebImageElement({
                        type: WebElementFactory_1.WebFactoryElementType.WEB_IMAGE_ELEMENT,
                        blockStyle: "\n\t\t\t\t\t\t\tposition: relative;\n\t\t\t\t\t\t\ttransform:rotate(90deg);\n\t\t\t\t\t\t\ttop: 11px;\n\t\t\t\t\t\t\twidth: 33px;\n\t\t\t\t\t\t\theight: 33px;\n\t\t\t\t\t\t\tdisplay: inline-block;\n\t\t\t\t\t\t\tuser-select: none;",
                        imageSource: WebImageElement_1.ImageSourceType.TEXTURE,
                        imageData: {
                            imagePath: 'assets/helpscreens/arrow.png',
                            width: 60,
                            height: 60,
                            ratio: 0.56
                        },
                        imageStyle: ''
                    })
                }
            },
            pageSize: 1,
            variableName: 'detialFormat',
            config: this.getPortraitDetialFormatConfigs()
        };
    };
    MLUIHistoryConfig.prototype.getPortraitDetialFormatConfigs = function () {
        return [];
    };
    /**
     * set up portrait extra win (ex: with rounds or rad+ booster)
     */
    MLUIHistoryConfig.prototype.getPortraitExtraWinConfig = function () {
        return {
            iconStyle: 'margin:7px;display: inline-block;',
            blockStyle: "\n\t\t\t\ttop:-21px;\n\t\t\t\tcursor: pointer;\n\t\t\t\twhite-space: pre;\n\t\t\t",
            textStyle: "\n\t\t\t\tposition:relative;\n\t\t\t\ttop:-10px;\n\t\t\t\tmargin-left: 5px;\n\t\t\t\tdisplay: inline-block;\n\t\t\t\twhite-space: pre;\n\t\t\t\tcolor: #f6ae06;\n\t\t\t",
            featureTrackIcons: new TsMap_1.TsMap([
                [
                    'FREE_SPIN',
                    WebElementFactory_1.WebElementFactory.createWebImageElement({
                        type: WebElementFactory_1.WebFactoryElementType.WEB_IMAGE_ELEMENT,
                        blockStyle: "\n\t\t\t\t\t\t\tmargin: 6px 2px 3.5px 5.5px;\n\t\t\t\t\t\t\tdisplay:inline-block;",
                        imageSource: WebImageElement_1.ImageSourceType.TEXTURE,
                        imageData: {
                            imagePath: 'assets/helpscreens/icon_FreeRound.png',
                            width: 24,
                            height: 24,
                            ratio: 0.56
                        }
                    })
                ],
                [
                    'SUPER_WILD',
                    WebElementFactory_1.WebElementFactory.createWebImageElement({
                        type: WebElementFactory_1.WebFactoryElementType.WEB_IMAGE_ELEMENT,
                        blockStyle: "\n\t\t\t\t\t\t\tmargin: 6px 2px 3.5px 5.5px;\n\t\t\t\t\t\t\tdisplay:inline-block;",
                        imageSource: WebImageElement_1.ImageSourceType.TEXTURE,
                        imageData: {
                            imagePath: 'assets/helpscreens/icon_FreeRound.png',
                            width: 24,
                            height: 24,
                            ratio: 0.56
                        }
                    })
                ]
            ]),
            boosterImageConfig: {
                sourceName: 'genHistory',
                imageName: 'icon_{name}.png',
                ratio: 0.7
            }
        };
    };
    /**
     * set up sub header title style
     */
    MLUIHistoryConfig.prototype.getPortraitSubTitleTextStyle = function () {
        return "\n\t\t\tposition: relative;\n\t\t\twidth: 113px;\n\t\t\tline-height: 63px;\n\t\t\tmargin:0px;\n\t\t\twhite-space: pre;\n\t\t\tfont-size: 16px;\n\t\t\tdisplay: inline-block;\n\t\t";
    };
    /**
     * set up portrait information block
     */
    MLUIHistoryConfig.prototype.getPortraitInformationBlockTitleStyle = function () {
        return "\n\t\t\tmargin: 0;\n\t\t\tfont-size: 16px;\n\t\t\tline-height: 1.15;\n\t\t\tfont-family:'HelveticaNeue-Bold', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n\t\t";
    };
    MLUIHistoryConfig.prototype.getPortraitInformationBlockVavlueStyle = function () {
        return "\n\t\t\tfont-size: 16px;\n\t\t\tline-height: 1.15;\n\t\t\tfont-family:'HelveticaNeue-Medium', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n\t\t";
    };
    /**
     * set up landscape header config
     */
    MLUIHistoryConfig.prototype.getLandscapeLayoutConfig = function () {
        return Helper_1.Helper.mergeTwoObjects(_super.prototype.getLandscapeLayoutConfig.call(this), {
            subHeaderConfig: this.getLandscapeSubHeaderConfig(),
        });
    };
    MLUIHistoryConfig.prototype.getLandscapeHeaderConfig = function () {
        return {
            blockStyle: "\n\t\t\t\twidth:896px;\n\t\t\t\tpadding: 0px 105px ;\n\t\t\t",
            titleConfig: WebElementFactory_1.WebElementFactory.createWebTextElement({
                type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_ELEMENT,
                blockStyle: "\n\t\t\t\t\t\tfont-weight: bold;\n\t\t\t\t\t\theight:91px;\n\t\t\t\t\t\tfont-size: 22px;\n\t\t\t\t\t\tline-height:122px;\n\t\t\t\t\t\twhite-space: pre;\n\t\t\t\t\t\tz-index:10;\n\t\t\t\t\t",
                languageKey: 'summaryTitle',
                maxAmount: 22,
            }),
            //header close button
            closeButton: {
                dataHookTrackerConfig: {
                    buttonID: this.getButtonIds().get('closeButton')
                },
                soundKey: SoundConfig_1.SoundConfig.buttonClick,
                buttonImage: {
                    type: WebpageElement_1.WebElementType.WEB_IMAGE_ELEMENT,
                    blockStyle: "\n\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\ttop: 28px;\n\t\t\t\t\t\tright: 56px;\n\t\t\t\t\t\twidth: 75px;\n\t\t\t\t\t\theight: 75px;\n\t\t\t\t\t\tborder-radius: 50%;\n\t\t\t\t\t\tcursor: pointer;\n\t\t\t\t\t\tz-index:20;\n\t\t\t\t\t\tuser-select: none;\n\t\t\t\t\t",
                    imageSource: WebImageElement_1.ImageSourceType.SPRITE,
                    imageData: {
                        assetName: 'mlui_menu',
                        imageName: 'close_Enabled.png',
                        ratio: 0.7
                    }
                }
            },
            backButton: {
                dataHookTrackerConfig: {
                    buttonID: this.getButtonIds().get('backButton')
                },
                soundKey: SoundConfig_1.SoundConfig.buttonClick,
                buttonImage: WebElementFactory_1.WebElementFactory.createWebImageElement({
                    type: WebElementFactory_1.WebFactoryElementType.WEB_IMAGE_ELEMENT,
                    blockStyle: "\n\t\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\t\ttop: 28px;\n\t\t\t\t\t\t\tleft:80.5px;\n\t\t\t\t\t\t\twidth: 75px;\n\t\t\t\t\t\t\theight: 75px;\n\t\t\t\t\t\t\tcursor: pointer;\n\t\t\t\t\t\t\tuser-select: none;\n\t\t\t\t\t\t",
                    imageSource: WebImageElement_1.ImageSourceType.SPRITE,
                    imageData: {
                        assetName: 'mlui_menu',
                        imageName: 'back_Enabled.png',
                        ratio: 0.7
                    }
                })
            },
            dateFilterConfig: this.getLanscapeFilterConfig()
        };
    };
    /**
     * set up lanscape date filter config
     */
    MLUIHistoryConfig.prototype.getLanscapeFilterConfig = function () {
        return {
            filterLanguageKey: 'filter',
            style: "\n\t\t\t\tposition: absolute;\n\t\t\t\tleft: 350px;\n\t\t\t\ttop: 45px;\n\t\t\t\twhite-space: pre;\n\t\t\t\tz-index:11;\n\t\t\t",
            dateFilterMenuConfig: {
                blockStyle: "\n\t\t\t\t\ttop: 10.5px;\n\t\t\t\t",
                closeButton: {
                    blockStyle: "\n\t\t\t\t\t\tcursor: pointer;\n\t\t\t\t\t\tdisplay:inline-block;\n\t\t\t\t\t\theight:20px;\n\t\t\t\t\t",
                    soundKey: SoundConfig_1.SoundConfig.buttonClick,
                    buttonImage: WebElementFactory_1.WebElementFactory.createWebImageElement({
                        type: WebElementFactory_1.WebFactoryElementType.WEB_IMAGE_ELEMENT,
                        imageSource: WebImageElement_1.ImageSourceType.TEXTURE,
                        imageData: {
                            imagePath: 'assets/helpscreens/fork.png',
                            width: 90,
                            height: 90,
                            ratio: 0.7
                        },
                        imageStyle: "\n\t\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\t\ttop: 7px;\n\t\t\t\t\t\t"
                    })
                }
            }
        };
    };
    MLUIHistoryConfig.prototype.getLandscapeSubHeaderConfig = function () {
        return {
            blockStyle: "\n\t\t\t\ttext-align: left;\n\t\t\t\tposition:relative;\n\t\t\t\theight:45px;\n\t\t\t\tpadding: 0 105px;\n\t\t\t",
            config: [
                WebElementFactory_1.WebElementFactory.createWebTextElement({
                    type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_ELEMENT,
                    blockStyle: this.getLanscapeSubTitleTextStyle(),
                    languageKey: 'date'
                }),
                WebElementFactory_1.WebElementFactory.createWebTextElement({
                    type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_ELEMENT,
                    blockStyle: this.getLanscapeSubTitleTextStyle(),
                    languageKey: 'time'
                }),
                WebElementFactory_1.WebElementFactory.createWebTextElement({
                    type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_ELEMENT,
                    blockStyle: this.getLanscapeSubTitleTextStyle(),
                    languageKey: 'bet'
                }),
                WebElementFactory_1.WebElementFactory.createWebTextElement({
                    type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_ELEMENT,
                    blockStyle: this.getLanscapeSubTitleTextStyle(),
                    languageKey: 'won'
                })
            ]
        };
    };
    /**
     * set up landscape body config
     */
    MLUIHistoryConfig.prototype.getLandscapeContainerConfig = function () {
        return Helper_1.Helper.mergeTwoObjects(_super.prototype.getLandscapeContainerConfig.call(this), {
            innerBlockStyle: 'padding: 0;',
            blockStyle: "\n\t\t\t\t\tbackground-color: rgb(28, 28, 28);\n\t\t\t\t\tflex-basis: 100%;\n\t\t\t\t",
            historyTabConfigs: this.getLandscapeHistoryQuetyConfig(),
        });
    };
    /**
     * set up landscape summary quety
     */
    MLUIHistoryConfig.prototype.getLandscapeHistoryQuetyConfig = function () {
        return new TsMap_1.TsMap([
            [
                SlotEvent_1.SlotEvent.HISTORY_SUMMARY, {
                    type: SlotEvent_1.SlotEvent.HISTORY_SUMMARY,
                    summaryConfig: this.getLandscapeGeneralSummaryConfig(),
                    detailConfig: this.getLandscapeGeneralDetailConfig(),
                    withDetailHeader: WebElementFactory_1.WebElementFactory.createWebTextElement({
                        type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_ELEMENT,
                        blockStyle: "\n\t\t\t\t\t\t\t\ttransform-origin: center center;\n\t\t\t\t\t\t\t\ttext-align: center;\n\t\t\t\t\t\t\t\twhite-space: pre;\n\t\t\t\t\t\t\t\theight: 105px;\n\t\t\t\t\t\t\t\tmargin:0px 70px;\n\t\t\t\t\t\t\t\tline-height: 126px;\n\t\t\t\t\t\t\t\tfont-weight: bold;\n\t\t\t\t\t\t\t\tfont-size: 25px;\n\t\t\t\t\t\t\t",
                        maxAmount: 15,
                        languageKey: 'historyDetail'
                    })
                }
            ]
        ]);
    };
    MLUIHistoryConfig.prototype.getLandscapeGeneralDetailConfig = function () {
        return {
            blockStyle: "\n\t\t\t\tmin-height: 400px;\n\t\t\t\tpadding: 0 105px;\n\t\t\t",
            informationConfig: this.getLandscapeDetailInformationConfig(),
            resultConfig: this.getLandscapeDetailResultConfig(),
        };
    };
    MLUIHistoryConfig.prototype.getLandscapeDetailInformationConfig = function () {
        return {
            textStyle: "\n\t\t\t\ttop:-42px;\n\t\t\t\tleft:24.5px;\n\t\t\t",
            boosterImageConfig: {
                sourceName: 'genHistory',
                imageName: 'icon_{name}.png',
                ratio: 0.7
            },
            boosterStyle: "\n\t\t\t\ttop: -22px;\n\t\t\t",
            idBlockConfig: {
                blockStyle: "\n\t\t\t\t\tposition: absolute;\n\t\t\t\t\twidth: 100%;\n\t\t\t\t\tleft:0px;\n\t\t\t\t\ttop:-56px;\n\t\t\t\t\tfont-size:15px;\n\t\t\t\t",
                titleConfig: WebElementFactory_1.WebElementFactory.createWebTextElement({
                    type: WebpageElement_1.WebElementType.WEB_TEXT_ELEMENT,
                    blockStyle: this.getLandscapeInformationBlockTitleStyle(),
                    languageKey: 'transactionId',
                }),
                valueConfig: {
                    type: WebpageElement_1.WebElementType.DATA_SOURCE,
                    blockStyle: this.getLandscapeInformationBlockTitleStyle(),
                    variableName: 'transactionID',
                }
            },
            betBlockConfig: {
                blockStyle: "\n\t\t\t\t\tposition: absolute;\n\t\t\t\t\twidth: 50%;\n\t\t\t\t\tleft:0px;\n\t\t\t\t\ttop:-7px;\n\t\t\t\t\tfont-size:15px;\n\t\t\t\t",
                titleConfig: WebElementFactory_1.WebElementFactory.createWebTextElement({
                    type: WebpageElement_1.WebElementType.WEB_TEXT_ELEMENT,
                    blockStyle: this.getLandscapeInformationBlockTitleStyle(),
                    languageKey: 'betPaid',
                }),
                valueConfig: {
                    type: WebpageElement_1.WebElementType.DATA_SOURCE,
                    blockStyle: this.getLandscapeInformationBlockTitleStyle(),
                    variableName: 'bet',
                }
            },
            winBlockConfig: {
                blockStyle: "\n\t\t\t\t\tposition: absolute;\n\t\t\t\t\twidth: 50%;\n\t\t\t\t\tleft:210px;\n\t\t\t\t\ttop:-7px;\n\t\t\t\t\tfont-size:15px;\n\t\t\t\t",
                titleConfig: WebElementFactory_1.WebElementFactory.createWebTextElement({
                    type: WebpageElement_1.WebElementType.WEB_TEXT_ELEMENT,
                    blockStyle: this.getLandscapeInformationBlockTitleStyle(),
                    languageKey: 'totalWon',
                }),
                valueConfig: {
                    type: WebpageElement_1.WebElementType.DATA_SOURCE,
                    blockStyle: this.getLandscapeInformationBlockTitleStyle(),
                    variableName: 'win',
                }
            },
            balanceBlockConfig: {
                blockStyle: "\n\t\t\t\t\tposition: absolute;\n\t\t\t\t\twidth: 50%;\n\t\t\t\t\tleft:420px;\n\t\t\t\t\ttop:-7px;\n\t\t\t\t\tfont-size:15px;\n\t\t\t\t",
                titleConfig: WebElementFactory_1.WebElementFactory.createWebTextElement({
                    type: WebpageElement_1.WebElementType.WEB_TEXT_ELEMENT,
                    blockStyle: this.getLandscapeInformationBlockTitleStyle(),
                    languageKey: 'balance',
                }),
                valueConfig: {
                    type: WebpageElement_1.WebElementType.DATA_SOURCE,
                    blockStyle: this.getLandscapeInformationBlockTitleStyle(),
                    variableName: 'balance',
                }
            }
        };
    };
    /**
     * set up landscape detail result
     */
    MLUIHistoryConfig.prototype.getLandscapeDetailResultConfig = function () {
        return {
            type: WebpageElement_1.WebElementType.RESULTS_PAGING,
            blockStyle: "\n\t\t\t\tbackground-color: #121212;\n\t\t\t\twidth: 686px;\n\t\t\t\theight: 308px;\n\t\t\t\ttop: 80.5px;\n\t\t\t",
            pagingConfig: {
                arrowButton: {
                    blockStyle: 'top: 105px;',
                    nextButton: {
                        dataHookTrackerConfig: {
                            buttonID: MLUIButtonId_1.MLUIButtonId.BUTTON_HISTORY_NEXT
                        },
                        soundKey: SoundConfig_1.SoundConfig.buttonClick,
                        buttonImage: WebElementFactory_1.WebElementFactory.createWebImageElement({
                            type: WebElementFactory_1.WebFactoryElementType.WEB_IMAGE_ELEMENT,
                            blockStyle: "\n\t\t\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\t\t\tright:-85px;\n\t\t\t\t\t\t\t\twidth:60px;\n\t\t\t\t\t\t\t\theight:60px;\n\t\t\t\t\t\t\t\ttransform:scaleX(-1);\n\t\t\t\t\t\t\t\tuser-select: none;\n\t\t\t\t\t\t\t",
                            imageSource: WebImageElement_1.ImageSourceType.SPRITE,
                            imageData: {
                                assetName: 'mlui_menu',
                                imageName: 'arrow_Enabled.png',
                                ratio: 0.56
                            }
                        })
                    },
                    preButton: {
                        dataHookTrackerConfig: {
                            buttonID: MLUIButtonId_1.MLUIButtonId.BUTTON_HISTORY_PREV
                        },
                        soundKey: SoundConfig_1.SoundConfig.buttonClick,
                        buttonImage: WebElementFactory_1.WebElementFactory.createWebImageElement({
                            type: WebElementFactory_1.WebFactoryElementType.WEB_IMAGE_ELEMENT,
                            blockStyle: "\n\t\t\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\t\t\tleft:-85px;\n\t\t\t\t\t\t\t\twidth:60px;\n\t\t\t\t\t\t\t\theight:60px;\n\t\t\t\t\t\t\t\tuser-select: none;\n\t\t\t\t\t\t\t",
                            imageSource: WebImageElement_1.ImageSourceType.SPRITE,
                            imageData: {
                                assetName: 'mlui_menu',
                                imageName: 'arrow_Enabled.png',
                                ratio: 0.56
                            }
                        })
                    }
                },
                dropDownBox: {
                    blockStyle: "\n\t\t\t\t\t\twidth: 400px;\n\t\t\t\t\t\theight: 10.5px;\n\t\t\t\t\t\ttop: -102px;\n\t\t\t\t\t\tfont-size:15px;\n\t\t\t\t\t\tposition: relative;\n\t\t\t\t\t",
                    dataHookTrackerConfig: {
                        buttonID: MLUIButtonId_1.MLUIButtonId.DROPDOWN_HISTORY_DETAIL_TRANSACTION
                    },
                    soundKey: SoundConfig_1.SoundConfig.buttonClick,
                    dropDownStyle: "\n\t\t\t\t\t\tline-height: 63px;\n\t\t\t\t\t",
                    dropDownMenuRowStyle: "\n\t\t\t\t\t\tpadding: 22px 0;\n\t\t\t\t\t",
                    dropDownMenuStyle: "\n\t\t\t\t\t\ttop: 47px;\n\t\t\t\t\t\tleft: -15px;\n\t\t\t\t\t\tmax-height: 350px;\n\t\t\t\t\t\tbackground-color: rgb(28,28,28);\n\t\t\t\t\t\tpadding: 0px 25px;\n\t\t\t\t\t\twidth: auto;\n\t\t\t\t\t",
                    arrowTurnStyle: "\n\t\t\t\t\t\ttop:0px;\n\t\t\t\t\t\tmargin-left: 5px;\n\t\t\t\t\t",
                    arrowImage: WebElementFactory_1.WebElementFactory.createWebImageElement({
                        type: WebElementFactory_1.WebFactoryElementType.WEB_IMAGE_ELEMENT,
                        blockStyle: "\n\t\t\t\t\t\t\tposition: relative;\n\t\t\t\t\t\t\ttransform:rotate(90deg);\n\t\t\t\t\t\t\ttop: 11px;\n\t\t\t\t\t\t\twidth: 33px;\n\t\t\t\t\t\t\theight: 33px;\n\t\t\t\t\t\t\tdisplay: inline-block;\n\t\t\t\t\t\t\tuser-select: none;",
                        imageSource: WebImageElement_1.ImageSourceType.TEXTURE,
                        imageData: {
                            imagePath: 'assets/helpscreens/arrow.png',
                            width: 60,
                            height: 60,
                            ratio: 0.56
                        },
                        imageStyle: ''
                    })
                }
            },
            pageSize: 1,
            variableName: 'detialFormat',
            config: this.getLandscapeDetialFormatConfigs()
        };
    };
    MLUIHistoryConfig.prototype.getLandscapeDetialFormatConfigs = function () {
        return [];
    };
    MLUIHistoryConfig.prototype.getLandscapeGeneralSummaryConfig = function () {
        return {
            blockStyle: "padding-top:11.2px;",
            titleHeight: 0,
            rowHeight: 50,
            pageSize: 6,
            noSummaryConfig: this.getLandscapeGeneralNoSummaryConfig(),
            extraWinConfig: this.getLandscapeExtraWinConfig(),
            pagingButtonConfig: {
                blockStyle: "\n\t\t\t\t\tposition: absolute;\n\t\t\t\t\tfont-size:22px;\n\t\t\t\t\tleft:0px;\n\t\t\t\t\tpadding:0px;\n\t\t\t\t\tline-height: 21px;\n\t\t\t\t\tz-index:4;\n\t\t\t\t\tbottom: 30px;\n\t\t\t\t",
                nextButton: {
                    dataHookTrackerConfig: {
                        buttonID: MLUIButtonId_1.MLUIButtonId.BUTTON_HISTORY_NEXT,
                    },
                    soundKey: SoundConfig_1.SoundConfig.buttonClick,
                    blockStyle: "\n\t\t\t\t\t\tdisplay:inline-block;\n\t\t\t\t\t\tposition: relative;\n\t\t\t\t\t\ttop: 7px;\n\t\t\t\t\t\tleft: 0px;\n\t\t\t\t\t",
                    buttonImage: WebElementFactory_1.WebElementFactory.createWebImageElement({
                        type: WebElementFactory_1.WebFactoryElementType.WEB_IMAGE_ELEMENT,
                        blockStyle: "\n\t\t\t\t\t\t\tposition: relative;\n\t\t\t\t\t\t\twidth: 70px;\n\t\t\t\t\t\t\theight: 42px;\n\t\t\t\t\t\t\ttop: 7px;",
                        imageSource: WebImageElement_1.ImageSourceType.TEXTURE,
                        imageData: {
                            imagePath: 'assets/helpscreens/arrow.png',
                            width: 60,
                            height: 60,
                            ratio: 0.7
                        },
                        imageStyle: "\n\t\t\t\t\t\t"
                    })
                },
                preButton: {
                    dataHookTrackerConfig: {
                        buttonID: MLUIButtonId_1.MLUIButtonId.BUTTON_HISTORY_PREV,
                    },
                    soundKey: SoundConfig_1.SoundConfig.buttonClick,
                    blockStyle: "\n\t\t\t\t\t\tdisplay:inline-block;\n\t\t\t\t\t\tposition: relative;\n\t\t\t\t\t\ttop: 7px;\n\t\t\t\t\t\tleft: 0px;\n\t\t\t\t\t",
                    buttonImage: WebElementFactory_1.WebElementFactory.createWebImageElement({
                        type: WebElementFactory_1.WebFactoryElementType.WEB_IMAGE_ELEMENT,
                        blockStyle: "\n\t\t\t\t\t\t\tposition: relative;\n\t\t\t\t\t\t\ttop: 7px;\n\t\t\t\t\t\t\twidth: 70px;\n\t\t\t\t\t\t\theight: 42px;\n\t\t\t\t\t\t\ttransform: scaleX(-1);",
                        imageSource: WebImageElement_1.ImageSourceType.TEXTURE,
                        imageData: {
                            imagePath: 'assets/helpscreens/arrow.png',
                            width: 60,
                            height: 60,
                            ratio: 0.7
                        },
                        imageStyle: ""
                    })
                }
            },
            rowDataHookConfig: {
                buttonID: MLUIButtonId_1.MLUIButtonId.BUTTON_HISTORY_TRANDETAIL
            },
            rowStyle: "padding: 0 105px;",
            rowConfig: [
                {
                    type: WebpageElement_1.WebElementType.DATA_SOURCE,
                    blockStyle: this.getLandscapeSummaryRowConfig(),
                    variableName: 'date',
                },
                {
                    type: WebpageElement_1.WebElementType.DATA_SOURCE,
                    blockStyle: this.getLandscapeSummaryRowConfig(),
                    variableName: 'time',
                },
                {
                    type: WebpageElement_1.WebElementType.DATA_SOURCE,
                    blockStyle: this.getLandscapeSummaryRowConfig(),
                    variableName: 'bet',
                },
                {
                    type: WebpageElement_1.WebElementType.DATA_SOURCE,
                    blockStyle: this.getLandscapeSummaryRowConfig(),
                    variableName: 'win',
                },
                WebElementFactory_1.WebElementFactory.createWebImageElement({
                    type: WebElementFactory_1.WebFactoryElementType.WEB_IMAGE_ELEMENT,
                    blockStyle: "\n\t\t\t\t\t\tposition: relative;\n\t\t\t\t\t\tleft: 10px;\n\t\t\t\t\t\twidth: 7px;\n\t\t\t\t\t\theight: 7px;\n\t\t\t\t\t\tcursor: pointer;\n\t\t\t\t\t",
                    imageSource: WebImageElement_1.ImageSourceType.TEXTURE,
                    imageData: {
                        imagePath: 'assets/helpscreens/arrow.png',
                        width: 60,
                        height: 60,
                        ratio: 0.7
                    },
                    imageStyle: "\n\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\ttop: -19px;\n\t\t\t\t\t\tright: -85px;\n\t\t\t\t\t"
                })
            ],
        };
    };
    /**
     * set up landscape general summary without data
     */
    MLUIHistoryConfig.prototype.getLandscapeGeneralNoSummaryConfig = function () {
        return {
            blockStyle: "\n\t\t\t\tmargin-top: 140px;\n\t\t\t\twidth: 100%;\n\t\t\t",
            config: [
                WebElementFactory_1.WebElementFactory.createWebTextElement({
                    type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_ELEMENT,
                    blockStyle: "\n\t\t\t\t\t\tcolor: #C2C2C2;\n\t\t\t\t\t\ttext-align: center;\n\t\t\t\t\t\tfont-size: 25px;\n\t\t\t\t\t",
                    languageKey: 'noSummary'
                })
            ]
        };
    };
    /**
     * set up landscape extra win (ex: with rounds icon)
     */
    MLUIHistoryConfig.prototype.getLandscapeExtraWinConfig = function () {
        return {
            iconStyle: 'margin:7px;',
            blockStyle: "\n\t\t\t\ttop:-14px;\n\t\t\t\twidth:105px;\n\t\t\t\tcursor: pointer;\n\t\t\t\twhite-space: pre;\n\t\t\t",
            textStyle: "\n\t\t\t\tposition:relative;\n\t\t\t\ttop:-10px;\n\t\t\t\tmargin-left: 5px;\n\t\t\t\tdisplay: inline-block;\n\t\t\t\twhite-space: pre;\n\t\t\t\tcolor: #f6ae06;\n\t\t\t",
            featureTrackIcons: new TsMap_1.TsMap([
                [
                    'FREE_SPIN',
                    WebElementFactory_1.WebElementFactory.createWebImageElement({
                        type: WebElementFactory_1.WebFactoryElementType.WEB_IMAGE_ELEMENT,
                        blockStyle: "\n\t\t\t\t\t\t\tmargin: 6px 2px 3.5px 5.5px;\n\t\t\t\t\t\t\tdisplay:inline-block;",
                        imageSource: WebImageElement_1.ImageSourceType.TEXTURE,
                        imageData: {
                            imagePath: 'assets/helpscreens/icon_FreeRound.png',
                            width: 24,
                            height: 24,
                            ratio: 0.56
                        }
                    })
                ]
            ])
        };
    };
    MLUIHistoryConfig.prototype.getLanscapeSubTitleTextStyle = function () {
        return "\n\t\t\tposition: relative;\n\t\t\twidth: 147px;\n\t\t\tline-height: 42px;\n\t\t\twhite-space: pre;\n\t\t\tfont-size: 16px;\n\t\t\tdisplay: inline-block;\n\t\t";
    };
    MLUIHistoryConfig.prototype.getLandscapeSummaryRowConfig = function () {
        return "\n\t\t\tcursor: pointer;\n\t\t\twidth:147px;\n\t\t\tline-height: 42px;\n\t\t\tfont-size: 15px;\n\t\t\tz-index:5;\n\t\t";
    };
    MLUIHistoryConfig.prototype.getLandscapeInformationBlockTitleStyle = function () {
        return "\n\t\t\tmargin: 0;\n\t\t\tfont-size: 15px;\n\t\t\tline-height: 1.15;\n\t\t\tfont-family:'HelveticaNeue-Bold', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n\t\t";
    };
    return MLUIHistoryConfig;
}(GeneralWebPageConfig_1.GeneralWebPageConfig));
exports.MLUIHistoryConfig = MLUIHistoryConfig;


/***/ }),
/* 261 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var TsMap_1 = __webpack_require__(2);
var Helper_1 = __webpack_require__(5);
var SoundConfig_1 = __webpack_require__(55);
var WebImageElement_1 = __webpack_require__(69);
var WebElementFactory_1 = __webpack_require__(45);
var MLUIButtonId_1 = __webpack_require__(38);
var GeneralWebPageConfig_1 = __webpack_require__(248);
var MLUIPaytableConfig = /** @class */ (function (_super) {
    __extends(MLUIPaytableConfig, _super);
    function MLUIPaytableConfig() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.name = 'paytable';
        _this.externalKey = 'external-helpscreens';
        _this.moduleName = 'GenesisPayTable';
        _this.localisationKeys = ['paytable_Copyright'];
        _this.productionYear = '2018';
        _this.numberOfWays = '243';
        return _this;
    }
    MLUIPaytableConfig.prototype.getButtonIds = function () {
        return new TsMap_1.TsMap([
            [
                'closeButton', MLUIButtonId_1.MLUIButtonId.BUTTON_HIDE_PAYTABLE
            ]
        ]);
    };
    MLUIPaytableConfig.prototype.getPortraitContainerConfig = function () {
        return Helper_1.Helper.mergeTwoObjects(_super.prototype.getPortraitContainerConfig.call(this), {
            paragraphs: this.getPortraitGameElements()
        });
    };
    MLUIPaytableConfig.prototype.getPortraitGameElements = function () {
        return [];
    };
    /**
     * set up all pays config block layout for portrait
     */
    MLUIPaytableConfig.prototype.getPortraitAllPaysElements = function () {
        return [
            this.getPortraitWebLineConfig(),
            WebElementFactory_1.WebElementFactory.createWebTextElement({
                type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_ELEMENT,
                languageKey: 'allPaysTitle',
                superscriptLanguageKey: 'allPaysSuperscript'
            }),
            WebElementFactory_1.WebElementFactory.createWebTextContentElement({
                type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_CONTENT_ELEMENT,
                languageKey: 'allPaysContent',
                textToReplace: [
                    {
                        replaceKey: '{NumberOfWays}',
                        replaceValue: this.translator.t(this.numberOfWays)
                    }
                ]
            })
        ];
    };
    /**
     * set up line game line config block layout for portrait
     */
    MLUIPaytableConfig.prototype.getPortraitLineGameElements = function () {
        return [
            WebElementFactory_1.WebElementFactory.createWebElementBlock({
                type: WebElementFactory_1.WebFactoryElementType.WEB_ELEMENT_BLOCK,
                config: [
                    this.getPortraitWebLineConfig(),
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_ELEMENT,
                        languageKey: 'lineGameTitle',
                    },
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_LINE_PATTERN_ELEMENT,
                        blockStyle: this.getPortraitLinePatternBlockStyleConfig(),
                        patternStyleConfig: this.getPortraitLinePatternStyleConfig(),
                        patternPosition: {
                            x: 0,
                            y: 10
                        }
                    }
                ]
            })
        ];
    };
    MLUIPaytableConfig.prototype.getPortraitLinePatternBlockStyleConfig = function () {
        return "\n\t\t\twidth: 431px;\n\t\t\tleft: -30px;\n\t\t\tfont-size: 14px;\n\t\t\tposition: relative;\n\t\t";
    };
    /**
     * set portrait line pattern style config
     */
    MLUIPaytableConfig.prototype.getPortraitLinePatternStyleConfig = function () {
        return {};
    };
    /**
     * set up portrait copyright block layout
     */
    MLUIPaytableConfig.prototype.getPortraitCopyrightElements = function () {
        return [
            this.getPortraitWebLineConfig(),
            WebElementFactory_1.WebElementFactory.createWebTextElement({
                type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_ELEMENT,
                languageKey: 'copyrightTitle'
            }),
            //logo
            WebElementFactory_1.WebElementFactory.createWebImageElement({
                type: WebElementFactory_1.WebFactoryElementType.WEB_IMAGE_ELEMENT,
                blockStyle: "\n\t\t\t\t\tposition:relative;\n\t\t\t\t\theight: 80px;\n\t\t\t\t\twidth: 224px;\n\t\t\t\t",
                imageSource: WebImageElement_1.ImageSourceType.TEXTURE,
                imageData: {
                    imagePath: 'assets/helpscreens/logo.png',
                    width: 320,
                    height: 114,
                    ratio: 0.7,
                }
            }),
            // copyright content
            WebElementFactory_1.WebElementFactory.createWebTextContentElement({
                type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_CONTENT_ELEMENT,
                languageKey: 'copyrightContent',
                textToReplace: [
                    {
                        replaceKey: '{GameName}',
                        replaceValue: this.translator.t('gameName')
                    },
                    {
                        replaceKey: '{BrandName}',
                        replaceValue: this.translator.t('brandName')
                    },
                    {
                        replaceKey: '{ProductionYear}',
                        replaceValue: this.productionYear
                    }
                ]
            }),
            //link
            WebElementFactory_1.WebElementFactory.createWebTextElement({
                type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_ELEMENT,
                blockStyle: "\n\t\t\t\t\tmargin: 35px 0 35px 0;\n\t\t\t\t\tfont-size:16px;\n\t\t\t\t\tfont-style: italic;\n\t\t\t\t\ttext-align:center;\n\t\t\t\t",
                languageKey: 'www.genesis-games.com'
            })
        ];
    };
    /**
     * set up landscape copyright block layout
     */
    MLUIPaytableConfig.prototype.getPortraitVersionElements = function () {
        //version & date
        return [
            WebElementFactory_1.WebElementFactory.createWebElementBlock({
                type: WebElementFactory_1.WebFactoryElementType.WEB_ELEMENT_BLOCK,
                blockStyle: "\n\t\t\t\t\ttext-align:center;\n\t\t\t\t",
                config: [
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_ELEMENT,
                        blockStyle: "\n\t\t\t\t\t\t\tfont-size:16px;\n\t\t\t\t\t\t\tfont-weight:16px;\n\t\t\t\t\t\t\tdisplay: inline-block;\n\t\t\t\t\t\t\topacity:0.6;\n\t\t\t\t\t\t",
                        languageKey: 'gameVersion'
                    },
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_ELEMENT,
                        blockStyle: "\n\t\t\t\t\t\t\tfont-size:16px;\n\t\t\t\t\t\t\tfont-weight:16px;\n\t\t\t\t\t\t\tdisplay: inline-block;\n\t\t\t\t\t\t\topacity:0.6;\n\t\t\t\t\t\t\twhite-space: pre-wrap;\n\t\t\t\t\t\t",
                        languageKey: " " + "12.1.5" + " / " + "2020-04-29"
                    }
                ]
            })
        ];
    };
    /**
     * Style grid lines between paragraphs
     */
    MLUIPaytableConfig.prototype.getPortraitWebLineConfig = function () {
        return WebElementFactory_1.WebElementFactory.createWebLineElement({
            type: WebElementFactory_1.WebFactoryElementType.WEB_LINE_ELEMENT,
            show: true
        });
    };
    // remove defualt main title
    MLUIPaytableConfig.prototype.getLandscapeHeaderMainTitleConfig = function () {
        return null;
    };
    MLUIPaytableConfig.prototype.getLandscapeContainerConfig = function () {
        return Helper_1.Helper.mergeTwoObjects(_super.prototype.getLandscapeContainerConfig.call(this), {
            paragraphs: this.getLandscapeGameElements()
        });
    };
    /**
     * set up landscape all pays block layout
     */
    MLUIPaytableConfig.prototype.getLandscapeAllPaysElements = function () {
        return [
            WebElementFactory_1.WebElementFactory.createWebElementBlock({
                type: WebElementFactory_1.WebFactoryElementType.WEB_ELEMENT_BLOCK,
                config: [
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_ELEMENT,
                        blockStyle: this.getLandscapeMainTitleStyle(),
                        languageKey: 'allPaysTitle',
                        superscriptLanguageKey: 'allPaysSuperscript'
                    },
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_CONTENT_ELEMENT,
                        languageKey: 'allPaysContent',
                        textToReplace: [
                            {
                                replaceKey: '{NumberOfWays}',
                                replaceValue: this.numberOfWays
                            }
                        ]
                    }
                ]
            })
        ];
    };
    /**
     * set up landscape line game line config block layout
     */
    MLUIPaytableConfig.prototype.getLandscapeLineGameElements = function () {
        return [
            WebElementFactory_1.WebElementFactory.createWebElementBlock({
                type: WebElementFactory_1.WebFactoryElementType.WEB_ELEMENT_BLOCK,
                config: [
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_ELEMENT,
                        blockStyle: this.getLandscapeMainTitleStyle(),
                        languageKey: 'lineGameTitle',
                    },
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_LINE_PATTERN_ELEMENT,
                        blockStyle: this.getLandscapeLinePatternBlockStyleConfig(),
                        patternStyleConfig: this.getLandscapeLinePatternStyleConfig(),
                        patternPosition: {
                            x: 0,
                            y: 7
                        }
                    },
                ]
            })
        ];
    };
    MLUIPaytableConfig.prototype.getLandscapeLinePatternBlockStyleConfig = function () {
        return "\n\t\t\tposition: relative;\n\t\t\tfont-size: 16px;\n\t\t\twidth: 550px;\n\t\t\tmargin: auto;\n\t\t";
    };
    MLUIPaytableConfig.prototype.getLandscapeLinePatternStyleConfig = function () {
        return {};
    };
    /**
     * set up landscape copyright block layout
     */
    MLUIPaytableConfig.prototype.getLandscapeCopyrightElements = function () {
        return [
            WebElementFactory_1.WebElementFactory.createWebElementBlock({
                type: WebElementFactory_1.WebFactoryElementType.WEB_ELEMENT_BLOCK,
                config: [
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_ELEMENT,
                        blockStyle: this.getLandscapeMainTitleStyle(),
                        languageKey: 'copyrightTitle'
                    },
                    //logo
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_IMAGE_ELEMENT,
                        blockStyle: "\n\t\t\t\t\t\t\t\tposition:relative;\n\t\t\t\t\t\t\t\twidth: 224px;\n\t\t\t\t\t\t\t\theight: 80px;\n\t\t\t\t\t\t\t\tmargin: 14px 175px 21px 175px;\n\t\t\t\t\t\t\t",
                        imageSource: WebImageElement_1.ImageSourceType.TEXTURE,
                        imageData: {
                            imagePath: 'assets/helpscreens/logo.png',
                            width: 320,
                            height: 114,
                            ratio: 0.7,
                        },
                        imageStyle: 'margin-left:0px;',
                    },
                    //copyright content
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_CONTENT_ELEMENT,
                        languageKey: 'copyrightContent',
                        textToReplace: [
                            {
                                replaceKey: '{GameName}',
                                replaceValue: this.translator.t('gameName')
                            },
                            {
                                replaceKey: '{BrandName}',
                                replaceValue: this.translator.t('brandName')
                            },
                            {
                                replaceKey: '{ProductionYear}',
                                replaceValue: this.productionYear
                            }
                        ]
                    },
                    //link
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_ELEMENT,
                        blockStyle: "\n\t\t\t\t\t\t\tmargin:40px 0px 0 10px;\n\t\t\t\t\t\t\tfont-size:16px;\n\t\t\t\t\t\t\tfont-style: italic;\n\t\t\t\t\t\t\ttext-align:center;\n\t\t\t\t\t\t",
                        languageKey: 'www.genesis-games.com'
                    }
                ]
            })
        ];
    };
    /**
     * set up landscape version & date layout
     */
    MLUIPaytableConfig.prototype.getLandscapeVersionElements = function () {
        //version & date
        return {
            type: WebElementFactory_1.WebFactoryElementType.WEB_ELEMENT_BLOCK,
            blockStyle: "\n\t\t\t\ttext-align:center;\n\t\t\t\tmargin:10px 0px;\n\t\t\t",
            config: [
                {
                    type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_ELEMENT,
                    blockStyle: "\n\t\t\t\t\t\tfont-size:16px;\n\t\t\t\t\t\tfont-weight:24px;\n\t\t\t\t\t\tdisplay: inline-block;\n\t\t\t\t\t\topacity:0.6;\n\t\t\t\t\t",
                    languageKey: 'gameVersion'
                },
                {
                    type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_ELEMENT,
                    blockStyle: "\n\t\t\t\t\t\tfont-size:16px;\n\t\t\t\t\t\tfont-weight:24px;\n\t\t\t\t\t\tdisplay: inline-block;\n\t\t\t\t\t\topacity:0.6;\n\t\t\t\t\t\twhite-space: pre-wrap;\n\t\t\t\t\t",
                    languageKey: " " + "12.1.5" + " / " + "2020-04-29"
                }
            ]
        };
    };
    /**
     * Landscape screen config
     */
    MLUIPaytableConfig.prototype.getLandscapeGameElements = function () {
        return [
            WebElementFactory_1.WebElementFactory.createGeneralPagingElement({
                type: WebElementFactory_1.WebFactoryElementType.WEB_GENERAL_PAGING_ELEMENT,
                blockStyle: "\n\t\t\t\t\tposition: absolute;\n\t\t\t\t\twidth: 616px;\n\t\t\t\t\theight: 364px;\n\t\t\t\t",
                pagingConfig: {
                    arrowButton: {
                        blockStyle: 'top:0;',
                        pageDot: {},
                        nextButton: {
                            dataHookTrackerConfig: {
                                buttonID: MLUIButtonId_1.MLUIButtonId.BUTTON_PAYTABLE_NEXT
                            },
                            soundKey: SoundConfig_1.SoundConfig.buttonClick,
                            buttonImage: WebElementFactory_1.WebElementFactory.createWebImageElement({
                                type: WebElementFactory_1.WebFactoryElementType.WEB_IMAGE_ELEMENT,
                                blockStyle: "\n\t\t\t\t\t\t\t\t\tright:-105px;\n\t\t\t\t\t\t\t\t\ttop:140px;\n\t\t\t\t\t\t\t\t\ttransform:scaleX(-1);\n\t\t\t\t\t\t\t\t\tz-index: 10;\n\t\t\t\t\t\t\t\t\twidth:60px;\n\t\t\t\t\t\t\t\t\theight:60px;\n\t\t\t\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\t\t\t",
                                imageSource: WebImageElement_1.ImageSourceType.SPRITE,
                                imageData: {
                                    assetName: 'mlui_menu',
                                    imageName: 'arrow_Enabled.png',
                                    ratio: 0.55
                                },
                            })
                        },
                        preButton: {
                            dataHookTrackerConfig: {
                                buttonID: MLUIButtonId_1.MLUIButtonId.BUTTON_PAYTABLE_PREV
                            },
                            soundKey: SoundConfig_1.SoundConfig.buttonClick,
                            buttonImage: WebElementFactory_1.WebElementFactory.createWebImageElement({
                                type: WebElementFactory_1.WebFactoryElementType.WEB_IMAGE_ELEMENT,
                                blockStyle: "\n\t\t\t\t\t\t\t\t\tleft:-105px;\n\t\t\t\t\t\t\t\t\ttop:140px;\n\t\t\t\t\t\t\t\t\tz-index: 10;\n\t\t\t\t\t\t\t\t\twidth:60px;\n\t\t\t\t\t\t\t\t\theight:60px;\n\t\t\t\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\t\t\t",
                                imageSource: WebImageElement_1.ImageSourceType.SPRITE,
                                imageData: {
                                    assetName: 'mlui_menu',
                                    imageName: 'arrow_Enabled.png',
                                    ratio: 0.55
                                },
                            })
                        }
                    }
                },
                pages: this.getLandscapeGerneralPagingElementPages(),
            })
        ];
    };
    MLUIPaytableConfig.prototype.getLandscapeGerneralPagingElementPages = function () {
        return [];
    };
    MLUIPaytableConfig.prototype.getLandscapeParagraphs = function () {
        return [];
    };
    return MLUIPaytableConfig;
}(GeneralWebPageConfig_1.GeneralWebPageConfig));
exports.MLUIPaytableConfig = MLUIPaytableConfig;


/***/ }),
/* 262 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var TsMap_1 = __webpack_require__(2);
var Viewport_1 = __webpack_require__(6);
var SlotActions_1 = __webpack_require__(44);
var MLUIButtonId_1 = __webpack_require__(38);
var IMLUIConfig_1 = __webpack_require__(59);
var MLUITurboConfig = /** @class */ (function (_super) {
    __extends(MLUITurboConfig, _super);
    function MLUITurboConfig() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.name = 'turboPanel';
        _this.turboButton = {
            name: 'turboButton',
            isOrientationSupported: true,
            position: { x: 204, y: 1115 },
            anchor: { x: 0.5, y: 0.5 },
            action: SlotActions_1.SlotActions.TURBO_MODE,
            id: MLUIButtonId_1.MLUIButtonId.BUTTON_TURBO_MODE,
            productLine: _this.productLine,
            assetName: 'turbo',
            visible: true,
            isLocal: true,
            speedMode: [1, 3],
            speedTextures: ['', '-Level2']
        };
        _this.coreElementOrientationConfig = new TsMap_1.TsMap([
            [
                Viewport_1.Orientation.PORTRAIT, new TsMap_1.TsMap([
                    [
                        _this.turboButton.name, {
                            position: _this.turboButton.position,
                            rectangleHitArea: {
                                width: 75,
                                height: 75
                            }
                        }
                    ]
                ])
            ],
            [
                Viewport_1.Orientation.LANDSCAPE, new TsMap_1.TsMap([
                    [
                        _this.turboButton.name, {
                            position: { x: 1204, y: 660 },
                            rectangleHitArea: {
                                width: 100,
                                height: 100
                            }
                        }
                    ]
                ])
            ]
        ]);
        return _this;
    }
    return MLUITurboConfig;
}(IMLUIConfig_1.MLUIConfig));
exports.MLUITurboConfig = MLUITurboConfig;


/***/ }),
/* 263 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var pixi_js_1 = __webpack_require__(4);
var es5_1 = __webpack_require__(0);
var Viewport_1 = __webpack_require__(6);
var GlobalDispatcher_1 = __webpack_require__(7);
var SlotEvent_1 = __webpack_require__(32);
var SlotAutoPlayController_1 = __webpack_require__(908);
var AutoplayRounds_1 = __webpack_require__(445);
var MLUISpinSettingsPanel_1 = __webpack_require__(446);
var MLUISpinSettingsConfig_1 = __webpack_require__(913);
var MLUISpinSettingsController = /** @class */ (function (_super) {
    __extends(MLUISpinSettingsController, _super);
    function MLUISpinSettingsController(view) {
        var _this = _super.call(this, view) || this;
        _this.infiniteSpinValue = -1;
        return _this;
    }
    MLUISpinSettingsController.prototype.init = function (data) {
        this.config = this.gameConfig.getConfig(MLUISpinSettingsConfig_1.MLUISpinSettingsConfig);
        this.config.autoplayConfig = this.getAutoplayConfig(data);
        this.setButtonActionEventListeners(this.config.confirmButton.elementConfig);
        this.setButtonActionEventListeners(this.config.stopButton.elementConfig);
        this.setButtonActionEventListeners(this.config.closeButton.elementConfig);
        this.view.initialize(this.config);
    };
    MLUISpinSettingsController.prototype.getAutoplayConfig = function (data) {
        var _this = this;
        var autoplay = AutoplayRounds_1.BasicAutoplayConfig;
        var buttonConfig = {};
        buttonConfig.offset = autoplay.buttonOffset;
        buttonConfig.name = autoplay.name;
        buttonConfig.offsetOrientation = Viewport_1.Orientation.LANDSCAPE;
        buttonConfig.position = new pixi_js_1.Point(autoplay.startX, autoplay.startY);
        buttonConfig.buttons = new Array();
        buttonConfig.isOrientationSupported = true;
        data.autoSpins.forEach(function (value, index) {
            var buttonData = {};
            buttonData.name = "option" + index;
            buttonData.action = value == _this.infiniteSpinValue ? 'infinite' : value.toString();
            buttonData.id = 'autoplay_option';
            buttonData.assetName = autoplay.assetName;
            buttonData.isLocal = true;
            buttonData.scale = new pixi_js_1.Point(autoplay.scaleX, autoplay.scaleY);
            buttonData.text = {
                name: autoplay.selectorText.name,
                key: value == _this.infiniteSpinValue ? 'infinite' : value,
                style: autoplay.selectorText.style
            };
            buttonConfig.buttons.push(buttonData);
        });
        return buttonConfig;
    };
    MLUISpinSettingsController.prototype.action_autoSpin = function (data) {
        this.view.hidePopup();
        this.view.setStopActionToStopAutoSpin();
        this.onHideBetPanel();
    };
    MLUISpinSettingsController.prototype.action_hideAutoPlayPanel = function () {
        this.view.hidePopup();
        this.onHideBetPanel();
    };
    MLUISpinSettingsController.prototype.onHideBetPanel = function () {
        GlobalDispatcher_1.GlobalDispatcher.dispatchIntoAllStates(SlotEvent_1.SlotEvent.HIDE_FULL_SCREEN_UI);
    };
    MLUISpinSettingsController.prototype.action_stopAutoPlay = function (data) {
        if (!this.freeSpinsMode) {
            this.setAutoPlay(false);
            this.autoPlayStopSignal.dispatch();
        }
    };
    MLUISpinSettingsController.prototype.freeSpinsStart = function () {
        this.view.setStopActionToFreeSpinStop();
    };
    MLUISpinSettingsController.prototype.showPopup = function () {
        this.view.showPopup();
        this.view.totalBetUpdate(this.bankService.totalBet);
        GlobalDispatcher_1.GlobalDispatcher.dispatchIntoAllStates(SlotEvent_1.SlotEvent.SHOW_FULL_SCREEN_UI);
    };
    MLUISpinSettingsController.prototype.getWinLimitValue = function (value) {
        return this.getLimitValue(value);
    };
    MLUISpinSettingsController.prototype.getLoseLimitValue = function (value) {
        return this.getLimitValue(value);
    };
    MLUISpinSettingsController.prototype.getSingleWinLimitValue = function (value) {
        return this.getLimitValue(value);
    };
    MLUISpinSettingsController.prototype.getLimitValue = function (value) {
        if (value == -1 || value == Infinity) {
            return Infinity;
        }
        if (value == undefined) {
            return 0;
        }
        return value;
    };
    var _a;
    MLUISpinSettingsController = __decorate([
        __param(0, es5_1.Inject),
        __metadata("design:paramtypes", [typeof (_a = typeof MLUISpinSettingsPanel_1.MLUISpinSettingsPanel !== "undefined" && MLUISpinSettingsPanel_1.MLUISpinSettingsPanel) === "function" && _a || Object])
    ], MLUISpinSettingsController);
    return MLUISpinSettingsController;
}(SlotAutoPlayController_1.SlotAutoPlayController));
exports.MLUISpinSettingsController = MLUISpinSettingsController;


/***/ }),
/* 264 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var UIInformationHeaderView_1 = __webpack_require__(448);
var SlotInformationHeaderView = /** @class */ (function (_super) {
    __extends(SlotInformationHeaderView, _super);
    function SlotInformationHeaderView() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SlotInformationHeaderView.prototype.addClockCompoment = function () {
        if (this.config.viewConfig.show_time) {
            _super.prototype.addClockCompoment.call(this);
        }
    };
    SlotInformationHeaderView.prototype.addTitleCompoment = function () {
        if (this.config.viewConfig.show_title) {
            _super.prototype.addTitleCompoment.call(this);
        }
    };
    SlotInformationHeaderView.prototype.onClickBackground = function () {
        if (this.mainContainer.interactive) {
            this.clickBackgroundSignal.dispatch();
        }
    };
    SlotInformationHeaderView.prototype.fullScreenUIShow = function () {
        this.mainContainer.interactive = false;
        if (this.config.viewConfig.show_time) {
            this.modifyClockTextOpacity(this.config.clockConfig.text.grayValue);
        }
        if (this.config.viewConfig.show_title) {
            this.modifyTitleTextOpacity(this.config.titleConfig.text.grayValue);
            this.modifyImageSource(this.config.titleConfig.logo.grayAssetName);
        }
    };
    SlotInformationHeaderView.prototype.fullScreenUIHide = function () {
        this.mainContainer.interactive = true;
        if (this.config.viewConfig.show_time) {
            this.modifyClockTextOpacity(this.config.clockConfig.text.originalValue);
        }
        if (this.config.viewConfig.show_title) {
            this.modifyTitleTextOpacity(this.config.titleConfig.text.originalValue);
            this.modifyImageSource(this.config.titleConfig.logo.originalAssetName);
        }
    };
    SlotInformationHeaderView.prototype.modifyClockTextOpacity = function (value) {
        var dom = document.getElementById(this.DIV_INFORMATION_HEADER_CLOCK_ID);
        if (dom) {
            dom.style.opacity = value;
        }
    };
    SlotInformationHeaderView.prototype.modifyTitleTextOpacity = function (value) {
        var dom = document.getElementById(this.DIV_INFORMATION_HEADER_TITLE_TEXT_ID);
        if (dom) {
            dom.style.opacity = value;
        }
    };
    SlotInformationHeaderView.prototype.modifyImageSource = function (fileName) {
        var dom = document.getElementById(this.IMG_INFORMATION_HEADER_TITLE_LOGO_ID);
        if (dom) {
            dom.setAttribute('src', this.getImageSource(fileName));
        }
    };
    return SlotInformationHeaderView;
}(UIInformationHeaderView_1.UIInformationHeaderView));
exports.SlotInformationHeaderView = SlotInformationHeaderView;


/***/ }),
/* 265 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var TsMap_1 = __webpack_require__(2);
var Viewport_1 = __webpack_require__(6);
var WinDisplayConfig_1 = __webpack_require__(239);
var LineScoreConfig = /** @class */ (function (_super) {
    __extends(LineScoreConfig, _super);
    function LineScoreConfig() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.lineScoreLabel = {
            name: 'lineScoreLabel',
            isOrientationSupported: true,
            key: '',
            style: {
                font: {
                    name: 'BigWinFont',
                    size: 80,
                },
                align: 'center',
            },
            alpha: 0,
            anchor: { x: 0.5, y: 0.5 },
            position: { x: 0, y: 595 },
            tweenConfig: {
                duration: 200,
                tweenStarting: { x: 0, alpha: 0 },
                tweenDestination: { x: 360, alpha: 1 }
            }
        };
        _this.coreElementOrientationConfig = new TsMap_1.TsMap([
            [
                Viewport_1.Orientation.PORTRAIT, new TsMap_1.TsMap([
                    [
                        _this.lineScoreLabel.name, {
                            position: _this.lineScoreLabel.position
                        }
                    ]
                ])
            ],
            [
                Viewport_1.Orientation.LANDSCAPE, new TsMap_1.TsMap([
                    [
                        _this.lineScoreLabel.name, {
                            position: { x: 380, y: 395 }
                        }
                    ]
                ])
            ]
        ]);
        return _this;
    }
    return LineScoreConfig;
}(WinDisplayConfig_1.WinDisplayConfig));
exports.LineScoreConfig = LineScoreConfig;


/***/ }),
/* 266 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var WinBoxConfig = /** @class */ (function () {
    function WinBoxConfig() {
        this.name = 'WinBox';
        this.animationFiles = [
            'PaylineBox_Loop_001.png',
            'PaylineBox_Loop_002.png',
            'PaylineBox_Loop_003.png',
            'PaylineBox_Loop_004.png',
            'PaylineBox_Loop_005.png',
            'PaylineBox_Loop_006.png',
            'PaylineBox_Loop_007.png',
            'PaylineBox_Loop_008.png',
            'PaylineBox_Loop_009.png',
            'PaylineBox_Loop_010.png',
            'PaylineBox_Loop_011.png',
            'PaylineBox_Loop_012.png',
            'PaylineBox_Loop_013.png',
            'PaylineBox_Loop_014.png',
            'PaylineBox_Loop_015.png',
        ];
        this.boxOffset = {
            x: 0,
            y: 0
        };
        this.animationName = 'loop';
        this.loop = true;
        this.defaultPoolSize = 6; // 2 line
    }
    return WinBoxConfig;
}());
exports.WinBoxConfig = WinBoxConfig;


/***/ }),
/* 267 */,
/* 268 */,
/* 269 */,
/* 270 */,
/* 271 */,
/* 272 */,
/* 273 */,
/* 274 */,
/* 275 */,
/* 276 */,
/* 277 */,
/* 278 */,
/* 279 */,
/* 280 */,
/* 281 */,
/* 282 */,
/* 283 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var DOMContent = /** @class */ (function () {
    function DOMContent() {
    }
    DOMContent.setPageTitle = function (title) {
        document.title = title;
    };
    return DOMContent;
}());
exports.DOMContent = DOMContent;


/***/ }),
/* 284 */,
/* 285 */,
/* 286 */,
/* 287 */,
/* 288 */,
/* 289 */,
/* 290 */,
/* 291 */,
/* 292 */,
/* 293 */,
/* 294 */,
/* 295 */,
/* 296 */,
/* 297 */,
/* 298 */,
/* 299 */,
/* 300 */,
/* 301 */,
/* 302 */,
/* 303 */,
/* 304 */,
/* 305 */,
/* 306 */,
/* 307 */,
/* 308 */,
/* 309 */,
/* 310 */,
/* 311 */,
/* 312 */,
/* 313 */,
/* 314 */,
/* 315 */,
/* 316 */,
/* 317 */,
/* 318 */,
/* 319 */,
/* 320 */,
/* 321 */,
/* 322 */,
/* 323 */,
/* 324 */,
/* 325 */,
/* 326 */,
/* 327 */,
/* 328 */,
/* 329 */,
/* 330 */,
/* 331 */,
/* 332 */,
/* 333 */,
/* 334 */,
/* 335 */,
/* 336 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var CompController_1 = __webpack_require__(43);
var GlobalDispatcher_1 = __webpack_require__(7);
var TooltipView_1 = __webpack_require__(638);
var ToolTipEvent_1 = __webpack_require__(344);
var TooltipController = /** @class */ (function (_super) {
    __extends(TooltipController, _super);
    function TooltipController(view) {
        return _super.call(this, view) || this;
    }
    TooltipController.prototype.addEventListeners = function () {
        GlobalDispatcher_1.GlobalDispatcher.addListener(this, ToolTipEvent_1.ToolTipEvent.SHOW_TOOLTIP_EVENT, this.onShowTooltip);
        GlobalDispatcher_1.GlobalDispatcher.addListener(this, ToolTipEvent_1.ToolTipEvent.HIDE_TOOLTIP_EVENT, this.onHideTooltip);
        GlobalDispatcher_1.GlobalDispatcher.addListener(this, ToolTipEvent_1.ToolTipEvent.CLEAR_TOOLTIP_EVENT, this.onClearTooltip);
        this.view.destroySignal.add(this.destroyTooltip, this);
    };
    TooltipController.prototype.destroyTooltip = function (data) {
        GlobalDispatcher_1.GlobalDispatcher.dispatchIntoAllStates(ToolTipEvent_1.ToolTipEvent.DESTROY_TOOLTIP_EVENT, data);
    };
    TooltipController.prototype.onShowTooltip = function (e) {
        this.view.showTooltip(e.data);
    };
    TooltipController.prototype.onHideTooltip = function (e) {
        this.view.hideTooltip(e.data);
    };
    TooltipController.prototype.onClearTooltip = function (e) {
        this.view.clearTooltip(e.data);
    };
    var _a;
    TooltipController = __decorate([
        __param(0, es5_1.Inject),
        __metadata("design:paramtypes", [typeof (_a = typeof TooltipView_1.TooltipView !== "undefined" && TooltipView_1.TooltipView) === "function" && _a || Object])
    ], TooltipController);
    return TooltipController;
}(CompController_1.CompController));
exports.TooltipController = TooltipController;


/***/ }),
/* 337 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var TsMap_1 = __webpack_require__(2);
var BaseButtonStateSet_1 = __webpack_require__(199);
var BaseButtonsController = /** @class */ (function () {
    function BaseButtonsController() {
        this.init();
    }
    BaseButtonsController.prototype.init = function () {
        this.buttons = new TsMap_1.TsMap();
        this.buttonStates = es5_1.Container.get(BaseButtonStateSet_1.BaseButtonsStateSet);
    };
    BaseButtonsController.prototype.addButton = function (button) {
        if (!this.buttonStates.get('default').has(button.id)) {
            console.log('button [name]:' + button.id + ' has no deafult template declared');
        }
        this.buttons.set(button.id, button);
    };
    BaseButtonsController.prototype.getButton = function (buttonId) {
        return this.buttons.get(buttonId);
    };
    /**
     * Go through all buttons and sets their properties from ButtonsStateSet
     * In most cases 'templateName' same as logic state name
     * @param {string} templateName name for template, declared into 'BaseButtonsStateSet'
     */
    BaseButtonsController.prototype.applyButtonsTemplate = function (templateName) {
        var _this = this;
        if (this.buttonStates.has(templateName)) {
            var defaultTemplate = this.buttonStates.get(BaseButtonStateSet_1.BaseButtonsStateSet.DEFAULT_TEMPLATE);
            var appliedTemplate = this.buttonStates.get(templateName);
            this.buttons.keys().forEach(function (buttonId) {
                if (appliedTemplate.has(buttonId)) {
                    _this.updateButton(_this.buttons.get(buttonId), appliedTemplate.get(buttonId));
                }
                else if (defaultTemplate.has(buttonId)) {
                    _this.updateButton(_this.buttons.get(buttonId), defaultTemplate.get(buttonId));
                }
                else {
                    console.warn('There is no template for button ' + buttonId + ' in upcoming logical state ' + templateName +
                        '\n Please add default tempalte or set template for state ' + templateName);
                }
            });
        }
    };
    BaseButtonsController.prototype.updateButton = function (button, behavior) {
        button.setEnable(behavior.enabled);
        button.visible = behavior.visible;
    };
    return BaseButtonsController;
}());
exports.BaseButtonsController = BaseButtonsController;


/***/ }),
/* 338 */,
/* 339 */,
/* 340 */,
/* 341 */,
/* 342 */,
/* 343 */,
/* 344 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ToolTipEvent = /** @class */ (function () {
    function ToolTipEvent() {
    }
    ToolTipEvent.SHOW_TOOLTIP_EVENT = 'showTooltipEvent';
    ToolTipEvent.HIDE_TOOLTIP_EVENT = 'hideTooltipEvent';
    ToolTipEvent.CLEAR_TOOLTIP_EVENT = 'clearTooltipEvent';
    ToolTipEvent.DESTROY_TOOLTIP_EVENT = 'destoryTooltipEvent';
    return ToolTipEvent;
}());
exports.ToolTipEvent = ToolTipEvent;


/***/ }),
/* 345 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var TWEEN = __webpack_require__(47);
var TweenJSTickConsumer = /** @class */ (function () {
    function TweenJSTickConsumer() {
    }
    TweenJSTickConsumer.prototype.isAlive = function () {
        return true;
    };
    TweenJSTickConsumer.prototype.tick = function (deltaTimeMs) {
        TweenJSTickConsumer.timeMs += deltaTimeMs;
        // Update all TWEENs that we have in library
        TWEEN.update(TweenJSTickConsumer.timeMs);
    };
    TweenJSTickConsumer.timeMs = 0;
    return TweenJSTickConsumer;
}());
exports.TweenJSTickConsumer = TweenJSTickConsumer;


/***/ }),
/* 346 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var pixi_js_1 = __webpack_require__(4);
var Translator_1 = __webpack_require__(25);
var CoreElement_1 = __webpack_require__(56);
var TextField = /** @class */ (function (_super) {
    __extends(TextField, _super);
    function TextField() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._maxWidth = -1;
        _this._maxHeight = -1;
        return _this;
    }
    Object.defineProperty(TextField.prototype, "maxWidth", {
        get: function () {
            if (this.config.autoscale) {
                return this.config.autoscale.x;
            }
            else {
                return this._maxWidth;
            }
        },
        set: function (value) {
            if (this.config.autoscale) {
                this.config.autoscale.x = value;
            }
            else {
                this._maxWidth = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TextField.prototype, "maxHeight", {
        get: function () {
            if (this.config.autoscale) {
                return this.config.autoscale.y;
            }
            else {
                return this._maxHeight;
            }
        },
        set: function (value) {
            if (this.config.autoscale) {
                this.config.autoscale.y = value;
            }
            else {
                this._maxHeight = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    TextField.prototype.initElement = function (config) {
        this.config = config;
        this.key = config.key;
        this.translator.languageChangedSignal.add(this.onLocalisationUpdated, this);
        if (config.autoscale !== undefined) {
            this.setAutoscale(config.autoscale.x, config.autoscale.y);
        }
        if (config.anchor !== undefined) {
            this.anchor = new pixi_js_1.Point(config.anchor.x, config.anchor.y);
        }
        this.visible = (config.visible == undefined) ? true : config.visible;
    };
    TextField.prototype.onLocalisationUpdated = function () {
        this.setTextByKey(this.key);
    };
    TextField.prototype.setTextByKey = function (key) {
        this.text = this.isKey(key) ? this.translator.t(key) : key.toString();
    };
    TextField.prototype.isKey = function (keyOrNumber) {
        return keyOrNumber.indexOf !== undefined;
    };
    TextField.prototype.getTextByKey = function (key) {
        if (key == undefined) {
            return '';
        }
        else if (this.isKey(key)) {
            return key.length > 0 ? this.translator.t(key) : '';
        }
        else {
            return key.toString();
        }
    };
    TextField.prototype.autoResize = function () {
        if (this.maxHeight < 0 && this.maxWidth < 0) {
            return;
        }
        var scaleWidth = 1;
        var scaleHeight = 1;
        this.label.scale.x = scaleWidth;
        this.label.scale.y = scaleHeight;
        if (this.width > this.maxWidth) {
            scaleWidth = this.maxWidth / this.width;
        }
        if (this.height > this.maxHeight) {
            scaleHeight = this.maxHeight / this.height;
        }
        var scale = Math.min(scaleWidth, scaleHeight);
        if (scale != 1) {
            this.label.scale.x = scale;
            this.label.scale.y = scale;
        }
    };
    TextField.prototype.setAutoscale = function (maxWidth, maxHeight) {
        this.maxWidth = maxWidth;
        this.maxHeight = maxHeight;
        if (maxWidth == -1) {
            this.label.scale.x = 1;
        }
        if (maxHeight == -1) {
            this.label.scale.y = 1;
        }
        this.updateTextField();
    };
    TextField.prototype.updateTextField = function () {
        this.autoResize();
    };
    Object.defineProperty(TextField.prototype, "anchor", {
        set: function (anchor) {
            this.label.anchor = new pixi_js_1.Point(anchor.x, anchor.y);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TextField.prototype, "text", {
        get: function () {
            return this.label.text;
        },
        set: function (text) {
            this.label.text = text;
            this.updateTextField();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TextField.prototype, "width", {
        get: function () {
            return this.label.width;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TextField.prototype, "height", {
        get: function () {
            return this.label.height;
        },
        enumerable: true,
        configurable: true
    });
    TextField.prototype.updateAttributes = function (config) {
        _super.prototype.updateAttributes.call(this, config);
        if (config.anchor) {
            this.anchor = config.anchor;
        }
        if (config.autoscale != undefined) {
            this.setAutoscale(config.autoscale.x, config.autoscale.y);
        }
        if (config.key != undefined) {
            this.key = config.key;
            this.setTextByKey(this.key);
        }
    };
    var _a;
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof Translator_1.Translator !== "undefined" && Translator_1.Translator) === "function" && _a || Object)
    ], TextField.prototype, "translator", void 0);
    return TextField;
}(CoreElement_1.CoreElement));
exports.TextField = TextField;


/***/ }),
/* 347 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var CompView_1 = __webpack_require__(34);
var UILocalButtonsController_1 = __webpack_require__(110);
var UIPanelView = /** @class */ (function (_super) {
    __extends(UIPanelView, _super);
    function UIPanelView() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(UIPanelView.prototype, "enabled", {
        get: function () {
            return this.mainContainer.interactive;
        },
        /**
         * Makes the component and its children unresponsive to clicks
         */
        set: function (enabled) {
            this.mainContainer.interactive = this.mainContainer.interactiveChildren = enabled;
        },
        enumerable: true,
        configurable: true
    });
    var _a;
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof UILocalButtonsController_1.UILocalButtonsController !== "undefined" && UILocalButtonsController_1.UILocalButtonsController) === "function" && _a || Object)
    ], UIPanelView.prototype, "localButtonsController", void 0);
    return UIPanelView;
}(CompView_1.CompView));
exports.UIPanelView = UIPanelView;


/***/ }),
/* 348 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var TsMap_1 = __webpack_require__(2);
var es5_1 = __webpack_require__(0);
var ButtonsStateSet_1 = __webpack_require__(75);
var UIButtonId_1 = __webpack_require__(349);
var LocalButtonsStateSet_1 = __webpack_require__(209);
/**
 * Local Buttons State Class
 * Set state for the local buttons
 */
var UILocalButtonsStateSet = /** @class */ (function (_super) {
    __extends(UILocalButtonsStateSet, _super);
    function UILocalButtonsStateSet() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    UILocalButtonsStateSet.prototype.default = function () {
        var buttonState = new TsMap_1.TsMap();
        buttonState.set(UIButtonId_1.UIButtonId.BUTTON_SHOW_BET_OPTIONS, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(UIButtonId_1.UIButtonId.BUTTON_CONFIRM_BET_OPTIONS, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(UIButtonId_1.UIButtonId.BUTTON_CANCEL_BET_OPTIONS, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(UIButtonId_1.UIButtonId.BUTTON_SHOW_MENU_OPTIONS, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(UIButtonId_1.UIButtonId.BUTTON_HIDE_MENU_OPTIONS, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(UIButtonId_1.UIButtonId.BUTTON_SHOW_SETTINGS, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(UIButtonId_1.UIButtonId.BUTTON_HIDE_SETTINGS, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(UIButtonId_1.UIButtonId.BUTTON_HOME, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(UIButtonId_1.UIButtonId.BUTTON_SHOW_PAYTABLE, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(UIButtonId_1.UIButtonId.TOGGLE_SOUND, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(UIButtonId_1.UIButtonId.TOGGLE_MUSIC, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        return buttonState;
    };
    UILocalButtonsStateSet.prototype.init = function () {
        var buttonState = new TsMap_1.TsMap();
        buttonState.set(UIButtonId_1.UIButtonId.BUTTON_SHOW_BET_OPTIONS, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(UIButtonId_1.UIButtonId.BUTTON_CONFIRM_BET_OPTIONS, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(UIButtonId_1.UIButtonId.BUTTON_CANCEL_BET_OPTIONS, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(UIButtonId_1.UIButtonId.BUTTON_SHOW_MENU_OPTIONS, new ButtonsStateSet_1.ButtonBehaviour(true, true));
        buttonState.set(UIButtonId_1.UIButtonId.BUTTON_HIDE_MENU_OPTIONS, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(UIButtonId_1.UIButtonId.BUTTON_SHOW_SETTINGS, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(UIButtonId_1.UIButtonId.BUTTON_HIDE_SETTINGS, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(UIButtonId_1.UIButtonId.BUTTON_HOME, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(UIButtonId_1.UIButtonId.BUTTON_SHOW_PAYTABLE, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(UIButtonId_1.UIButtonId.TOGGLE_SOUND, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(UIButtonId_1.UIButtonId.TOGGLE_MUSIC, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        return buttonState;
    };
    UILocalButtonsStateSet = __decorate([
        es5_1.Singleton
    ], UILocalButtonsStateSet);
    return UILocalButtonsStateSet;
}(LocalButtonsStateSet_1.LocalButtonsStateSet));
exports.UILocalButtonsStateSet = UILocalButtonsStateSet;


/***/ }),
/* 349 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * General Button ID. Format: {elementType}_{elementName}
 *
 * @export
 * @class UIButtonId
 */
var UIButtonId = /** @class */ (function () {
    function UIButtonId() {
    }
    // Menu Panel
    UIButtonId.BUTTON_SHOW_MENU_OPTIONS = 'BUTTON_SHOW_MENU_OPTIONS';
    UIButtonId.BUTTON_HIDE_MENU_OPTIONS = 'BUTTON_HIDE_MENU_OPTIONS';
    //BET PANEL
    UIButtonId.BUTTON_SHOW_BET_OPTIONS = 'BUTTON_SHOW_BET_OPTIONS';
    UIButtonId.BUTTON_CONFIRM_BET_OPTIONS = 'BUTTON_CONFIRM_BET_OPTIONS';
    UIButtonId.BUTTON_CANCEL_BET_OPTIONS = 'BUTTON_CANCEL_BET_OPTIONS';
    //SETTINGS PANEL
    UIButtonId.BUTTON_SHOW_SETTINGS = 'BUTTON_SHOW_SETTINGS';
    UIButtonId.BUTTON_HIDE_SETTINGS = 'BUTTON_HIDE_SETTINGS';
    //HISTORY PANEL
    UIButtonId.BUTTON_SHOW_HISTORY = 'BUTTON_SHOW_HISTORY';
    UIButtonId.BUTTON_HIDE_HISTORY = 'BUTTON_HIDE_HISTORY';
    UIButtonId.BUTTON_HOME = 'BUTTON_HOME';
    //tutorial
    UIButtonId.BUTTON_ONBOARDING_ARROW = 'BUTTON_ONBOARDING_ARROW';
    UIButtonId.BUTTON_ONBOARDING_CLOSE = 'BUTTON_ONBOARDING_CLOSE';
    // Settings Panel
    UIButtonId.TOGGLE_SOUND = 'TOGGLE_SOUND';
    UIButtonId.TOGGLE_MUSIC = 'TOGGLE_MUSIC';
    // Paytable Panel
    UIButtonId.BUTTON_SHOW_PAYTABLE = 'BUTTON_SHOW_PAYTABLE';
    UIButtonId.BUTTON_HIDE_PAYTABLE = 'BUTTON_HIDE_PAYTABLE';
    //Rules Panel
    UIButtonId.BUTTON_SHOW_RULES = 'BUTTON_SHOW_RULES';
    UIButtonId.BUTTON_HIDE_RULES = 'BUTTON_HIDE_RULES';
    // turbo
    UIButtonId.BUTTON_TURBO_MODE = 'BUTTON_TURBO_MODE';
    return UIButtonId;
}());
exports.UIButtonId = UIButtonId;


/***/ }),
/* 350 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var TsMap_1 = __webpack_require__(2);
var Actions_1 = __webpack_require__(22);
var es5_1 = __webpack_require__(0);
var GameController_1 = __webpack_require__(53);
var LocalButtonsStateSet_1 = __webpack_require__(209);
var BaseButtonsController_1 = __webpack_require__(337);
var LocalButtonsController = /** @class */ (function (_super) {
    __extends(LocalButtonsController, _super);
    function LocalButtonsController() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * if action triggered, notify CompController.
         * key: action
         * value: CompControllers to be notified
         */
        _this._actionNotifyList = new TsMap_1.TsMap();
        return _this;
    }
    LocalButtonsController.prototype.init = function () {
        this.buttons = new TsMap_1.TsMap();
        this.buttonStates = es5_1.Container.get(LocalButtonsStateSet_1.LocalButtonsStateSet);
    };
    /**
     * set action maping to CompControllers that need to be notified.
     * @param action
     * @param component
     */
    LocalButtonsController.prototype.setAction = function (action, component) {
        if (component == undefined || action == undefined) {
            return;
        }
        action = Actions_1.Actions.CLICK_ACTION_PREFIX + action;
        // if action already been registered
        if (this._actionNotifyList.has(action)) {
            // if component not been registered for that action, push component
            var actionListeners = this._actionNotifyList.get(action);
            if (!actionListeners.includes(component)) {
                this._actionNotifyList.get(action).push(component);
            }
        }
        else {
            this._actionNotifyList.set(action, [component]);
        }
    };
    /**
     * and call action function for registered components.
     * @param action
     * @param data
     */
    LocalButtonsController.prototype.handleButtonAction = function (action, data) {
        if (this._actionNotifyList.has(action)) {
            var components = this._actionNotifyList.get(action);
            components.forEach(function (component) {
                if (typeof component[action] == 'function') {
                    component[action](data);
                }
            });
        }
        this.gameController.handleButtonAction(action, data);
    };
    LocalButtonsController.prototype.updateButton = function (button, behavior) {
        _super.prototype.updateButton.call(this, button, behavior);
        if (behavior.enabled) {
            button.setInteractive(behavior.interactive);
        }
        else {
            button.setInteractive(false);
        }
    };
    var _a;
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof GameController_1.GameController !== "undefined" && GameController_1.GameController) === "function" && _a || Object)
    ], LocalButtonsController.prototype, "gameController", void 0);
    return LocalButtonsController;
}(BaseButtonsController_1.BaseButtonsController));
exports.LocalButtonsController = LocalButtonsController;


/***/ }),
/* 351 */,
/* 352 */,
/* 353 */,
/* 354 */,
/* 355 */,
/* 356 */,
/* 357 */,
/* 358 */,
/* 359 */,
/* 360 */,
/* 361 */,
/* 362 */,
/* 363 */,
/* 364 */,
/* 365 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var BlankTransport = /** @class */ (function () {
    function BlankTransport() {
        this.onReceiveError = [];
    }
    BlankTransport.prototype.onConnect = function () {
        //do nothing
    };
    BlankTransport.prototype.onReceive = function (message) {
        //do nothing
    };
    BlankTransport.prototype.onError = function (message) {
        //do nothing
    };
    BlankTransport.prototype.setConfig = function (config) {
        //do nothing
        this.config = config;
    };
    BlankTransport.prototype.connect = function (data) {
        //do nothing
    };
    BlankTransport.prototype.send = function (data) {
        //do nothing
    };
    BlankTransport.prototype.psend = function (data) {
        return Promise.resolve();
    };
    BlankTransport.prototype.disconnect = function () {
        //do nothing
    };
    BlankTransport.prototype.isHostNameValid = function (ipStr) {
        var reg = new RegExp('^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$');
        return reg.test(ipStr);
    };
    BlankTransport.prototype.isUsingRealEnvironment = function () {
        var isLocalOrTest = this.isLocalEnvironment() || this.isTestEnvironment();
        var isValidHostName = this.isHostNameValid(window.location.hostname);
        return !isLocalOrTest && !isValidHostName;
    };
    BlankTransport.prototype.isLocalEnvironment = function () {
        return window.location.hostname == BlankTransport.LOCAL_HOST;
    };
    BlankTransport.prototype.isTestEnvironment = function () {
        return window.location.hostname == BlankTransport.GEN_TEST || window.location.hostname == BlankTransport.GEN_REVIEW;
    };
    BlankTransport.prototype.getDynamicDomainName = function () {
        var domainName = this.getDefaultDomain();
        var completeHostName = window.location.hostname;
        if (this.isUsingRealEnvironment()) {
            var completeHostNameSplit = completeHostName.split('.');
            if (completeHostNameSplit.length > 1) {
                domainName = completeHostNameSplit[completeHostNameSplit.length - 2] + '.' + completeHostNameSplit[completeHostNameSplit.length - 1];
            }
        }
        return domainName;
    };
    BlankTransport.prototype.getDefaultDomain = function () {
        var domainName = this.config.connectionURL;
        return domainName;
    };
    BlankTransport.LOCAL_HOST = 'localhost';
    BlankTransport.GEN_TEST = 'testing.gen-game.net';
    BlankTransport.GEN_REVIEW = 'review.gen-game.net';
    return BlankTransport;
}());
exports.BlankTransport = BlankTransport;


/***/ }),
/* 366 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var AbstractFormatter_1 = __webpack_require__(141);
/**
 * Encapsulates code/encode rules for messages
 */
var WebSocketFormatter = /** @class */ (function (_super) {
    __extends(WebSocketFormatter, _super);
    function WebSocketFormatter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return WebSocketFormatter;
}(AbstractFormatter_1.AbstractFormatter));
exports.WebSocketFormatter = WebSocketFormatter;


/***/ }),
/* 367 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var HttpTransport_1 = __webpack_require__(30);
var TsMap_1 = __webpack_require__(2);
var UrlParameters_1 = __webpack_require__(14);
var es5_1 = __webpack_require__(0);
/**
 * Handle Http transport to NG server
 */
var NGHttpTransport = /** @class */ (function (_super) {
    __extends(NGHttpTransport, _super);
    function NGHttpTransport() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(NGHttpTransport.prototype, "url", {
        get: function () {
            return this._url;
        },
        enumerable: true,
        configurable: true
    });
    NGHttpTransport.prototype.setConfig = function (config) {
        this.config = config;
        this._url = config.protocol + this.getDynamicGameServerName() + '.' + this.getDynamicDomainName() + config.connectionPort;
    };
    NGHttpTransport.prototype.send = function (data) {
        this.request(HttpTransport_1.HTTP_METHODS.POST, this._url + data.path, data.name, data.headers, data.content);
    };
    NGHttpTransport.prototype.getHeaders = function () {
        var headers = new TsMap_1.TsMap();
        headers.set('Content-Type', 'application/json');
        var partnerToken = UrlParameters_1.UrlParameters.partnerToken;
        if (!(UrlParameters_1.UrlParameters.isRealMode())) {
            if (UrlParameters_1.UrlParameters.engagements) {
                partnerToken = this.config.demoPartnerToken;
            }
            else {
                partnerToken = this.config.playPartnerToken;
            }
        }
        headers.set('X-Genesis-PartnerToken', partnerToken);
        return headers;
    };
    NGHttpTransport.prototype.getDynamicGameServerName = function () {
        var gsName = UrlParameters_1.UrlParameters.gs;
        if (gsName == undefined) {
            gsName = this.config.rgsName;
        }
        return gsName;
    };
    NGHttpTransport = __decorate([
        es5_1.Singleton
    ], NGHttpTransport);
    return NGHttpTransport;
}(HttpTransport_1.HttpTransport));
exports.NGHttpTransport = NGHttpTransport;


/***/ }),
/* 368 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var Actions_1 = __webpack_require__(22);
var SlotActions_1 = __webpack_require__(44);
var SlotBankService_1 = __webpack_require__(49);
var SlotSeleniumDataDefinitions_1 = __webpack_require__(688);
var GameController_1 = __webpack_require__(53);
var SeleniumPortal_1 = __webpack_require__(143);
var SlotSeleniumPortal = /** @class */ (function (_super) {
    __extends(SlotSeleniumPortal, _super);
    function SlotSeleniumPortal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * spin with command line.
     */
    SlotSeleniumPortal.prototype.spin = function () {
        this.gameController.handleButtonAction(Actions_1.Actions.CLICK_ACTION_PREFIX + SlotActions_1.SlotActions.SPIN);
    };
    /**
     * get date from back service.
     */
    SlotSeleniumPortal.prototype.getBankData = function () {
        return new SlotSeleniumDataDefinitions_1.SlotBankData(this.slotBankService.balance, this.slotBankService.currency, this.slotBankService.bet, this.slotBankService.lines);
    };
    var _a, _b;
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof GameController_1.GameController !== "undefined" && GameController_1.GameController) === "function" && _a || Object)
    ], SlotSeleniumPortal.prototype, "gameController", void 0);
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_b = typeof SlotBankService_1.SlotBankService !== "undefined" && SlotBankService_1.SlotBankService) === "function" && _b || Object)
    ], SlotSeleniumPortal.prototype, "slotBankService", void 0);
    SlotSeleniumPortal = __decorate([
        es5_1.Singleton
    ], SlotSeleniumPortal);
    return SlotSeleniumPortal;
}(SeleniumPortal_1.SeleniumPortal));
exports.SlotSeleniumPortal = SlotSeleniumPortal;
var SlotSeleniumHistoryMessage = /** @class */ (function () {
    function SlotSeleniumHistoryMessage(name, direction) {
        this.name = name;
        this.direction = direction;
        this.timestamp = Date.now();
    }
    return SlotSeleniumHistoryMessage;
}());
exports.SlotSeleniumHistoryMessage = SlotSeleniumHistoryMessage;
var SlotSeleniumResponse = /** @class */ (function () {
    function SlotSeleniumResponse(stateName, receivedMessageHistory) {
        this.stateName = stateName;
        this.receivedMessageHistory = receivedMessageHistory;
    }
    return SlotSeleniumResponse;
}());
exports.SlotSeleniumResponse = SlotSeleniumResponse;


/***/ }),
/* 369 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var AbstractFormatter_1 = __webpack_require__(141);
/**
 * Encapsulates code/encode rules for messages
 */
var SlotHttpFormatter = /** @class */ (function (_super) {
    __extends(SlotHttpFormatter, _super);
    function SlotHttpFormatter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Regular slot spin command
     */
    SlotHttpFormatter.SPIN = 'spin';
    /**
     * Command for starting gamble and showing options for player
     */
    SlotHttpFormatter.START_GAMBLE = 'gamble_start';
    /**
     * Command for starting gamble and showing options for player
     */
    SlotHttpFormatter.GAMBLE_RESULT = 'gamble_result';
    /**
     * Command for starting gamble and showing options for player
     */
    SlotHttpFormatter.GAMBLE_CHOICE = 'gamble_choice';
    /**
     * Command for requesting run pick feature
     */
    SlotHttpFormatter.RUN_PICK_FEATURE = 'pick_feature';
    /**
     * Command for requesting run free respin feature
     */
    SlotHttpFormatter.FREE_RESPIN_REELS = 'free_respin_reels';
    /**
     * Command for requesting run free spin feature
     */
    SlotHttpFormatter.RUN_FREE_SPIN_FEATURE = 'free_spin_feature';
    /**
     * Command for requesting run jackpot feature
     */
    SlotHttpFormatter.RUN_JACKPOT_FEATURE = 'jackpot_feature';
    /**
     * Command for requesting in game history
     */
    SlotHttpFormatter.HISTORY_SUMMARY = 'direct_history_summary';
    SlotHttpFormatter.HISTORY_DETAIL = 'direct_history_detail';
    /**
     * Command for requesting in game history for result panel, but it's same with HISTORY_SUMMARY and HISTORY_DETAIL
     */
    SlotHttpFormatter.RESULT_HISTORY_SUMMARY = 'direct_result_history_summary';
    SlotHttpFormatter.RESULT_HISTORY_DETAIL = 'direct_result_history_detail';
    /**
     * Forced slot spin command
     */
    SlotHttpFormatter.FORCE_SPIN = 'force_spin';
    SlotHttpFormatter.GAMBLE_REQUEST = 'gamble_request';
    SlotHttpFormatter.TAKE_WIN = 'take_win';
    SlotHttpFormatter.PAYOUT = 'payout';
    return SlotHttpFormatter;
}(AbstractFormatter_1.AbstractFormatter));
exports.SlotHttpFormatter = SlotHttpFormatter;


/***/ }),
/* 370 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var TsMap_1 = __webpack_require__(2);
var ErrorDialogConfig_1 = __webpack_require__(203);
exports.ErrorCode = {
    INTERNET_DISCONNECTED: '-1',
    FAILED_TO_LOAD_RESOURCE: '-2',
    INVALID_SESSION_TOKEN2: '403',
    INVALID_SESSION_TOKEN: '500',
    INSUFFICIENT_BALANCE: '402',
    BAD_REQUEST_410: '410',
    BAD_REQUEST_411: '411',
    BAD_REQUEST_412: '412',
    PENDING_BONUS: '400',
    BAD_REQUEST_0: '400-0',
    BAD_REQUEST_1: '400-1',
    BAD_REQUEST_2: '400-2',
    BAD_REQUEST_3: '400-3',
    BAD_REQUEST_4: '400-4',
    BAD_REQUEST_5: '400-5',
    BAD_REQUEST_6: '400-6',
    BAD_REQUEST_7: '400-7',
    BAD_REQUEST_8: '400-8',
    BAD_REQUEST_9: '400-9',
    BAD_REQUEST_10: '400-10',
    BAD_REQUEST_11: '400-11',
    BAD_REQUEST_12: '400-12',
    BAD_REQUEST_13: '400-13',
    BAD_REQUEST_14: '400-14',
    BAD_REQUEST_15: '400-15',
    BAD_REQUEST_16: '400-16',
    BAD_REQUEST_17: '400-17',
    BAD_REQUEST_18: '400-18',
    BAD_REQUEST_19: '400-19',
    BAD_REQUEST_20: '400-20',
    BAD_REQUEST_21: '400-21',
    BAD_REQUEST_22: '400-22',
    BAD_REQUEST_23: '400-23',
    BAD_REQUEST_24: '400-24',
    UNAVAILABLE_FOR_LEGAL_REASONS: '451'
};
var ErrorDialogData = /** @class */ (function () {
    function ErrorDialogData() {
        this.errorDialogTypeMap = new TsMap_1.TsMap([
            [ErrorDialogConfig_1.ErrorDialogType.FULL_SCREEN, [
                    exports.ErrorCode.INTERNET_DISCONNECTED,
                    exports.ErrorCode.FAILED_TO_LOAD_RESOURCE,
                    exports.ErrorCode.INVALID_SESSION_TOKEN,
                    exports.ErrorCode.INVALID_SESSION_TOKEN2,
                    exports.ErrorCode.BAD_REQUEST_411,
                    exports.ErrorCode.PENDING_BONUS,
                    exports.ErrorCode.BAD_REQUEST_0,
                    exports.ErrorCode.BAD_REQUEST_1,
                    exports.ErrorCode.BAD_REQUEST_2,
                    exports.ErrorCode.BAD_REQUEST_3,
                    exports.ErrorCode.BAD_REQUEST_4,
                    exports.ErrorCode.BAD_REQUEST_5,
                    exports.ErrorCode.BAD_REQUEST_6,
                    exports.ErrorCode.BAD_REQUEST_7,
                    exports.ErrorCode.BAD_REQUEST_8,
                    exports.ErrorCode.BAD_REQUEST_9,
                    exports.ErrorCode.BAD_REQUEST_10,
                    exports.ErrorCode.BAD_REQUEST_11,
                    exports.ErrorCode.BAD_REQUEST_12,
                    exports.ErrorCode.BAD_REQUEST_13,
                    exports.ErrorCode.BAD_REQUEST_14,
                    exports.ErrorCode.BAD_REQUEST_15,
                    exports.ErrorCode.BAD_REQUEST_16,
                    exports.ErrorCode.BAD_REQUEST_17,
                    exports.ErrorCode.BAD_REQUEST_18,
                    exports.ErrorCode.BAD_REQUEST_19,
                    exports.ErrorCode.BAD_REQUEST_20,
                    exports.ErrorCode.BAD_REQUEST_21,
                    exports.ErrorCode.BAD_REQUEST_22,
                    exports.ErrorCode.BAD_REQUEST_23,
                    exports.ErrorCode.BAD_REQUEST_24,
                    exports.ErrorCode.UNAVAILABLE_FOR_LEGAL_REASONS
                ]],
            [
                ErrorDialogConfig_1.ErrorDialogType.WITH_OPTION, [
                    exports.ErrorCode.INSUFFICIENT_BALANCE
                ]
            ]
        ]);
        this.ignoredErrorCode = [
            exports.ErrorCode.BAD_REQUEST_410,
            exports.ErrorCode.BAD_REQUEST_412
        ];
        this.errorDialogKeyMap = new TsMap_1.TsMap([
            ['error_-1', [
                    exports.ErrorCode.INTERNET_DISCONNECTED
                ]],
            ['error_-2', [
                    exports.ErrorCode.FAILED_TO_LOAD_RESOURCE
                ]],
            ['error_403', [
                    exports.ErrorCode.INVALID_SESSION_TOKEN,
                    exports.ErrorCode.INVALID_SESSION_TOKEN2
                ]],
            ['error_402', [
                    exports.ErrorCode.INSUFFICIENT_BALANCE
                ]],
            ['error_400', [
                    exports.ErrorCode.PENDING_BONUS
                ]],
            ['error_400-1', [
                    exports.ErrorCode.BAD_REQUEST_0,
                    exports.ErrorCode.BAD_REQUEST_1,
                    exports.ErrorCode.BAD_REQUEST_2,
                    exports.ErrorCode.BAD_REQUEST_3,
                    exports.ErrorCode.BAD_REQUEST_4,
                    exports.ErrorCode.BAD_REQUEST_5,
                    exports.ErrorCode.BAD_REQUEST_6,
                    exports.ErrorCode.BAD_REQUEST_7,
                    exports.ErrorCode.BAD_REQUEST_8,
                    exports.ErrorCode.BAD_REQUEST_9,
                    exports.ErrorCode.BAD_REQUEST_10,
                    exports.ErrorCode.BAD_REQUEST_12,
                    exports.ErrorCode.BAD_REQUEST_13,
                    exports.ErrorCode.BAD_REQUEST_14,
                    exports.ErrorCode.BAD_REQUEST_15,
                    exports.ErrorCode.BAD_REQUEST_16,
                    exports.ErrorCode.BAD_REQUEST_17,
                    exports.ErrorCode.BAD_REQUEST_18,
                    exports.ErrorCode.BAD_REQUEST_19,
                    exports.ErrorCode.BAD_REQUEST_20,
                    exports.ErrorCode.BAD_REQUEST_21,
                    exports.ErrorCode.BAD_REQUEST_22,
                    exports.ErrorCode.BAD_REQUEST_23,
                    exports.ErrorCode.BAD_REQUEST_24
                ]],
            ['error_400-11', [
                    exports.ErrorCode.BAD_REQUEST_11
                ]],
            ['error_411', [
                    exports.ErrorCode.BAD_REQUEST_411 // TODO: move to g+
                ]],
            ['error_412', [
                    exports.ErrorCode.BAD_REQUEST_412 // TODO: move to g+
                ]],
            ['error_451', [
                    exports.ErrorCode.UNAVAILABLE_FOR_LEGAL_REASONS
                ]]
        ]);
    }
    ErrorDialogData.prototype.getErrorDialogType = function (errorCode) {
        for (var i = 0; i < this.errorDialogTypeMap.keys().length; i++) {
            var key = this.errorDialogTypeMap.keys()[i];
            var values = this.errorDialogTypeMap.values()[i];
            for (var j = 0; j < values.length; j++) {
                if (values[j] == errorCode) {
                    return key;
                }
            }
        }
        return ErrorDialogConfig_1.ErrorDialogType.FULL_SCREEN;
    };
    ErrorDialogData.prototype.getErrorDialogKey = function (errorCode) {
        for (var i = 0; i < this.errorDialogKeyMap.keys().length; i++) {
            var key = this.errorDialogKeyMap.keys()[i];
            var values = this.errorDialogKeyMap.values()[i];
            for (var j = 0; j < values.length; j++) {
                if (values[j] == errorCode) {
                    return key;
                }
            }
        }
        return this.errorDialogKeyMap.keys()[0];
    };
    return ErrorDialogData;
}());
exports.ErrorDialogData = ErrorDialogData;


/***/ }),
/* 371 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var NGSlotApi_1 = __webpack_require__(51);
var HttpTransport_1 = __webpack_require__(30);
var GameInitMsgFormatter_1 = __webpack_require__(372);
var GameInitRequestMsgFormatter_1 = __webpack_require__(700);
/**
 * game init api
 */
var GameInit = /** @class */ (function (_super) {
    __extends(GameInit, _super);
    function GameInit() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GameInit.prototype.init = function (transport, config) {
        _super.prototype.init.call(this, transport, config);
        this.responseFormatter = es5_1.Container.get(GameInitMsgFormatter_1.GameInitMsgFormatter);
        this.requestFormatter = es5_1.Container.get(GameInitRequestMsgFormatter_1.GameInitRequestMsgFormatter);
    };
    GameInit.prototype.encapsulation = function (messageType) {
        return {
            url: this.transport.url + this.apiPath.init,
            name: messageType,
            method: HttpTransport_1.HTTP_METHODS.POST,
            headers: this.transport.getHeaders(),
            content: this.request
        };
    };
    return GameInit;
}(NGSlotApi_1.NGSlotApi));
exports.GameInit = GameInit;


/***/ }),
/* 372 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var MoneyFormatter_1 = __webpack_require__(16);
var SlotGameType_1 = __webpack_require__(92);
var SlotNGHttpFormatter_1 = __webpack_require__(20);
var FeaturesFormatterList_1 = __webpack_require__(148);
/**
 * formatter for login and game init api.
 * also handling restore pending feature.
 */
var GameInitMsgFormatter = /** @class */ (function (_super) {
    __extends(GameInitMsgFormatter, _super);
    function GameInitMsgFormatter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GameInitMsgFormatter.prototype.processIncomingMessage = function (message) {
        var responseScenario = this.scenarioManager.getScenario(this.scenarioNames.gameInit);
        this.initBankServiceValue(message);
        this.setSlotNGFormatterModel(message);
        this.moneyFormatter.setCurrencyByCode(message.state.currency.toLocaleUpperCase());
        var strips = this.getReelStrips(message.game.strips);
        var initData = {
            gametype: message.game.game_type,
            engagements: message.state.engagements,
            engagementInfo: message.state.engagement_info,
            autoSpins: message.game.auto_spin_config,
            autoSpinDefaultIndex: message.game.default_auto_spin_config_idx,
            balance: this.bankService.balance,
            bet: this.bankService.bet,
            betOptions: this.bankService.betOptions,
            availableLines: this.getAvailableLines(message.game.minimum_line_number),
            totalBet: this.bankService.totalBet,
            strips: strips,
            idleSymbols: (message.state.spin_result != undefined) ? this.getIdleSymbols(message.state.spin_result.reels) : null,
            provider: message.state.provider,
            rtp: message.game.rtp,
            gameViewConfig: (message.game_view_config != undefined) ? message.game_view_config : null
        };
        responseScenario.addStateData(this.stateNames.preInit, initData);
        responseScenario.addStateData(this.stateNames.init, initData);
        if (message.state.features != undefined && message.state.features.length != 0) {
            //restore
            responseScenario = this.getPendingFeaturesScenarios(responseScenario, message.state.features, message);
        }
        return this.returnScenario(responseScenario);
    };
    /**
     * set date into slotNGModel
     */
    GameInitMsgFormatter.prototype.setSlotNGFormatterModel = function (message) {
        this.slotNGModel.gameType = message.game.game_type;
        this.slotNGModel.playerId = message.state.player_id;
        this.slotNGModel.partnerCode = message.state.partner_code;
        this.slotNGModel.sessionId = message.state.session_token;
        this.slotNGModel.stateTag = message.state.state_tag;
    };
    /**
     * init bank service
     * @param message
     */
    GameInitMsgFormatter.prototype.initBankServiceValue = function (message) {
        this.setBankBalance(message.state.balance);
        this.bankService.betOptions = message.game.bet_denominations;
        this.bankService.bet = this.getDefaultBet(message, message.state.bet_value, message.game.default_bet_denom_idx, this.bankService.betOptions);
        this.bankService.maxLines = message.game.number_of_lines;
        this.bankService.lines = this.getDefaultLines(message);
        this.bankService.currency = message.state.currency;
    };
    GameInitMsgFormatter.prototype.setBankBalance = function (value) {
        this.bankService.balance = value;
    };
    GameInitMsgFormatter.prototype.getDefaultLines = function (message) {
        if (message.state.bet_preference != undefined && message.state.bet_preference.line != undefined) {
            return message.state.bet_preference.line;
        }
        return this.bankService.maxLines;
    };
    /**
     * get line setting
     * @param gameType
     * @param numberOfLines
     *  if a 100 line game, but player can't bet less than 100, min_line_number = 100
     */
    GameInitMsgFormatter.prototype.getAvailableLines = function (minimumLineNumber) {
        var lines = new Array();
        if (minimumLineNumber == undefined) {
            minimumLineNumber = 1;
        }
        for (var i = minimumLineNumber; i <= this.bankService.maxLines; i++) {
            lines.push(i);
        }
        return lines;
    };
    /**
     * get default bet by server setting
     * 1. if still pending in feature, still display playerBetAmount
     * 2. if not pending in feature, display default bet
     * 3. if default bet is smaller than last spin, use last bet as default bet
     * 4. if player balance is less than default bet, goto the one with enough money
     * @param playerBetAmount
     * @param defaultBetIndex
     * @param betDenominations
     */
    GameInitMsgFormatter.prototype.getDefaultBet = function (message, playerBetAmount, defaultBetIndex, betDenominations) {
        if (defaultBetIndex != undefined && this.isDefaultBetIndexValid(betDenominations, defaultBetIndex)) {
            // check is pending feature
            if (this.isPendingFeature(message)) {
                var pandBetIdx = this.getLastBetDenominations(message, betDenominations);
                if (pandBetIdx >= 0) {
                    return betDenominations[pandBetIdx];
                }
                return betDenominations[defaultBetIndex];
            }
            else { // without pending
                var lastBetDenominations = this.getLastBetDenominations(message, betDenominations);
                var betIdx = 0;
                if (lastBetDenominations >= 0) {
                    if (betDenominations[defaultBetIndex] >= betDenominations[lastBetDenominations]) {
                        betIdx = defaultBetIndex;
                    }
                    else {
                        betIdx = lastBetDenominations;
                    }
                }
                else {
                    betIdx = defaultBetIndex;
                }
                // if player balance is not enough, goto the one with enough balance
                if (this.bankService.balance < this.getBetValue(message, betDenominations, betIdx)) {
                    while (this.bankService.balance < this.getBetValue(message, betDenominations, betIdx)) {
                        if (betIdx > 0) {
                            betIdx--;
                        }
                        else {
                            betIdx = 0;
                            break;
                        }
                    }
                }
                return betDenominations[betIdx];
            }
        }
        else {
            return betDenominations[0];
        }
    };
    GameInitMsgFormatter.prototype.getBetValue = function (message, betDenominations, betIdx) {
        var betDenom;
        switch (message.game.game_type) {
            case SlotGameType_1.SlotGameType.LINEGAME:
            case SlotGameType_1.SlotGameType.FIXED_LINEGAME:
                var lines = message.game.number_of_lines;
                if (message.state.bet_preference) {
                    lines = message.state.bet_preference.line;
                }
                betDenom = betDenominations[betIdx] * lines;
                break;
            default:
                betDenom = betDenominations[betIdx];
                break;
        }
        return betDenom;
    };
    GameInitMsgFormatter.prototype.getLastBetDenominations = function (message, betDenominations) {
        if (message.state.bet_preference != undefined && message.state.bet_preference.bet_per_line != undefined) {
            return betDenominations.indexOf(message.state.bet_preference.bet_per_line);
        }
        switch (message.game.game_type) {
            case SlotGameType_1.SlotGameType.ALLPAYS:
                return betDenominations.indexOf(message.state.bet_value);
            case SlotGameType_1.SlotGameType.LINEGAME:
            case SlotGameType_1.SlotGameType.FIXED_LINEGAME:
                return betDenominations.indexOf(message.state.bet_per_line);
            default:
                console.warn('unknown game type');
                return betDenominations.indexOf(message.state.bet_value);
        }
    };
    /**
     * check is default bet index from server valid
     * @param betDenominations
     * @param defaultBetIndex
     */
    GameInitMsgFormatter.prototype.isDefaultBetIndexValid = function (betDenominations, defaultBetIndex) {
        if (defaultBetIndex < 0 || defaultBetIndex >= betDenominations.length) {
            return false;
        }
        else {
            return true;
        }
    };
    /**
     * Get reel strips
     * @param strips
     */
    GameInitMsgFormatter.prototype.getReelStrips = function (strips) {
        return strips;
    };
    /**
      * get idle symbols from last spin.
      * @param reels
      */
    GameInitMsgFormatter.prototype.getIdleSymbols = function (reels) {
        if (reels == undefined) {
            return null;
        }
        else {
            var idleSymbols = new Array(reels.length);
            for (var i = 0; i < reels.length; i++) {
                idleSymbols[i] = new Array();
                for (var j = 0; j < reels[i].symbols.length; j++) {
                    idleSymbols[i].push(reels[i].symbols[j].symbol);
                }
            }
            return idleSymbols;
        }
    };
    /**
     * check if still having pending feature status
     * @param message
     */
    GameInitMsgFormatter.prototype.isPendingFeature = function (message) {
        if (message.state.features != undefined && message.state.features.length != 0) {
            message.state.features.forEach(function (element) {
                if (!element.complete) {
                    return true;
                }
            });
        }
        return false;
    };
    /**
     * get pending features scenarios
     * @param responseScenario
     */
    GameInitMsgFormatter.prototype.getPendingFeaturesScenarios = function (responseScenario, features, message) {
        var _this = this;
        var restoreScenario = null;
        features.forEach(function (element) {
            // if resident is "null", it means go original process, use complete flag.
            // if resident is "true", it means need to restore, otherwise doesn't need.
            var flag = (element.resident == null) ? !element.complete : element.resident;
            if (flag) {
                var formatter = _this.featureFormatterList.inFeatureFormatters.get(element.type);
                if (formatter != undefined) {
                    restoreScenario = formatter.restoreFeatureIncomingMessage(element.feature_state, features, element.type, message);
                    if (restoreScenario != undefined) {
                        responseScenario.addScenario(restoreScenario);
                    }
                }
                else {
                    restoreScenario = _this.getGameFeatureScenario(element, message);
                    if (restoreScenario != undefined) {
                        responseScenario.addScenario(restoreScenario);
                    }
                }
            }
            restoreScenario = null;
        });
        return responseScenario;
    };
    GameInitMsgFormatter.prototype.getGameFeatureScenario = function (feature, message) {
        console.warn('please ovrride features for game ' + feature.type);
        return null;
    };
    var _a, _b;
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof FeaturesFormatterList_1.FeaturesFormatterList !== "undefined" && FeaturesFormatterList_1.FeaturesFormatterList) === "function" && _a || Object)
    ], GameInitMsgFormatter.prototype, "featureFormatterList", void 0);
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_b = typeof MoneyFormatter_1.MoneyFormatter !== "undefined" && MoneyFormatter_1.MoneyFormatter) === "function" && _b || Object)
    ], GameInitMsgFormatter.prototype, "moneyFormatter", void 0);
    return GameInitMsgFormatter;
}(SlotNGHttpFormatter_1.SlotNGHttpFormatter));
exports.GameInitMsgFormatter = GameInitMsgFormatter;


/***/ }),
/* 373 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var SlotNGHttpFormatter_1 = __webpack_require__(20);
/**
 * Format history detail request
 */
var HistoryDetailRequestMsgFormatter = /** @class */ (function (_super) {
    __extends(HistoryDetailRequestMsgFormatter, _super);
    function HistoryDetailRequestMsgFormatter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * sends button press emulation package
     * @param data - ignored
     * @returns {any} message object
     */
    HistoryDetailRequestMsgFormatter.prototype.codeMessage = function (data) {
        return {
            roundID: data.roundID
        };
    };
    return HistoryDetailRequestMsgFormatter;
}(SlotNGHttpFormatter_1.SlotNGHttpFormatter));
exports.HistoryDetailRequestMsgFormatter = HistoryDetailRequestMsgFormatter;


/***/ }),
/* 374 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var SlotNGHttpFormatter_1 = __webpack_require__(20);
/**
 * Format history summary request
 */
var HistoryRequestMsgFormatter = /** @class */ (function (_super) {
    __extends(HistoryRequestMsgFormatter, _super);
    function HistoryRequestMsgFormatter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * sends button press emulation package
     * @param data - ignored
     * @returns {any} message object
     */
    HistoryRequestMsgFormatter.prototype.codeMessage = function (data) {
        return {
            game_code: this.config.gameCode,
            page_number: data.pageNum,
            page_size: data.pageSize,
            period_type: data.queryType,
            start_time: data.startTime,
            end_time: data.endTime
        };
    };
    return HistoryRequestMsgFormatter;
}(SlotNGHttpFormatter_1.SlotNGHttpFormatter));
exports.HistoryRequestMsgFormatter = HistoryRequestMsgFormatter;


/***/ }),
/* 375 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var SlotNGFeatureDataDefinitions_1 = __webpack_require__(23);
var SpinRequestMsgFormatter_1 = __webpack_require__(118);
/**
 * Format free spin request
 */
var FreeSpinFeatureRequestMsgFormatter = /** @class */ (function (_super) {
    __extends(FreeSpinFeatureRequestMsgFormatter, _super);
    function FreeSpinFeatureRequestMsgFormatter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * sends button press emulation package
     * @param data
     */
    FreeSpinFeatureRequestMsgFormatter.prototype.codeMessage = function (data) {
        var requestData = {
            player_id: this.slotNGModel.playerId,
            session_token: this.slotNGModel.sessionId,
            partner_code: this.slotNGModel.partnerCode,
            game_code: this.config.gameCode,
            action: SlotNGFeatureDataDefinitions_1.FeatureTypes.FREE_SPIN,
            state_tag: this.slotNGModel.stateTag
        };
        requestData = this.mergeForceSpinData(requestData, data);
        return requestData;
    };
    return FreeSpinFeatureRequestMsgFormatter;
}(SpinRequestMsgFormatter_1.SpinRequestMsgFormatter));
exports.FreeSpinFeatureRequestMsgFormatter = FreeSpinFeatureRequestMsgFormatter;


/***/ }),
/* 376 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var MiniSignal = __webpack_require__(3);
var es5_1 = __webpack_require__(0);
var Helper_1 = __webpack_require__(5);
var AssetLoader_1 = __webpack_require__(54);
var ResourceConfig_1 = __webpack_require__(62);
/**
 * ComponentManager contains all components and it delivers events from components to GameController.
 */
var ComponentManager = /** @class */ (function () {
    function ComponentManager() {
        this._components = new Array();
        this.readyComponents = new Array();
        this.componentsFinishedStateSignal = new MiniSignal();
        this._isReadyForNextState = true;
        this.assetLoader.onGroupCompleted.add(this.onGroupCompleted.bind(this));
        this.assetLoader.onGroupProgress.add(this.onGroupProgress.bind(this));
    }
    Object.defineProperty(ComponentManager.prototype, "components", {
        get: function () {
            return this._components;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ComponentManager.prototype, "componentsLength", {
        get: function () {
            return this._components.length;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Set the state for ALL components.
     * @param state current state
     */
    ComponentManager.prototype.setState = function (state) {
        this._isReadyForNextState = false;
        this.readyComponents = [];
        this._components.forEach(function (element) {
            element.setState(state);
        });
    };
    /**
     * Update state data for state of components
     * @param state state with updated stateData
     */
    ComponentManager.prototype.updateState = function (state) {
        this._components.forEach(function (element) {
            element.invokeStateMethod(state);
        });
    };
    ComponentManager.prototype.skipState = function (state) {
        this._components.forEach(function (element) {
            element.skipState(state);
        });
    };
    /**
     * Add Component to manager
     * @param component component to add
     */
    ComponentManager.prototype.addComponent = function (component) {
        component.finishStateActionSignal.add(this.onComponentHandleState, this);
        this._components.push(component);
    };
    /**
     * Remove component from manager
     *
     * @param {CompController} component
     * @memberof ComponentManager
     */
    ComponentManager.prototype.removeComponent = function (component) {
        component.finishStateActionSignal.detachAll();
        Helper_1.Helper.removeItemsFromArray(this.components, component);
    };
    Object.defineProperty(ComponentManager.prototype, "listOfFilesToLoad", {
        /**
         * Retrieves assets list
         * It is used in Preloader.ts
         */
        get: function () {
            var assetsToLoad = new Array();
            this._components.forEach(function (element) {
                assetsToLoad = assetsToLoad.concat(element.loaderList);
            });
            return assetsToLoad;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Register components that finished all actions needed for this state.
     * @param componentID id of component that completed all actions for this state
     */
    ComponentManager.prototype.onComponentHandleState = function (componentID) {
        if (this.readyComponents.indexOf(componentID) < 0) {
            this.readyComponents.push(componentID);
        }
        if (this.readyComponents.length == this._components.length) {
            this._isReadyForNextState = true;
            this.componentsFinishedStateSignal.dispatch();
        }
    };
    Object.defineProperty(ComponentManager.prototype, "isReadyForNextState", {
        get: function () {
            return this._isReadyForNextState;
        },
        enumerable: true,
        configurable: true
    });
    ComponentManager.prototype.onGroupCompleted = function (groupIndex) {
        this._components.forEach(function (component) {
            if (groupIndex === ResourceConfig_1.ResourceConfig.LANDSCAPE_VIEW) {
                component.onLandscapeViewLoaded();
            }
            else if (groupIndex === ResourceConfig_1.ResourceConfig.PORTRAIT_VIEW) {
                component.onPortraitViewLoaded();
            }
            else {
                component.onGroupCompleted(groupIndex);
            }
        });
    };
    ComponentManager.prototype.onGroupProgress = function (groupIndex, ratio) {
        this._components.forEach(function (component) {
            component.onGroupProgress(groupIndex, ratio);
        });
    };
    ComponentManager.prototype.getComponentByID = function (componentID) {
        return this._components.find(function (e) { return e.componentID === componentID; });
    };
    var _a;
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof AssetLoader_1.AssetLoader !== "undefined" && AssetLoader_1.AssetLoader) === "function" && _a || Object)
    ], ComponentManager.prototype, "assetLoader", void 0);
    return ComponentManager;
}());
exports.ComponentManager = ComponentManager;


/***/ }),
/* 377 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ButtonId = /** @class */ (function () {
    function ButtonId() {
    }
    ButtonId.BUTTON_CLOSE_PRELOADER = 'BUTTON_CLOSE_PRELOADER';
    ButtonId.CLOSE_TOOLTIP = 'BUTTON_CLOSE_TOOLTIP';
    return ButtonId;
}());
exports.ButtonId = ButtonId;


/***/ }),
/* 378 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var LazyCompView_1 = __webpack_require__(379);
var TransitionSceneView = /** @class */ (function (_super) {
    __extends(TransitionSceneView, _super);
    function TransitionSceneView() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TransitionSceneView.prototype.updateProgress = function (ratio) {
        // handle on resource progress change
    };
    return TransitionSceneView;
}(LazyCompView_1.LazyCompView));
exports.TransitionSceneView = TransitionSceneView;


/***/ }),
/* 379 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var AssetLoader_1 = __webpack_require__(54);
var es5_1 = __webpack_require__(0);
var Viewport_1 = __webpack_require__(6);
var pixi_js_1 = __webpack_require__(4);
var ResourceConfig_1 = __webpack_require__(62);
var CompView_1 = __webpack_require__(34);
/**
 * LazyCompView enables lazy load by group/landscape/portrait assets.
 * For landscape and portrait layout. The class ensures the assets has loaded and initialized before update UI.
 */
var LazyCompView = /** @class */ (function (_super) {
    __extends(LazyCompView, _super);
    function LazyCompView() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.isLandScapeViewLoaded = false;
        _this.isPortraitViewLoaded = false;
        /**
         * Set true if the landscape view already initialized
         *
         * @protected
         * @type {boolean}
         * @memberof CompView
         */
        _this.isLandScapeViewReady = false;
        /**
         * Set true if the portrait view already initialized
         *
         * @protected
         * @type {boolean}
         * @memberof CompView
         */
        _this.isPortraitViewReady = false;
        return _this;
    }
    Object.defineProperty(LazyCompView.prototype, "lazyGroupIndex", {
        get: function () {
            return this._lazyGroupIndex;
        },
        set: function (value) {
            this._lazyGroupIndex = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Set the model of component to have access to all parameters.
     * @param pModel MODEL of component
     */
    LazyCompView.prototype.initialize = function (config) {
        if (!this.mainContainer) {
            this.mainContainer = new pixi_js_1.Container();
            this.gameContainerManager.addChild(this.mainContainer);
        }
        if (this.initialized || !this.isGroupReady()) {
            return;
        }
        this.updateFlag();
        this.setMainContainerName(config);
        this.createElements(config);
        this.layoutElements();
        this.registerEvents();
        this.initialized = true;
    };
    LazyCompView.prototype.isGroupReady = function () {
        if (this.lazyGroupIndex) {
            return this.assetLoader.isResourceReady(this.lazyGroupIndex);
        }
        return true;
    };
    /**
     * Correct the flag on initialize state.
     *
     * @protected
     * @memberof LazyCompView
     */
    LazyCompView.prototype.updateFlag = function () {
        if (this.viewport.gameOrientation === Viewport_1.Orientation.BOTH) {
            if (!this.assetLoader.hasGroup(ResourceConfig_1.ResourceConfig.LANDSCAPE_VIEW) && !this.assetLoader.hasGroup(ResourceConfig_1.ResourceConfig.PORTRAIT_VIEW)) { //not enable lazy load
                this.isPortraitViewLoaded = true;
                this.isLandScapeViewLoaded = true;
            }
            else if (this.viewport.orientation === Viewport_1.Orientation.PORTRAIT) {
                this.isPortraitViewLoaded = true;
            }
            else {
                this.isLandScapeViewLoaded = true;
            }
        }
        else if (this.viewport.orientation === Viewport_1.Orientation.PORTRAIT) {
            this.isPortraitViewLoaded = true;
        }
        else {
            this.isLandScapeViewLoaded = true;
        }
    };
    /**
     * Resize content after screen dimensions changed
     */
    LazyCompView.prototype.layoutElements = function () {
        if (this.viewport.gameOrientation === Viewport_1.Orientation.PORTRAIT) {
            this.changeToPortraitLayout();
        }
        else if (this.viewport.gameOrientation === Viewport_1.Orientation.LANDSCAPE) {
            this.changeToLandscapeLayout();
        }
        else if (this.viewport.isPortraitMode) {
            this.changeToPortraitLayout();
        }
        else {
            this.changeToLandscapeLayout();
        }
    };
    LazyCompView.prototype.changeToPortraitLayout = function () {
        this.setupPortraitView();
        if (this.isPortraitViewReady) {
            this.portraitLayout();
        }
        if (this.isLandScapeViewReady) {
            this.updateLandScapeLayout();
        }
    };
    LazyCompView.prototype.changeToLandscapeLayout = function () {
        this.setupLandscapeView();
        if (this.isLandScapeViewReady) {
            this.landscapeLayout();
        }
        if (this.isPortraitViewReady) {
            this.updatePortraitLayout();
        }
    };
    /**
     * Method where we set position, scale, visibility, textures ext. for portrait mode.
     */
    LazyCompView.prototype.portraitLayout = function () {
        _super.prototype.portraitLayout.call(this);
    };
    /**
     * Update landscape related object when change to portrait mode.
     *
     * @memberof CompView
     */
    LazyCompView.prototype.updateLandScapeLayout = function () {
        // do something
    };
    /**
     * Method where we set position, scale, visibility, textures ext. for landscape mode.
     */
    LazyCompView.prototype.landscapeLayout = function () {
        _super.prototype.landscapeLayout.call(this);
    };
    /**
     * Update portrait related object when change to portrait mode.
     *
     * @memberof CompView
     */
    LazyCompView.prototype.updatePortraitLayout = function () {
        // do something
    };
    /**
     * Triggered when landscape assets is ready.
     *
     * @param {boolean} [shouldInitView=true]
     * @returns {void}
     * @memberof CompView
     */
    LazyCompView.prototype.onLandscapeViewLoaded = function (shouldInitView) {
        if (shouldInitView === void 0) { shouldInitView = true; }
        this.isLandScapeViewLoaded = true;
        if (!shouldInitView) {
            return;
        }
        this.setupLandscapeView();
    };
    /**
     * Triggered when portrait assets is ready.
     *
     * @param {boolean} [shouldInitView=true]
     * @returns {void}
     * @memberof CompView
     */
    LazyCompView.prototype.onPortraitViewLoaded = function (shouldInitView) {
        if (shouldInitView === void 0) { shouldInitView = true; }
        this.isPortraitViewLoaded = true;
        if (!shouldInitView) {
            return;
        }
        this.setupPortraitView();
    };
    /**
     * Method of initialize the landscape view that ensure the view only setup for once.
     *
     * @private
     * @memberof CompView
     */
    LazyCompView.prototype.setupLandscapeView = function () {
        if (!this.isLandScapeViewReady && this.isLandScapeViewLoaded) {
            if (!this.viewport.isPortraitMode) {
                this.initLandscapeView();
                this.isLandScapeViewReady = true;
                if (this.viewport.isPortraitMode) {
                    this.updateLandScapeLayout();
                }
            }
        }
    };
    /**
     * Method where we setup the landscape view once the related assets is ready.
     *
     * @protected
     * @memberof CompView
     */
    LazyCompView.prototype.initLandscapeView = function () {
        // do something
    };
    /**
     * Method of initialize the portrait view that ensure the view only setup for once.
     *
     * @private
     * @memberof CompView
     */
    LazyCompView.prototype.setupPortraitView = function () {
        if (!this.isPortraitViewReady && this.isPortraitViewLoaded) {
            if (this.viewport.isPortraitMode) {
                this.initPortraitView();
                if (!this.viewport.isPortraitMode) {
                    this.updatePortraitLayout();
                }
                this.isPortraitViewReady = true;
            }
        }
    };
    /**
     * Method where we setup the portrait view once the related assets is ready.
     *
     * @protected
     * @memberof CompView
     */
    LazyCompView.prototype.initPortraitView = function () {
        // do something
    };
    /**
     * Invoked when specific group loaded.
     *
     * @param {string} stateName additional information for initialize UI
     * @memberof LazyCompView
     */
    LazyCompView.prototype.setupLazyAssets = function (stateName) {
        //
    };
    var _a;
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof AssetLoader_1.AssetLoader !== "undefined" && AssetLoader_1.AssetLoader) === "function" && _a || Object)
    ], LazyCompView.prototype, "assetLoader", void 0);
    return LazyCompView;
}(CompView_1.CompView));
exports.LazyCompView = LazyCompView;


/***/ }),
/* 380 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var Translator_1 = __webpack_require__(25);
var DialogView_1 = __webpack_require__(220);
var DialogConfig_1 = __webpack_require__(223);
var TransitionSceneController_1 = __webpack_require__(731);
var DialogController = /** @class */ (function (_super) {
    __extends(DialogController, _super);
    function DialogController(view) {
        var _this = _super.call(this, view) || this;
        _this.view = view;
        _this.view.dialogClosedSignal.add(_this.onDialogClosed, _this);
        return _this;
    }
    DialogController.prototype.init = function (stateData) {
        var config = this.gameConfig.getConfig(DialogConfig_1.DialogConfig);
        if (this.view != undefined) {
            this.view.initialize(config);
        }
        this.finishStateAction();
    };
    DialogController.prototype.onDialogClosed = function () {
        this.finishStateAction();
    };
    var _a, _b, _c;
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof DialogConfig_1.DialogConfig !== "undefined" && DialogConfig_1.DialogConfig) === "function" && _a || Object)
    ], DialogController.prototype, "config", void 0);
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_b = typeof Translator_1.Translator !== "undefined" && Translator_1.Translator) === "function" && _b || Object)
    ], DialogController.prototype, "translator", void 0);
    DialogController = __decorate([
        __param(0, es5_1.Inject),
        __metadata("design:paramtypes", [typeof (_c = typeof DialogView_1.DialogView !== "undefined" && DialogView_1.DialogView) === "function" && _c || Object])
    ], DialogController);
    return DialogController;
}(TransitionSceneController_1.TransitionSceneController));
exports.DialogController = DialogController;


/***/ }),
/* 381 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var AssetLoader_1 = __webpack_require__(54);
var ResourceConfig_1 = __webpack_require__(62);
var CompController_1 = __webpack_require__(43);
var TsMap_1 = __webpack_require__(2);
/**
 * LazyCompController enables lazy load feature.
 *
 */
var LazyCompController = /** @class */ (function (_super) {
    __extends(LazyCompController, _super);
    function LazyCompController(view, lazyGroupIndex) {
        var _this = _super.call(this, view) || this;
        _this._waitGroupIndex = _this.getWaitGroupIndex();
        _this.view = view;
        _this.setLazyGroupIndex(lazyGroupIndex);
        return _this;
    }
    /**
     * need to wait group Index,
     * ex:{
     * 		view: set group
     * 			{
     * 				assetKey : 'symbols',
     * 				assetURL : 'assets/animations/symbols.json'
     * 				group : ResourceConfig.MAIN_GAME
     * 			},
     * 			{
     * 				assetKey : 'freeSpinSymbols',
     * 				assetURL : 'assets/animations/freeSpinSymbols.json'
     * 				group : SlotResourceConfig.FREE_GAME
     * 			}
     *
     * 		controller: override getWaitGroupIndex
     * 			protected getWaitGroupIndex (): Array<number> {
     * 				return [ ResourceConfig.MAIN_GAME, SlotResourceConfig.FREE_GAME ];
     * 			}
     * }
     */
    LazyCompController.prototype.getWaitGroupIndex = function () {
        //TODO
        return null;
    };
    LazyCompController.prototype.setLazyGroupIndex = function (value) {
        this.lazyGroupIndex = value;
        if (this.view) {
            this.view.lazyGroupIndex = this.lazyGroupIndex;
        }
    };
    Object.defineProperty(LazyCompController.prototype, "loaderList", {
        /**
         * List of assets that will be loaded for this component.
         * The format of assets should be in the next format:
         * {
         *			assetKey 	: 'symbols',
         *			assetURL	: 'assets/animations/symbols.json'
         *	}
         * @return list of assets needed for this component
         */
        get: function () {
            var _this = this;
            var assetsList = new Array();
            var config = this.getConfigAsset();
            if (this.view != undefined) {
                assetsList = this.view.getAssetsList();
                assetsList.forEach(function (asset) {
                    asset.group = _this.getGroupIndex(asset);
                });
            }
            if (config.assetKey != undefined) {
                assetsList.push(config);
            }
            return assetsList;
        },
        enumerable: true,
        configurable: true
    });
    LazyCompController.prototype.getGroupIndex = function (asset) {
        if (asset.group !== undefined && asset.group > ResourceConfig_1.ResourceConfig.MAIN_GAME) {
            return asset.group;
        }
        else if (this.lazyGroupIndex !== undefined && !Array.isArray(this.lazyGroupIndex)) {
            return this.lazyGroupIndex || ResourceConfig_1.ResourceConfig.MAIN_GAME;
        }
        else {
            return ResourceConfig_1.ResourceConfig.MAIN_GAME;
        }
    };
    /**
     * When controller state need to wait target resoure group
     * @param groupIdx ex : SlotResourceConfig.FREE_GAME
     */
    LazyCompController.prototype.waitTargetGroupResoure = function (groupIdx) {
        var _this = this;
        if (!this._waitGroupIndex || this._waitGroupIndex.indexOf(groupIdx) == -1) {
            return Promise.resolve();
        }
        var loaderState = this.assetLoader.isLazyResourceReady();
        if (loaderState === AssetLoader_1.AssetLoaderState.DONE) {
            this._waitGroupIndex.splice(this._waitGroupIndex.indexOf(groupIdx), 1);
            return Promise.resolve();
        }
        else if (loaderState === AssetLoader_1.AssetLoaderState.ERROR) {
            this.assetLoader.errorHandleService.onReceiveError({ code: '-2' });
            return Promise.reject();
        }
        else {
            return new Promise(function (resolve) {
                if (_this.resolveArray) {
                    _this.resolveArray.set(groupIdx, resolve);
                }
                else {
                    _this.resolveArray = new TsMap_1.TsMap();
                    _this.resolveArray.set(groupIdx, resolve);
                }
            });
        }
    };
    /**
     * Triggered when custom group index is ready.
     *
     * @protected
     * @memberof CompController
     */
    LazyCompController.prototype.onGroupCompleted = function (groupIdx) {
        if (!this.view) {
            return;
        }
        if (this.lazyGroupIndex && this.lazyGroupIndex === groupIdx) {
            this.view.setupLazyAssets(this.currentStateName);
        }
        if (this._waitGroupIndex && this._waitGroupIndex.indexOf(groupIdx) > -1 && this.resolveArray && this.resolveArray.get(groupIdx)) {
            this._waitGroupIndex.splice(this._waitGroupIndex.indexOf(groupIdx), 1);
            var resolve = this.resolveArray.get(groupIdx);
            resolve();
            this.resolveArray.delete(groupIdx);
        }
    };
    LazyCompController.prototype.onGroupProgress = function (groupIdx, ratio) {
        //TODO
    };
    /**
     * Triggered when the group LANDSCAPE_VIEW is ready.
     *
     * @returns {void}
     * @memberof LazyCompController
     */
    LazyCompController.prototype.onLandscapeViewLoaded = function () {
        if (!this.view) {
            return;
        }
        this.view.onLandscapeViewLoaded(this.currentStateName != undefined);
    };
    /**
     * Triggered when the group PORTRAIT_VIEW is ready.
     *
     * @returns {void}
     * @memberof LazyCompController
     */
    LazyCompController.prototype.onPortraitViewLoaded = function () {
        if (!this.view) {
            return;
        }
        this.view.onPortraitViewLoaded(this.currentStateName != undefined);
    };
    return LazyCompController;
}(CompController_1.CompController));
exports.LazyCompController = LazyCompController;


/***/ }),
/* 382 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var MiniSignal = __webpack_require__(3);
var pixi_js_1 = __webpack_require__(4);
var Helper_1 = __webpack_require__(5);
var SlotCompView_1 = __webpack_require__(226);
var Viewport_1 = __webpack_require__(6);
var Animation_1 = __webpack_require__(26);
var WebTextField_1 = __webpack_require__(35);
// TODO: refacter
var SlotFreeSpinsView = /** @class */ (function (_super) {
    __extends(SlotFreeSpinsView, _super);
    function SlotFreeSpinsView() {
        var _this = _super.call(this) || this;
        _this.introOutroAnimationTrack = 0;
        _this.idleAnimationTrack = 1;
        _this.pickAnimationTrack = 2;
        _this.beforePickSignal = new MiniSignal();
        _this.pickSignal = new MiniSignal();
        _this.outroSignal = new MiniSignal();
        _this.freeSpinsIntroSignal = new MiniSignal();
        return _this;
    }
    /**
     * The method where we create and add elements to the view
     */
    SlotFreeSpinsView.prototype.createElements = function (config) {
        var _this = this;
        this.visible = false;
        if (config != undefined) {
            this.config = config;
            if (this.config.backgroundAsset != Helper_1.Helper.EMPTY) {
                this.backgroundAnimation = Animation_1.Animation.createSpineAnimation(this.config.backgroundAsset);
                this.addChild(this.backgroundAnimation);
            }
            if (this.config.pickAsset != Helper_1.Helper.EMPTY) {
                this.pickAnimation = Animation_1.Animation.createSpineAnimation(this.config.pickAsset);
                this.pickAnimation.scale.set(0.5, 0.5);
                this.pickAnimation.position.set(this.viewport.getAlignedPoint(Viewport_1.ViewportAlign.CENTER_MIDDLE).x, 0);
                this.pickAnimation.skeleton.slots.forEach(function (value, i) {
                    _this.pickAnimation.slotContainers[i].name = value.data.name;
                });
                this.pickAnimation.slotContainers.forEach(function (container) {
                    if (container.name.indexOf(_this.config.pickNamePrefix + _this.config.pickName) >= 0) {
                        container.on('pointertap', _this.onPickSelect, _this);
                        container.interactive = true;
                    }
                });
                this.pickAnimation.update(0);
                this.addChild(this.pickAnimation);
            }
            this.enableSelection(false);
        }
    };
    SlotFreeSpinsView.prototype.setPicks = function (picks) {
        this.picks = picks;
    };
    SlotFreeSpinsView.prototype.setPickLabels = function () {
        var _this = this;
        var titleLabel = new WebTextField_1.WebTextField(this.config.titleFont);
        titleLabel.scale.set(1, -1);
        titleLabel.anchor = new pixi_js_1.Point(0.5, 0.5);
        titleLabel.position.set(this.config.titleLabelOffsetX, this.config.titleLabelOffsetY);
        var titleSlotIndex = this.pickAnimation.skeleton.findSlotIndex(this.config.titleSlotName);
        var titleSlotContainer = this.pickAnimation.slotContainers[titleSlotIndex];
        titleSlotContainer.addChild(titleLabel);
        this.picks.forEach(function (key, i) {
            var fontStyle = _this.config.pickFont;
            fontStyle.name = fontStyle.key = key;
            var pickLabel = new WebTextField_1.WebTextField(fontStyle);
            var slotIndex = _this.pickAnimation.skeleton.findSlotIndex(_this.config.pickNamePrefix + _this.config.pickName + (i + 1).toString());
            var slotContainer = _this.pickAnimation.slotContainers[slotIndex];
            pickLabel.scale.set(1, -1);
            pickLabel.anchor = new pixi_js_1.Point(0.5, 0.5);
            pickLabel.position.set(_this.config.pickLabelOffsetX, _this.config.pickLabelOffsetY);
            slotContainer.addChild(pickLabel);
        });
    };
    SlotFreeSpinsView.prototype.onPickSelect = function (e) {
        var _this = this;
        var target = e.target;
        var pickNumber = target.name.match(/\d+/)[0];
        var pickIndex = parseInt(pickNumber) - 1;
        this.beforePickSignal.dispatch();
        this.pickAnimation.state.setAnimation(this.pickAnimationTrack, this.config.pickAnimation + pickNumber, false);
        this.pickAnimation.state.tracks[this.pickAnimationTrack].listener = {
            complete: function () {
                _this.pickSignal.dispatch(_this.picks[pickIndex]);
            }
        };
        this.enableSelection(false);
    };
    SlotFreeSpinsView.prototype.playIntro = function () {
        this.resetAnimationState();
        this.visible = true;
        if (this.backgroundAnimation) {
            this.backgroundAnimation.state.setAnimation(this.idleAnimationTrack, this.config.backgroundIntroAnimation, true);
        }
        this.pickAnimation.state.setEmptyAnimation(this.introOutroAnimationTrack, 0);
        this.pickAnimation.state.setEmptyAnimation(this.idleAnimationTrack, 0);
        this.pickAnimation.state.setAnimation(this.introOutroAnimationTrack, this.config.introAnimation, false);
        this.pickAnimation.state.setAnimation(this.idleAnimationTrack, this.config.idleAnimation, true);
        this.pickAnimation.updateTransform();
        this.pickAnimation.update(0);
        this.setPickLabels();
    };
    SlotFreeSpinsView.prototype.enableSelection = function (enabled) {
        this.mainContainer.interactive = this.mainContainer.interactiveChildren = enabled;
    };
    SlotFreeSpinsView.prototype.playOutro = function () {
        if (this.backgroundAnimation) {
            this.backgroundAnimation.state.setAnimation(this.introOutroAnimationTrack, this.config.backgroundOutroAnimation, false);
        }
        this.pickAnimation.state.setAnimation(this.introOutroAnimationTrack, this.config.outroAnimation, false);
        this.pickAnimation.state.tracks[this.introOutroAnimationTrack].listener = {
            complete: this.onOutroComplete.bind(this)
        };
    };
    SlotFreeSpinsView.prototype.onOutroComplete = function () {
        if (this.backgroundAnimation) {
            this.backgroundAnimation.state.clearListeners();
        }
        this.pickAnimation.state.clearListeners();
        this.visible = false;
        this.resetAnimationState();
        this.outroSignal.dispatch();
    };
    SlotFreeSpinsView.prototype.resetAnimationState = function () {
        if (this.pickAnimation != undefined) {
            this.pickAnimation.state.clearTracks();
            this.pickAnimation.state.clearListeners();
            this.pickAnimation.skeleton.setToSetupPose();
        }
        if (this.backgroundAnimation != undefined) {
            this.backgroundAnimation.state.clearTracks();
            this.backgroundAnimation.state.clearListeners();
            this.backgroundAnimation.skeleton.setToSetupPose();
        }
    };
    return SlotFreeSpinsView;
}(SlotCompView_1.SlotCompView));
exports.SlotFreeSpinsView = SlotFreeSpinsView;


/***/ }),
/* 383 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var tween_js_1 = __webpack_require__(47);
var NMath_1 = __webpack_require__(65);
var SimpleTween_1 = __webpack_require__(27);
var SimpleTimer_1 = __webpack_require__(15);
var SoundManager_1 = __webpack_require__(13);
var ReelsEnums_1 = __webpack_require__(37);
var SlotSoundConfig_1 = __webpack_require__(36);
var SpinBase_1 = __webpack_require__(384);
var Spin = /** @class */ (function (_super) {
    __extends(Spin, _super);
    function Spin() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.key = 'SPIN';
        return _this;
    }
    Spin.prototype.setup = function (config) {
        this.config = config;
    };
    Spin.prototype.run = function (data) {
        var _this = this;
        this.stopRequested = false;
        this.reelModel.currentReelIndex = 0;
        this.spinDirection = data.spinDirection;
        return new Promise(function (resolve) {
            _this._activeReels = data.reels;
            _this.soundManager.play(SlotSoundConfig_1.SlotSoundConfig.reelSpin + "0" + NMath_1.NMath.randomInt(1, 5), SoundManager_1.AudioTrackName.EFFECT);
            for (var i = 0; i < _this.activeReels.length; i++) {
                var reelId = _this.activeReels[i];
                new SimpleTimer_1.SimpleTimer(_this.reelModel.currentReelStrips[reelId].config.startReelDelay || 0, _this.spin.bind(_this, reelId));
            }
            resolve();
        });
    };
    /**
     * In some situation, we have to tween down overlay with base reel view.
     *
     * @protected
     * @param {number} layer
     * @param {number} reelIndex
     * @memberof Spin
     */
    Spin.prototype.tweenOverlayDown = function (layer, reelIndex) {
        var _this = this;
        var objects = this.view.getObjectsAtOverlay(layer, reelIndex);
        var symbolsOnReel = this.reelModel.currentReelStrips[reelIndex].config.symbolsOnReel;
        var layerLastOverlayReel = 0;
        for (var i = 0; i < this.reelModel.currentReelStrips.length; i++) {
            if (this.view.getObjectsAtOverlay(layer, i).length > 0) {
                layerLastOverlayReel = i;
            }
        }
        objects.forEach(function (object) {
            var position = {
                reelIndex: +object.name.split(',')[0],
                symbolIndex: +object.name.split(',')[1],
            };
            var tween = new SimpleTween_1.SimpleTween({ y: object.y })
                .to({ y: object.y + _this.reelModel.generalSymbolConfig.height * symbolsOnReel }, _this.config.duration * symbolsOnReel)
                .easing(tween_js_1.Easing.Linear.None)
                .onUpdate(function (coords) {
                object.y = coords.y;
            })
                .onComplete(function () {
                _this.view.hideOverlaySymbol(layer, position);
                if (reelIndex == layerLastOverlayReel) {
                    _this.view.cleanOverlays([layer]);
                }
            });
            tween.start();
        });
    };
    Spin.prototype.spin = function (reelIndex) {
        var _this = this;
        this.animStep(reelIndex);
        //// TODO
        if (this.config.OverlayLayers) {
            this.config.OverlayLayers.forEach(function (layer) {
                if (layer != _this.view.baseOverlayIndex) {
                    _this.tweenOverlayDown(layer, reelIndex);
                }
            });
        }
    };
    Spin.prototype.animStep = function (reelId) {
        if (this.reelModel.shouldMoveLastSymbolToTop(reelId, this.spinDirection)) {
            var symbolData = this.reelModel.createNextSymbol(reelId, this.spinDirection);
            this.view.moveLastSymbolToTop(reelId, symbolData, ReelsEnums_1.SymbolState.BLUR, this.spinDirection);
        }
        this.tweenSymbolsDown([reelId], {
            duration: this.config.duration,
            distanceY: this.reelModel.generalSymbolConfig.height,
            easing: tween_js_1.Easing.Linear.None,
            onComplete: this.tweenComplete.bind(this)
        }, this.spinDirection);
    };
    Spin.prototype.onStateChanged = function (stateName) {
        //
    };
    Spin.prototype.tweenComplete = function (reelId) {
        if (this.reelModel.currentReelStrips[reelId].stopRequested) {
            this.reelModel.onTweenSymbolComplete.dispatch(reelId);
        }
        else {
            this.animStep(reelId);
        }
    };
    return Spin;
}(SpinBase_1.SpinBase));
exports.Spin = Spin;


/***/ }),
/* 384 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var SimpleTween_1 = __webpack_require__(27);
var IReelsConfig_1 = __webpack_require__(66);
var ReelActionModel_1 = __webpack_require__(228);
var SpinBase = /** @class */ (function (_super) {
    __extends(SpinBase, _super);
    function SpinBase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(SpinBase.prototype, "activeReels", {
        get: function () {
            return this._activeReels.slice(this.reelModel.currentReelIndex, this._activeReels.length);
        },
        enumerable: true,
        configurable: true
    });
    SpinBase.prototype.setup = function (config) {
        this.config = config;
    };
    SpinBase.prototype.animStep = function (reelId) {
        //
    };
    SpinBase.prototype.run = function (data) {
        return Promise.resolve();
    };
    SpinBase.prototype.getSymbolHeightByName = function (symbolName) {
        if (this.config.symbolDefinition.specialSymbol[symbolName]) {
            return this.config.symbolDefinition.specialSymbol[symbolName].height;
        }
        else {
            return this.config.symbolDefinition.generalSymbol.height;
        }
    };
    SpinBase.prototype.tweenSymbolsDown = function (activeReels, config, spinDirection) {
        var _this = this;
        var startPointMap = {};
        var _loop_1 = function () {
            var reelId = activeReels[i];
            var arr = [];
            var size = this_1.reelModel.getReelSymbols(reelId);
            for (var symbolIndex = 0; symbolIndex < size; symbolIndex++) {
                arr.push(this_1.reelModel.getSymbolDataByIndex(reelId, symbolIndex).posY);
            }
            startPointMap[reelId] = arr;
            var tween = new SimpleTween_1.SimpleTween({ y: 0 })
                .to({ y: this_1.reelModel.generalSymbolConfig.height }, config.duration)
                .easing(config.easing)
                .onUpdate(function (coords) {
                var size = _this.reelModel.getReelSymbols(reelId);
                for (var symbolIndex = 0; symbolIndex < size; symbolIndex++) {
                    var symbolData = _this.reelModel.getSymbolDataByIndex(reelId, symbolIndex);
                    var startPoint = startPointMap[reelId][symbolIndex];
                    symbolData.posY = (spinDirection == IReelsConfig_1.SpinDirection.SpinDown) ? startPoint + Math.round(coords.y) : startPoint - Math.round(coords.y);
                    _this.view.tweenSymbolsUpdate(reelId, symbolIndex, symbolData.posY);
                }
            })
                .onComplete(function () {
                config.onComplete(reelId);
            });
            tween.start();
        };
        var this_1 = this;
        for (var i = 0; i < activeReels.length; i++) {
            _loop_1();
        }
    };
    return SpinBase;
}(ReelActionModel_1.ReelActionModel));
exports.SpinBase = SpinBase;


/***/ }),
/* 385 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var NMath_1 = __webpack_require__(65);
var MiniSignal = __webpack_require__(3);
/**
 * Class contains the logic for single reel
 */
var ReelStripModel = /** @class */ (function () {
    function ReelStripModel() {
        this.countTopExtraSymbol = 1;
        this.countBottomExtraSymbol = 1;
        /**
         * If reel strip didn't come from server and config,
         * it will generate fake strip,
         * the length of the fake strip will equals to defaultStripLength.
         */
        this.defaultStripLength = 30;
        /**
         * The index of reel strip of symbols that we show right now.
         */
        this._reelsStripIndex = 0;
        /**
         * How many outcome symbols we have already in reel
         */
        this.outcomeSymbolsCounter = 0;
        this.spinDownTweenCount = 0;
        this.currentTweenCount = 0;
        this.setSymbolNameSignal = new MiniSignal();
        this.moveLastSymbolToTopSignal = new MiniSignal();
        this.reelStopedSignal = new MiniSignal();
        this.stopRequestedSignal = new MiniSignal();
        this.spinTweenUpdateSignal = new MiniSignal();
        this.dropAnimationSignal = new MiniSignal();
        this.hideBlurSymbolSignal = new MiniSignal(); // add comment
        this.reset();
    }
    Object.defineProperty(ReelStripModel.prototype, "symbolsOutcome", {
        get: function () {
            return this._symbolsOutcome;
        },
        set: function (symbolsOutcome) {
            this._symbolsOutcome = symbolsOutcome;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReelStripModel.prototype, "allStripSymbols", {
        get: function () {
            return this._allStripSymbols;
        },
        /**
         * setter for _allStripSymbols
         * if stripSymbols didn't exist, try create strips from predefined reel in config,
         * if there is no strips been predefined, create it randomly based on rangeSymbols.
         */
        set: function (stripSymbols) {
            this._allStripSymbols = new Array();
            if (stripSymbols != undefined) {
                this._allStripSymbols = stripSymbols;
            }
            else {
                if (this.config.stripOrder != undefined) {
                    this._allStripSymbols = this.config.stripOrder;
                }
                else {
                    for (var j = 0; j < this.defaultStripLength; j++) {
                        this._allStripSymbols.push(this.config.rangeSymbols[NMath_1.NMath.randomInt(0, this.config.rangeSymbols.length - 1)]);
                    }
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReelStripModel.prototype, "config", {
        get: function () {
            return this._config;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReelStripModel.prototype, "symbolConfig", {
        get: function () {
            return this._symbolConfig;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReelStripModel.prototype, "reelsStripIndex", {
        get: function () {
            return this._reelsStripIndex;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReelStripModel.prototype, "id", {
        get: function () {
            return this._id;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReelStripModel.prototype, "lowerBound", {
        /**
         * The lower bound offsetY of the strip view. For multiple symbol height, use this value to determine should we move last symbol to top.
         *
         * @readonly
         * @type {number}
         * @memberof ReelStripModel
         */
        get: function () {
            return this.config.symbolsOnReel * this.symbolConfig.generalSymbol.height;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReelStripModel.prototype, "upperBoundOfTopExtraY", {
        get: function () {
            return -this.countTopExtraSymbol * this.symbolConfig.generalSymbol.height;
        },
        enumerable: true,
        configurable: true
    });
    ReelStripModel.prototype.reset = function () {
        this.outcomeSymbolsCounter = 0;
        this.stopRequested = false;
    };
    ReelStripModel.prototype.setConfig = function (config, symbolConfig) {
        this._id = config.id;
        this._config = config;
        this._symbolConfig = symbolConfig;
        this.countTopExtraSymbol = (config.countTopExtraSymbol !== undefined) ? config.countTopExtraSymbol : 1;
        this.countBottomExtraSymbol = (config.countBottomExtraSymbol !== undefined) ? config.countBottomExtraSymbol : 1;
        this.totalStageSymbolsCount = this.countTopExtraSymbol + this.config.symbolsOnReel + this.countBottomExtraSymbol;
    };
    /**
     * Filling in the symbols according to strips
     */
    ReelStripModel.prototype.initReel = function (symbolsOutcome) {
        this.reelSymbols = new Array();
        this.setRandomReelsStripIndex();
        var offSetY = 0;
        for (var i = this.countTopExtraSymbol - 1; i >= 0; i--) {
            var name = this.nextSymbol();
            var symbolheight = this.getSymbolHeightByName(name);
            offSetY -= symbolheight;
            this.reelSymbols.push(new SymbolData(name, offSetY));
        }
        this.reelSymbols.reverse();
        offSetY = 0;
        for (var i = 0; i < this.totalStageSymbolsCount - this.countTopExtraSymbol; i++) {
            var name = (symbolsOutcome[i]) ? symbolsOutcome[i] : this.nextSymbol();
            var symbolheight = this.getSymbolHeightByName(name);
            this.reelSymbols.push(new SymbolData(name, offSetY));
            offSetY += symbolheight;
        }
    };
    ReelStripModel.prototype.getSymbolHeightByName = function (symbolName) {
        if (this.symbolConfig.specialSymbol[symbolName]) {
            return this.symbolConfig.specialSymbol[symbolName].height;
        }
        else {
            return this.symbolConfig.generalSymbol.height;
        }
    };
    /**
     * Returns the next symbol from wholeStripSymbols.
     *
     * ex. this.allStripSymbols : [ 'A', 'K', 'Q', 'J', 'T','PIC1' ]
     *     spin_result : [ 'K', 'Q', 'J', 'T' ]
     * 	   nextSymbol is 'A'
     */
    ReelStripModel.prototype.nextSymbol = function () {
        if (this.allStripSymbols && this.allStripSymbols.length > 0) {
            this._reelsStripIndex--;
            if (this._reelsStripIndex < 0) {
                this.setRandomReelsStripIndex();
            }
            return this.allStripSymbols[this._reelsStripIndex];
        }
        return this.config.rangeSymbols[NMath_1.NMath.randomInt(0, this.config.rangeSymbols.length - 1)];
    };
    ReelStripModel.prototype.setRandomReelsStripIndex = function () {
        if (this.allStripSymbols && this.allStripSymbols.length > 0) {
            this._reelsStripIndex = NMath_1.NMath.randomInt(0, this.allStripSymbols.length - 1);
        }
    };
    /**
     * Remove the last element from reelSymbols and insert the new one at the beginning.
     * @return the symbol id of the next symbol in strip
     */
    ReelStripModel.prototype.createNextSymbol = function (name) {
        var data = new SymbolData(name, this.reelSymbols[0].posY - this.config.symbol.height);
        this.reelSymbols.pop();
        this.reelSymbols.unshift(data);
        return data;
    };
    /**
     * Set how many times should perform tween to complete spin down
     *
     * @memberof ReelStripModel
     */
    ReelStripModel.prototype.setTweenCount = function () {
        var firstSymbol = this.reelSymbols[0];
        var symbolOutcomeHeight = 0;
        for (var i = this.symbolsOutcome.length - 1; i >= 0; i--) {
            symbolOutcomeHeight += this.getSymbolHeightByName(this.symbolsOutcome[i]);
        }
        if (firstSymbol.posY < this.upperBoundOfTopExtraY) { // check is first element a N times height symbol.
            symbolOutcomeHeight += Math.abs(firstSymbol.posY - this.upperBoundOfTopExtraY);
        }
        this.spinDownTweenCount = symbolOutcomeHeight / this.symbolConfig.generalSymbol.height;
    };
    return ReelStripModel;
}());
exports.ReelStripModel = ReelStripModel;
var SymbolData = /** @class */ (function () {
    function SymbolData(symbolName, posY) {
        this.symbolName = symbolName;
        this.posY = posY;
    }
    return SymbolData;
}());
exports.SymbolData = SymbolData;


/***/ }),
/* 386 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ReelActionModel_1 = __webpack_require__(228);
var Spinning = /** @class */ (function (_super) {
    __extends(Spinning, _super);
    function Spinning() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.key = 'SPINNING';
        return _this;
    }
    Spinning.prototype.run = function (data) {
        return Promise.resolve();
    };
    return Spinning;
}(ReelActionModel_1.ReelActionModel));
exports.Spinning = Spinning;


/***/ }),
/* 387 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var SimpleTimer_1 = __webpack_require__(15);
var SoundManager_1 = __webpack_require__(13);
var GlobalDispatcher_1 = __webpack_require__(7);
var ReelsEnums_1 = __webpack_require__(37);
var IReelsConfig_1 = __webpack_require__(66);
var SlotSoundConfig_1 = __webpack_require__(36);
var ReelsConfig_1 = __webpack_require__(52);
var SpinBase_1 = __webpack_require__(384);
var SpinDown = /** @class */ (function (_super) {
    __extends(SpinDown, _super);
    function SpinDown() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.key = 'SPIN_DOWN';
        _this.stoppedReelCount = 0;
        _this.currentSpinningReelsCounter = 0;
        _this.currentActiveReelIndex = 0;
        _this.isAnticipating = false;
        _this.isRunning = false;
        return _this;
        //#endregion EFFECTS
    }
    Object.defineProperty(SpinDown.prototype, "activeReels", {
        get: function () {
            return this._activeReels;
        },
        enumerable: true,
        configurable: true
    });
    SpinDown.prototype.setup = function (config) {
        this.config = config;
        this.reelModel.onTweenSymbolComplete.add(this.onSpinTweenComplete.bind(this));
        this.reelModel.onFastStopReels.add(this.onFastStopReels.bind(this));
    };
    SpinDown.prototype.addEventListeners = function () {
        //
    };
    SpinDown.prototype.run = function (data) {
        var _this = this;
        this.stoppedReelCount = 0;
        this.isRunning = true;
        this.currentSpinningReelsCounter = data.reels.length;
        this.stopRequestCounter = data.reels.length;
        this.currentActiveReelIndex = 0;
        this.spinDirection = data.spinDirection;
        return new Promise(function (resolve, reject) {
            _this.resolveForStop = resolve;
            _this.pendingForStopReels = data.reels;
            if (_this.reelModel.isFastStopPending) {
                _this.fastStopReels();
            }
            else {
                _this.reelModel.currentReelStrips[data.reels[0]].stopRequested = true;
            }
        });
    };
    SpinDown.prototype.fastStopReels = function () {
        var _this = this;
        this.pendingForStopReels.forEach(function (reelId) {
            _this.reelModel.currentReelStrips[reelId].stopRequested = true;
            _this.currentActiveReelIndex++;
        });
    };
    SpinDown.prototype.getReelStopDelay = function (reelId) {
        var anticipationDelay = this.isAnticipationReel(reelId, true) ? this.config.anticipationData.anticipationDelay : 0;
        var stopReelNormalDelay = this.config.stopReelNormalDelay[reelId];
        return stopReelNormalDelay + anticipationDelay;
    };
    /**
     * recurvise triggered when every time tween down completed.
     *
     * @protected
     * @param {number} reelId - current spining reelId
     * @memberof SpinDown
     */
    SpinDown.prototype.spinDown = function (reelId) {
        var stripModel = this.reelModel.currentReelStrips[reelId];
        var counter = stripModel.outcomeSymbolsCounter;
        var index = (this.spinDirection == IReelsConfig_1.SpinDirection.SpinDown) ? (stripModel.symbolsOutcome.length - 1) - counter : counter;
        if (stripModel.currentTweenCount < this.reelModel.countTopExtraSymbol + stripModel.spinDownTweenCount) {
            // trigger next reel to stop
            if (stripModel.currentTweenCount == 0) {
                if (this.currentActiveReelIndex < this.pendingForStopReels.length - 1) {
                    var nextReelDelay = this.getReelStopDelay(this.getNextReelId(reelId));
                    this.currentActiveReelIndex++;
                    this.nextReelStopTimer = new SimpleTimer_1.SimpleTimer(nextReelDelay, this.stopNext.bind(this, reelId));
                }
            }
            if (stripModel.outcomeSymbolsCounter <= stripModel.symbolsOutcome.length && this.reelModel.shouldMoveLastSymbolToTop(reelId, this.spinDirection)) {
                var symbolName = index > -1 ? stripModel.symbolsOutcome[index] : stripModel.nextSymbol();
                var symbolData = this.reelModel.createNextSymbol(reelId, this.spinDirection, symbolName);
                this.view.moveLastSymbolToTop(reelId, symbolData, ReelsEnums_1.SymbolState.STATIC, this.spinDirection);
                stripModel.outcomeSymbolsCounter++;
            }
            var isCompleted = (stripModel.currentTweenCount == stripModel.spinDownTweenCount);
            var tweenDownConfig = {
                duration: (isCompleted) ? stripModel.config.stopTween.duration : stripModel.config.reelTween.duration,
                distanceY: stripModel.symbolConfig.generalSymbol.height,
                easing: (isCompleted) ? stripModel.config.stopTween.ease : stripModel.config.reelTween.ease,
                onComplete: this.tweenComplete.bind(this, reelId)
            };
            this.tweenSymbolsDown([reelId], tweenDownConfig, this.spinDirection);
            stripModel.currentTweenCount++;
        }
        else {
            this.currentReelStopped(reelId);
        }
    };
    SpinDown.prototype.tweenComplete = function (reelId) {
        this.spinDown(reelId);
    };
    SpinDown.prototype.stopNext = function (reelId) {
        var nextReelId = this.getNextReelId(reelId);
        if (this.reelModel.currentReelStrips[nextReelId]) {
            this.reelModel.currentReelStrips[nextReelId].stopRequested = true;
            this.stopRequestCounter--;
        }
    };
    /**
     * Hendler for spinning tween state completed.
     *
     * @protected
     * @param {number} reelId
     * @memberof SpinDown
     */
    SpinDown.prototype.onSpinTweenComplete = function (reelId) {
        this.reelModel.currentReelStrips[reelId].setTweenCount();
        this.reelModel.currentReelStrips[reelId].currentTweenCount = 0;
        this.reelModel.currentReelStrips[reelId].outcomeSymbolsCounter = 0;
        this.spinDown(reelId);
    };
    SpinDown.prototype.onFastStopReels = function () {
        if (this.isRunning) {
            if (this.nextReelStopTimer) {
                this.nextReelStopTimer.stop();
            }
            this.fastStopReels();
        }
    };
    SpinDown.prototype.currentReelStopped = function (reelId) {
        this.stoppedReelCount++;
        this.reelStoppedAction(reelId);
        if (this.stoppedReelCount === this.pendingForStopReels.length) {
            this.reelModel.onAllReelStopped.dispatch();
            this.resolveForStop();
            this.resolveForStop = null;
            this.isRunning = false;
        }
    };
    SpinDown.prototype.reelStoppedAction = function (reelId) {
        this.currentSpinningReelsCounter--;
        if (!this.reelModel.isLegalResponse) {
            return;
        }
        this.view.anticipateScatters(reelId, this.reelModel.scattersDropped);
        this.reelStoppedEffect(reelId);
        if (this.currentSpinningReelsCounter == 0) {
            this.stopAnticipate(reelId);
        }
        else {
            var nextReelId = this.getNextReelId(reelId);
            if (!this.reelModel.isFastStopPending && this.isAnticipationReel(nextReelId, false)) {
                this.triggerAnticipateReel(reelId, nextReelId);
                this.anticipationReelStoppedEffect(reelId);
            }
            else {
                this.stopAnticipate(reelId);
            }
            if (this.currentSpinningReelsCounter == 1) {
                if (!this.reelModel.isFastStopPending) {
                    //this.fastStopTimeout = true;
                }
            }
        }
    };
    SpinDown.prototype.getNextReelId = function (reelId) {
        return reelId + 1;
    };
    SpinDown.prototype.triggerAnticipateReel = function (currentReelId, nextReelId) {
        GlobalDispatcher_1.GlobalDispatcher.dispatchIntoExpectedStates(SpinDown.ANTICIPATE_REEL_NOTIFICATION, [
            'spinStop',
            'freeSpinsStop',
        ], currentReelId);
        this.view.anticipateReel(nextReelId);
        this.isAnticipating = true;
    };
    SpinDown.prototype.isAnticipationReel = function (reelId, preStop) {
        var scatterCount = this.countScatter(reelId);
        var reelSetIndex = this.reelModel.currentReelSetIndex;
        var symbolCountTrigger = this.config.anticipationData.modelData[reelSetIndex].anticipationSymbolCountTrigger;
        return (!this.reelModel.isFastStopPending && scatterCount >= symbolCountTrigger && this.isFeaturePossible(scatterCount, preStop));
    };
    SpinDown.prototype.countScatter = function (reelId) {
        var scatterCount = 0;
        for (var column = 0; column < reelId; column++) {
            for (var row = 0; row < this.reelModel.currentReelStrips[column].symbolsOutcome.length; row++) {
                if (this.reelModel.currentReelStrips[column].symbolsOutcome[row] == ReelsConfig_1.SymbolSet.SCATTER) {
                    scatterCount++;
                }
            }
        }
        return scatterCount;
    };
    SpinDown.prototype.stopAnticipate = function (reelId) {
        if (this.isAnticipating) {
            this.isAnticipating = false;
            GlobalDispatcher_1.GlobalDispatcher.dispatchIntoExpectedStates(SpinDown.ANTICIPATE_END_NOTIFICATION, [
                'spinStop',
                'freeSpinsStop',
            ], reelId);
            this.stopShaking();
            this.view.stopAnticipate();
        }
    };
    SpinDown.prototype.isFeaturePossible = function (scatterCount, preStop) {
        var reelSetIndex = this.reelModel.currentReelSetIndex;
        var symbolCountRequired = this.config.anticipationData.modelData[reelSetIndex].anticipationSymbolCountRequired;
        return symbolCountRequired - scatterCount <= (preStop ? this.stopRequestCounter : this.currentSpinningReelsCounter);
    };
    SpinDown.prototype.reelStoppedEffect = function (reelId) {
        this.soundManager.play(SlotSoundConfig_1.SlotSoundConfig.reelStopped + "0" + (reelId + 1), SoundManager_1.AudioTrackName.EFFECT);
        if (this.config.dropSymbols) {
            this.showDropAnimation(reelId);
        }
    };
    SpinDown.prototype.anticipationReelStoppedEffect = function (reelId) {
        this.startShaking(reelId);
    };
    //#region EFFECTS
    /**
     * Checking all symbols, are there any among them - dropSymbols from config
     */
    SpinDown.prototype.showDropAnimation = function (reelId) {
        var reel = this.reelModel.currentSymbolsOutcome[reelId];
        for (var j = 0; j < reel.length; j++) {
            if (this.config.dropSymbols.includes(reel[j])) {
                this.soundManager.play(SlotSoundConfig_1.SlotSoundConfig.scatter + "0" + (reelId + 1), SoundManager_1.AudioTrackName.EFFECT);
                this.view.symbolDropAnimation(reelId, j);
            }
        }
    };
    SpinDown.prototype.startShaking = function (reelId) {
        if (!this.reelModel.isShaking) {
            for (var i = 0; i <= reelId; i++) {
                this.reelModel.isShaking = this.view.playShaking(i);
            }
        }
        else {
            this.view.playShaking(reelId);
        }
    };
    SpinDown.prototype.stopShaking = function () {
        if (this.reelModel.isShaking) {
            this.view.stopShaking();
            this.reelModel.isShaking = false;
        }
    };
    SpinDown.ANTICIPATE_REEL_NOTIFICATION = 'anticipateReel';
    SpinDown.ANTICIPATE_END_NOTIFICATION = 'anticipateEnd';
    return SpinDown;
}(SpinBase_1.SpinBase));
exports.SpinDown = SpinDown;


/***/ }),
/* 388 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var MiniSignal = __webpack_require__(3);
var es5_1 = __webpack_require__(0);
var NMath_1 = __webpack_require__(65);
var BaseSymbol_1 = __webpack_require__(157);
var IReelsConfig_1 = __webpack_require__(66);
var ReelsEnums_1 = __webpack_require__(37);
var ReelStripView = /** @class */ (function () {
    function ReelStripView() {
        this._isZoomed = false;
        this.layerContainers = [];
        this.symbolAnimationCompleteSignal = new MiniSignal();
        this.mainContainer = new PIXI.Container();
        this.mainContainer.name = 'reelStrip';
    }
    Object.defineProperty(ReelStripView.prototype, "id", {
        get: function () {
            return this._id;
        },
        set: function (value) {
            this._id = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReelStripView.prototype, "config", {
        get: function () {
            return this._config;
        },
        set: function (value) {
            this._config = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReelStripView.prototype, "visible", {
        get: function () {
            return this.mainContainer.visible;
        },
        set: function (visible) {
            this.mainContainer.visible = visible;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReelStripView.prototype, "scale", {
        get: function () {
            return this.mainContainer.scale;
        },
        set: function (value) {
            this.mainContainer.scale = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReelStripView.prototype, "position", {
        get: function () {
            return this.mainContainer.position;
        },
        set: function (value) {
            this.mainContainer.position = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReelStripView.prototype, "alpha", {
        get: function () {
            return this.mainContainer.alpha;
        },
        set: function (value) {
            this.mainContainer.alpha = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReelStripView.prototype, "originalPosition", {
        get: function () {
            return this._originalPosition;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReelStripView.prototype, "isZoomed", {
        get: function () {
            return this._isZoomed;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReelStripView.prototype, "container", {
        get: function () {
            return this.mainContainer;
        },
        enumerable: true,
        configurable: true
    });
    ReelStripView.prototype.reelInit = function (reelStripModel) {
        this.reelStripModel = reelStripModel;
        this.config = reelStripModel.config;
        this.symbolConfig = reelStripModel.symbolConfig;
        var array = null;
        array = this.createSymbolArray(reelStripModel.countTopExtraSymbol)
            .concat(reelStripModel.symbolsOutcome)
            .concat(this.createSymbolArray(reelStripModel.countBottomExtraSymbol));
        this.totalSymbolsCount = array.length;
        this.createSymbols(reelStripModel.reelSymbols);
    };
    ReelStripView.prototype.createSymbolArray = function (size) {
        var result = new Array();
        for (var i = 0; i < size; i++) {
            result.push(this.config.rangeSymbols[NMath_1.NMath.randomInt(0, this.config.rangeSymbols.length - 1)]);
        }
        return result;
    };
    ReelStripView.prototype.createSymbols = function (symbolDataArr) {
        if (this.config.winAnimationOverride) {
            BaseSymbol_1.BaseSymbol.addWinAnimationOverrides(this.config.winAnimationOverride.symbolOverrides, this.config.winAnimationOverride.tweenData);
        }
        this.symbols = new Array();
        var stripContainer = new PIXI.Container();
        stripContainer.name = 'stripContainer';
        this.layerContainers.push(stripContainer);
        for (var i = 0; i < symbolDataArr.length; i++) {
            var symbol = this.createSymbol();
            symbol.setId(i);
            symbol.setConfig(this.symbolConfig);
            symbol.animationCompleteSignal.add(this.symbolAnimationComplete, this);
            symbol.setSymbolNameWithState(symbolDataArr[i].symbolName, ReelsEnums_1.SymbolState.STATIC);
            symbol.symbolContainer.position.y = symbolDataArr[i].posY;
            stripContainer.addChild(symbol.symbolContainer);
            this.symbols.push(symbol);
        }
        this.mainContainer.addChildAt(stripContainer, 0);
    };
    ReelStripView.prototype.createSymbol = function () {
        return es5_1.Container.get(BaseSymbol_1.BaseSymbol);
    };
    ReelStripView.prototype.symbolAnimationComplete = function (symbolId, type) {
        this.symbolAnimationCompleteSignal.dispatch(this.id, symbolId, type);
    };
    ReelStripView.prototype.tweenSymbolsUpdate = function (symbolId, y) {
        this.symbols[symbolId].symbolContainer.y = y;
    };
    ReelStripView.prototype.moveLastSymbolToTop = function (symbolData, state, spinDirection) {
        var symbol = (spinDirection == IReelsConfig_1.SpinDirection.SpinDown) ? this.symbols.pop() : this.symbols.shift();
        symbol.symbolContainer.position.y = symbolData.posY;
        symbol.setSymbolNameWithState(symbolData.symbolName, state);
        if (spinDirection == IReelsConfig_1.SpinDirection.SpinDown) {
            this.symbols.unshift(symbol);
            symbol.symbolContainer.parent.setChildIndex(symbol.symbolContainer, 0);
        }
        else {
            this.symbols.push(symbol);
            symbol.symbolContainer.parent.setChildIndex(symbol.symbolContainer, this.symbols.length - 1);
        }
        this.symbols.forEach(function (element, i) {
            element.setId(i);
        });
    };
    ReelStripView.prototype.hideExtraSymbols = function () {
        var index;
        for (index = 0; index < this.reelStripModel.countTopExtraSymbol; index++) {
            this.hideSymbol(index);
        }
        for (index += this.config.symbolsOnReel; index < this.totalSymbolsCount; index++) {
            this.hideSymbol(index);
        }
    };
    ReelStripView.prototype.setSymbolNameWithState = function (symbolId, symbolName, state, ignoreExtra) {
        if (ignoreExtra === void 0) { ignoreExtra = true; }
        var offset = (ignoreExtra) ? this.reelStripModel.countTopExtraSymbol : 0;
        this.symbols[offset + symbolId].setSymbolNameWithState(symbolName, state);
    };
    ReelStripView.prototype.setSymbolState = function (symbolId, state, ignoreExtra) {
        if (ignoreExtra === void 0) { ignoreExtra = true; }
        var offset = (ignoreExtra) ? this.reelStripModel.countTopExtraSymbol : 0;
        this.symbols[offset + symbolId].setSymbolState(state);
    };
    ReelStripView.prototype.playSymbolAnimation = function (symbolId, typeAnim) {
        return this.symbols[symbolId].playAnimation(typeAnim);
    };
    ReelStripView.prototype.playSymbolShaking = function (symbolId) {
        return this.symbols[this.reelStripModel.countTopExtraSymbol + symbolId].playShaking();
    };
    ReelStripView.prototype.stopSymbolShaking = function (symbolId, restorePosX, restorePosY) {
        return this.symbols[symbolId].stopShaking(restorePosX, restorePosY);
    };
    ReelStripView.prototype.hideSymbol = function (symbolId) {
        return this.symbols[this.reelStripModel.countTopExtraSymbol + symbolId].symbolContainer.visible = false;
    };
    ReelStripView.prototype.hideAllSymbol = function () {
        this.symbols.forEach(function (item) {
            item.symbolContainer.visible = false;
        });
    };
    ReelStripView.prototype.showSymbol = function (symbolId) {
        return this.symbols[this.reelStripModel.countTopExtraSymbol + symbolId].symbolContainer.visible = true;
    };
    ReelStripView.prototype.getSymbolContainer = function (symbolId) {
        return this.symbols[symbolId].symbolContainer;
    };
    ReelStripView.prototype.playItemsAnimation = function (symbolId, typeAnim) {
        return this.symbols[this.reelStripModel.countTopExtraSymbol + symbolId].playAnimation(typeAnim);
    };
    ReelStripView.prototype.deleteSymbolsAnimation = function () {
        for (var i = 0; i < this.symbols.length; i++) {
            this.symbols[i].deleteAnimation();
        }
    };
    ReelStripView.prototype.zoom = function (scale, position) {
        if (!this.isZoomed) {
            this._originalPosition = new PIXI.Point(this.position.x, this.position.y);
        }
        this._isZoomed = true;
        this.scale.x = scale;
        this.scale.y = scale;
        this.position = position;
    };
    ReelStripView.prototype.restoreFromZoomOut = function () {
        this.scale.x = 1;
        this.scale.y = 1;
        this.position = this._originalPosition;
        this._isZoomed = false;
    };
    ReelStripView.prototype.setMask = function (mask) {
        this.mainContainer.mask = mask;
        this.mainContainer.addChild(mask);
    };
    return ReelStripView;
}());
exports.ReelStripView = ReelStripView;


/***/ }),
/* 389 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var MiniSignal = __webpack_require__(3);
var es5_1 = __webpack_require__(0);
var TsMap_1 = __webpack_require__(2);
var BaseSymbol_1 = __webpack_require__(157);
var SpineSymbol_1 = __webpack_require__(738);
var SpriteSymbol_1 = __webpack_require__(739);
var ReelsEnums_1 = __webpack_require__(37);
var OverlayType;
(function (OverlayType) {
    OverlayType["SYMBOL"] = "symbol";
    OverlayType["SPRITE"] = "sprite";
    OverlayType["SPINE"] = "spine";
})(OverlayType = exports.OverlayType || (exports.OverlayType = {}));
var ReelStripOverlay = /** @class */ (function () {
    function ReelStripOverlay() {
        this._mainContainer = new PIXI.Container();
        this.objectPool = new TsMap_1.TsMap();
        this.objectsInUse = new TsMap_1.TsMap();
        this.layoutData = [];
        this.symbolMap = new TsMap_1.TsMap();
        this.lockedPositions = [];
        /**
         * set lock=true will ignore the visible control
         *
         * @type {boolean}
         * @memberof ReelStripOverlay
         */
        this.lock = false;
    }
    Object.defineProperty(ReelStripOverlay.prototype, "type", {
        get: function () {
            return this.config.overlayType;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReelStripOverlay.prototype, "mainContainer", {
        get: function () {
            return this._mainContainer;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReelStripOverlay.prototype, "visible", {
        get: function () {
            return this._mainContainer.visible;
        },
        set: function (value) {
            this._mainContainer.visible = value;
        },
        enumerable: true,
        configurable: true
    });
    ReelStripOverlay.prototype.init = function (config) {
        this.config = config;
        this.symbolAnimationCompleteSignal = new MiniSignal();
        this._mainContainer.x = (this.config.offset !== undefined) ? this.config.offset.x : 0;
        this._mainContainer.y = (this.config.offset !== undefined) ? this.config.offset.y : 0;
        this._mainContainer.name = config.overlayType;
    };
    ReelStripOverlay.prototype.bindModel = function (model) {
        this.reelModel = model;
    };
    ReelStripOverlay.prototype.createPool = function (name, size) {
        if (size === void 0) { size = 15; }
        if (!this.config) {
            return;
        }
        if (!name) { // assume symbol
            for (var i = 0; i < this.config.rangeSymbols.length; i++) {
                var symbolName = this.config.rangeSymbols[i];
                for (var j = 0; j < size; j++) {
                    this.pushObjectToPool(symbolName);
                }
            }
        }
        else {
            for (var j = 0; j < size; j++) {
                this.pushObjectToPool(name);
            }
        }
    };
    ReelStripOverlay.prototype.pushObjectToPool = function (name) {
        var symbol = this.createObject(name);
        this.initPoolByKey(name);
        this.objectPool.get(name).push(symbol);
    };
    ReelStripOverlay.prototype.createObject = function (name) {
        if (!name) {
            return;
        }
        var object;
        switch (this.config.overlayType) {
            case OverlayType.SYMBOL:
                object = this.createSymbol(name);
                break;
            case OverlayType.SPRITE:
                object = new SpriteSymbol_1.SpriteSymbol(name);
                break;
            case OverlayType.SPINE:
                var config = {
                    name: name,
                    animationName: name
                };
                object = new SpineSymbol_1.SpineSymbol(config);
                break;
        }
        return object;
    };
    ReelStripOverlay.prototype.initPoolByKey = function (name) {
        if (!this.objectPool.has(name)) {
            this.objectPool.set(name, []);
        }
    };
    ReelStripOverlay.prototype.createSymbol = function (name) {
        var symbol = es5_1.Container.get(BaseSymbol_1.BaseSymbol);
        symbol.setConfig(this.config.symbolConfig);
        symbol.animationCompleteSignal.add(this.symbolAnimationComplete, this);
        symbol.setSymbolNameWithState(name, ReelsEnums_1.SymbolState.STATIC);
        return symbol;
    };
    ReelStripOverlay.prototype.getObject = function (name) {
        this.initPoolByKey(name);
        if (this.objectPool.get(name).length > 0) {
            return this.objectPool.get(name).pop();
        }
        else {
            return this.createObject(name);
        }
    };
    ReelStripOverlay.prototype.getObjectAt = function (animationName, position) {
        var object = this.symbolMap.get(this.positionToStr(position));
        if (object) {
            return object;
        }
        if (this.config.overlayType === OverlayType.SYMBOL) {
            var symbolName = this.reelModel.currentSymbolsOutcome[position.reelIndex][position.symbolIndex];
            object = this.getObject(symbolName);
        }
        var objectPos = this.getObjectPosition(position);
        object.x = objectPos.x;
        object.y = objectPos.y;
        return object;
    };
    ReelStripOverlay.prototype.getObjectPosition = function (position) {
        var objectPos = { x: 0, y: 0 };
        objectPos.x = this.layoutData[position.reelIndex].x;
        objectPos.y = this.layoutData[position.reelIndex].y + position.symbolIndex * this.config.symbolConfig.generalSymbol.height;
        return objectPos;
    };
    ReelStripOverlay.prototype.setSymbolMapAt = function (object, position) {
        object.position = position;
        this.symbolMap.set(this.positionToStr(position), object);
    };
    ReelStripOverlay.prototype.playAnimationAt = function (animationName, position) {
        if (this.isLockPosition(position)) {
            return;
        }
        var object = this.symbolMap.get(this.positionToStr(position));
        var result = false;
        if (object) {
            if (this.config.overlayType === OverlayType.SYMBOL && object.isContain(position)) {
                result = object.playAnimation(animationName);
                if (result) {
                    this.mainContainer.addChild(object.symbolContainer);
                    this.symbolMap.set(this.positionToStr(position), object);
                    this.objectsInUse.set(this.positionToStr(position), object);
                }
            }
        }
        else {
            if (this.config.overlayType === OverlayType.SYMBOL) {
                var symbolName = this.reelModel.currentSymbolsOutcome[position.reelIndex][position.symbolIndex];
                object = this.getObject(symbolName);
            }
            else {
                object = this.getObject(animationName);
            }
            object.x = this.layoutData[position.reelIndex].x;
            object.y = this.layoutData[position.reelIndex].y + position.symbolIndex * this.config.symbolConfig.generalSymbol.height;
            result = object.playAnimation(animationName);
            if (result) {
                this.mainContainer.addChild(object.symbolContainer);
                this.symbolMap.set(this.positionToStr(position), object);
                this.objectsInUse.set(this.positionToStr(position), object);
            }
            object.position = position;
        }
        object.name = this.positionToStr(position);
        return result;
    };
    ReelStripOverlay.prototype.lockPosition = function (symbolPosition) {
        var positionStr = this.positionToStr(symbolPosition);
        if (!this.lockedPositions.includes(positionStr)) {
            this.lockedPositions.push(this.positionToStr(symbolPosition));
        }
    };
    ReelStripOverlay.prototype.isLockPosition = function (symbolPosition) {
        var positionStr = this.positionToStr(symbolPosition);
        return this.lockedPositions.includes(positionStr);
    };
    ReelStripOverlay.prototype.unlockPosition = function (symbolPosition) {
        if (!symbolPosition) {
            this.lockedPositions = [];
        }
        else {
            var positionStr = this.positionToStr(symbolPosition);
            var index = this.lockedPositions.indexOf(positionStr);
            if (index > -1) {
                this.lockedPositions.splice(index, 1);
            }
        }
    };
    ReelStripOverlay.prototype.positionToStr = function (position) {
        return position.reelIndex + "," + position.symbolIndex;
    };
    ReelStripOverlay.prototype.placeAnimationAt = function (animationName, position) {
        if (this.isLockPosition(position)) {
            return;
        }
        var object = this.getObject(animationName);
        object.symbolContainer.x = this.layoutData[position.reelIndex].x;
        object.symbolContainer.y = this.layoutData[position.reelIndex].y + position.symbolIndex * this.config.symbolConfig.generalSymbol.height;
        this.mainContainer.addChild(object.symbolContainer);
        object.name = position.reelIndex + "," + position.symbolIndex;
        this.symbolMap.set(this.positionToStr(position), object);
        object.position = position;
        this.objectsInUse.set(this.positionToStr(position), object);
        return object;
    };
    /**
     * update the layoutData of each reel
     *
     * @param {Array<IPoint>} positions
     * @memberof ReelStripOverlay
     */
    ReelStripOverlay.prototype.updateLayout = function (positions) {
        var _this = this;
        this.layoutData = positions;
        this.objectsInUse.forEach(function (object) {
            var position = object.position;
            object.symbolContainer.x = _this.layoutData[position.reelIndex].x;
            object.symbolContainer.y = _this.layoutData[position.reelIndex].y + position.symbolIndex * _this.config.symbolConfig.generalSymbol.height;
        });
    };
    ReelStripOverlay.prototype.updateReelLayout = function (index, position) {
        this.layoutData[index] = position;
    };
    ReelStripOverlay.prototype.updateLayerPosition = function (position) {
        this._mainContainer.x = position.x;
        this._mainContainer.y = position.y;
    };
    ReelStripOverlay.prototype.hideSymbol = function (position) {
        var object = this.symbolMap.get(this.positionToStr(position));
        if (!object) {
            return;
        }
        // reset
        object.triggerPositions = null;
        var displayObject = this.mainContainer.getChildByName(position.reelIndex + "," + position.symbolIndex);
        this.mainContainer.removeChild(displayObject);
        this.objectPool.get(object.symbolName).push(object);
        this.symbolMap.delete(this.positionToStr(position));
        this.objectsInUse.delete(this.positionToStr(position));
    };
    /**
     * remove all display object from container, and push it to pool.
     *
     * @memberof ReelStripOverlay
     */
    ReelStripOverlay.prototype.clean = function () {
        this.mainContainer.removeChildren();
        this.symbolMap.clear();
        this.objectsInUse.clear();
    };
    ReelStripOverlay.prototype.reset = function () {
        this.unlockPosition();
        this.clean();
    };
    ReelStripOverlay.prototype.dispose = function () {
        this.objectPool = null;
    };
    ReelStripOverlay.prototype.symbolAnimationComplete = function (position, type) {
        this.symbolAnimationCompleteSignal.dispatch(position, type);
    };
    ReelStripOverlay.prototype.playSymbolShaking = function (position) {
        var symbolName = this.reelModel.currentSymbolsOutcome[position.reelIndex][position.symbolIndex];
        var object = this.placeAnimationAt(symbolName, {
            reelIndex: position.reelIndex,
            symbolIndex: position.symbolIndex
        });
        return object.playShaking();
    };
    ReelStripOverlay.prototype.stopSymbolShaking = function (position, restorePosition) {
        var object = this.symbolMap.get(this.positionToStr(position));
        if (!object) {
            return;
        }
        return object.stopShaking(restorePosition.x, restorePosition.y);
    };
    ReelStripOverlay.prototype.getObjectsByReel = function (reelIndex) {
        var objects = [];
        this.symbolMap.forEach(function (object, key) {
            if (key.indexOf(reelIndex + ",") !== -1) {
                objects.push(object);
            }
        });
        return objects;
    };
    ReelStripOverlay.prototype.getObjectByPosition = function (symbolPosition) {
        var result = null;
        this.symbolMap.forEach(function (object) {
            if (object.isContain(symbolPosition)) {
                result = object;
            }
        });
        return result;
    };
    return ReelStripOverlay;
}());
exports.ReelStripOverlay = ReelStripOverlay;


/***/ }),
/* 390 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var Helper_1 = __webpack_require__(5);
var SlotUIStates_1 = __webpack_require__(231);
var SlotEvent_1 = __webpack_require__(32);
var CoreState_1 = __webpack_require__(76);
var SlotBankService_1 = __webpack_require__(49);
var UIController_1 = __webpack_require__(740);
var GlobalDispatcher_1 = __webpack_require__(7);
var SlotUILocalButtonsController_1 = __webpack_require__(158);
/**
 * Handel all the element behavior for user interface.
 * It has it's own local machine
 */
var SlotUIController = /** @class */ (function (_super) {
    __extends(SlotUIController, _super);
    function SlotUIController() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._isAutoSpin = false;
        _this._isFreeSpin = false;
        _this._showFullScreenUI = false;
        _this.isGenplusSpin = false;
        return _this;
    }
    Object.defineProperty(SlotUIController.prototype, "isAutoSpin", {
        get: function () {
            return this._isAutoSpin;
        },
        set: function (value) {
            this._isAutoSpin = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SlotUIController.prototype, "isFreeSpin", {
        get: function () {
            return this._isFreeSpin;
        },
        set: function (value) {
            this._isFreeSpin = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SlotUIController.prototype, "isShowFullScreenUI", {
        get: function () {
            return this._showFullScreenUI;
        },
        set: function (value) {
            this._showFullScreenUI = value;
        },
        enumerable: true,
        configurable: true
    });
    SlotUIController.prototype.addEventListeners = function () {
        GlobalDispatcher_1.GlobalDispatcher.addListener(this, SlotEvent_1.SlotEvent.GAME_READY_FOR_STOP, this.onGameReadyForStopSpin);
        GlobalDispatcher_1.GlobalDispatcher.addListener(this, SlotEvent_1.SlotEvent.BOOSTER_AUTOPLAY_START, this.boosterAutoplayStart);
        GlobalDispatcher_1.GlobalDispatcher.addListener(this, SlotEvent_1.SlotEvent.BOOSTER_AUTOPLAY_STOP, this.boosterAutoplayStop);
    };
    SlotUIController.prototype.boosterAutoplayStart = function () {
        this.isGenplusSpin = true;
        this.dashboardLocalStateMachine.setState(new CoreState_1.CoreState(this.states.genplusSpinning, null));
    };
    SlotUIController.prototype.boosterAutoplayStop = function () {
        this.isGenplusSpin = false;
        this.dashboardLocalStateMachine.setState(new CoreState_1.CoreState(this.states.baseGameIdle, null));
    };
    SlotUIController.prototype.onAutoPlayStart = function () {
        this.isAutoSpin = true;
    };
    SlotUIController.prototype.onAutoSpinEvent = function () {
        //
    };
    SlotUIController.prototype.onAutoPlayStop = function () {
        this.isAutoSpin = false;
        var winStates = [
            this.states.allLineWin,
            this.states.showWinning,
            this.states.showWinningLoop
        ];
        if (winStates.indexOf(this.currentStateName) !== -1) {
            this.dashboardLocalStateMachine.setState(new CoreState_1.CoreState(this.states.baseGameIdle, {}));
        }
        GlobalDispatcher_1.GlobalDispatcher.dispatchIntoAllStates(SlotEvent_1.SlotEvent.NORMAL_AUTOPLAY_STOP);
    };
    SlotUIController.prototype.baseGameIdle = function (stateData) {
        if (this.checkGenplusSpinning()) {
            return;
        }
        if (this.isAutoSpin) {
            this.dashboardLocalStateMachine.setState(new CoreState_1.CoreState(this.states.autoSpinDashboardIdle, Helper_1.Helper.mergeTwoObjects({}, stateData)));
        }
        else if (this.isShowFullScreenUI) {
            this.dashboardLocalStateMachine.setState(new CoreState_1.CoreState(this.states.dashboardDisable, Helper_1.Helper.mergeTwoObjects({}, stateData)));
        }
        else {
            this.dashboardLocalStateMachine.setState(new CoreState_1.CoreState(this.states.baseGameIdle, Helper_1.Helper.mergeTwoObjects({}, stateData)));
        }
        this.finishStateAction();
    };
    SlotUIController.prototype.startPickFeature = function (stateData) {
        this.dashboardLocalStateMachine.setState(new CoreState_1.CoreState(this.states.startPickFeature));
        this.finishStateAction();
    };
    SlotUIController.prototype.startSpin = function (stateData) {
        if (this.checkGenplusSpinning()) {
            return;
        }
        if (this.isAutoSpin) {
            this.dashboardLocalStateMachine.setState(new CoreState_1.CoreState(this.states.autoSpinStartSpin, Helper_1.Helper.mergeTwoObjects({}, stateData)));
        }
        else {
            this.dashboardLocalStateMachine.setState(new CoreState_1.CoreState(this.states.startSpin, Helper_1.Helper.mergeTwoObjects({}, stateData)));
        }
        this.finishStateAction();
    };
    SlotUIController.prototype.onGameReadyForStopSpin = function () {
        if (this.checkGenplusSpinning()) {
            return;
        }
        if (!this.isFreeSpin) {
            if (this.isAutoSpin) {
                this.dashboardLocalStateMachine.setState(new CoreState_1.CoreState(this.states.autoSpinSpinStopReady, null));
            }
            else {
                this.dashboardLocalStateMachine.setState(new CoreState_1.CoreState(this.states.spinStopReady, null));
            }
        }
        else {
            this.dashboardLocalStateMachine.setState(new CoreState_1.CoreState(this.states.freeSpinStopReady, null));
        }
    };
    SlotUIController.prototype.spinStop = function (stateData) {
        if (this.checkGenplusSpinning()) {
            return;
        }
        if (this.isAutoSpin) {
            this.dashboardLocalStateMachine.setState(new CoreState_1.CoreState(this.states.autoSpinSpinStop, Helper_1.Helper.mergeTwoObjects({}, stateData)));
        }
        else {
            this.dashboardLocalStateMachine.setState(new CoreState_1.CoreState(this.states.spinStop, Helper_1.Helper.mergeTwoObjects({}, stateData)));
        }
        this.finishStateAction();
    };
    SlotUIController.prototype.spinning = function (stateData) {
        if (this.checkGenplusSpinning()) {
            return;
        }
        if (this.isAutoSpin) {
            this.dashboardLocalStateMachine.setState(new CoreState_1.CoreState(this.states.autoSpinSpinning, Helper_1.Helper.mergeTwoObjects({}, stateData)));
        }
        else {
            this.dashboardLocalStateMachine.setState(new CoreState_1.CoreState(this.states.spinning, Helper_1.Helper.mergeTwoObjects({}, stateData)));
        }
        this.finishStateAction();
    };
    SlotUIController.prototype.freeSpinsIdle = function (stateData) {
        this.dashboardLocalStateMachine.setState(new CoreState_1.CoreState(this.states.freeSpinsIdle, Helper_1.Helper.mergeTwoObjects({}, stateData)));
        this.finishStateAction();
    };
    SlotUIController.prototype.freeSpinsStart = function (stateData) {
        this.dashboardLocalStateMachine.setState(new CoreState_1.CoreState(this.states.freeSpinsStart, Helper_1.Helper.mergeTwoObjects({}, stateData)));
        this.finishStateAction();
    };
    SlotUIController.prototype.freeSpinning = function (stateData) {
        this.dashboardLocalStateMachine.setState(new CoreState_1.CoreState(this.states.freeSpinning, Helper_1.Helper.mergeTwoObjects({}, stateData)));
        this.finishStateAction();
    };
    SlotUIController.prototype.freeSpinsStop = function (stateData) {
        this.dashboardLocalStateMachine.setState(new CoreState_1.CoreState(this.states.freeSpinsStop, Helper_1.Helper.mergeTwoObjects({}, stateData)));
        this.finishStateAction();
    };
    SlotUIController.prototype.freeRespinsStop = function (stateData) {
        this.dashboardLocalStateMachine.setState(new CoreState_1.CoreState(this.states.freeRespinsStop, Helper_1.Helper.mergeTwoObjects({}, stateData)));
        this.finishStateAction();
    };
    SlotUIController.prototype.showRetrigger = function (stateData) {
        this.dashboardLocalStateMachine.setState(new CoreState_1.CoreState(this.states.showRetrigger, Helper_1.Helper.mergeTwoObjects({}, stateData)));
        this.finishStateAction();
    };
    SlotUIController.prototype.freeSpinsAllLineWin = function (stateData) {
        this.dashboardLocalStateMachine.setState(new CoreState_1.CoreState(this.states.freeSpinsAllLineWin, Helper_1.Helper.mergeTwoObjects({}, stateData)));
        this.finishStateAction();
    };
    SlotUIController.prototype.freeSpinsShowWinning = function (stateData) {
        this.dashboardLocalStateMachine.setState(new CoreState_1.CoreState(this.states.freeSpinsShowWinning, Helper_1.Helper.mergeTwoObjects({}, stateData)));
        this.finishStateAction();
    };
    SlotUIController.prototype.freeSpinsWildMultipliers = function (stateData) {
        this.dashboardLocalStateMachine.setState(new CoreState_1.CoreState(this.states.freeSpinsWildMultipliers, Helper_1.Helper.mergeTwoObjects({}, stateData)));
        this.finishStateAction();
    };
    SlotUIController.prototype.prefeatureWinning = function (stateData) {
        this.dashboardLocalStateMachine.setState(new CoreState_1.CoreState(this.states.prefeatureWinning, Helper_1.Helper.mergeTwoObjects({}, stateData)));
        this.finishStateAction();
    };
    SlotUIController.prototype.skip_spinning = function (stateData) {
        if (this.isAutoSpin) {
            this.dashboardLocalStateMachine.setState(new CoreState_1.CoreState(this.states.skip_autoSpinSpinning, Helper_1.Helper.mergeTwoObjects({}, stateData)));
        }
        else {
            this.dashboardLocalStateMachine.setState(new CoreState_1.CoreState(this.states.skip_spinning, Helper_1.Helper.mergeTwoObjects({}, stateData)));
        }
        this.finishStateAction();
    };
    SlotUIController.prototype.skip_freeSpinning = function (stateData) {
        this.dashboardLocalStateMachine.setState(new CoreState_1.CoreState(this.states.skip_freeSpinning, Helper_1.Helper.mergeTwoObjects({}, stateData)));
        this.finishStateAction();
    };
    SlotUIController.prototype.showWinningLoop = function (stateData) {
        if (this.checkGenplusSpinning()) {
            return;
        }
        if (this.isAutoSpin) {
            this.dashboardLocalStateMachine.setState(new CoreState_1.CoreState(this.states.autoSpinDashboardIdle, Helper_1.Helper.mergeTwoObjects({}, stateData)));
        }
        else {
            if (this.dashboardLocalStateMachine.currentState.stateName != this.states.dashboardDisable) {
                this.dashboardLocalStateMachine.setState(new CoreState_1.CoreState(this.states.dashboardIdle, Helper_1.Helper.mergeTwoObjects({}, stateData)));
            }
        }
        this.finishStateAction();
    };
    SlotUIController.prototype.transitionToAutoSpin = function (stateData) {
        this.isAutoSpin = true;
        this.dashboardLocalStateMachine.setState(new CoreState_1.CoreState(this.states.transitionToAutoSpin, Helper_1.Helper.mergeTwoObjects({}, stateData)));
        this.finishStateAction();
    };
    SlotUIController.prototype.transitionToFreeSpins = function (stateData) {
        this.isFreeSpin = true;
        this.isAutoSpin = false;
        this.dashboardLocalStateMachine.setState(new CoreState_1.CoreState(this.states.transitionToFreeSpins, Helper_1.Helper.mergeTwoObjects({}, stateData)));
        this.finishStateAction();
    };
    SlotUIController.prototype.transitionToBaseGame = function (stateData) {
        this.isFreeSpin = false;
        this.isAutoSpin = false;
        this.dashboardLocalStateMachine.setState(new CoreState_1.CoreState(this.states.transitionToBaseGame, Helper_1.Helper.mergeTwoObjects({}, stateData)));
        this.finishStateAction();
    };
    SlotUIController.prototype.transitionToBonusSpins = function (stateData) {
        this.isFreeSpin = true;
        this.isAutoSpin = false;
        this.dashboardLocalStateMachine.setState(new CoreState_1.CoreState(this.states.transitionToBonusSpins, Helper_1.Helper.mergeTwoObjects({}, stateData)));
        this.finishStateAction();
    };
    SlotUIController.prototype.transitionBonusToBase = function (stateData) {
        this.isFreeSpin = false;
        this.isAutoSpin = false;
        this.dashboardLocalStateMachine.setState(new CoreState_1.CoreState(this.states.transitionBonusToBase, Helper_1.Helper.mergeTwoObjects({}, stateData)));
        this.finishStateAction();
    };
    SlotUIController.prototype.allLineWin = function (stateData) {
        if (this.checkGenplusSpinning()) {
            return;
        }
        if (this.isAutoSpin || this.isGenplusSpin) {
            this.dashboardLocalStateMachine.setState(new CoreState_1.CoreState(this.states.autoSpinAllLineWin, Helper_1.Helper.mergeTwoObjects({}, stateData)));
        }
        else {
            this.dashboardLocalStateMachine.setState(new CoreState_1.CoreState(this.states.allLineWin, Helper_1.Helper.mergeTwoObjects({}, stateData)));
        }
        this.finishStateAction();
    };
    SlotUIController.prototype.showWinning = function (stateData) {
        if (this.checkGenplusSpinning()) {
            return;
        }
        if (this.isAutoSpin || this.isGenplusSpin) {
            this.dashboardLocalStateMachine.setState(new CoreState_1.CoreState(this.states.autoSpinShowWinning, Helper_1.Helper.mergeTwoObjects({}, stateData)));
        }
        else {
            this.dashboardLocalStateMachine.setState(new CoreState_1.CoreState(this.states.showWinning, Helper_1.Helper.mergeTwoObjects({}, stateData)));
        }
        this.finishStateAction();
    };
    SlotUIController.prototype.allReelStopped = function (stateData) {
        if (this.checkGenplusSpinning()) {
            return;
        }
        if (this.isAutoSpin || this.isGenplusSpin) {
            this.dashboardLocalStateMachine.setState(new CoreState_1.CoreState(this.states.allReelStopped, Helper_1.Helper.mergeTwoObjects({}, stateData)));
        }
        this.finishStateAction();
    };
    /**
     * on skip show winning
     * @param data
     */
    SlotUIController.prototype.skip_showWinning = function (data) {
        //
    };
    SlotUIController.prototype.onLocalStateChanged = function (stateName) {
        this.localButtonsController.applyButtonsTemplate(stateName);
    };
    SlotUIController.prototype.onFullScreenPanel = function (e) {
        console.log(e);
    };
    SlotUIController.prototype.checkGenplusSpinning = function () {
        if (this.isGenplusSpin) {
            this.finishStateAction();
            return true;
        }
        return false;
    };
    var _a, _b, _c;
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof SlotUIStates_1.SlotUIStates !== "undefined" && SlotUIStates_1.SlotUIStates) === "function" && _a || Object)
    ], SlotUIController.prototype, "states", void 0);
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_b = typeof SlotBankService_1.SlotBankService !== "undefined" && SlotBankService_1.SlotBankService) === "function" && _b || Object)
    ], SlotUIController.prototype, "bankService", void 0);
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_c = typeof SlotUILocalButtonsController_1.SlotUILocalButtonsController !== "undefined" && SlotUILocalButtonsController_1.SlotUILocalButtonsController) === "function" && _c || Object)
    ], SlotUIController.prototype, "localButtonsController", void 0);
    return SlotUIController;
}(UIController_1.UIController));
exports.SlotUIController = SlotUIController;


/***/ }),
/* 391 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var MiniSignal = __webpack_require__(3);
var CompView_1 = __webpack_require__(34);
var SlotSoundConfig_1 = __webpack_require__(36);
var MoneyFormatter_1 = __webpack_require__(16);
var SpineAnimation_1 = __webpack_require__(63);
var TweenBitmapTextField_1 = __webpack_require__(234);
var IBigWinConfig_1 = __webpack_require__(67);
var BigWinView = /** @class */ (function (_super) {
    __extends(BigWinView, _super);
    function BigWinView() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.isShowing = false;
        return _this;
    }
    Object.defineProperty(BigWinView.prototype, "finalBigWinTier", {
        get: function () {
            return this._finalBigWinTier;
        },
        set: function (value) {
            this._finalBigWinTier = value;
        },
        enumerable: true,
        configurable: true
    });
    BigWinView.prototype.createElements = function (config) {
        this.config = config;
        this.setupBigWinAnimation();
        this.setupBigWinLabel(config);
        this.screenTapSignal = new MiniSignal();
    };
    BigWinView.prototype.registerEvents = function () {
        var _this = this;
        _super.prototype.registerEvents.call(this);
        this.gameContainerManager.stageContainer.on('pointertap', function () {
            _this.screenTapSignal.dispatch();
        }, this);
    };
    BigWinView.prototype.layoutElements = function () {
        _super.prototype.layoutElements.call(this);
        if (this.config.bigWinValueLabel.autoscale == undefined) {
            this.bigWinValueLabel.setAutoscale(this.viewport.width * 0.9, this.viewport.height);
        }
    };
    BigWinView.prototype.setupBigWinLabel = function (config) {
        this.bigWinValueLabel = new TweenBitmapTextField_1.TweenBitmapTextField(config.bigWinValueLabel);
        this.bigWinValueLabel.text = '0.00';
        this.bigWinValueLabel.alpha = 0;
        this.addChild(this.bigWinValueLabel);
    };
    BigWinView.prototype.setupBigWinAnimation = function () {
        this.bigWinAnimation = new SpineAnimation_1.SpineAnimation(this.config.bigWinAnimation);
        this.addChild(this.bigWinAnimation);
    };
    BigWinView.prototype.beginCountUp = function () {
        this.isShowing = true;
        this.bigWinValueLabel.text = '0.00';
        this.animateBigWinIn();
        this.playBigWinAnimation(this.finalBigWinTier);
    };
    BigWinView.prototype.playBigWinAnimation = function (finalBigWinTier) {
        if (this.hasUniqueAnimation(finalBigWinTier)) {
            this.bigWinAnimation.play(0, finalBigWinTier, false);
        }
    };
    BigWinView.prototype.animateBigWinIn = function () {
        this.bigWinValueLabel.alpha = 1;
        this.bigWinValueLabel.startTween();
    };
    BigWinView.prototype.updateCountUp = function (value) {
        if (value > this.moneyFormatter.unformatMoney(this.bigWinValueLabel.text)) {
            this.bigWinValueLabel.text = this.moneyFormatter.formatMoney(value, MoneyFormatter_1.NumberDisplayMode.VALUE_ONLY);
        }
    };
    BigWinView.prototype.newTierReached = function (bigWinTier) {
        //
    };
    BigWinView.prototype.completeCountUp = function (completeValue, forceStop) {
        var _this = this;
        if (forceStop === void 0) { forceStop = false; }
        return Promise.all([this.spriteCompleteAnimation(forceStop), this.labelCompleteAnimation(completeValue, forceStop)]).then(function () {
            _this.isShowing = false;
        });
    };
    BigWinView.prototype.cancelCountUp = function (completeValue, forceStop) {
        if (forceStop === void 0) { forceStop = false; }
        return this.completeCountUp(completeValue, forceStop);
    };
    BigWinView.prototype.spriteCompleteAnimation = function (forceStop) {
        if (forceStop === void 0) { forceStop = false; }
        if (this.bigWinAnimation) {
            this.bigWinAnimation.reset(true);
        }
        return Promise.resolve();
    };
    BigWinView.prototype.labelCompleteAnimation = function (completeValue, forceStop) {
        var _this = this;
        if (forceStop === void 0) { forceStop = false; }
        this.updateCountUp(completeValue);
        if (forceStop) {
            this.bigWinValueLabel.stopTween();
            this.bigWinValueLabel.alpha = 0;
            return Promise.resolve();
        }
        return new Promise(function (resolve) {
            _this.bigWinValueLabel.startTween(_this.config.valueLabelTweenOutConfig, (function () {
                _this.bigWinValueLabel.alpha = 0;
                resolve();
            }));
        });
    };
    BigWinView.prototype.hasUniqueAnimation = function (tier) {
        return [IBigWinConfig_1.BigWinTierType.BigWin, IBigWinConfig_1.BigWinTierType.ExtremeBigWin, IBigWinConfig_1.BigWinTierType.UltraExtremeBigWin].indexOf(tier) >= 0;
    };
    BigWinView.prototype.getAssetsList = function () {
        return [
            {
                assetKey: 'bigwinSpineAnimation',
                assetURL: 'assets/bigwin/{locale}/BigWinAnimation.json'
            },
            {
                assetKey: 'BigWinFont',
                assetURL: 'assets/fonts/bitmap/BigWinFont.xml'
            },
            {
                assetKey: SlotSoundConfig_1.SlotSoundConfig.creditLoop,
                assetURL: 'assets/sound/game/Credit_Loop.mp3'
            },
            {
                assetKey: SlotSoundConfig_1.SlotSoundConfig.creditLoopEnd,
                assetURL: 'assets/sound/game/Credit_Loop_End.mp3'
            },
        ];
    };
    var _a;
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof MoneyFormatter_1.MoneyFormatter !== "undefined" && MoneyFormatter_1.MoneyFormatter) === "function" && _a || Object)
    ], BigWinView.prototype, "moneyFormatter", void 0);
    return BigWinView;
}(CompView_1.CompView));
exports.BigWinView = BigWinView;


/***/ }),
/* 392 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var MoneyFormatter_1 = __webpack_require__(16);
var AbstractApi_1 = __webpack_require__(150);
var SlotBankService_1 = __webpack_require__(49);
var SlotNPSModel_1 = __webpack_require__(160);
var BNGBaseAPI = /** @class */ (function (_super) {
    __extends(BNGBaseAPI, _super);
    function BNGBaseAPI() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    BNGBaseAPI.prototype.init = function (transport, config) {
        this.config = config;
        this.transport = transport;
    };
    BNGBaseAPI.prototype.encapsulation = function (data) {
        return null;
    };
    var _a, _b, _c;
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof SlotNPSModel_1.SlotNPSModel !== "undefined" && SlotNPSModel_1.SlotNPSModel) === "function" && _a || Object)
    ], BNGBaseAPI.prototype, "slotNGModel", void 0);
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_b = typeof SlotBankService_1.SlotBankService !== "undefined" && SlotBankService_1.SlotBankService) === "function" && _b || Object)
    ], BNGBaseAPI.prototype, "bankService", void 0);
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_c = typeof MoneyFormatter_1.MoneyFormatter !== "undefined" && MoneyFormatter_1.MoneyFormatter) === "function" && _c || Object)
    ], BNGBaseAPI.prototype, "moneyFormatter", void 0);
    return BNGBaseAPI;
}(AbstractApi_1.AbstractApi));
exports.BNGBaseAPI = BNGBaseAPI;


/***/ }),
/* 393 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var DialogController_1 = __webpack_require__(380);
var SlotDialogView_1 = __webpack_require__(232);
var es5_1 = __webpack_require__(0);
var MoneyFormatter_1 = __webpack_require__(16);
var SlotDialogController = /** @class */ (function (_super) {
    __extends(SlotDialogController, _super);
    function SlotDialogController(view) {
        return _super.call(this, view) || this;
    }
    SlotDialogController.prototype.freeSpinsIntroPopup = function (data) {
        //TODO Fix messaging when design is complete
        var _this = this;
        var isInteractive = (this.target === undefined);
        var titleKey = (data.isRestore) ? 'freeSpinDialogTitle_Restore' : 'freeSpinDialogTitle_Start';
        var textKey = 'Free Spins : ' + data.spins.toString();
        this.view.showDialogFromKey(titleKey, textKey, 10000, 500, true, isInteractive)
            .then(function () {
            if (!_this.target) {
                _this.view.setInteractive(true);
            }
        })
            .then(function () {
            _this.view.closeDialog();
        });
    };
    SlotDialogController.prototype.freeSpinsOutroPopup = function (data) {
        //TODO Fix messaging when design is complete
        var textKey = 'Total Won: ' + this.moneyFormatter.formatMoney(data.featureWin, MoneyFormatter_1.NumberDisplayMode.VALUE_WITH_CURRENCY);
        this.view.showDialogFromKey('freeSpinDialogTitle_End', textKey, 10000, 500, true);
    };
    SlotDialogController.prototype.checkResource = function () {
        var _this = this;
        return _super.prototype.checkResource.call(this).then(function () {
            _this.view.setInteractive(true);
            return Promise.resolve();
        });
    };
    SlotDialogController.prototype.onGroupCompleted = function (groupIdx) {
        _super.prototype.onGroupCompleted.call(this, groupIdx);
        if (this.isReady) {
            this.view.setInteractive(true);
        }
    };
    var _a, _b;
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof MoneyFormatter_1.MoneyFormatter !== "undefined" && MoneyFormatter_1.MoneyFormatter) === "function" && _a || Object)
    ], SlotDialogController.prototype, "moneyFormatter", void 0);
    SlotDialogController = __decorate([
        __param(0, es5_1.Inject),
        __metadata("design:paramtypes", [typeof (_b = typeof SlotDialogView_1.SlotDialogView !== "undefined" && SlotDialogView_1.SlotDialogView) === "function" && _b || Object])
    ], SlotDialogController);
    return SlotDialogController;
}(DialogController_1.DialogController));
exports.SlotDialogController = SlotDialogController;


/***/ }),
/* 394 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var WinLinesConfig = /** @class */ (function () {
    function WinLinesConfig() {
        this.name = 'winLines';
        this.winLineAnimationDelay = 1000;
        this.winLineLoopAnimationDelay = 1000;
        this.freeSpinLastspinDelay = 1000;
        /**
         * the delay time after show specitial winline like SCATTER.
         *
         * @memberof WinLinesConfig
         */
        this.specialSymbolDelay = 0;
        /**
         * showAllLineWin=true. Display the reels win symbol animation at allLineWin/freeAllLineWin state.
         *
         * @memberof WinLinesConfig
         */
        this.showAllLineWin = true;
    }
    return WinLinesConfig;
}());
exports.WinLinesConfig = WinLinesConfig;


/***/ }),
/* 395 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Animation_1 = __webpack_require__(26);
var GlobalDispatcher_1 = __webpack_require__(7);
var SimpleTimer_1 = __webpack_require__(15);
var MiniSignal = __webpack_require__(3);
var particles = __webpack_require__(761);
var pixi_js_1 = __webpack_require__(4);
var ReelsConfig_1 = __webpack_require__(52);
var es5_1 = __webpack_require__(0);
var util_1 = __webpack_require__(343);
var IReelsConfig_1 = __webpack_require__(66);
var SlotCompView_1 = __webpack_require__(226);
var ReelsEnums_1 = __webpack_require__(37);
var ReelStripOverlay_1 = __webpack_require__(762);
var ReelStripView_1 = __webpack_require__(396);
var Viewport_1 = __webpack_require__(6);
var TsMap_1 = __webpack_require__(2);
/**
 * Please review ReelConfig class to understand how to set position for reel strips.
 */
var ReelsControllerView = /** @class */ (function (_super) {
    __extends(ReelsControllerView, _super);
    function ReelsControllerView() {
        var _this = _super.call(this) || this;
        /**
         * Describe how many animations are completed right now on strips.
         */
        _this.completedAnimationCounter = 0;
        _this.currentReelSetIndex = ReelsConfig_1.ReelSet.BASE;
        _this.defaultSpineTransitionTime = 0;
        _this.reelViewMap = new TsMap_1.TsMap();
        _this.reelOverlayMap = new TsMap_1.TsMap();
        _this.idleAnimationsCompleteSignal = new MiniSignal();
        _this.idleTimerArray = new Array();
        return _this;
    }
    Object.defineProperty(ReelsControllerView.prototype, "currentReelSet", {
        get: function () {
            return this.reelSet[this.currentReelSetIndex];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReelsControllerView.prototype, "currentReelView", {
        get: function () {
            return this.reelsView[this.currentReelSetIndex];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReelsControllerView.prototype, "currentReelsOverlay", {
        get: function () {
            return this.reelsOverlay[this.currentReelSetIndex];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReelsControllerView.prototype, "maskConfig", {
        get: function () {
            var config = (this.reelConfig.orientationMaskData)
                ? this.reelConfig.orientationMaskData.get(this.currentReelSetIndex).get(this.viewport.properOrientation)
                : null;
            var maskConfig = config || this.reelConfig.defaultReelsMask.get(this.currentReelSetIndex);
            if (!maskConfig) {
                throw new Error('can\'t find mask layout config');
            }
            return maskConfig;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReelsControllerView.prototype, "layoutData", {
        get: function () {
            var orientationLayout;
            if (this.reelConfig.orientationLayoutData) {
                orientationLayout = this.reelConfig.orientationLayoutData.get(this.viewport.properOrientation);
            }
            var layoutData = orientationLayout || this.reelConfig.defaultLayoutData;
            if (!layoutData) {
                throw new Error('can\'t layout config.');
            }
            return layoutData;
        },
        enumerable: true,
        configurable: true
    });
    ReelsControllerView.prototype.reelInitView = function (reelIndex, config) {
        this.currentReelView[reelIndex].reelInit(config);
    };
    ReelsControllerView.prototype.reelInitOverView = function (reelIndex, config) {
        this.currentReelsOverlay[reelIndex].reelInit(config);
        this.currentReelsOverlay[reelIndex].symbolAnimationCompleteSignal.add(this.onSymbolAnimationComplete, this);
    };
    ReelsControllerView.prototype.reelSetSymbolName = function (reelIndex, symbolId, symbolName, state) {
        this.currentReelView[reelIndex].setSymbolNameWithState(symbolId, symbolName, state);
        this.currentReelsOverlay[reelIndex].setSymbolNameWithState(symbolId, symbolName, state);
    };
    //hiding blur symbols
    ReelsControllerView.prototype.reelSetSymbolState = function (reelIndex, symbolIndex, state) {
        this.currentReelView[reelIndex].setSymbolState(symbolIndex, state);
        this.currentReelsOverlay[reelIndex].setSymbolState(symbolIndex, state);
    };
    ReelsControllerView.prototype.moveLastSymbolToTop = function (reelIndex, symbolData, state) {
        this.currentReelView[reelIndex].moveLastSymbolToTop(symbolData, state);
        this.currentReelsOverlay[reelIndex].moveLastSymbolToTop(symbolData, state);
    };
    ReelsControllerView.prototype.tweenSymbolsUpdate = function (reelIndex, symbolId, y) {
        this.currentReelView[reelIndex].tweenSymbolsUpdate(symbolId, y);
        this.currentReelsOverlay[reelIndex].tweenSymbolsUpdate(symbolId, y);
    };
    ReelsControllerView.prototype.createElements = function (reelConfig) {
        this.reelSet = reelConfig.reelSet;
        this.reelConfig = reelConfig;
        this.initReelsBackground();
        this.initReelsView();
        this.initReelsOverlay();
        this.initReelsFrame();
        this.createAnticipations();
        this.createSymbolAnimationPool();
    };
    ReelsControllerView.prototype.createSymbolAnimationPool = function () {
        var symbols = this.reelConfig.reelDefinition.rangeSymbols;
        var numColumns = new Array();
        for (var reelSetIndex in this.reelSet) {
            if (this.reelSet.hasOwnProperty(reelSetIndex)) {
                numColumns.push(this.reelSet[reelSetIndex].length);
            }
        }
        var maxAnimNeeded = Math.max.apply(Math, numColumns);
        symbols.forEach(function (symbolName) {
            for (var type in ReelsEnums_1.SymbolAnimationPostfix) {
                if (util_1.isString(type)) {
                    var name = 'symbol_' + symbolName + ReelsEnums_1.SymbolAnimationPostfix[type];
                    Animation_1.Animation.createAnimationPool(name, maxAnimNeeded);
                }
            }
        });
    };
    ReelsControllerView.prototype.createAnticipations = function () {
        var _this = this;
        this.anticipationContainer = new PIXI.Container();
        this.anticipationContainer.name = 'AnticipationContainer';
        this.anticipationContainer.visible = false;
        this.addChild(this.anticipationContainer);
        this.anticipationAnimations = new Array();
        if (this.reelConfig.anticipationData.animations == undefined || this.reelConfig.anticipationData.animations.length == 0) {
            return;
        }
        this.reelConfig.anticipationData.animations.forEach(function (animation) {
            if (animation.type == IReelsConfig_1.AnticipationAnimationType.SPINE) {
                _this.anticipationAnimations.push(_this.createSpineAnimation(animation));
            }
            else if (animation.type == IReelsConfig_1.AnticipationAnimationType.SEQUENCE) {
                _this.anticipationAnimations.push(_this.createSequenceAnimation(animation.name));
            }
            else {
                _this.anticipationAnimations.push(_this.createParticleAnimation(animation));
            }
        });
    };
    ReelsControllerView.prototype.createSpineAnimation = function (data) {
        var animation = Animation_1.Animation.createSpineAnimation(data.name);
        var totalReels = new Array();
        for (var reelSetIndex in this.reelSet) {
            if (this.reelSet.hasOwnProperty(reelSetIndex)) {
                totalReels.push(this.reelSet[reelSetIndex].length);
            }
        }
        var largestNumReels = Math.max.apply(Math, totalReels);
        for (var i = (1 + this.reelConfig.anticipationData.modelData[0].anticipationSymbolCountTrigger); i < largestNumReels; i++) {
            animation.stateData.setMix(animation.name + '_Reel' + i.toString(), animation.name + '_Reel' + (i + 1).toString(), data.reelTransitionTime ? data.reelTransitionTime : this.defaultSpineTransitionTime);
        }
        animation.skeleton.slots.forEach(function (value, i) {
            animation.slotContainers[i].name = value.data.name;
        });
        this.anticipationContainer.addChild(animation);
        return animation;
    };
    ReelsControllerView.prototype.createSequenceAnimation = function (name) {
        var animation = Animation_1.Animation.getAnimationByName(name);
        animation.gotoAndStop(0);
        animation.loop = true;
        this.anticipationContainer.addChild(animation);
        return animation;
    };
    ReelsControllerView.prototype.createParticleAnimation = function (data) {
        var particleResource = PIXI.loader.resources[data.name].data;
        var particleImages = new Array();
        var container = new PIXI.particles.ParticleContainer();
        this.anticipationContainer.addChild(container);
        data.images.forEach(function (image) {
            particleImages.push(PIXI.Texture.fromImage(image));
        });
        var animation = new particles.Emitter(container, particleImages, particleResource);
        animation.emit = false;
        animation.autoUpdate = true;
        return animation;
    };
    ReelsControllerView.prototype.isSpineAnimation = function (animation) {
        return animation.spineData !== undefined;
    };
    ReelsControllerView.prototype.isSequenceAnimation = function (animation) {
        return animation.playing !== undefined;
    };
    ReelsControllerView.prototype.isMaskData = function (mask) {
        return mask.x !== undefined;
    };
    ReelsControllerView.prototype.updateContainerPosition = function () {
        this.reelsViewContainer.position.x = this.layoutData.position.x;
        this.reelsViewContainer.position.y = this.layoutData.position.y;
        var scale = this.layoutData.scale || 1;
        this.reelsViewContainer.scale.set(scale, scale);
        this.reelsOverlayContainer.position.x = this.reelsViewContainer.position.x;
        this.reelsOverlayContainer.position.y = this.reelsViewContainer.position.y;
        this.reelsOverlayContainer.scale.set(this.reelsViewContainer.scale.x, this.reelsViewContainer.scale.y);
    };
    ReelsControllerView.prototype.updateReelPosition = function (orientation) {
        var reelSet = this.reelSet[this.currentReelSetIndex];
        var viewContainer = this.reelViewMap.get(this.currentReelSetIndex);
        var overlayContainer = this.reelOverlayMap.get(this.currentReelSetIndex);
        if (viewContainer.children.length === 0) {
            return;
        }
        for (var index = 0; index < reelSet.length; index++) {
            var positionData = (orientation === Viewport_1.Orientation.PORTRAIT) ? reelSet[index].portraitPosition : reelSet[index].landscapePosition;
            positionData = positionData || this.reelConfig.defaultReelPosition[index];
            viewContainer.children[index].position.x = overlayContainer.children[index].position.x = positionData.position.x;
            viewContainer.children[index].position.y = overlayContainer.children[index].position.y = positionData.position.y;
        }
    };
    ReelsControllerView.prototype.positionUpdateOnTransition = function () {
        this.updateReelPosition(this.viewport.properOrientation);
    };
    ReelsControllerView.prototype.portraitLayout = function () {
        _super.prototype.portraitLayout.call(this);
        this.updateContainerPosition();
        this.updateReelPosition(Viewport_1.Orientation.PORTRAIT);
        this.updateMainReelMask();
    };
    ReelsControllerView.prototype.landscapeLayout = function () {
        _super.prototype.landscapeLayout.call(this);
        this.updateContainerPosition();
        this.updateReelPosition(Viewport_1.Orientation.LANDSCAPE);
        this.updateMainReelMask();
    };
    /**
     * initialize array with static picture and with reel mask
     */
    ReelsControllerView.prototype.initReelsView = function () {
        var _this = this;
        this.reelsContainer = new PIXI.Container();
        this.addChild(this.reelsContainer);
        this.reelsViewContainer = new PIXI.Container();
        this.reelsView = {};
        var _loop_1 = function (reelSetIndex) {
            this_1.reelsView[reelSetIndex] = this_1.reelsView[reelSetIndex] || [];
            var reelSetContainer = new PIXI.Container();
            reelSetContainer.name = "" + reelSetIndex;
            this_1.reelViewMap.set(+reelSetIndex, reelSetContainer);
            this_1.reelSet[reelSetIndex].forEach(function (reelConfig, reelIndex) {
                var layoutData = _this.getSingleReelLayoutData(+reelSetIndex, reelIndex);
                var reelContainer = new PIXI.Container();
                reelContainer.position.x = layoutData.position.x;
                reelContainer.position.y = layoutData.position.y;
                if (_this.reelConfig.individualReelsMask) {
                    var reelMask = _this.getReelMask(0, 0, reelConfig.width, reelConfig.symbol.height * reelConfig.symbolsOnReel);
                    reelContainer.mask = reelMask;
                    reelContainer.addChild(reelMask);
                }
                reelSetContainer.addChild(reelContainer);
                var baseReelView = _this.createReelStripView();
                baseReelView.setContainer(reelContainer);
                baseReelView.setId(reelIndex);
                _this.reelsView[reelSetIndex].push(baseReelView);
            });
            this_1.reelsViewContainer.addChild(reelSetContainer);
        };
        var this_1 = this;
        for (var _i = 0, _a = Object.keys(this.reelSet); _i < _a.length; _i++) {
            var reelSetIndex = _a[_i];
            _loop_1(reelSetIndex);
        }
        this.reelsContainer.addChild(this.reelsViewContainer);
    };
    ReelsControllerView.prototype.getReelMask = function (x, y, width, height) {
        var reelMask = new pixi_js_1.Graphics();
        reelMask.beginFill(0);
        reelMask.drawRect(0, 0, width, height);
        reelMask.endFill();
        reelMask.position.x = x;
        reelMask.position.y = y;
        return reelMask;
    };
    /**
     * initialize array of items that only may the size of symbol can be larger than usual
     */
    ReelsControllerView.prototype.initReelsOverlay = function () {
        var _this = this;
        this.reelsOverlayContainer = new PIXI.Container();
        this.reelsOverlay = {};
        var _loop_2 = function (reelSetIndex) {
            this_2.reelsOverlay[reelSetIndex] = this_2.reelsOverlay[reelSetIndex] || [];
            var reelSetContainer = new PIXI.Container();
            reelSetContainer.name = "" + reelSetIndex;
            this_2.reelOverlayMap.set(+reelSetIndex, reelSetContainer);
            this_2.reelSet[reelSetIndex].forEach(function (reelConfig, reelIndex) {
                var position = _this.getSingleReelLayoutData(+reelSetIndex, reelIndex).position;
                var reelContainer = new PIXI.Container();
                reelContainer.position.x = position.x;
                reelContainer.position.y = position.y;
                reelSetContainer.addChild(reelContainer);
                var baseReelView = _this.createReelStripOverlay();
                baseReelView.setContainer(reelContainer);
                baseReelView.setId(reelIndex);
                _this.reelsOverlay[reelSetIndex].push(baseReelView);
            });
            this_2.reelsOverlayContainer.addChild(reelSetContainer);
        };
        var this_2 = this;
        for (var _i = 0, _a = Object.keys(this.reelSet); _i < _a.length; _i++) {
            var reelSetIndex = _a[_i];
            _loop_2(reelSetIndex);
        }
        this.reelsContainer.addChild(this.reelsOverlayContainer);
    };
    ReelsControllerView.prototype.createReelMask = function () {
        if (this.reelConfig.orientationMaskData || this.reelConfig.defaultReelsMask) {
            var mask = this.maskConfig;
            if (this.isMaskData(mask)) {
                return this.getReelMask(mask.x, mask.y, mask.width, mask.height);
            }
            else {
                return pixi_js_1.Sprite.fromFrame(mask);
            }
        }
        else {
            return this.getDefaultGameMask();
        }
    };
    ReelsControllerView.prototype.updateMainReelMask = function () {
        if (this.reelsContainer.mask) {
            var oldMask = this.reelsContainer.mask;
            this.reelsContainer.mask = undefined;
            this.reelsContainer.removeChild(oldMask);
        }
        var mask = this.createReelMask();
        this.reelsContainer.mask = mask;
        this.reelsContainer.addChild(mask);
    };
    ReelsControllerView.prototype.getDefaultGameMask = function () {
        var firstConfig = this.reelSet[this.currentReelSetIndex][0];
        var firstConfigPosition = this.getSingleReelLayoutData(this.currentReelSetIndex, 0).position;
        var lastConfig = this.reelSet[this.currentReelSetIndex][this.reelSet[this.currentReelSetIndex].length - 1];
        var lastConfigPosition = this.getSingleReelLayoutData(this.currentReelSetIndex, this.reelSet[this.currentReelSetIndex].length - 1).position;
        return this.getReelMask(firstConfigPosition.x, firstConfigPosition.y, lastConfigPosition.x + lastConfig.width - firstConfigPosition.x, firstConfig.symbol.height * firstConfig.symbolsOnReel);
    };
    ReelsControllerView.prototype.createReelStripView = function () {
        return es5_1.Container.get(ReelStripView_1.ReelStripView);
    };
    ReelsControllerView.prototype.createReelStripOverlay = function () {
        return es5_1.Container.get(ReelStripOverlay_1.ReelStripOverlay);
    };
    ReelsControllerView.prototype.setActiveReelStripSet = function (set) {
        this.currentReelSetIndex = set;
        this.reelsViewContainer.children.forEach(function (reelSetView, index) {
            reelSetView.visible = (index === set);
        });
        this.reelsOverlayContainer.children.forEach(function (reelSetView, index) {
            reelSetView.visible = (index === set);
        });
        this.updateMainReelMask();
    };
    /**
     * Add reel background to stage according to setting in config
     */
    ReelsControllerView.prototype.initReelsBackground = function () {
        if (this.reelConfig.reelBackground != null) {
            this.reelBackground = pixi_js_1.Sprite.fromFrame(this.reelConfig.reelBackground.assetName);
            this.reelBackground.position.set(this.reelConfig.reelBackground.x, this.reelConfig.reelBackground.y);
            this.addChild(this.reelBackground);
        }
    };
    /**
     * Add reel frame to stage according to setting in config
     */
    ReelsControllerView.prototype.initReelsFrame = function () {
        if (this.reelConfig.reelsFrames != null) {
            for (var i = 0; i < this.reelConfig.reelsFrames.length; i++) {
                var reelsFrame = this.reelConfig.reelsFrames[i];
                if (this.reelFrames == undefined) {
                    this.reelFrames = new Array();
                }
                this.reelFrames.push(pixi_js_1.Sprite.fromImage(reelsFrame.assetName));
                this.reelFrames[i].position.set(reelsFrame.x, reelsFrame.y);
                if (reelsFrame.scaleX != undefined && reelsFrame.scaleY != undefined) {
                    this.reelFrames[i].scale.set(reelsFrame.scaleX, reelsFrame.scaleY);
                }
                this.addChild(this.reelFrames[i]);
            }
        }
    };
    ReelsControllerView.prototype.deleteAllAnimations = function () {
        var _this = this;
        var numTimers = this.idleTimerArray.length;
        for (var i = 0; i < numTimers; i++) {
            var timer = this.idleTimerArray.pop();
            timer.stop();
            timer.destroy();
        }
        if (this.debugAnimationTimer != null) {
            this.debugAnimationTimer.stop();
        }
        this.completedAnimationCounter = 0;
        this.reelsView[this.currentReelSetIndex].forEach(function (stripView, index) {
            for (var j = 0; j < _this.reelSet[_this.currentReelSetIndex][index].symbolsOnReel; j++) {
                stripView.showSymbol(j);
            }
            _this.currentReelsOverlay[index].deleteSymbolsAnimation();
        });
    };
    ReelsControllerView.prototype.stopAnticipate = function () {
        var _this = this;
        this.anticipationContainer.visible = false;
        this.anticipationAnimations.forEach(function (animation) {
            if (_this.isSpineAnimation(animation)) {
                animation.state.setEmptyAnimation(0, 0);
                animation.state.setEmptyAnimation(1, 0);
            }
            else if (_this.isSequenceAnimation(animation)) {
                animation.gotoAndStop(0);
            }
            else {
                animation.emit = false;
            }
        });
    };
    ReelsControllerView.prototype.anticipateReel = function (reelId) {
        var _this = this;
        this.anticipationContainer.visible = true;
        this.anticipationAnimations.forEach(function (animation) {
            if (_this.isSpineAnimation(animation)) {
                animation.state.setAnimation(0, animation.name + '_Idle', true);
                animation.state.setAnimation(1, animation.name + '_Reel' + (reelId + 1), false); //Need reelID +1 because reelIDs are 0 based and animations are 1 based
            }
            else if (_this.isSequenceAnimation(animation)) {
                animation.position.x = _this.currentReelView[reelId].position.x;
                animation.position.y = _this.currentReelView[reelId].position.y;
                animation.play();
            }
            else {
                animation.parent.x = _this.currentReelView[reelId].position.x;
                animation.parent.y = _this.currentReelView[reelId].position.y;
                animation.emit = true;
            }
        });
    };
    ReelsControllerView.prototype.anticipateScatters = function (dropped) {
        var _this = this;
        dropped.forEach(function (symbolId, index) {
            if (symbolId >= 0) {
                if (_this.currentReelsOverlay[index].playSymbolAnimation(symbolId, ReelsEnums_1.SymbolAnimationPostfix.ANTICIPATION)) {
                    _this.currentReelView[index].hideSymbol(symbolId);
                    _this.currentReelsOverlay[index].showSymbol(symbolId);
                }
            }
        });
    };
    ReelsControllerView.prototype.setSymbolsStateForAll = function (state) {
        var _this = this;
        this.currentReelSet.forEach(function (reel, index) {
            for (var j = 1; j <= reel.symbolsOnReel; j++) {
                _this.currentReelView[index].setSymbolState(j, state);
                _this.currentReelsOverlay[index].setSymbolState(j, state);
            }
        });
    };
    ReelsControllerView.prototype.onSymbolAnimationComplete = function (reelId, symbolId, type) {
        this.currentReelsOverlay[reelId].hideSymbol(symbolId);
        this.currentReelView[reelId].showSymbol(symbolId);
        if (type != ReelsEnums_1.SymbolAnimationPostfix.DROPPED) {
            this.completedAnimationCounter--;
            if (this.completedAnimationCounter == 0) {
                if (type == ReelsEnums_1.SymbolAnimationPostfix.WIN || this.checkWildMultiplierAnimationType(type)) {
                    this.dispatchAllSymbolsAnimationComplete();
                }
                else if (type == ReelsEnums_1.SymbolAnimationPostfix.IDLE) {
                    this.idleAnimationsCompleteSignal.dispatch();
                }
            }
        }
    };
    ReelsControllerView.prototype.checkWildMultiplierAnimationType = function (type) {
        if (type == ReelsEnums_1.SymbolAnimationPostfix.WILD_X2 ||
            type == ReelsEnums_1.SymbolAnimationPostfix.WILD_X3 ||
            type == ReelsEnums_1.SymbolAnimationPostfix.WILD_X4) {
            return true;
        }
        return false;
    };
    ReelsControllerView.prototype.playShaking = function (reelId) {
        var _this = this;
        var isShaking = false;
        this.currentReelSet.forEach(function (reel, index) {
            if (reelId == index) {
                for (var j = 1; j <= reel.symbolsOnReel; j++) {
                    _this.currentReelView[index].hideSymbol(j);
                    _this.currentReelsOverlay[index].showSymbol(j);
                    _this.currentReelsOverlay[index].playSymbolShaking(j);
                }
                isShaking = true;
            }
        });
        return isShaking;
    };
    ReelsControllerView.prototype.stopShaking = function () {
        var _this = this;
        this.currentReelSet.forEach(function (reel, index) {
            for (var j = 1; j <= reel.symbolsOnReel; j++) {
                _this.currentReelView[index].showSymbol(j);
                _this.currentReelsOverlay[index].hideSymbol(j);
                _this.currentReelsOverlay[index].stopSymbolShaking(j, _this.currentReelView[index].getSymbolContainer(j).x, _this.currentReelView[index].getSymbolContainer(j).y);
            }
        });
    };
    /**
     * when we try show idle animation, we hide static symbol and show overlay symbol
     */
    ReelsControllerView.prototype.playIdleAnimationsLoop = function () {
        var _this = this;
        this.deleteAllAnimations();
        this.currentReelSet.forEach(function (reel, index) {
            for (var j = 1; j <= reel.symbolsOnReel; j++) {
                if (_this.currentReelsOverlay[index].playSymbolAnimation(j, ReelsEnums_1.SymbolAnimationPostfix.IDLE)) {
                    _this.currentReelView[index].hideSymbol(j);
                    _this.currentReelsOverlay[index].showSymbol(j);
                    _this.completedAnimationCounter++;
                }
            }
        });
    };
    ReelsControllerView.prototype.playRandomIdleAnimations = function () {
        var _this = this;
        this.deleteAllAnimations();
        this.currentReelSet.forEach(function (reel, index) {
            var _loop_3 = function (j) {
                var randomData = _this.reelConfig.idleAnimationRandomChance;
                if (Math.random() < randomData.percent) {
                    var time = 1000 * ((Math.random() * randomData.startDelayMax) + randomData.startDelayMin);
                    _this.idleTimerArray.push(new SimpleTimer_1.SimpleTimer(time, function () {
                        if (_this.currentReelsOverlay[index].playSymbolAnimation(j, ReelsEnums_1.SymbolAnimationPostfix.IDLE)) {
                            _this.currentReelView[index].hideSymbol(j);
                            _this.currentReelsOverlay[index].showSymbol(j);
                            _this.completedAnimationCounter++;
                        }
                    }));
                }
            };
            for (var j = 1; j <= reel.symbolsOnReel; j++) {
                _loop_3(j);
            }
        });
    };
    /**
     * when we try show drop animation, we hide static symbol and show overlay symbol
     */
    ReelsControllerView.prototype.symbolDropAnimation = function (reelId, symbolId) {
        if (this.currentReelsOverlay[reelId].playSymbolAnimation(symbolId, ReelsEnums_1.SymbolAnimationPostfix.DROPPED)) {
            this.currentReelView[reelId].hideSymbol(symbolId);
            this.currentReelsOverlay[reelId].showSymbol(symbolId);
        }
    };
    /**
     * when we try show win line animation, we hide static symbol and show overlay symbol
     * @param {WinLine} winItemsData for show win symbols
     * @param {Array< Array <number> >} loseSymbolsPosition the position of symbols that we should transform
     * to LOSE state
     */
    ReelsControllerView.prototype.showWinLine = function (winItemsData) {
        var _this = this;
        this.deleteAllAnimations();
        var isWildMultiplier = false;
        var countTopExtraSymbol = 1; // the previous symbol on the reelview top
        winItemsData.winTable.forEach(function (reel, reelIndex) {
            if (reel === null || reel.length === 0) {
                return;
            }
            reel.forEach(function (value, symbolIndex) {
                if (!value) { // skip lose symbol
                    return;
                }
                // if the symbol type is wild and wild_multiplier feature, we need change wild animation.
                isWildMultiplier = false;
                var symbolId = symbolIndex + countTopExtraSymbol;
                if (winItemsData.wildMultiplier != undefined && winItemsData.wildMultiplier.length > 0) {
                    winItemsData.wildMultiplier.forEach(function (feature) {
                        var wildId = feature.symbol_index + countTopExtraSymbol;
                        if (feature.reel_index == reelIndex && wildId == symbolId) { // is wild Symbol
                            isWildMultiplier = true;
                            _this.playWildMultiplierAnimation(feature.reel_index, wildId, feature.multiplier);
                        }
                    });
                }
                if (!isWildMultiplier && _this.currentReelsOverlay[reelIndex].playSymbolAnimation(symbolId, ReelsEnums_1.SymbolAnimationPostfix.WIN)) {
                    _this.currentReelView[reelIndex].hideSymbol(symbolId);
                    _this.currentReelsOverlay[reelIndex].showSymbol(symbolId);
                    _this.completedAnimationCounter++;
                }
            });
        });
        if (this.completedAnimationCounter == 0) { // when we do not symbols animation
            this.debugAnimationTimer = new SimpleTimer_1.SimpleTimer(3000, this.dispatchAllSymbolsAnimationComplete.bind(this));
        }
    };
    ReelsControllerView.prototype.playWildMultiplierAnimation = function (reelId, symbolId, multiplier) {
        var wildType;
        switch (multiplier) {
            case 2:
                wildType = ReelsEnums_1.SymbolAnimationPostfix.WILD_X2;
                break;
            case 3:
                wildType = ReelsEnums_1.SymbolAnimationPostfix.WILD_X3;
                break;
            case 4:
                wildType = ReelsEnums_1.SymbolAnimationPostfix.WILD_X4;
                break;
        }
        if (wildType != undefined && this.currentReelsOverlay[reelId].playSymbolAnimation(symbolId, wildType)) {
            this.currentReelView[reelId].hideSymbol(symbolId);
            this.currentReelsOverlay[reelId].showSymbol(symbolId);
            this.completedAnimationCounter++;
        }
    };
    ReelsControllerView.prototype.setSymbolStateFromPositions = function (winTable, winState, loseState) {
        var _this = this;
        winTable.forEach(function (reelPosition, i) {
            reelPosition.forEach(function (value, j) {
                var symbolState = (value) ? winState : loseState;
                _this.currentReelView[i].setSymbolState(j + 1, symbolState);
                _this.currentReelsOverlay[i].setSymbolState(j + 1, symbolState);
            });
        });
    };
    ReelsControllerView.prototype.dispatchAllSymbolsAnimationComplete = function () {
        GlobalDispatcher_1.GlobalDispatcher.dispatchIntoExpectedStates(ReelsControllerView.ALL_SYMBOLS_ANIMATION_COMPLETE, [
            this.stateNames.freeRespinsAllLineWin,
            this.stateNames.freeRespinsShowWinning,
            this.stateNames.allLineWin,
            this.stateNames.skip_allLineWin,
            this.stateNames.showWinning,
            this.stateNames.showWinningLoop,
            this.stateNames.prefeatureWinning,
            this.stateNames.freeSpinsAllLineWin,
            this.stateNames.skip_freeSpinsAllLineWin,
            this.stateNames.freeSpinsShowWinning
        ]);
    };
    ReelsControllerView.prototype.getSingleReelLayoutData = function (reelSetIndex, reelIndex) {
        var orientationLayout;
        if (this.viewport.properOrientation === Viewport_1.Orientation.LANDSCAPE) {
            orientationLayout = this.reelConfig.reelSet[reelSetIndex][reelIndex].landscapePosition;
        }
        else if (this.viewport.properOrientation === Viewport_1.Orientation.PORTRAIT) {
            orientationLayout = this.reelConfig.reelSet[reelSetIndex][reelIndex].portraitPosition;
        }
        var layoutData = orientationLayout || this.reelConfig.defaultReelPosition[reelIndex];
        return layoutData;
    };
    ReelsControllerView.ALL_SYMBOLS_ANIMATION_COMPLETE = 'allSymbolsAnimationComplete';
    return ReelsControllerView;
}(SlotCompView_1.SlotCompView));
exports.ReelsControllerView = ReelsControllerView;


/***/ }),
/* 396 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var MiniSignal = __webpack_require__(3);
var pixi_js_1 = __webpack_require__(4);
var es5_1 = __webpack_require__(0);
var Symbol_1 = __webpack_require__(763);
var ReelStripView = /** @class */ (function () {
    function ReelStripView() {
        this.countTopExtraSymbol = 1;
        this.countBottomExtraSymbol = 1;
        this.symbolAnimationCompleteSignal = new MiniSignal();
    }
    Object.defineProperty(ReelStripView.prototype, "position", {
        get: function () {
            return this.stripContainer != undefined ? this.stripContainer.position : new pixi_js_1.Point(0, 0);
        },
        enumerable: true,
        configurable: true
    });
    ReelStripView.prototype.setContainer = function (stripContainer) {
        this.stripContainer = stripContainer;
    };
    ReelStripView.prototype.setId = function (id) {
        this.id = id;
    };
    ReelStripView.prototype.reelInit = function (e) {
        this.config = e;
        this.totalSymbolsCount = this.countTopExtraSymbol + this.config.symbolsOnReel + this.countBottomExtraSymbol;
        this.createSymbols();
    };
    ReelStripView.prototype.createSymbols = function () {
        if (this.config.winAnimationOverride) {
            Symbol_1.Symbol.addWinAnimationOverrides(this.config.winAnimationOverride.symbolOverrides, this.config.winAnimationOverride.tweenData);
        }
        this.symbols = new Array();
        for (var i = 0; i < this.totalSymbolsCount; i++) {
            var symbol = this.createSymbol();
            symbol.setId(i);
            symbol.setConfig(this.config.symbol);
            symbol.symbolContainer.position.y = i * this.config.symbol.height - this.config.symbol.height;
            symbol.animationCompleteSignal.add(this.symbolAnimationComplete, this);
            this.stripContainer.addChild(symbol.symbolContainer);
            this.symbols.push(symbol);
        }
    };
    ReelStripView.prototype.createSymbol = function () {
        return es5_1.Container.get(Symbol_1.Symbol);
    };
    ReelStripView.prototype.symbolAnimationComplete = function (symbolId, type) {
        this.symbolAnimationCompleteSignal.dispatch(this.id, symbolId, type);
    };
    ReelStripView.prototype.tweenSymbolsUpdate = function (symbolId, y) {
        //console.log( 'ReelStripView::tweenSymbolsUpdate()' );
        this.symbols[symbolId].symbolContainer.y = y;
    };
    ReelStripView.prototype.moveLastSymbolToTop = function (symbolData, state) {
        var symbol = this.symbols.pop();
        symbol.symbolContainer.position.y = symbolData.posY;
        symbol.setSymbolNameWithState(symbolData.symbolName, state);
        this.symbols.unshift(symbol);
        symbol.symbolContainer.parent.setChildIndex(symbol.symbolContainer, symbol.symbolContainer.parent.children.length - 1);
        this.symbols.forEach(function (element, i) {
            element.setId(i);
        });
    };
    ReelStripView.prototype.hideExtraSymbols = function () {
        var index;
        for (index = 0; index < this.countTopExtraSymbol; index++) {
            this.hideSymbol(index);
        }
        for (index += this.config.symbolsOnReel; index < this.totalSymbolsCount; index++) {
            this.hideSymbol(index);
        }
    };
    ReelStripView.prototype.setSymbolNameWithState = function (symbolId, symbolName, state) {
        this.symbols[symbolId].setSymbolNameWithState(symbolName, state);
    };
    ReelStripView.prototype.setSymbolState = function (symbolId, state) {
        this.symbols[symbolId].setSymbolState(state);
    };
    ReelStripView.prototype.playSymbolAnimation = function (symbolId, typeAnim) {
        return this.symbols[symbolId].playAnimation(typeAnim);
    };
    ReelStripView.prototype.playSymbolShaking = function (symbolId) {
        return this.symbols[symbolId].playShaking();
    };
    ReelStripView.prototype.stopSymbolShaking = function (symbolId, restorePosX, restorePosY) {
        return this.symbols[symbolId].stopShaking(restorePosX, restorePosY);
    };
    ReelStripView.prototype.hideSymbol = function (symbolId) {
        return this.symbols[symbolId].symbolContainer.visible = false;
    };
    ReelStripView.prototype.showSymbol = function (symbolId) {
        return this.symbols[symbolId].symbolContainer.visible = true;
    };
    ReelStripView.prototype.getSymbolContainer = function (symbolId) {
        return this.symbols[symbolId].symbolContainer;
    };
    ReelStripView.prototype.playItemsAnimation = function (itemId, typeAnim) {
        return this.symbols[this.countTopExtraSymbol + itemId].playAnimation(typeAnim);
    };
    ReelStripView.prototype.deleteSymbolsAnimation = function () {
        for (var i = 0; i < this.symbols.length; i++) {
            this.symbols[i].deleteAnimation();
        }
    };
    ReelStripView.prototype.getConfig = function () {
        return this.config;
    };
    Object.defineProperty(ReelStripView.prototype, "visible", {
        get: function () {
            return this.stripContainer.visible;
        },
        set: function (visible) {
            this.stripContainer.visible = visible;
        },
        enumerable: true,
        configurable: true
    });
    return ReelStripView;
}());
exports.ReelStripView = ReelStripView;


/***/ }),
/* 397 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var SoundManager_1 = __webpack_require__(13);
var BackgroundController_1 = __webpack_require__(768);
var SlotSoundConfig_1 = __webpack_require__(36);
var SlotBackgroundView_1 = __webpack_require__(400);
var SlotBackgroundController = /** @class */ (function (_super) {
    __extends(SlotBackgroundController, _super);
    function SlotBackgroundController(view) {
        return _super.call(this, view) || this;
    }
    SlotBackgroundController.prototype.init = function (_data) {
        this.soundManager.play(SlotSoundConfig_1.SlotSoundConfig.backgroundLoop, SoundManager_1.AudioTrackName.MUSIC, true);
        _super.prototype.init.call(this, _data);
    };
    SlotBackgroundController.prototype.startPickFeature = function (_data) {
        var _this = this;
        this.soundManager.play(SlotSoundConfig_1.SlotSoundConfig.bonusIntro, SoundManager_1.AudioTrackName.MUSIC, false, function () {
            _this.soundManager.play(SlotSoundConfig_1.SlotSoundConfig.bonusLoop, SoundManager_1.AudioTrackName.MUSIC, true);
        });
        this.finishStateAction();
    };
    SlotBackgroundController.prototype.transitionToBaseGame = function (_data) {
        this.soundManager.play(SlotSoundConfig_1.SlotSoundConfig.backgroundLoop, SoundManager_1.AudioTrackName.MUSIC, true);
        this.finishStateAction();
    };
    SlotBackgroundController.prototype.transitionToFreeSpins = function (_data) {
        var _this = this;
        if (this.soundManager.isPlaying(SlotSoundConfig_1.SlotSoundConfig.bonusLoop) || this.soundManager.isPlaying(SlotSoundConfig_1.SlotSoundConfig.bonusIntro)) {
            this.finishStateAction();
            return;
        }
        this.soundManager.play(SlotSoundConfig_1.SlotSoundConfig.bonusIntro, SoundManager_1.AudioTrackName.MUSIC, false, function () {
            _this.soundManager.play(SlotSoundConfig_1.SlotSoundConfig.bonusLoop, SoundManager_1.AudioTrackName.MUSIC, true);
        });
        this.finishStateAction();
    };
    var _a;
    SlotBackgroundController = __decorate([
        __param(0, es5_1.Inject),
        __metadata("design:paramtypes", [typeof (_a = typeof SlotBackgroundView_1.SlotBackgroundView !== "undefined" && SlotBackgroundView_1.SlotBackgroundView) === "function" && _a || Object])
    ], SlotBackgroundController);
    return SlotBackgroundController;
}(BackgroundController_1.BackgroundController));
exports.SlotBackgroundController = SlotBackgroundController;


/***/ }),
/* 398 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var AnimationView_1 = __webpack_require__(241);
var StateMachine_1 = __webpack_require__(198);
var LazyCompController_1 = __webpack_require__(381);
var AnimationViewConfig_1 = __webpack_require__(152);
var AnimationViewController = /** @class */ (function (_super) {
    __extends(AnimationViewController, _super);
    function AnimationViewController(view, lazyGroupIndex) {
        var _this = _super.call(this, view, lazyGroupIndex) || this;
        _this.context = _this;
        return _this;
    }
    AnimationViewController.prototype.init = function (data) {
        if (this.view != undefined) {
            this.view.initialize(this.gameConfig.getConfig(AnimationViewConfig_1.AnimationViewConfig));
        }
        this.finishStateAction();
    };
    AnimationViewController.prototype.setState = function (state) {
        this.view.playAnimation(state.stateName, this.context);
        return _super.prototype.setState.call(this, state);
    };
    AnimationViewController.prototype.skipState = function (state) {
        this.view.playAnimation(StateMachine_1.StateMachine.PREFIX_SKIP + state.stateName, this.context);
        _super.prototype.skipState.call(this, state);
    };
    var _a;
    AnimationViewController = __decorate([
        __param(0, es5_1.Inject),
        __metadata("design:paramtypes", [typeof (_a = typeof AnimationView_1.AnimationView !== "undefined" && AnimationView_1.AnimationView) === "function" && _a || Object, Number])
    ], AnimationViewController);
    return AnimationViewController;
}(LazyCompController_1.LazyCompController));
exports.AnimationViewController = AnimationViewController;


/***/ }),
/* 399 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var CoreUIElementFactory_1 = __webpack_require__(28);
var AnimationView_1 = __webpack_require__(241);
var BackgroundView = /** @class */ (function (_super) {
    __extends(BackgroundView, _super);
    function BackgroundView() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.staticImages = new Array();
        return _this;
    }
    BackgroundView.prototype.createElements = function (config) {
        _super.prototype.createElements.call(this, config);
        this.setupStaticImages();
    };
    BackgroundView.prototype.setupStaticImages = function () {
        var _this = this;
        if (this.config.staticImages == undefined) {
            return;
        }
        this.config.staticImages.forEach(function (spriteElement) {
            var image = CoreUIElementFactory_1.CoreUIElementFactory.createInstance(spriteElement);
            _this.addChild(image);
            _this.staticImages.push(image);
        });
    };
    return BackgroundView;
}(AnimationView_1.AnimationView));
exports.BackgroundView = BackgroundView;


/***/ }),
/* 400 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var SlotSoundConfig_1 = __webpack_require__(36);
var BackgroundView_1 = __webpack_require__(399);
var SlotBackgroundView = /** @class */ (function (_super) {
    __extends(SlotBackgroundView, _super);
    function SlotBackgroundView() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SlotBackgroundView.prototype.getAssetsList = function () {
        return [
            {
                assetKey: SlotSoundConfig_1.SlotSoundConfig.backgroundLoop,
                assetURL: 'assets/sound/game/Background_Loop.mp3'
            },
            {
                assetKey: SlotSoundConfig_1.SlotSoundConfig.bonusIntro,
                assetURL: 'assets/sound/game/Bonus_Intro.mp3'
            },
            {
                assetKey: SlotSoundConfig_1.SlotSoundConfig.bonusLoop,
                assetURL: 'assets/sound/game/Bonus_Loop.mp3'
            }
        ];
    };
    return SlotBackgroundView;
}(BackgroundView_1.BackgroundView));
exports.SlotBackgroundView = SlotBackgroundView;


/***/ }),
/* 401 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var SlotUIStates_1 = __webpack_require__(231);
var MLUIStates = /** @class */ (function (_super) {
    __extends(MLUIStates, _super);
    function MLUIStates() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MLUIStates = __decorate([
        es5_1.Singleton
    ], MLUIStates);
    return MLUIStates;
}(SlotUIStates_1.SlotUIStates));
exports.MLUIStates = MLUIStates;


/***/ }),
/* 402 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var SlotUILocalButtonsController_1 = __webpack_require__(158);
var MLUILocalButtonsController = /** @class */ (function (_super) {
    __extends(MLUILocalButtonsController, _super);
    function MLUILocalButtonsController() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MLUILocalButtonsController = __decorate([
        es5_1.Singleton
    ], MLUILocalButtonsController);
    return MLUILocalButtonsController;
}(SlotUILocalButtonsController_1.SlotUILocalButtonsController));
exports.MLUILocalButtonsController = MLUILocalButtonsController;


/***/ }),
/* 403 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var pixi_js_1 = __webpack_require__(4);
var MLUIPanel_1 = __webpack_require__(94);
var SpinButton_1 = __webpack_require__(775);
var MLUISpinPanel = /** @class */ (function (_super) {
    __extends(MLUISpinPanel, _super);
    function MLUISpinPanel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MLUISpinPanel.prototype.createElements = function (config) {
        this.spinConfig = config;
        this.spinButton = new SpinButton_1.SpinButton(config.spinButton, this.localButtonsController);
        this.spinButton.anchor = new pixi_js_1.Point(0.5, 0.5);
        this.addChild(this.spinButton);
    };
    MLUISpinPanel.prototype.onPressEvent = function () {
        this.spinButton.onPressEvent();
    };
    MLUISpinPanel.prototype.onSpinStart = function () {
        this.spinButton.onSpinStart();
    };
    MLUISpinPanel.prototype.onSpinStop = function () {
        this.spinButton.onSpinStop();
    };
    MLUISpinPanel.prototype.showSpinButton = function () {
        this.spinButton.switchIconState(SpinButton_1.SpinButtonState.SPIN);
    };
    MLUISpinPanel.prototype.showStopSpinButton = function () {
        this.spinButton.switchIconState(SpinButton_1.SpinButtonState.STOP_SPIN);
    };
    MLUISpinPanel.prototype.showStopReelButton = function () {
        this.spinButton.switchIconState(SpinButton_1.SpinButtonState.STOP_REELS);
    };
    MLUISpinPanel.prototype.transitionToFreeSpins = function (currentFeatureCount, totalFreeSpinCount) {
        this.spinButton.isFreeSpin = true;
        this.setSpinButtonAutoSpins(totalFreeSpinCount, currentFeatureCount);
    };
    MLUISpinPanel.prototype.transitionToBaseGame = function () {
        this.spinButton.isFreeSpin = false;
        this.stopAutoSpins();
    };
    MLUISpinPanel.prototype.setSpinButtonAutoSpins = function (value, currentSpin) {
        this.spinButton.updateClickDataCounts(currentSpin, value);
        this.spinButton.setAutospins(currentSpin, value);
        this.spinButton.switchIconState(SpinButton_1.SpinButtonState.SPIN);
    };
    MLUISpinPanel.prototype.updateClickData = function (currentCount, total) {
        this.spinButton.updateClickDataCounts(currentCount, total);
    };
    MLUISpinPanel.prototype.setSpinButtonFreeSpins = function (currentCount, totalCount) {
        this.spinButton.setFreeSpinCount(currentCount, totalCount);
    };
    MLUISpinPanel.prototype.checkAndStopAutoSpins = function () {
        this.spinButton.checkAndStopAutoSpins();
    };
    MLUISpinPanel.prototype.stopAutoSpins = function () {
        this.spinButton.stopAutoSpins();
        this.spinButton.switchIconState(this.spinButton.getCurrentIconState());
    };
    MLUISpinPanel.prototype.setInteractive = function (value) {
        this.spinButton.interactive = value;
    };
    MLUISpinPanel.prototype.showDisabledButton = function () {
        this.spinButton.switchIconState(SpinButton_1.SpinButtonState.DISABLED);
    };
    return MLUISpinPanel;
}(MLUIPanel_1.MLUIPanel));
exports.MLUISpinPanel = MLUISpinPanel;


/***/ }),
/* 404 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var ExternalModuleManager_1 = __webpack_require__(218);
var MLUIExternalModuleManager = /** @class */ (function (_super) {
    __extends(MLUIExternalModuleManager, _super);
    function MLUIExternalModuleManager() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MLUIExternalModuleManager = __decorate([
        es5_1.Singleton
    ], MLUIExternalModuleManager);
    return MLUIExternalModuleManager;
}(ExternalModuleManager_1.ExternalModuleManager));
exports.MLUIExternalModuleManager = MLUIExternalModuleManager;


/***/ }),
/* 405 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var CoreWebElement_1 = __webpack_require__(68);
/**
 * Text element for web page
 */
var WebTextElement = /** @class */ (function (_super) {
    __extends(WebTextElement, _super);
    function WebTextElement() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    WebTextElement.prototype.CreateElement = function (config) {
        return config;
    };
    WebTextElement.elementType = 'WEB_TEXT_ELEMENT';
    return WebTextElement;
}(CoreWebElement_1.CoreWebElement));
exports.WebTextElement = WebTextElement;


/***/ }),
/* 406 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var CoreWebElement_1 = __webpack_require__(68);
/**
 * image slideshow block
 * switch several pictures with slideshow effect
 */
var WebImageSlideshowElement = /** @class */ (function (_super) {
    __extends(WebImageSlideshowElement, _super);
    function WebImageSlideshowElement() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    WebImageSlideshowElement.prototype.createElement = function (config) {
        return config;
    };
    WebImageSlideshowElement.elementType = 'WEB_IMAGE_SLIDESHOW';
    return WebImageSlideshowElement;
}(CoreWebElement_1.CoreWebElement));
exports.WebImageSlideshowElement = WebImageSlideshowElement;
var TransitionEffectType;
(function (TransitionEffectType) {
    TransitionEffectType["FADE_IN"] = "FADE_IN";
    TransitionEffectType["RIGHT_TO_LEFT"] = "RIGHT_TO_LEFT";
})(TransitionEffectType = exports.TransitionEffectType || (exports.TransitionEffectType = {}));


/***/ }),
/* 407 */,
/* 408 */,
/* 409 */,
/* 410 */,
/* 411 */,
/* 412 */,
/* 413 */,
/* 414 */,
/* 415 */,
/* 416 */,
/* 417 */,
/* 418 */,
/* 419 */,
/* 420 */,
/* 421 */,
/* 422 */,
/* 423 */,
/* 424 */,
/* 425 */,
/* 426 */,
/* 427 */,
/* 428 */,
/* 429 */,
/* 430 */,
/* 431 */,
/* 432 */,
/* 433 */,
/* 434 */,
/* 435 */,
/* 436 */,
/* 437 */,
/* 438 */,
/* 439 */,
/* 440 */,
/* 441 */,
/* 442 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var pixi_js_1 = __webpack_require__(4);
var ToggleButton_1 = __webpack_require__(443);
var WebTextField_1 = __webpack_require__(35);
var TextToggleButton = /** @class */ (function (_super) {
    __extends(TextToggleButton, _super);
    function TextToggleButton(data, localButtonsController) {
        var _this = _super.call(this, data, localButtonsController) || this;
        if (data.text != undefined) {
            var textData = data.text;
            _this.textField = new WebTextField_1.WebTextField(textData);
            var inverseScaleX = 1 / _this.scale.x;
            var inverseScaleY = 1 / _this.scale.y;
            _this.textField.scale.set(inverseScaleX, inverseScaleY);
            if (textData.position == undefined) {
                _this.textField.anchor = new pixi_js_1.Point(0.5, 0.5);
                _this.textField.position.set((_this.activeElement.width) / 2, (_this.activeElement.height) / 2 - 2);
            }
            _this.addChild(_this.textField);
        }
        if (data.selected) {
            _this.selected = true;
        }
        _this.setAction(data.action);
        return _this;
    }
    TextToggleButton.prototype.setText = function (text) {
        this.textField.text = text;
    };
    TextToggleButton.prototype.setLabelVisible = function (visible) {
        this.textField.visible = visible;
    };
    Object.defineProperty(TextToggleButton.prototype, "anchor", {
        set: function (anchorPoint) {
            this.activeElement.anchor.set(anchorPoint.x, anchorPoint.y);
            this.textField.anchor = new pixi_js_1.Point(anchorPoint.x, anchorPoint.y);
            this.updateHitArea(anchorPoint);
        },
        enumerable: true,
        configurable: true
    });
    TextToggleButton.prototype.updateAttributes = function (config) {
        _super.prototype.updateAttributes.call(this, config);
        if (this.textField && config.text) {
            if (config.text.position) {
                this.textField.position.x = config.text.position.x;
                this.textField.position.y = config.text.position.y;
            }
            if (config.text.scale) {
                this.textField.scale.x = config.text.scale.x;
                this.textField.scale.y = config.text.scale.y;
            }
        }
    };
    return TextToggleButton;
}(ToggleButton_1.ToggleButton));
exports.TextToggleButton = TextToggleButton;


/***/ }),
/* 443 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Actions_1 = __webpack_require__(22);
var Button_1 = __webpack_require__(19);
/**
 * Toggle Button that supports few extra states:
 * - Enabled ( unselected )
 * - Disabled ( unselected )
 * - Over ( unselected )
 * - Down ( unselected )
 * - Enabled ( selected )
 * - Down ( selected )
 * - Over ( selected )
 */
var ToggleButton = /** @class */ (function (_super) {
    __extends(ToggleButton, _super);
    function ToggleButton(config, localButtonsController) {
        var _this = _super.call(this, config, localButtonsController) || this;
        _this.enabledSelectedFrame = '_Selected_Enabled.png';
        _this.overSelectedFrame = '_Selected_Over.png';
        _this.downSelectedFrame = '_Selected_Down.png';
        // TODO: Add selected as param or function
        _this._selected = false;
        _this.enabledSelectedElement = _this.getTexture(_this.enabledSelectedFrame);
        _this.overSelectedElement = _this.getTexture(_this.overSelectedFrame);
        _this.downSelectedElement = _this.getTexture(_this.downSelectedFrame);
        return _this;
    }
    Object.defineProperty(ToggleButton.prototype, "selected", {
        get: function () {
            return this._selected;
        },
        set: function (selected) {
            this._selected = selected;
            if (selected) {
                this.onPointerUp();
            }
            else {
                this.onPointerOut();
            }
        },
        enumerable: true,
        configurable: true
    });
    ToggleButton.prototype.onClick = function (data) {
        if (data === void 0) { data = {}; }
        this.selected = !this.selected;
        this.playSoundEffect();
        this.onPointerOver();
        data.selected = this.selected;
        if (this.selected) {
            data.action = Actions_1.Actions.TOGGLE_SELECTED_MARKER + this.action;
            this.elementSignal.dispatch(data);
        }
        else {
            data.action = Actions_1.Actions.TOGGLE_UNSELECTED_MARKER + this.action;
            this.elementSignal.dispatch(data);
        }
    };
    ToggleButton.prototype.showEnabledElement = function () {
        if (this.selected) {
            this.activeElement.texture = this.enabledSelectedElement;
        }
        else {
            this.activeElement.texture = this.enabledElement;
        }
    };
    ToggleButton.prototype.onPointerDown = function () {
        if (this.selected) {
            this.activeElement.texture = this.downSelectedElement;
        }
        else {
            this.activeElement.texture = this.downElement;
        }
    };
    ToggleButton.prototype.onMouseUpOutside = function () {
        if (this.selected) {
            this.activeElement.texture = this.overSelectedElement;
        }
        else {
            this.showEnabledElement();
        }
    };
    ToggleButton.prototype.onPointerUp = function () {
        this.onPointerOver();
    };
    ToggleButton.prototype.onPointerOver = function () {
        if (this.selected) {
            this.activeElement.texture = this.overSelectedElement;
        }
        else {
            this.activeElement.texture = this.overElement;
        }
    };
    return ToggleButton;
}(Button_1.Button));
exports.ToggleButton = ToggleButton;


/***/ }),
/* 444 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var TsMap_1 = __webpack_require__(2);
var Viewport_1 = __webpack_require__(6);
var SlotActions_1 = __webpack_require__(44);
var IMLUIConfig_1 = __webpack_require__(59);
var MLUIButtonId_1 = __webpack_require__(38);
var SlotButton;
(function (SlotButton) {
    SlotButton["BET_BUTTON"] = "betButton";
    SlotButton["AUTOPLAY_BUTTON"] = "autoplayButton";
    SlotButton["MENU_BUTTON"] = "menuButton";
    SlotButton["BET_INCREMENT"] = "betIncrementButton";
    SlotButton["BET_DECREMENT"] = "betDecrementButton";
})(SlotButton = exports.SlotButton || (exports.SlotButton = {}));
var MLUISlotPanelConfig = /** @class */ (function (_super) {
    __extends(MLUISlotPanelConfig, _super);
    function MLUISlotPanelConfig() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.name = 'slotPanel';
        _this.betButton = {
            isOrientationSupported: true,
            name: 'betOpenButton',
            position: {
                x: 86,
                y: 1162
            },
            action: SlotActions_1.SlotActions.SHOW_BET_OPTIONS,
            id: MLUIButtonId_1.MLUIButtonId.BUTTON_SHOW_BET_OPTIONS,
            productLine: _this.productLine,
            assetName: 'bet',
            isLocal: true
        };
        _this.betIncrementButton = {
            isOrientationSupported: true,
            name: 'betIncrementButton',
            position: {
                x: -100,
                y: -100
            },
            action: SlotActions_1.SlotActions.BET_INCREASE,
            id: MLUIButtonId_1.MLUIButtonId.BUTTON_MAIN_VIEW_BET_INCREMENT,
            productLine: _this.productLine,
            assetName: 'bet+',
            isLocal: true
        };
        _this.betDecrementButton = {
            isOrientationSupported: true,
            name: 'betDecrementButton',
            position: {
                x: -200,
                y: -200
            },
            action: SlotActions_1.SlotActions.BET_DECREASE,
            id: MLUIButtonId_1.MLUIButtonId.BUTTON_MAIN_VIEW_BET_DECREMENT,
            productLine: _this.productLine,
            assetName: 'bet-',
            isLocal: true
        };
        _this.autoplayButton = {
            isOrientationSupported: true,
            name: 'openAutoPlayButton',
            id: MLUIButtonId_1.MLUIButtonId.BUTTON_SHOW_AUTO_PLAY,
            productLine: _this.productLine,
            action: SlotActions_1.SlotActions.SHOW_AUTO_PLAY_PANEL,
            position: {
                x: 513,
                y: 1115
            },
            assetName: 'auto',
            isLocal: true
        };
        _this.menuButton = {
            isOrientationSupported: true,
            name: 'menuOpenButton',
            position: {
                x: 631,
                y: 1162
            },
            action: SlotActions_1.SlotActions.SHOW_MENU_OPTIONS,
            id: MLUIButtonId_1.MLUIButtonId.BUTTON_SHOW_MENU_OPTIONS,
            productLine: _this.productLine,
            assetName: 'menu',
            isLocal: true
        };
        _this.coreElementOrientationConfig = new TsMap_1.TsMap([
            [
                Viewport_1.Orientation.PORTRAIT, new TsMap_1.TsMap([
                    [
                        _this.betButton.name, {
                            name: _this.betButton.name,
                            position: _this.betButton.position,
                            rectangleHitArea: {
                                width: 75,
                                height: 75
                            }
                        }
                    ],
                    [
                        _this.betIncrementButton.name, {
                            name: _this.betIncrementButton.name,
                            position: _this.betIncrementButton.position,
                            rectangleHitArea: {
                                width: 75,
                                height: 75
                            }
                        }
                    ],
                    [
                        _this.betDecrementButton.name, {
                            name: _this.betDecrementButton.name,
                            position: _this.betDecrementButton.position,
                            rectangleHitArea: {
                                width: 75,
                                height: 75
                            }
                        }
                    ],
                    [
                        _this.autoplayButton.name, {
                            name: _this.autoplayButton.name,
                            position: _this.autoplayButton.position,
                            anchor: { x: 0.5, y: 0.5 },
                            polygonHitArea: {
                                points: [
                                    new PIXI.Point(-80, -63), new PIXI.Point(27, -63), new PIXI.Point(57, -48), new PIXI.Point(72, -29),
                                    new PIXI.Point(80, 1), new PIXI.Point(72, 31), new PIXI.Point(57, 50), new PIXI.Point(27, 65),
                                    new PIXI.Point(-80, 65), new PIXI.Point(-60, 33), new PIXI.Point(-54, 1), new PIXI.Point(-60, -31),
                                    new PIXI.Point(-80, -63)
                                ]
                            }
                        }
                    ],
                    [
                        _this.menuButton.name, {
                            name: _this.menuButton.name,
                            position: _this.menuButton.position,
                            assetName: Viewport_1.Orientation.PORTRAIT + '_' + _this.menuButton.assetName,
                            rectangleHitArea: {
                                width: 75,
                                height: 75
                            }
                        }
                    ],
                ])
            ],
            [
                Viewport_1.Orientation.LANDSCAPE, new TsMap_1.TsMap([
                    [
                        _this.betButton.name, {
                            name: _this.betButton.name,
                            position: { x: 68, y: 660 },
                            rectangleHitArea: {
                                width: 100,
                                height: 100
                            }
                        }
                    ],
                    [
                        _this.betIncrementButton.name, {
                            name: _this.betIncrementButton.name,
                            position: { x: 165, y: 636 },
                            rectangleHitArea: {
                                width: 75,
                                height: 75
                            }
                        }
                    ],
                    [
                        _this.betDecrementButton.name, {
                            name: _this.betDecrementButton.name,
                            position: { x: 92, y: 562 },
                            rectangleHitArea: {
                                width: 75,
                                height: 75
                            }
                        }
                    ],
                    [
                        _this.autoplayButton.name, {
                            name: _this.autoplayButton.name,
                            position: { x: 1108, y: 596 },
                            anchor: {
                                x: 0.5,
                                y: 0.5
                            },
                            circleHitArea: {
                                radius: 50
                            }
                        }
                    ],
                    [
                        _this.menuButton.name, {
                            name: _this.menuButton.name,
                            position: { x: 1204, y: 70 },
                            assetName: Viewport_1.Orientation.LANDSCAPE + '_' + _this.menuButton.assetName,
                            rectangleHitArea: {
                                width: 68,
                                height: 68
                            }
                        }
                    ],
                ])
            ]
        ]);
        return _this;
    }
    return MLUISlotPanelConfig;
}(IMLUIConfig_1.MLUIConfig));
exports.MLUISlotPanelConfig = MLUISlotPanelConfig;


/***/ }),
/* 445 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Helper_1 = __webpack_require__(5);
exports.BasicAutoplayConfig = {
    name: 'autoplayOptions',
    assetName: 'genericToggle',
    startX: 79,
    startY: 520,
    buttonOffset: -40,
    scaleX: 1,
    scaleY: 1,
    selectorText: {
        name: '',
        key: '',
        style: {
            fontFamily: Helper_1.Helper.DEFAULT_FONTS,
            fontSize: 28,
            align: 'center',
            fill: 'white'
        }
    },
    options: [],
};


/***/ }),
/* 446 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var MiniSignal = __webpack_require__(3);
var Window_1 = __webpack_require__(142);
var WebTextField_1 = __webpack_require__(35);
var ScrollContainer_1 = __webpack_require__(909);
var ToggleMultiButton_1 = __webpack_require__(911);
var Slider_1 = __webpack_require__(447);
var CoreUIElementFactory_1 = __webpack_require__(28);
var SlotActions_1 = __webpack_require__(44);
var MLUIFullScreenPanel_1 = __webpack_require__(163);
var MLUISpinSettingsPanel = /** @class */ (function (_super) {
    __extends(MLUISpinSettingsPanel, _super);
    function MLUISpinSettingsPanel() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.config = null;
        _this.onChangeAutoplayMode = new MiniSignal();
        _this.onHide = new MiniSignal();
        /**
         * AutoPlayData is sent to the gameController when spin is pressed for the action_autoSpin
         */
        _this.autoPlayData = {
            lossLimit: null,
            winLimit: null,
            singleWinLimit: null
        };
        return _this;
    }
    MLUISpinSettingsPanel.prototype.createElements = function (config) {
        this.config = config;
        _super.prototype.createElements.call(this, config);
        this.createMainTitle();
        this.createScrollContainer();
        this.createAutoplayContent();
        this.createLimitSliderContent();
        this.createFooter();
        this.createButtonsSprites();
        this.updateOrientationElementOrder();
        this.hidePopup();
    };
    MLUISpinSettingsPanel.prototype.getDefaultClickData = function () {
        return {
            lossLimit: {
                id: 'SLIDER_LOSE',
                value: -1
            },
            singleWinLimit: {
                id: 'SLIDER_SINGLE_WIN',
                value: -1
            },
            winLimit: {
                id: 'SLIDER_WIN',
                value: -1
            },
            spins: null
        };
    };
    MLUISpinSettingsPanel.prototype.updateOrientationElementOrder = function () {
        var _this = this;
        var cloneElements = this.orientationCoreElements.slice(0);
        var scrollContainerIndex = null; // move scrollContainer to last position.
        this.orientationCoreElements.forEach(function (child, index) {
            if (child.name === _this.config.scrollContainer.name) {
                scrollContainerIndex = index;
            }
        });
        var tmp = cloneElements[cloneElements.length - 1];
        cloneElements[cloneElements.length - 1] = cloneElements[scrollContainerIndex];
        cloneElements[scrollContainerIndex] = tmp;
        this.orientationCoreElements = cloneElements;
    };
    MLUISpinSettingsPanel.prototype.createBackground = function () {
        var background = new Window_1.Window(this.config.background);
        background.interactive = true;
        this.addChild(background);
    };
    MLUISpinSettingsPanel.prototype.createMainTitle = function () {
        var title = new WebTextField_1.WebTextField(this.config.mainTitle);
        this.addChild(title);
    };
    MLUISpinSettingsPanel.prototype.createFooter = function () {
        this.closeButton = CoreUIElementFactory_1.CoreUIElementFactory.createInstance(this.config.closeButton, this.localButtonsController);
        this.closeButton.clickData = this.getDefaultClickData();
        this.startButton = CoreUIElementFactory_1.CoreUIElementFactory.createInstance(this.config.confirmButton, this.localButtonsController);
        this.startButton.clickData = this.getDefaultClickData();
        this.stopButton = CoreUIElementFactory_1.CoreUIElementFactory.createInstance(this.config.stopButton, this.localButtonsController);
        this.closedContainer.addChild(this.stopButton);
        this.orientationCoreElements.push(this.stopButton);
        this.addChild(this.closeButton);
        this.addChild(this.startButton);
    };
    MLUISpinSettingsPanel.prototype.createButtonsSprites = function () {
        this.confirmSprite = CoreUIElementFactory_1.CoreUIElementFactory.createInstance(this.config.confirmSprite); // new CoreSprite( this.config.confirmSprite );
        this.addChild(this.confirmSprite);
    };
    MLUISpinSettingsPanel.prototype.createAutoplayContent = function () {
        this.autoplaySelector = new ToggleMultiButton_1.ToggleMultiButton(this.config.autoplayConfig);
        this.autoplaySelector.selectedSignal.add(this.onSelectAutoplayButton.bind(this));
        this.scrollContainer.addContent(this.autoplaySelector);
        this.orientationCoreElements.push(this.autoplaySelector);
    };
    MLUISpinSettingsPanel.prototype.onSelectAutoplayButton = function (value) {
        this.onChangeAutoplayMode.dispatch(value);
        this.autoPlayData.spins = value;
        this.startButton.clickData.spins = value;
        this.closeButton.clickData = this.startButton.clickData;
        this.startButton.setEnable(true);
    };
    MLUISpinSettingsPanel.prototype.createLimitSliderContent = function () {
        this.lossLimit = new Slider_1.Slider(this.config.lostLimitConfig);
        this.lossLimit.onValueChanged.add(this.onLossLimitChange.bind(this));
        this.scrollContainer.addContent(this.lossLimit);
        this.winLimit = new Slider_1.Slider(this.config.winLimitConfig);
        this.winLimit.onValueChanged.add(this.onWinLimitChange.bind(this));
        this.scrollContainer.addContent(this.winLimit);
        this.singleWinLimit = new Slider_1.Slider(this.config.singleWinLimitConfig);
        this.singleWinLimit.onValueChanged.add(this.onSingleWinLimitChange.bind(this));
        this.scrollContainer.addContent(this.singleWinLimit);
        this.orientationCoreElements.push(this.lossLimit);
        this.orientationCoreElements.push(this.winLimit);
        this.orientationCoreElements.push(this.singleWinLimit);
    };
    MLUISpinSettingsPanel.prototype.totalBetUpdate = function (totalBet) {
        this.updateSliderStepItems(totalBet, this.lossLimit, this.config.lostLimitConfig.sliderStepData);
        this.updateSliderStepItems(totalBet, this.winLimit, this.config.winLimitConfig.sliderStepData);
        this.updateSliderStepItems(totalBet, this.singleWinLimit, this.config.singleWinLimitConfig.sliderStepData);
    };
    MLUISpinSettingsPanel.prototype.updateSliderStepItems = function (totalBet, slider, sliderStepData) {
        var stepItems = new Array();
        var stepItemConfig = sliderStepData.items;
        for (var i = 0; i < stepItemConfig.length; i++) {
            if (stepItemConfig[i] > 0) {
                stepItems.push(totalBet * stepItemConfig[i]);
            }
            else {
                stepItems.push(stepItemConfig[i]);
            }
        }
        slider.items = stepItems;
        slider.triggerUpdate();
    };
    MLUISpinSettingsPanel.prototype.onLossLimitChange = function (data) {
        this.autoPlayData.lossLimit = data;
        this.startButton.clickData.lossLimit = data;
    };
    MLUISpinSettingsPanel.prototype.onWinLimitChange = function (data) {
        this.autoPlayData.winLimit = data;
        this.startButton.clickData.winLimit = data;
        this.closeButton.clickData = this.startButton.clickData;
    };
    MLUISpinSettingsPanel.prototype.onSingleWinLimitChange = function (data) {
        this.autoPlayData.singleWinLimit = data;
        this.startButton.clickData.singleWinLimit = data;
        this.closeButton.clickData = this.startButton.clickData;
    };
    MLUISpinSettingsPanel.prototype.setStopActionToFreeSpinStop = function () {
        this.stopButton.setAction(SlotActions_1.SlotActions.FREE_SPIN_STOP);
    };
    MLUISpinSettingsPanel.prototype.setStopActionToStopAutoSpin = function () {
        this.stopButton.setAction(SlotActions_1.SlotActions.STOP_AUTO_PLAY);
    };
    MLUISpinSettingsPanel.prototype.reset = function () {
        this.startButton.clickData.spins = null;
        this.startButton.setEnable(false);
        this.closeButton.clickData = this.startButton.clickData;
        this.autoplaySelector.enableAllButtons();
    };
    MLUISpinSettingsPanel.prototype.createScrollContainer = function () {
        var scrollContainer = new ScrollContainer_1.ScrollContainer(this.config.scrollContainer);
        this.addChild(scrollContainer);
        this.scrollContainer = scrollContainer;
    };
    MLUISpinSettingsPanel.prototype.showPopup = function () {
        _super.prototype.showPopup.call(this);
        this.reset();
    };
    MLUISpinSettingsPanel.prototype.hidePopup = function () {
        this.autoplaySelector.disableAllButtons();
        _super.prototype.hidePopup.call(this);
    };
    return MLUISpinSettingsPanel;
}(MLUIFullScreenPanel_1.MLUIFullScreenPanel));
exports.MLUISpinSettingsPanel = MLUISpinSettingsPanel;


/***/ }),
/* 447 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var MiniSignal = __webpack_require__(3);
var es5_1 = __webpack_require__(0);
var pixi_js_1 = __webpack_require__(4);
var NMath_1 = __webpack_require__(65);
var Button_1 = __webpack_require__(19);
var InteractiveElement_1 = __webpack_require__(140);
var GameContainerManager_1 = __webpack_require__(205);
var MoneyFormatter_1 = __webpack_require__(16);
var CoreUIElementFactory_1 = __webpack_require__(28);
var SliderStyle;
(function (SliderStyle) {
    SliderStyle[SliderStyle["SINGLE_LINE"] = 0] = "SINGLE_LINE";
    SliderStyle[SliderStyle["SLIDER_BELOW"] = 1] = "SLIDER_BELOW";
})(SliderStyle = exports.SliderStyle || (exports.SliderStyle = {}));
var SliderMode;
(function (SliderMode) {
    SliderMode[SliderMode["STEP"] = 0] = "STEP";
    SliderMode[SliderMode["SMOOTH"] = 1] = "SMOOTH";
})(SliderMode = exports.SliderMode || (exports.SliderMode = {}));
var SliderFormat;
(function (SliderFormat) {
    SliderFormat[SliderFormat["NUMBER"] = 0] = "NUMBER";
    SliderFormat[SliderFormat["STRING"] = 1] = "STRING";
    SliderFormat[SliderFormat["CURRENCY"] = 2] = "CURRENCY";
    SliderFormat[SliderFormat["CURRENCY_VALUE_ONLY"] = 3] = "CURRENCY_VALUE_ONLY";
    SliderFormat[SliderFormat["INFINITE_NUMBER"] = 4] = "INFINITE_NUMBER";
})(SliderFormat = exports.SliderFormat || (exports.SliderFormat = {}));
var Slider = /** @class */ (function (_super) {
    __extends(Slider, _super);
    function Slider(config) {
        var _this = _super.call(this, config) || this;
        _this.isDragging = false;
        _this.onIndexChanged = new MiniSignal();
        _this.onValueChanged = new MiniSignal();
        return _this;
    }
    Object.defineProperty(Slider.prototype, "items", {
        get: function () {
            return this._items;
        },
        set: function (value) {
            this._items = value;
            this.updateValueText();
            if (this.config.minTextField) {
                this.minLabel.text = this.formatValue(this.minValue);
            }
            if (this.config.maxTextField) {
                this.maxLabel.text = this.formatValue(this.maxValue);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Slider.prototype, "currentValue", {
        get: function () {
            if (this.mode === SliderMode.STEP) {
                return this.items[this.currentIndex];
            }
            return this._currentValue;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Slider.prototype, "currentIndex", {
        get: function () {
            return this._currentIndex;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Slider.prototype, "trackWidth", {
        /**
         * Return the width of the track
         *
         * @readonly
         * @private
         * @type {number}
         * @memberof Slider
         */
        get: function () {
            return this.sliderContainer.width;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Slider.prototype, "buttonHeight", {
        get: function () {
            return this.button.height;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Slider.prototype, "buttonX", {
        get: function () {
            return this.button.x - (this.button.width * this.button.anchor.x);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Slider.prototype, "buttonY", {
        get: function () {
            return this.button.y - (this.button.height * this.button.anchor.y);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Slider.prototype, "percentage", {
        get: function () {
            if (this.mode === SliderMode.SMOOTH) {
                return (this.currentValue - this.range[0]) / (this.range[1] - this.range[0]);
            }
            else {
                return this.currentIndex / (this.items.length - 1);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Slider.prototype, "minValue", {
        get: function () {
            if (this.mode === SliderMode.SMOOTH) {
                return this.range[0];
            }
            else {
                return this.items[0];
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Slider.prototype, "maxValue", {
        get: function () {
            if (this.mode === SliderMode.SMOOTH) {
                return this.range[1];
            }
            else {
                return this.items[this.items.length - 1];
            }
        },
        enumerable: true,
        configurable: true
    });
    Slider.prototype.initElement = function (config) {
        this.config = config;
        this.setup(config);
        this.sliderContainer = new pixi_js_1.Container();
        this.sliderContainer.interactive = true;
        this.setupSliderTrack(config);
        this.setupButton(config);
        this.addChild(this.sliderContainer);
        this.setupText(config);
        this.setupHitArea();
        this.addListeners();
        this.interactive = true;
    };
    Slider.prototype.addListeners = function () {
        this.sliderContainer.on('pointerdown', this.onPointerDown, this);
        this.gameContainerManager.stageContainer.on('pointerup', this.onPointerUp, this);
        this.button.on('pointerup', this.onPointerUp, this);
        this.button.on('pointerupoutside', this.onPointerUp, this);
        this.gameContainerManager.stageContainer.on('pointerupoutside', this.onPointerUp, this);
        this.gameContainerManager.stageContainer.on('pointermove', this.onDrag, this);
    };
    Slider.prototype.onPointerDown = function (e) {
        this.isDragging = true;
        this.onDrag(e);
    };
    Slider.prototype.onDrag = function (e) {
        if (!this.isDragging) {
            return;
        }
        var point = e.data.getLocalPosition(this.sliderContainer);
        if (this.isDragging) {
            switch (this.mode) {
                case SliderMode.STEP:
                    this.onDragStep(point);
                    break;
                case SliderMode.SMOOTH:
                    this.onDragSmooth(point);
                    break;
            }
        }
        e.stopPropagation();
    };
    Slider.prototype.onDragStep = function (point) {
        var index = this.getIndexByPosition(point);
        var dispatchValueChanged = false;
        if (this.currentIndex !== index) {
            this.onIndexChanged.dispatch({ id: this.id, value: index });
            dispatchValueChanged = true;
        }
        this._currentIndex = index;
        if (dispatchValueChanged) {
            this.onValueChanged.dispatch({ id: this.id, value: this.currentValue });
        }
        this.updateTrack();
        this.updateButton();
        this.updateValueText();
    };
    Slider.prototype.onDragSmooth = function (point) {
        var value = this.range[0] + point.x / this.sliderContainer.width * (this.range[1] - this.range[0]);
        value = NMath_1.NMath.clamp(value, this.range[0], this.range[1]);
        value = Math.round(value * this.baseValue) / this.baseValue;
        this._currentValue = value;
        this.onValueChanged.dispatch({ id: this.id, value: this.currentValue });
        this.updateTrack();
        this.updateButton();
        this.updateValueText();
    };
    Slider.prototype.getIndexByPosition = function (point) {
        var intervalLength = this.getIntervalLength();
        var bound = intervalLength / 2;
        var intervalIndex = Math.floor(point.x / intervalLength);
        var targetPosition = intervalIndex * intervalLength;
        var index;
        if (point.x < bound) {
            index = 0;
        }
        else if (point.x > (this.sliderContainer.width - bound)) {
            index = this.items.length - 1;
        }
        else if (point.x < (targetPosition + bound)) {
            index = intervalIndex;
        }
        else {
            index = intervalIndex + 1;
        }
        if (index > this.items.length - 1) {
            index = this.items.length - 1;
        }
        return index;
    };
    Slider.prototype.getIntervalLength = function () {
        return this.backTrack.width / (this.items.length - 1);
    };
    Slider.prototype.onPointerUp = function (e) {
        this.isDragging = false;
    };
    Slider.prototype.setupHitArea = function () {
        this.sliderContainer.hitArea = new pixi_js_1.Rectangle(-(this.button.width * this.button.anchor.x), -this.sliderContainer.height / 2, this.sliderContainer.width + (this.button.width * this.button.anchor.x), this.sliderContainer.height);
    };
    Slider.prototype.setup = function (config) {
        this.id = config.id;
        this.mode = (config.mode !== undefined) ? config.mode : SliderMode.STEP;
        this.format = (config.format !== undefined) ? config.format : SliderFormat.NUMBER;
        switch (this.mode) {
            case SliderMode.STEP:
                if (!config.sliderStepData || !config.sliderStepData.items || config.sliderStepData.items.length < 2) {
                    throw new Error('Set mode as STEP, please assign avaliable item array.');
                }
                this._items = config.sliderStepData.items;
                this.defaultIndex = (config.sliderStepData.defaultIndex !== undefined) ? config.sliderStepData.defaultIndex : 0;
                this._currentValue = this.items[this.defaultIndex];
                this._currentIndex = this.defaultIndex;
                break;
            case SliderMode.SMOOTH:
                if (!config.sliderSmoothData || config.sliderSmoothData.range.length !== 2) {
                    throw new Error('Set mode as SMOOTH, please assign avaliable range array:[minValue, maxValue].');
                }
                this.range = config.sliderSmoothData.range;
                if (config.sliderSmoothData.precision === undefined) {
                    this.precision = (this.range[1] - this.range[0] < 10) ? 2 : 0;
                }
                else {
                    this.precision = config.sliderSmoothData.precision;
                }
                this.baseValue = Math.pow(10, this.precision);
                this.defaultValue = (config.sliderSmoothData.defaultValue !== undefined)
                    ? NMath_1.NMath.clamp(config.sliderSmoothData.defaultValue, this.range[0], this.range[1])
                    : this.range[0];
                this._currentValue = this.defaultValue;
                break;
        }
    };
    Slider.prototype.setupText = function (config) {
        if (config.titleTextField) {
            this.titleLabel = CoreUIElementFactory_1.CoreUIElementFactory.createInstance(config.titleTextField);
            this.addChild(this.titleLabel);
        }
        if (config.minTextField) {
            this.minLabel = CoreUIElementFactory_1.CoreUIElementFactory.createInstance(config.minTextField);
            this.minLabel.text = this.formatValue(this.minValue);
            this.addChild(this.minLabel);
        }
        if (config.maxTextField) {
            this.maxLabel = CoreUIElementFactory_1.CoreUIElementFactory.createInstance(config.maxTextField);
            this.maxLabel.text = this.formatValue(this.maxValue);
            this.addChild(this.maxLabel);
        }
        if (config.valueTextField) {
            this.valueLabel = CoreUIElementFactory_1.CoreUIElementFactory.createInstance(config.valueTextField);
            this.updateValueText();
            this.addChild(this.valueLabel);
        }
    };
    Slider.prototype.formatValue = function (value) {
        switch (this.format) {
            case SliderFormat.CURRENCY:
            case SliderFormat.CURRENCY_VALUE_ONLY:
                var displayMode = (this.format == SliderFormat.CURRENCY) ? MoneyFormatter_1.NumberDisplayMode.VALUE_WITH_CURRENCY : MoneyFormatter_1.NumberDisplayMode.VALUE_ONLY;
                return value == -1 ? '∞' : this.moneyFormatter.formatMoney(value, displayMode);
            case SliderFormat.NUMBER:
                return value == -1 ? '∞' : value.toString();
            case SliderFormat.STRING:
                return value;
        }
    };
    Slider.prototype.setupSliderTrack = function (config) {
        this.backTrack = new pixi_js_1.Sprite(PIXI.Texture.from(config.trackAssetName + '_Inactive.png'));
        this.activeTrack = new pixi_js_1.Sprite(PIXI.Texture.from(config.trackAssetName + '_Active.png'));
        this.activeTrack.position.set(this.activeTrack.x, ((this.backTrack.height / 2) - (this.activeTrack.height / 2)));
        if (config.width && config.width > this.backTrack.width) {
            this.backTrack.width = this.backTrack.width * (config.width / this.backTrack.width);
        }
        this.updateTrack();
        this.sliderContainer.addChild(this.backTrack);
        this.sliderContainer.addChild(this.activeTrack);
    };
    Slider.prototype.updateValueText = function () {
        if (this.valueLabel) {
            this.valueLabel.text = this.formatValue(this.currentValue);
        }
    };
    Slider.prototype.setupButton = function (config) {
        this.button = new Button_1.Button(config.interactiveButtonConfig);
        this.button.anchor.set(0.5, 0.5);
        this.updateButton();
        this.sliderContainer.addChild(this.button);
    };
    Slider.prototype.updateTrack = function () {
        this.activeTrack.width = this.percentage * this.backTrack.width;
    };
    Slider.prototype.updateSlider = function (width) {
        this.backTrack.width = this.backTrack.width * (width / this.backTrack.width);
        this.updateTrack();
        this.updateButton();
        this.setupHitArea();
    };
    Slider.prototype.updateButton = function () {
        this.button.position.set(this.activeTrack.width, this.backTrack.height / 2);
    };
    Slider.prototype.setEnable = function (value) {
        this.button.setEnable(value);
        if (value) {
            this.backTrack.alpha = 1;
            this.activeTrack.alpha = 1;
            this.sliderContainer.interactive = true;
        }
        else {
            this.backTrack.alpha = 0.5;
            this.activeTrack.alpha = 0.5;
            this.sliderContainer.interactive = false;
        }
    };
    Slider.prototype.triggerUpdate = function () {
        this.onValueChanged.dispatch({ id: this.id, value: this.currentValue });
        this.onIndexChanged.dispatch({ id: this.id, value: this.currentIndex });
    };
    Slider.prototype.updateAttributes = function (config) {
        if (!config) {
            return;
        }
        if (config.position) {
            this.setPosition(config.position);
        }
        if (config.titleTextField) {
            this.titleLabel.updateAttributes(config.titleTextField.elementConfig);
        }
        if (config.minTextField && this.minLabel) {
            this.minLabel.updateAttributes(config.minTextField.elementConfig);
        }
        if (config.maxTextField && this.maxLabel) {
            this.maxLabel.updateAttributes(config.maxTextField.elementConfig);
        }
        if (config.valueTextField) {
            this.valueLabel.updateAttributes(config.valueTextField.elementConfig);
        }
        if (config.width) {
            this.updateSlider(config.width);
        }
    };
    Slider.prototype.reset = function () {
        switch (this.mode) {
            case SliderMode.STEP:
                this._currentIndex = 0;
                break;
            case SliderMode.SMOOTH:
                this._currentValue = this.range[0];
                break;
        }
        this.updateTrack();
        this.updateButton();
        this.updateValueText();
    };
    Slider.prototype.forcePointerDown = function (e) {
        this.onPointerDown(e);
    };
    Slider.prototype.forcePointerUp = function (e) {
        this.onPointerUp(e);
    };
    var _a, _b;
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof GameContainerManager_1.GameContainerManager !== "undefined" && GameContainerManager_1.GameContainerManager) === "function" && _a || Object)
    ], Slider.prototype, "gameContainerManager", void 0);
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_b = typeof MoneyFormatter_1.MoneyFormatter !== "undefined" && MoneyFormatter_1.MoneyFormatter) === "function" && _b || Object)
    ], Slider.prototype, "moneyFormatter", void 0);
    return Slider;
}(InteractiveElement_1.InteractiveElement));
exports.Slider = Slider;


/***/ }),
/* 448 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var MiniSignal = __webpack_require__(3);
var es5_1 = __webpack_require__(0);
var Translator_1 = __webpack_require__(25);
var SimpleTween_1 = __webpack_require__(27);
var Viewport_1 = __webpack_require__(6);
var UIPanelView_1 = __webpack_require__(347);
var GameConfig_1 = __webpack_require__(24);
/**
 * display ui information header always shows in game view,
 * including logo, title, and background
 */
var UIInformationHeaderView = /** @class */ (function (_super) {
    __extends(UIInformationHeaderView, _super);
    function UIInformationHeaderView() {
        var _this = _super.call(this) || this;
        _this.DIV_INFORMATION_HEADER_ID = 'information_header';
        _this.DIV_INFORMATION_HEADER_CLOCK_ID = 'information_header_clock';
        _this.IMG_INFORMATION_HEADER_BACKGROUND_ID = 'information_header_background';
        _this.IMG_INFORMATION_HEADER_TITLE_LOGO_ID = 'information_header_logo';
        _this.DIV_INFORMATION_HEADER_TITLE_TEXT_ID = 'information_header_text';
        _this.container = null;
        _this.pxUnit = 'px';
        _this.clickBackgroundSignal = new MiniSignal();
        _this.viewport.onResizeSignal.add(_this.onResize.bind(_this));
        return _this;
    }
    UIInformationHeaderView.prototype.setInteractive = function (value) {
        if (this.mainContainer && this.mainContainer.interactive != value) {
            this.mainContainer.interactive = value;
        }
    };
    UIInformationHeaderView.prototype.createElements = function (config) {
        _super.prototype.createElements.call(this, config);
        this.createInformationHeader(config);
    };
    UIInformationHeaderView.prototype.createInformationHeader = function (config) {
        var body = document.body;
        var position = 'afterbegin';
        this.container = document.createElement('div');
        this.container.setAttribute('id', this.DIV_INFORMATION_HEADER_ID);
        this.addBackground(config);
        this.addClockCompoment();
        this.addTitleCompoment();
        body.appendChild(this.container);
        body.insertAdjacentElement(position, this.container);
        this.container.ontouchmove = function (event) {
            event.preventDefault();
        };
        this.onResize();
    };
    UIInformationHeaderView.prototype.addBackground = function (config) {
        if (this.config.isRealMode || false) {
            this.container.appendChild(this.createBackground(config));
        }
        else {
            this.container.appendChild(this.createBackground(config, this.onClickBackground.bind(this)));
            this.mainContainer.interactive = true;
        }
        this.container.appendChild(this.createLogoElement(this.config.titleConfig.logo.originalAssetName));
    };
    UIInformationHeaderView.prototype.onClickBackground = function () {
        this.clickBackgroundSignal.dispatch();
    };
    UIInformationHeaderView.prototype.createBackground = function (config, callbackFunction) {
        var objectName = this.IMG_INFORMATION_HEADER_BACKGROUND_ID;
        var background = document.createElement('div');
        background.setAttribute('id', objectName);
        background.style.backgroundColor = config.background.backgroundColor;
        background.style.opacity = config.background.opacity;
        background.onclick = callbackFunction;
        return background;
    };
    UIInformationHeaderView.prototype.getImageElement = function (assetName, objectName) {
        var img = document.createElement('img');
        img.setAttribute('src', this.getImageSource(assetName));
        img.setAttribute('id', objectName);
        return img;
    };
    UIInformationHeaderView.prototype.getImageSource = function (assetName) {
        var url = this.config.assetPath + assetName;
        return url;
    };
    UIInformationHeaderView.prototype.addTitleCompoment = function () {
        this.container.appendChild(this.createTextElement(this.config.titleConfig.gameName, this.config.isRealMode));
    };
    UIInformationHeaderView.prototype.createTextElement = function (title, isRealMode) {
        var text = document.createElement('div');
        text.setAttribute('id', this.DIV_INFORMATION_HEADER_TITLE_TEXT_ID);
        text.innerText = this.translator.t(title);
        if (!isRealMode) {
            text.innerText = text.innerText + ' - DEMO';
        }
        return text;
    };
    UIInformationHeaderView.prototype.createLogoElement = function (assetName) {
        var objectName = this.IMG_INFORMATION_HEADER_TITLE_LOGO_ID;
        return this.getImageElement(assetName, objectName);
    };
    UIInformationHeaderView.prototype.addClockCompoment = function () {
        this.container.appendChild(this.createClock());
    };
    /**
     * Create div in dom as clock
     */
    UIInformationHeaderView.prototype.createClock = function () {
        var currentDiv = document.createElement('div');
        var position = 'afterbegin';
        currentDiv.setAttribute('id', this.DIV_INFORMATION_HEADER_CLOCK_ID);
        document.body.insertAdjacentElement(position, currentDiv);
        this.ticking();
        return currentDiv;
    };
    UIInformationHeaderView.prototype.ticking = function () {
        var _this = this;
        var dom = document.getElementById(this.DIV_INFORMATION_HEADER_CLOCK_ID);
        if (dom) {
            var date = new Date();
            var h = date.getHours(); // 0 - 23
            var m = date.getMinutes(); // 0 - 59
            var strh = (h < 10) ? '0' + h : h;
            var strm = (m < 10) ? '0' + m : m;
            var time = strh + ':' + strm;
            if (dom.innerText != time) {
                dom.innerText = time;
            }
            if (dom.textContent != time) {
                dom.textContent = time;
            }
            new SimpleTween_1.SimpleTween()
                .delay(500)
                .onComplete(function () {
                _this.ticking();
            })
                .start();
        }
    };
    UIInformationHeaderView.prototype.onResize = function () {
        var dom = document.getElementById(this.DIV_INFORMATION_HEADER_ID);
        if (dom) {
            var marginLeft = this.viewport.canvas.marginLeft;
            var width = this.viewport.canvas.width;
            var height = this.viewport.canvas.height;
            dom.style.marginLeft = marginLeft.toString() + this.pxUnit;
            dom.style.marginTop = (this.viewport.canvas.marginTop).toString() + this.pxUnit;
            dom.style.width = width.toString() + this.pxUnit;
            if (this.viewport.properOrientation === Viewport_1.Orientation.PORTRAIT) {
                this.useHeightRatio = Number.parseFloat((height / this.gameConfig.mainConfig.resolution.width).toFixed(2));
                this.useWidthRatio = Number.parseFloat((width / this.gameConfig.mainConfig.resolution.height).toFixed(2));
            }
            else if (this.viewport.properOrientation === Viewport_1.Orientation.LANDSCAPE) {
                this.useHeightRatio = Number.parseFloat((height / this.gameConfig.mainConfig.resolution.height).toFixed(2));
                this.useWidthRatio = Number.parseFloat((width / this.gameConfig.mainConfig.resolution.width).toFixed(2));
            }
        }
        this.onResizeBackground();
        this.onResizeClock();
        this.onResizeTitle();
    };
    UIInformationHeaderView.prototype.onResizeClock = function () {
        var dom = document.getElementById(this.DIV_INFORMATION_HEADER_CLOCK_ID);
        if (dom) {
            var width = this.viewport.canvas.width;
            var baseFontSize = this.config.clockConfig.text.baseFontSize;
            if (this.viewport.properOrientation === Viewport_1.Orientation.PORTRAIT) {
                dom.style.left = this.getTextLeft(width, this.config.clockConfig.text.portraitRatio) + this.pxUnit;
                dom.style.top = this.getTextTop() + this.pxUnit;
            }
            else if (this.viewport.properOrientation === Viewport_1.Orientation.LANDSCAPE) {
                dom.style.left = this.getTextLeft(width, this.config.clockConfig.text.landscapeRatio) + this.pxUnit;
                dom.style.top = this.getTextTop() + this.pxUnit;
            }
            dom.style.fontSize = ((baseFontSize * this.useHeightRatio + baseFontSize * this.useWidthRatio) / 2) + this.pxUnit;
        }
    };
    UIInformationHeaderView.prototype.getTextLeft = function (width, config) {
        var value = width * 0.9;
        if (config) {
            if (config.left) {
                value = width * config.left;
            }
        }
        return value;
    };
    UIInformationHeaderView.prototype.getTextTop = function () {
        return this.backgroundHeight / 4;
    };
    UIInformationHeaderView.prototype.onResizeTitle = function () {
        this.resizeTitleText();
        this.resizeTitleLogo();
    };
    UIInformationHeaderView.prototype.resizeTitleText = function () {
        var dom = document.getElementById(this.DIV_INFORMATION_HEADER_TITLE_TEXT_ID);
        if (dom) {
            var baseFontSize = this.config.titleConfig.text.baseFontSize;
            if (this.viewport.properOrientation === Viewport_1.Orientation.PORTRAIT) {
                dom.style.top = this.getTextTop() + this.pxUnit;
            }
            else if (this.viewport.properOrientation === Viewport_1.Orientation.LANDSCAPE) {
                dom.style.top = this.getTextTop() + this.pxUnit;
            }
            dom.style.fontSize = ((baseFontSize * this.useHeightRatio + baseFontSize * this.useWidthRatio) / 2) + this.pxUnit;
        }
    };
    UIInformationHeaderView.prototype.resizeTitleLogo = function () {
        var dom = document.getElementById(this.IMG_INFORMATION_HEADER_TITLE_LOGO_ID);
        if (dom) {
            var width = this.viewport.canvas.width;
            var height = this.viewport.canvas.height;
            if (this.viewport.properOrientation === Viewport_1.Orientation.PORTRAIT) {
                dom.style.width = (width * this.config.titleConfig.logo.portraitWidth).toFixed(2) + this.pxUnit;
                dom.style.height = 'auto';
                dom.style.left = this.getImageLeft(width, this.config.titleConfig.logo.portraitRatio) * -1 + this.pxUnit;
                dom.style.top = this.getImageTop(height, this.config.titleConfig.logo.portraitRatio) * -1 + this.pxUnit;
            }
            else if (this.viewport.properOrientation === Viewport_1.Orientation.LANDSCAPE) {
                dom.style.height = (height * this.config.titleConfig.logo.landscapeHeight).toFixed(2) + this.pxUnit;
                dom.style.width = 'auto';
                dom.style.left = this.getImageLeft(width, this.config.titleConfig.logo.landscapeRatio) * -1 + this.pxUnit;
                dom.style.top = this.getImageTop(height, this.config.titleConfig.logo.landscapeRatio) * -1 + this.pxUnit;
            }
        }
    };
    UIInformationHeaderView.prototype.getImageLeft = function (width, config) {
        var leftRatio = (config.left) ? config.left : 0.005;
        return (width * leftRatio) * this.useWidthRatio;
    };
    UIInformationHeaderView.prototype.getImageTop = function (height, config) {
        var topRatio = (config.top) ? config.top : 0.002;
        return height * topRatio;
    };
    UIInformationHeaderView.prototype.onResizeBackground = function () {
        var dom = document.getElementById(this.IMG_INFORMATION_HEADER_BACKGROUND_ID);
        if (dom) {
            dom.style.width = this.viewport.canvas.width + this.pxUnit;
            var height = this.viewport.canvas.height;
            if (this.viewport.properOrientation === Viewport_1.Orientation.PORTRAIT) {
                this.setBlockHeight(height, this.config.background.portraitRatio);
            }
            else if (this.viewport.properOrientation === Viewport_1.Orientation.LANDSCAPE) {
                this.setBlockHeight(height, this.config.background.landscapeRatio);
            }
            dom.style.height = this.backgroundHeight + this.pxUnit;
        }
    };
    UIInformationHeaderView.prototype.setBlockHeight = function (height, config) {
        var heightRatio = (config.height) ? config.height : 0.025;
        this.backgroundHeight = (height * heightRatio).toFixed(2);
    };
    var _a, _b;
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof Translator_1.Translator !== "undefined" && Translator_1.Translator) === "function" && _a || Object)
    ], UIInformationHeaderView.prototype, "translator", void 0);
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_b = typeof GameConfig_1.GameConfig !== "undefined" && GameConfig_1.GameConfig) === "function" && _b || Object)
    ], UIInformationHeaderView.prototype, "gameConfig", void 0);
    return UIInformationHeaderView;
}(UIPanelView_1.UIPanelView));
exports.UIInformationHeaderView = UIInformationHeaderView;


/***/ }),
/* 449 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var SoundManager_1 = __webpack_require__(13);
var MoneyFormatter_1 = __webpack_require__(16);
var GlobalDispatcher_1 = __webpack_require__(7);
var SlotDialogController_1 = __webpack_require__(393);
var DHBSlotDialogView_1 = __webpack_require__(922);
var DHBDialogLabelTickConsumer_1 = __webpack_require__(923);
var DHBSlotDialogController = /** @class */ (function (_super) {
    __extends(DHBSlotDialogController, _super);
    function DHBSlotDialogController(view) {
        var _this = _super.call(this, view) || this;
        _this.dialgState = DialogState.DEFAULT;
        return _this;
    }
    DHBSlotDialogController.prototype.addEventListeners = function () {
        _super.prototype.addEventListeners.call(this);
        this.view.startLabelCountUpSignal.add(this.beginCountUp, this);
        this.labelTickConsumer.updateCountSignal.add(this.updateCountUp, this);
        this.labelTickConsumer.completeCountSignal.add(this.completeCountUp, this);
    };
    DHBSlotDialogController.prototype.beginCountUp = function () {
        this.labelTickConsumer.beginCountUp(this.featureWin);
        this.soundManager.play('RollupBeep', SoundManager_1.AudioTrackName.EFFECT, true);
        this.view.beginCountUp();
    };
    DHBSlotDialogController.prototype.updateCountUp = function (value) {
        this.view.updateCountUp(value);
    };
    DHBSlotDialogController.prototype.completeCountUp = function (value) {
        this.soundManager.stop('RollupBeep');
        this.view.completeCountUp(value);
    };
    DHBSlotDialogController.prototype.freeSpinsIntroPopup = function (data) {
        this.dialgState = DialogState.INTRO;
        this.view.playIntroAnimation(data.freeSpinType);
    };
    DHBSlotDialogController.prototype.freeSpinsOutroPopup = function (data) {
        this.dialgState = DialogState.OUTRO;
        //unused winAmount
        var winAmount = this.moneyFormatter.formatMoney(data.featureWin, MoneyFormatter_1.NumberDisplayMode.VALUE_ONLY);
        this.view.playOutroAnimation('animation', winAmount);
        this.featureWin = data.featureWin;
    };
    DHBSlotDialogController.prototype.onDialogClosed = function () {
        if (this.dialgState == DialogState.OUTRO) {
            GlobalDispatcher_1.GlobalDispatcher.dispatchIntoAllStates(DHBSlotDialogController.OUTRO_DIALOG_CLOSED, 'closeOutroDialog');
        }
        this.dialgState = DialogState.DEFAULT;
        _super.prototype.onDialogClosed.call(this);
    };
    var _a, _b;
    DHBSlotDialogController.OUTRO_DIALOG_CLOSED = 'OutroDialogClosed';
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof DHBDialogLabelTickConsumer_1.DHBDialogLabelTickConsumer !== "undefined" && DHBDialogLabelTickConsumer_1.DHBDialogLabelTickConsumer) === "function" && _a || Object)
    ], DHBSlotDialogController.prototype, "labelTickConsumer", void 0);
    DHBSlotDialogController = __decorate([
        __param(0, es5_1.Inject),
        __metadata("design:paramtypes", [typeof (_b = typeof DHBSlotDialogView_1.DHBSlotDialogView !== "undefined" && DHBSlotDialogView_1.DHBSlotDialogView) === "function" && _b || Object])
    ], DHBSlotDialogController);
    return DHBSlotDialogController;
}(SlotDialogController_1.SlotDialogController));
exports.DHBSlotDialogController = DHBSlotDialogController;
var DialogState;
(function (DialogState) {
    DialogState[DialogState["INTRO"] = 0] = "INTRO";
    DialogState[DialogState["OUTRO"] = 1] = "OUTRO";
    DialogState[DialogState["DEFAULT"] = 2] = "DEFAULT";
})(DialogState || (DialogState = {}));


/***/ }),
/* 450 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var SoundManager_1 = __webpack_require__(13);
var GlobalDispatcher_1 = __webpack_require__(7);
var MoneyFormatter_1 = __webpack_require__(16);
var SlotBankService_1 = __webpack_require__(49);
var SlotFreeSpinsController_1 = __webpack_require__(155);
var DHBSlotFreeSpinsView_1 = __webpack_require__(924);
var DHBSlotFreeSpinsController = /** @class */ (function (_super) {
    __extends(DHBSlotFreeSpinsController, _super);
    function DHBSlotFreeSpinsController(view) {
        return _super.call(this, view) || this;
    }
    DHBSlotFreeSpinsController.prototype.addEventListeners = function () {
        this.view.outroStartSignal.add(this.onOutroAnimationStart, this);
        _super.prototype.addEventListeners.call(this);
    };
    DHBSlotFreeSpinsController.prototype.startPickFeature = function (data) {
        this.view.setPicks(data.playerChoices);
        this.view.playIntro();
        // console.error( data.restoreChoices );
        if (data.restoreChoices) {
            this.view.restorePicks(data.restoreChoices);
        }
    };
    DHBSlotFreeSpinsController.prototype.beforePickSelection = function () {
        // finish startPickFeature state
        this.finishStateAction();
    };
    DHBSlotFreeSpinsController.prototype.pickFeature = function (data) {
        if (data.selected_index) {
            var index = data.selected_index - 1;
            var choice = data.playerChoices[index];
            this.view.setPickResult(index, choice);
            this.soundManager.play('pickgameSelect', SoundManager_1.AudioTrackName.EFFECT, false);
        }
        this.view.enableSelection(true);
    };
    DHBSlotFreeSpinsController.prototype.endPickFeature = function () {
        this.finishStateAction();
    };
    DHBSlotFreeSpinsController.prototype.pickFeatureWin = function (data) {
        if (data.selected_index) {
            var index = data.selected_index - 1;
            var choice = data.playerChoices[index];
            var winAmount = this.moneyFormatter.formatMoney(data.win_amount, MoneyFormatter_1.NumberDisplayMode.VALUE_ONLY);
            this.view.setPickResult(index, choice, true, winAmount);
            this.soundManager.play('pickgameHitTriple', SoundManager_1.AudioTrackName.EFFECT, false);
            this.bankService.balance = data.balance;
            this.bankService.win = data.win_amount;
        }
        this.view.enableSelection(false);
    };
    DHBSlotFreeSpinsController.prototype.onOutroAnimationStart = function (choice) {
        if (choice === void 0) { choice = ''; }
        this.soundManager.play('pickgameWin' + choice, SoundManager_1.AudioTrackName.EFFECT, false);
    };
    DHBSlotFreeSpinsController.prototype.onOutroAnimationComplete = function () {
        GlobalDispatcher_1.GlobalDispatcher.dispatchIntoAllStates(DHBSlotFreeSpinsController.PICKGAME_OUTRO_COMPLETE, 'PickgameOutroComplete');
        this.finishStateAction();
    };
    var _a, _b, _c;
    DHBSlotFreeSpinsController.PICKGAME_OUTRO_COMPLETE = 'PickgameOutroComplete';
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof MoneyFormatter_1.MoneyFormatter !== "undefined" && MoneyFormatter_1.MoneyFormatter) === "function" && _a || Object)
    ], DHBSlotFreeSpinsController.prototype, "moneyFormatter", void 0);
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_b = typeof SlotBankService_1.SlotBankService !== "undefined" && SlotBankService_1.SlotBankService) === "function" && _b || Object)
    ], DHBSlotFreeSpinsController.prototype, "bankService", void 0);
    DHBSlotFreeSpinsController = __decorate([
        __param(0, es5_1.Inject),
        __metadata("design:paramtypes", [typeof (_c = typeof DHBSlotFreeSpinsView_1.DHBSlotFreeSpinsView !== "undefined" && DHBSlotFreeSpinsView_1.DHBSlotFreeSpinsView) === "function" && _c || Object])
    ], DHBSlotFreeSpinsController);
    return DHBSlotFreeSpinsController;
}(SlotFreeSpinsController_1.SlotFreeSpinsController));
exports.DHBSlotFreeSpinsController = DHBSlotFreeSpinsController;


/***/ }),
/* 451 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var PickFeatureFormatter_1 = __webpack_require__(214);
var SlotNGFeatureDataDefinitions_1 = __webpack_require__(23);
var FeaturesFormatterList_1 = __webpack_require__(148);
var DHBSlotScenarioManager_1 = __webpack_require__(452);
var DHBSlotScenarioNames_1 = __webpack_require__(453);
var DHBSlotStates_1 = __webpack_require__(454);
var DHBPickFeatureFormatter = /** @class */ (function (_super) {
    __extends(DHBPickFeatureFormatter, _super);
    function DHBPickFeatureFormatter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DHBPickFeatureFormatter.prototype.processIncomingMessage = function (message, pickFeatureInfo) {
        if (pickFeatureInfo == undefined) {
            return null;
        }
        // console.error( '+++++ processIncomingMessage ' );
        var freeSpin = message.features.find(function (e) { return e.type === SlotNGFeatureDataDefinitions_1.FeatureTypes.FREE_SPIN; });
        if (freeSpin) {
            return null;
        }
        var pickFeatureDetail = this.getFeatureDetail(pickFeatureInfo);
        var responseScenario = null;
        if (message.spin_result.features_triggered != undefined) {
            responseScenario = this.getFormatFeatureTriggeredsScenario(message, responseScenario);
        }
        if (responseScenario.hasStateName(this.stateNames.pickFeatureWin)) {
            responseScenario.addScenario(this.scenarioManager.getScenario(this.scenarioNames.gameIdle));
        }
        // console.error( '+++++ responseScenario ' );
        // console.error( responseScenario );
        this.slotNGModel.stateTag = message.state_tag;
        return responseScenario;
    };
    DHBPickFeatureFormatter.prototype.triggeredFeatureIncomingMessage = function (message, pickFeatureInfo) {
        if (pickFeatureInfo == undefined) {
            return null;
        }
        // console.error( '----- triggeredFeatureIncomingMessage ' );
        var pickFeatureDetail = this.getFeatureDetail(pickFeatureInfo);
        var responseScenario;
        var freeSpin = message.features.find(function (e) { return e.type === SlotNGFeatureDataDefinitions_1.FeatureTypes.FREE_SPIN; });
        if (pickFeatureInfo.complete && message.spin_result.win_amount > 0) {
            responseScenario = this.scenarioManager.getScenario(this.scenarioNames.pickFeatureWithWinning);
            responseScenario.setStateData(this.stateNames.pickFeatureWin, {
                balance: message.balance,
                win_amount: message.spin_result.win_amount,
                selected_index: pickFeatureDetail.selected_index,
                playerChoices: this.getPickFeatureDetailChoices(pickFeatureDetail)
            });
        }
        else if (pickFeatureDetail.selected_index) {
            responseScenario = this.scenarioManager.getScenario(this.scenarioNames.pickFeature);
            responseScenario.addStateData(this.stateNames.pickFeature, {
                selected_index: pickFeatureDetail.selected_index,
                playerChoices: this.getPickFeatureDetailChoices(pickFeatureDetail)
            });
        }
        else {
            if (freeSpin == null) {
                if (message.spin_result.win_amount > 0 || message.spin_result.scatter_win != undefined || freeSpin) {
                    responseScenario = this.scenarioManager.getScenario(this.scenarioNames.featureWithWinning);
                }
            }
            if (responseScenario) {
                responseScenario.addScenario(this.scenarioManager.getScenario(this.scenarioNames.runPickFeature));
            }
            else {
                responseScenario = this.scenarioManager.getScenario(this.scenarioNames.runPickFeature);
            }
            var pickFeatureDetail_1 = this.getFeatureDetail(pickFeatureInfo);
            responseScenario.setStateData(this.stateNames.startPickFeature, {
                playerChoices: this.getPickFeatureDetailChoices(pickFeatureDetail_1)
            });
        }
        // console.error( '----- responseScenario ' );
        // console.error( responseScenario );
        this.slotNGModel.stateTag = message.state_tag;
        return responseScenario;
    };
    DHBPickFeatureFormatter.prototype.restoreFeatureIncomingMessage = function (featureState, features, type, message) {
        var pickFeature = features.find(function (e) { return e.type == SlotNGFeatureDataDefinitions_1.FeatureTypes.PICK; });
        var pickFeatureDetail = pickFeature.feature_state;
        var pickFeatureScenario = null;
        pickFeatureScenario = _super.prototype.restoreFeatureIncomingMessage.call(this, pickFeatureDetail);
        pickFeatureScenario.addStateData(this.stateNames.startPickFeature, {
            selected_index: pickFeatureDetail.selected_index,
            restoreChoices: pickFeatureDetail.choices
        });
        // console.error( 'pickFeatureScenario' );
        // console.error( pickFeatureScenario );
        return pickFeatureScenario;
    };
    DHBPickFeatureFormatter.prototype.getFeatureFormatter = function (type) {
        return (this.featureFormatterList.inFeatureFormatters.get(type));
    };
    var _a, _b, _c, _d;
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof FeaturesFormatterList_1.FeaturesFormatterList !== "undefined" && FeaturesFormatterList_1.FeaturesFormatterList) === "function" && _a || Object)
    ], DHBPickFeatureFormatter.prototype, "featureFormatterList", void 0);
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_b = typeof DHBSlotScenarioManager_1.DHBSlotScenarioManager !== "undefined" && DHBSlotScenarioManager_1.DHBSlotScenarioManager) === "function" && _b || Object)
    ], DHBPickFeatureFormatter.prototype, "scenarioManager", void 0);
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_c = typeof DHBSlotScenarioNames_1.DHBSlotScenarioNames !== "undefined" && DHBSlotScenarioNames_1.DHBSlotScenarioNames) === "function" && _c || Object)
    ], DHBPickFeatureFormatter.prototype, "scenarioNames", void 0);
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_d = typeof DHBSlotStates_1.DHBSlotStates !== "undefined" && DHBSlotStates_1.DHBSlotStates) === "function" && _d || Object)
    ], DHBPickFeatureFormatter.prototype, "stateNames", void 0);
    return DHBPickFeatureFormatter;
}(PickFeatureFormatter_1.PickFeatureFormatter));
exports.DHBPickFeatureFormatter = DHBPickFeatureFormatter;


/***/ }),
/* 452 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var SlotScenarioManager_1 = __webpack_require__(115);
var DHBSlotScenarioNames_1 = __webpack_require__(453);
var DHBSlotStates_1 = __webpack_require__(454);
var DHBSlotScenarioManager = /** @class */ (function (_super) {
    __extends(DHBSlotScenarioManager, _super);
    function DHBSlotScenarioManager() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DHBSlotScenarioManager.prototype.createScenarios = function () {
        _super.prototype.createScenarios.call(this);
        this.scenarioFlows.set(this.scenarioName.pickFeature, this.getScenarioByStateNames(this.scenarioName.pickFeature, [
            this.stateName.pickFeature,
            this.stateName.endPickFeature
        ]));
        this.scenarioFlows.set(this.scenarioName.pickFeatureWithWinning, this.getScenarioByStateNames(this.scenarioName.pickFeatureWithWinning, [
            this.stateName.pickFeatureWin
        ]));
        this.scenarioFlows.set(this.scenarioName.freeSpinsWithWinning, this.getScenarioByStateNames(this.scenarioName.freeSpinsWithWinning, [
            this.stateName.freeSpinsAllLineWin
        ]));
        this.scenarioFlows.set(this.scenarioName.freeSpinsRotateReelWithWinning, this.getScenarioByStateNames(this.scenarioName.freeSpinsRotateReelWithWinning, [
            this.stateName.freeSpinsRotate,
            this.stateName.freeSpinsAllLineWin
        ]));
        this.scenarioFlows.set(this.scenarioName.bonusSpinsWithWinning, this.getScenarioByStateNames(this.scenarioName.bonusSpinsWithWinning, [
            this.stateName.freeSpinsAllLineWin,
            this.stateName.freeSpinsIdle
        ]));
    };
    var _a, _b;
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof DHBSlotStates_1.DHBSlotStates !== "undefined" && DHBSlotStates_1.DHBSlotStates) === "function" && _a || Object)
    ], DHBSlotScenarioManager.prototype, "stateName", void 0);
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_b = typeof DHBSlotScenarioNames_1.DHBSlotScenarioNames !== "undefined" && DHBSlotScenarioNames_1.DHBSlotScenarioNames) === "function" && _b || Object)
    ], DHBSlotScenarioManager.prototype, "scenarioName", void 0);
    DHBSlotScenarioManager = __decorate([
        es5_1.Singleton
    ], DHBSlotScenarioManager);
    return DHBSlotScenarioManager;
}(SlotScenarioManager_1.SlotScenarioManager));
exports.DHBSlotScenarioManager = DHBSlotScenarioManager;


/***/ }),
/* 453 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var SlotScenarioNames_1 = __webpack_require__(114);
var DHBSlotScenarioNames = /** @class */ (function (_super) {
    __extends(DHBSlotScenarioNames, _super);
    function DHBSlotScenarioNames() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /** pick feature */
        _this.pickFeature = 'pickFeature';
        return _this;
    }
    DHBSlotScenarioNames = __decorate([
        es5_1.Singleton
    ], DHBSlotScenarioNames);
    return DHBSlotScenarioNames;
}(SlotScenarioNames_1.SlotScenarioNames));
exports.DHBSlotScenarioNames = DHBSlotScenarioNames;


/***/ }),
/* 454 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var SlotStates_1 = __webpack_require__(31);
var DHBSlotStates = /** @class */ (function (_super) {
    __extends(DHBSlotStates, _super);
    function DHBSlotStates() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.pickFeatureWin = 'pickFeatureWin';
        return _this;
    }
    DHBSlotStates = __decorate([
        es5_1.Singleton
    ], DHBSlotStates);
    return DHBSlotStates;
}(SlotStates_1.SlotStates));
exports.DHBSlotStates = DHBSlotStates;


/***/ }),
/* 455 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var pixi_js_1 = __webpack_require__(4);
var Animation_1 = __webpack_require__(26);
var ReelsConfig_1 = __webpack_require__(52);
var WinDisplayView_1 = __webpack_require__(120);
var WinBoxView = /** @class */ (function (_super) {
    __extends(WinBoxView, _super);
    function WinBoxView() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    WinBoxView.prototype.getAssetsList = function () {
        return [
            {
                assetKey: 'winBoxes',
                assetURL: 'assets/winDisplay/Win_Boxes.json'
            }
        ];
    };
    WinBoxView.prototype.createElements = function (config) {
        this.config = config;
        this.animations = new Array();
        this.animationContainer = new pixi_js_1.Container();
        this.addChild(this.animationContainer);
        this.createBoxes(config.defaultPoolSize ? config.defaultPoolSize : 6); // default win 2 line, so the animation amount is 2 x 3.
    };
    WinBoxView.prototype.createBoxes = function (number) {
        for (var i = 0; i < number; i++) {
            var animation = void 0;
            if (Array.isArray(this.config.animationFiles)) {
                animation = Animation_1.Animation.createFrameAnimation(this.config.animationFiles);
                animation.anchor.set(0.5, 0.5);
                animation.loop = this.config.loop;
            }
            else {
                animation = Animation_1.Animation.createSpineAnimation(this.config.animationFiles);
            }
            animation.visible = false;
            this.animations.push(animation);
            this.animationContainer.addChild(animation);
        }
    };
    WinBoxView.prototype.hide = function () {
        this.visible = false;
        this.stopAnimating();
    };
    WinBoxView.prototype.showPayline = function (data) {
        var _this = this;
        this.visible = true;
        this.stopAnimating();
        var reelDefinition = this.reelsConfig.reelDefinition;
        var width = reelDefinition.symbol.width;
        var height = reelDefinition.symbol.height;
        var winBoxIndex = 0;
        data.winData.winTable.forEach(function (reel, i) {
            var orientationData = _this.getSingleReelLayoutData(0, i);
            reel.forEach(function (value, j) {
                if (!value || (value && _this.isSpecialSymbol(data.winData.symbol))) {
                    return;
                }
                var xStart = orientationData.position.x + (width / 2) + _this.config.boxOffset.x;
                var yStart = orientationData.position.y + (height / 2) + (height * j) + _this.config.boxOffset.y;
                var position = new pixi_js_1.Point(xStart, yStart);
                var animation = _this.animations[winBoxIndex];
                if (!animation) { // create new animaion and get it again.
                    _this.createBoxes(1);
                    animation = _this.animations[winBoxIndex];
                }
                animation.position = position;
                animation.visible = true;
                animation.updateTransform();
                if (_this.isSpineAnimation(animation)) {
                    animation.state.setAnimation(0, _this.config.animationName, _this.config.loop);
                }
                else {
                    animation.play();
                }
                winBoxIndex++;
            });
        });
    };
    WinBoxView.prototype.isSpecialSymbol = function (symbol) {
        return symbol === ReelsConfig_1.SymbolSet.SCATTER;
    };
    WinBoxView.prototype.portraitLayout = function () {
        _super.prototype.portraitLayout.call(this);
        this.animationContainer.position.x = this.layoutData.position.x;
        this.animationContainer.position.y = this.layoutData.position.y;
        this.animationContainer.scale.set(this.layoutData.scale, this.layoutData.scale);
    };
    WinBoxView.prototype.landscapeLayout = function () {
        _super.prototype.landscapeLayout.call(this);
        this.animationContainer.position.x = this.layoutData.position.x;
        this.animationContainer.position.y = this.layoutData.position.y;
        this.animationContainer.scale.set(this.layoutData.scale, this.layoutData.scale);
    };
    WinBoxView.prototype.stopAnimating = function () {
        var _this = this;
        this.animations.forEach(function (animation) {
            if (_this.isSpineAnimation(animation)) {
                animation.state.setEmptyAnimation(0, 0);
            }
            else {
                animation.gotoAndStop(0);
            }
            animation.visible = false;
        });
    };
    WinBoxView.prototype.isSpineAnimation = function (animation) {
        return animation.spineData !== undefined;
    };
    return WinBoxView;
}(WinDisplayView_1.WinDisplayView));
exports.WinBoxView = WinBoxView;


/***/ }),
/* 456 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var pixi_js_1 = __webpack_require__(4);
var SlotCoinShowerView_1 = __webpack_require__(238);
var DHBCoinShowerView = /** @class */ (function (_super) {
    __extends(DHBCoinShowerView, _super);
    function DHBCoinShowerView() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DHBCoinShowerView.prototype.createElements = function (config) {
        this.createEnvelopeShower();
        _super.prototype.createElements.call(this, config);
    };
    DHBCoinShowerView.prototype.createEnvelopeShower = function () {
        this.envelopeShower = this.createParticleAnimation();
        this.envelopeShower.frequency = 0.1;
        this.envelopeShower.spawnPos.x = 0;
        this.envelopeShower.spawnPos.y = -50;
    };
    DHBCoinShowerView.prototype.createParticleAnimation = function () {
        var imagesName = [];
        imagesName.push('redEnvelopeSprite.png');
        var particleResource = PIXI.loader.resources['redEnvelopeParticles'].data;
        var particleImages = new Array();
        var container = new PIXI.particles.ParticleContainer();
        this.addChild(container);
        imagesName.forEach(function (image) {
            particleImages.push(pixi_js_1.Texture.fromFrame(image));
        });
        var animation = new pixi_js_1.particles.Emitter(container, particleImages, particleResource);
        animation.emit = false;
        animation.autoUpdate = true;
        return animation;
    };
    DHBCoinShowerView.prototype.startEnvelopeShower = function () {
        this.envelopeShower.emit = true;
    };
    DHBCoinShowerView.prototype.endEnvelopeShower = function () {
        this.envelopeShower.emit = false;
        this.envelopeShower.cleanup();
    };
    DHBCoinShowerView.prototype.portraitLayout = function () {
        _super.prototype.portraitLayout.call(this);
        this.envelopeShower.spawnPos.x = 0;
    };
    DHBCoinShowerView.prototype.landscapeLayout = function () {
        _super.prototype.landscapeLayout.call(this);
        this.envelopeShower.spawnPos.x = 250;
    };
    return DHBCoinShowerView;
}(SlotCoinShowerView_1.SlotCoinShowerView));
exports.DHBCoinShowerView = DHBCoinShowerView;


/***/ }),
/* 457 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(458);
module.exports = __webpack_require__(512);


/***/ }),
/* 458 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
__webpack_require__(459);
__webpack_require__(483);
__webpack_require__(486);
__webpack_require__(488);
__webpack_require__(490);
__webpack_require__(494);
__webpack_require__(499);
__webpack_require__(501);
__webpack_require__(504);
__webpack_require__(506);
__webpack_require__(508);
__webpack_require__(510);
__webpack_require__(511);


/***/ }),
/* 459 */,
/* 460 */,
/* 461 */,
/* 462 */,
/* 463 */,
/* 464 */,
/* 465 */,
/* 466 */,
/* 467 */,
/* 468 */,
/* 469 */,
/* 470 */,
/* 471 */,
/* 472 */,
/* 473 */,
/* 474 */,
/* 475 */,
/* 476 */,
/* 477 */,
/* 478 */,
/* 479 */,
/* 480 */,
/* 481 */,
/* 482 */,
/* 483 */,
/* 484 */,
/* 485 */,
/* 486 */,
/* 487 */,
/* 488 */,
/* 489 */,
/* 490 */,
/* 491 */,
/* 492 */,
/* 493 */,
/* 494 */,
/* 495 */,
/* 496 */,
/* 497 */,
/* 498 */,
/* 499 */,
/* 500 */,
/* 501 */,
/* 502 */,
/* 503 */,
/* 504 */,
/* 505 */,
/* 506 */,
/* 507 */,
/* 508 */,
/* 509 */,
/* 510 */,
/* 511 */,
/* 512 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <reference path="../../slotngf/corengf/tsDefinitions/mini-signals.d.ts" />
/// <reference path="../../slotngf/corengf/tsDefinitions/howler-modified.d.ts" />
Object.defineProperty(exports, "__esModule", { value: true });
var DOMContent_1 = __webpack_require__(283);
var DHBApplication_1 = __webpack_require__(513);
window.onload = function () {
    DOMContent_1.DOMContent.setPageTitle('Da Hong Bao Gold');
    var game = new DHBApplication_1.DHBApplication();
    document.getElementById('mainContainer').appendChild(game.pixi.view);
};


/***/ }),
/* 513 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
__webpack_require__(514);
var es5_1 = __webpack_require__(0);
var UrlParameters_1 = __webpack_require__(14);
var AbstractServer_1 = __webpack_require__(133);
var TooltipController_1 = __webpack_require__(336);
var UIBankConfig_1 = __webpack_require__(207);
var UIBankPanelView_1 = __webpack_require__(208);
var SlotNGServer_1 = __webpack_require__(647);
var SlotApplication_1 = __webpack_require__(719);
var ForcingSpinController_1 = __webpack_require__(153);
var SlotUILocalButtonsController_1 = __webpack_require__(158);
var MLUIController_1 = __webpack_require__(769);
var MLUIBankPanel_1 = __webpack_require__(918);
var MLUIBankConfig_1 = __webpack_require__(919);
var MLUILocalButtonsController_1 = __webpack_require__(402);
var DHBBackgroundController_1 = __webpack_require__(920);
var SlotBackgroundConfig_1 = __webpack_require__(240);
var DHBBackgroundConfig_1 = __webpack_require__(925);
var DHBReelController_1 = __webpack_require__(927);
var ReelConfig_1 = __webpack_require__(78);
var DHBReelConfig_1 = __webpack_require__(933);
var ForcingSpinConfig_1 = __webpack_require__(225);
var DHBForcingSpinConfig_1 = __webpack_require__(934);
var DHBBigWinController_1 = __webpack_require__(936);
var BigWinConfig_1 = __webpack_require__(235);
var DHBBigWinConfig_1 = __webpack_require__(938);
var DHBSlotMarqueeController_1 = __webpack_require__(939);
var SlotMarqueeConfig_1 = __webpack_require__(159);
var DHBSlotMarqueeConfig_1 = __webpack_require__(943);
var LineScoreController_1 = __webpack_require__(944);
var DHBSlotFreeSpinsController_1 = __webpack_require__(450);
var PickFeatureFormatter_1 = __webpack_require__(214);
var DHBPickFeatureFormatter_1 = __webpack_require__(451);
var SlotFreeSpinsConfig_1 = __webpack_require__(227);
var DHBSlotFreeSpinsConfig_1 = __webpack_require__(946);
var DHBWinBoxV2Controller_1 = __webpack_require__(947);
var WinBoxConfig_1 = __webpack_require__(266);
var DHBWinBoxConfig_1 = __webpack_require__(951);
var DHBAnimationViewController_1 = __webpack_require__(952);
var AnimationViewConfig_1 = __webpack_require__(152);
var DHBAnimationViewConfig_1 = __webpack_require__(954);
var MLUIPaytableConfig_1 = __webpack_require__(261);
var DHBMLUIPaytableConfig_1 = __webpack_require__(956);
var MLUIHistoryConfig_1 = __webpack_require__(260);
var DHBMLUIHistoryConfig_1 = __webpack_require__(958);
var MLUIRulesConfig_1 = __webpack_require__(247);
var DHBMLUIRulesConfig_1 = __webpack_require__(959);
var DHBSlotScenarioManager_1 = __webpack_require__(452);
var SlotScenarioManager_1 = __webpack_require__(115);
var FreeRespinReelsFormatter_1 = __webpack_require__(117);
var FreeSpinFeatureFormatter_1 = __webpack_require__(149);
var DHBFreeSpinFeatureFormatter_1 = __webpack_require__(960);
var MLUISpinSettingsController_1 = __webpack_require__(263);
var DHBMLUISpinSettingsController_1 = __webpack_require__(961);
var LineScoreConfig_1 = __webpack_require__(265);
var DHBLineScoreConfig_1 = __webpack_require__(962);
var MainConfig_1 = __webpack_require__(61);
var DHBConfig_1 = __webpack_require__(963);
var DHBSlotDialogController_1 = __webpack_require__(449);
var MLUITurboConfig_1 = __webpack_require__(262);
var DHBMLUITurboConfig_1 = __webpack_require__(964);
var BaseSymbol_1 = __webpack_require__(157);
var DHBBaseSymbol_1 = __webpack_require__(965);
var SlotUILocalButtonsStateSet_1 = __webpack_require__(242);
var DialogConfig_1 = __webpack_require__(223);
var DHBDialogConfig_1 = __webpack_require__(966);
var SingleWildMultiplierFeatureFormatter_1 = __webpack_require__(216);
var DHBSingleWildsMultiplierFeatureFormatter_1 = __webpack_require__(967);
var DHBFreeRespinReelsFormatter_1 = __webpack_require__(968);
var DHBLocalButtonsStateSet_1 = __webpack_require__(969);
var WildLockedFeatureFormatter_1 = __webpack_require__(215);
var DHBWildLockedFeatureFormatter_1 = __webpack_require__(971);
var CoinShowerConfig_1 = __webpack_require__(237);
var DHBCoinShowerConfig_1 = __webpack_require__(972);
var SmartPreloaderView_1 = __webpack_require__(219);
var DHBSmartPreloaderView_1 = __webpack_require__(973);
var SpinMsgFormatter_1 = __webpack_require__(116);
var DHBSpinMsgFormatter_1 = __webpack_require__(974);
var SoundManager_1 = __webpack_require__(13);
var DHBSoundManager_1 = __webpack_require__(975);
var SlotCoinShowerView_1 = __webpack_require__(238);
var DHBCoinShowerView_1 = __webpack_require__(456);
var DHBCoinShowerController_1 = __webpack_require__(976);
var SlotInformationHeaderView_1 = __webpack_require__(264);
var MLUIInformationHeaderView_1 = __webpack_require__(977);
var MLUISpinController_1 = __webpack_require__(245);
var DHBMLUISpinController_1 = __webpack_require__(978);
var BaseWinLinesV2Controller_1 = __webpack_require__(979);
var DHBApplication = /** @class */ (function (_super) {
    __extends(DHBApplication, _super);
    function DHBApplication() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DHBApplication.prototype.setupBindings = function () {
        //do basic bindings first!
        _super.prototype.setupBindings.call(this);
        //server
        es5_1.Container.bind(AbstractServer_1.AbstractServer).to(SlotNGServer_1.SlotNGServer);
        es5_1.Container.bind(SlotScenarioManager_1.SlotScenarioManager).to(DHBSlotScenarioManager_1.DHBSlotScenarioManager);
        //MLUI
        es5_1.Container.bind(UIBankConfig_1.UIBankConfig).to(MLUIBankConfig_1.MLUIBankConfig);
        es5_1.Container.bind(UIBankPanelView_1.UIBankPanelView).to(MLUIBankPanel_1.MLUIBankPanel);
        es5_1.Container.bind(SlotInformationHeaderView_1.SlotInformationHeaderView).to(MLUIInformationHeaderView_1.MLUIInformationHeaderView);
        es5_1.Container.bind(SlotUILocalButtonsController_1.SlotUILocalButtonsController).to(MLUILocalButtonsController_1.MLUILocalButtonsController);
        es5_1.Container.bind(MLUIPaytableConfig_1.MLUIPaytableConfig).to(DHBMLUIPaytableConfig_1.DHBMLUIPaytableConfig);
        es5_1.Container.bind(MLUIHistoryConfig_1.MLUIHistoryConfig).to(DHBMLUIHistoryConfig_1.DHBMLUIHistoryConfig);
        es5_1.Container.bind(MLUIRulesConfig_1.MLUIRulesConfig).to(DHBMLUIRulesConfig_1.DHBMLUIRulesConfig);
        es5_1.Container.bind(SlotUILocalButtonsStateSet_1.SlotUILocalButtonsStateSet).to(DHBLocalButtonsStateSet_1.DHBLocalButtonsStateSet);
        es5_1.Container.bind(MLUISpinController_1.MLUISpinController).to(DHBMLUISpinController_1.DHBMLUISpinController);
        es5_1.Container.bind(MLUISpinSettingsController_1.MLUISpinSettingsController).to(DHBMLUISpinSettingsController_1.DHBMLUISpinSettingsController);
        es5_1.Container.bind(MLUITurboConfig_1.MLUITurboConfig).to(DHBMLUITurboConfig_1.DHBMLUITurboConfig);
        //components
        es5_1.Container.bind(SoundManager_1.SoundManager).to(DHBSoundManager_1.DHBSoundManager);
        es5_1.Container.bind(ReelConfig_1.ReelConfig).to(DHBReelConfig_1.DHBReelConfig);
        es5_1.Container.bind(MainConfig_1.MainConfig).to(DHBConfig_1.DHBConfig);
        es5_1.Container.bind(SlotBackgroundConfig_1.SlotBackgroundConfig).to(DHBBackgroundConfig_1.DHBBackgroundConfig);
        es5_1.Container.bind(ForcingSpinConfig_1.ForcingSpinConfig).to(DHBForcingSpinConfig_1.DHBForcingSpinConfig);
        es5_1.Container.bind(BigWinConfig_1.BigWinConfig).to(DHBBigWinConfig_1.DHBBigWinConfig);
        es5_1.Container.bind(SlotMarqueeConfig_1.SlotMarqueeConfig).to(DHBSlotMarqueeConfig_1.DHBSlotMarqueeConfig);
        es5_1.Container.bind(SlotFreeSpinsConfig_1.SlotFreeSpinsConfig).to(DHBSlotFreeSpinsConfig_1.DHBSlotFreeSpinsConfig);
        es5_1.Container.bind(WinBoxConfig_1.WinBoxConfig).to(DHBWinBoxConfig_1.DHBWinBoxConfig);
        es5_1.Container.bind(AnimationViewConfig_1.AnimationViewConfig).to(DHBAnimationViewConfig_1.DHBAnimationViewConfig);
        es5_1.Container.bind(LineScoreConfig_1.LineScoreConfig).to(DHBLineScoreConfig_1.DHBLineScoreConfig);
        es5_1.Container.bind(DialogConfig_1.DialogConfig).to(DHBDialogConfig_1.DHBDialogConfig);
        es5_1.Container.bind(SmartPreloaderView_1.SmartPreloaderView).to(DHBSmartPreloaderView_1.DHBSmartPreloaderView);
        es5_1.Container.bind(CoinShowerConfig_1.CoinShowerConfig).to(DHBCoinShowerConfig_1.DHBCoinShowerConfig);
        es5_1.Container.bind(SlotCoinShowerView_1.SlotCoinShowerView).to(DHBCoinShowerView_1.DHBCoinShowerView);
        es5_1.Container.bind(BaseSymbol_1.BaseSymbol).to(DHBBaseSymbol_1.DHBBaseSymbol);
        //formatter
        es5_1.Container.bind(FreeRespinReelsFormatter_1.FreeRespinReelsFormatter).to(DHBFreeRespinReelsFormatter_1.DHBFreeRespinReelsFormatter);
        es5_1.Container.bind(PickFeatureFormatter_1.PickFeatureFormatter).to(DHBPickFeatureFormatter_1.DHBPickFeatureFormatter);
        es5_1.Container.bind(FreeSpinFeatureFormatter_1.FreeSpinFeatureFormatter).to(DHBFreeSpinFeatureFormatter_1.DHBFreeSpinFeatureFormatter);
        es5_1.Container.bind(WildLockedFeatureFormatter_1.WildLockedFeatureFormatter).to(DHBWildLockedFeatureFormatter_1.DHBWildLockedFeatureFormatter);
        es5_1.Container.bind(SpinMsgFormatter_1.SpinMsgFormatter).to(DHBSpinMsgFormatter_1.DHBSpinMsgFormatter);
        es5_1.Container.bind(SingleWildMultiplierFeatureFormatter_1.SingleWildMultiplierFeatureFormatter).to(DHBSingleWildsMultiplierFeatureFormatter_1.DHBSingleWildsMultiplierFeatureFormatter);
    };
    DHBApplication.prototype.createComponentList = function (components) {
        components.push({ id: 'background', class: DHBBackgroundController_1.DHBBackgroundController });
        components.push({ id: 'winning', class: BaseWinLinesV2Controller_1.BaseWinLinesV2Controller });
        components.push({ id: 'reel', class: DHBReelController_1.DHBReelController });
        components.push({ id: 'winBoxes', class: DHBWinBoxV2Controller_1.DHBWinBoxV2Controller });
        components.push({ id: 'marquee', class: DHBSlotMarqueeController_1.DHBSlotMarqueeController });
        components.push({ id: 'animationArea', class: DHBAnimationViewController_1.DHBAnimationViewController });
        components.push({ id: 'coinShower', class: DHBCoinShowerController_1.DHBCoinShowerController });
        components.push({ id: 'lineScore', class: LineScoreController_1.LineScoreController });
        components.push({ id: 'mlui', class: MLUIController_1.MLUIController });
        components.push({ id: 'dialog', class: DHBSlotDialogController_1.DHBSlotDialogController });
        components.push({ id: 'tooltip', class: TooltipController_1.TooltipController });
        if (!UrlParameters_1.UrlParameters.isRealMode()) {
            components.push({ id: 'forceSpinOutcome', class: ForcingSpinController_1.ForcingSpinController });
        }
        components.push({ id: 'freeSpins', class: DHBSlotFreeSpinsController_1.DHBSlotFreeSpinsController });
        components.push({ id: 'bigWin', class: DHBBigWinController_1.DHBBigWinController });
    };
    return DHBApplication;
}(SlotApplication_1.SlotApplication));
exports.DHBApplication = DHBApplication;


/***/ }),
/* 514 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 515 */,
/* 516 */,
/* 517 */,
/* 518 */,
/* 519 */,
/* 520 */,
/* 521 */,
/* 522 */,
/* 523 */,
/* 524 */,
/* 525 */,
/* 526 */,
/* 527 */,
/* 528 */,
/* 529 */,
/* 530 */,
/* 531 */,
/* 532 */,
/* 533 */,
/* 534 */,
/* 535 */,
/* 536 */,
/* 537 */,
/* 538 */,
/* 539 */,
/* 540 */,
/* 541 */,
/* 542 */,
/* 543 */,
/* 544 */,
/* 545 */,
/* 546 */,
/* 547 */,
/* 548 */,
/* 549 */,
/* 550 */,
/* 551 */,
/* 552 */,
/* 553 */,
/* 554 */,
/* 555 */,
/* 556 */,
/* 557 */,
/* 558 */,
/* 559 */,
/* 560 */,
/* 561 */,
/* 562 */,
/* 563 */,
/* 564 */,
/* 565 */,
/* 566 */,
/* 567 */,
/* 568 */,
/* 569 */,
/* 570 */,
/* 571 */,
/* 572 */,
/* 573 */,
/* 574 */,
/* 575 */,
/* 576 */,
/* 577 */,
/* 578 */,
/* 579 */,
/* 580 */,
/* 581 */,
/* 582 */,
/* 583 */,
/* 584 */,
/* 585 */,
/* 586 */,
/* 587 */,
/* 588 */,
/* 589 */,
/* 590 */,
/* 591 */,
/* 592 */,
/* 593 */,
/* 594 */,
/* 595 */,
/* 596 */,
/* 597 */,
/* 598 */,
/* 599 */,
/* 600 */,
/* 601 */,
/* 602 */,
/* 603 */,
/* 604 */,
/* 605 */,
/* 606 */,
/* 607 */,
/* 608 */,
/* 609 */,
/* 610 */,
/* 611 */,
/* 612 */,
/* 613 */,
/* 614 */,
/* 615 */,
/* 616 */,
/* 617 */,
/* 618 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var NAudioTrack = /** @class */ (function () {
    function NAudioTrack(data) {
        this._name = data.name;
        this._isSingleChannel = data.isSingleChannel;
        this.keepAudioOnEnable = data.keepAudioOnEnable;
        this._enabled = true;
        this.audios = new Array();
    }
    Object.defineProperty(NAudioTrack.prototype, "name", {
        get: function () {
            return this._name;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NAudioTrack.prototype, "isSingleChannel", {
        get: function () {
            return this._isSingleChannel;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Plays thje specified audio object and adds it to the list of playimng sounds for this track
     * @param audio Audio Object to play
     * @param loop Whether to loop the audio or not
     */
    NAudioTrack.prototype.play = function (audio, loop) {
        var _this = this;
        //Clear Audio if only singleCHannel
        if (this.isSingleChannel) {
            this.clearAllAudio();
        }
        //Check if enabled if not then return but first checks if audioshould be kept for when audio is re enabled
        if (!this._enabled) {
            if (this.keepAudioOnEnable) {
                this.audios.push(audio);
            }
            return;
        }
        this.audios.push(audio);
        //If not loop then add onend event to remove from array of playing sounds;
        if (!loop) {
            audio.once('end', function () {
                _this.audios.splice(_this.audios.indexOf(audio), 1);
            });
        }
        audio.loop(loop).play();
    };
    Object.defineProperty(NAudioTrack.prototype, "enabled", {
        /**
         * returns whether the track is enabled or nort
         */
        get: function () {
            return this._enabled;
        },
        /**
         * Sets the track enabled or disabled. Sounds will not play if disabled.
         */
        set: function (enabled) {
            this._enabled = enabled;
            this.keepAudioOnEnable ? this.pauseAllAudio() : this.clearAllAudio();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Clears all the current playing audio
     */
    NAudioTrack.prototype.clearAllAudio = function () {
        var length = this.audios.length;
        for (var i = 0; i < length; i++) {
            var audio = this.audios.pop();
            audio.stop();
        }
    };
    /**
     * pauses the current playing audio
     */
    NAudioTrack.prototype.pauseAllAudio = function () {
        var _this = this;
        this.audios.forEach(function (audio) {
            _this._enabled ? audio.play() : audio.pause();
        });
    };
    NAudioTrack.prototype.destroy = function () {
        var length = this.audios.length;
        for (var i = 0; i < length; i++) {
            this.audios.pop();
        }
        this.audios = undefined;
    };
    return NAudioTrack;
}());
exports.NAudioTrack = NAudioTrack;


/***/ }),
/* 619 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var HOWL = __webpack_require__(620);
var SoundManager_1 = __webpack_require__(13);
/**
 * Modified Howler audio class
 * Support two extra parameters:
 * 1. SoundManager.ignoreHowlerPreload - Play sound once we loaded file
 * 2. SoundManager.playSoundsOnLoad  - Disable loading of howler files on initialisation
 */
var NAudio = /** @class */ (function (_super) {
    __extends(NAudio, _super);
    function NAudio(properties, playSoundsOnLoad) {
        if (playSoundsOnLoad === void 0) { playSoundsOnLoad = true; }
        var _this = _super.call(this, properties) || this;
        _this._playSoundsOnLoad = true;
        _this._playSoundsOnLoad = playSoundsOnLoad;
        return _this;
    }
    Object.defineProperty(NAudio.prototype, "playSoundsOnLoad", {
        get: function () {
            return this._playSoundsOnLoad;
        },
        set: function (value) {
            this._playSoundsOnLoad = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Constructor for Howler audio file.
     * Added ignoring of howler preload parameter.
     * @param properties howler audio properties
     */
    NAudio.prototype.init = function (properties) {
        if (SoundManager_1.SoundManager.ignoreHowlerPreload) {
            properties['preload'] = false;
        }
        _super.prototype.init.call(this, properties);
    };
    /**
     * Modified play function of Howler audio.
     * Added support of SoundManager.playSoundsOnLoad parameter.
     * Play a sound or resume previous playback.
     * @param  {string/number} sprite   Sprite name for sprite playback or sound id to continue previous.
     * @param  {boolean} internal Internal Use: true prevents event firing.
     * @return {number}          Sound ID.
     */
    NAudio.prototype.play = function (sprite, internal) {
        var self = this;
        var id = null;
        // Determine if a sprite, sound id or nothing was passed
        if (typeof sprite === 'number') {
            id = sprite;
            sprite = null;
        }
        else if (typeof sprite === 'string' && self._state === 'loaded' && !self._sprite[sprite]) {
            // If the passed sprite doesn't exist, do nothing.
            return null;
        }
        else if (typeof sprite === 'undefined') {
            // Use the default sound sprite (plays the full audio length).
            sprite = '__default';
            // Check if there is a single paused sound that isn't ended.
            // If there is, play that sound. If not, continue as usual.
            var num = 0;
            for (var i = 0; i < self._sounds.length; i++) {
                if (self._sounds[i]._paused && !self._sounds[i]._ended) {
                    num++;
                    id = self._sounds[i]._id;
                }
            }
            if (num === 1) {
                sprite = null;
            }
            else {
                id = null;
            }
        }
        // Get the selected node, or get one from the pool.
        var sound = id ? self._soundById(id) : self._inactiveSound();
        // If the sound doesn't exist, do nothing.
        if (!sound) {
            return null;
        }
        // Select the sprite definition.
        if (id && !sprite) {
            sprite = sound._sprite || '__default';
        }
        // If the sound hasn't loaded, we must wait to get the audio's duration.
        // We also need to wait to make sure we don't run into race conditions with
        // the order of function calls.
        if (self._state !== 'loaded') {
            // Set the sprite value on this sound.
            sound._sprite = sprite;
            // Makr this sounded as not ended in case another sound is played before this one loads.
            sound._ended = false;
            // Add the sound to the queue to be played on load.
            var soundId = sound._id;
            if (this.playSoundsOnLoad) {
                self._queue.push({
                    event: 'play',
                    action: function () {
                        self.play(soundId);
                    }
                });
            }
            return soundId;
        }
        // Don't play the sound if an id was passed and it is already playing.
        if (id && !sound._paused) {
            // Trigger the play event, in order to keep iterating through queue.
            if (!internal) {
                setTimeout(function () {
                    self._emit('play', sound._id);
                }, 0);
            }
            return sound._id;
        }
        // Make sure the AudioContext isn't suspended, and resume it if it is.
        if (self._webAudio) {
            HOWL.Howler._autoResume();
        }
        // Determine how long to play for and where to start playing.
        var seek = Math.max(0, sound._seek > 0 ? sound._seek : self._sprite[sprite][0] / 1000);
        var duration = Math.max(0, ((self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000) - seek);
        var timeout = (duration * 1000) / Math.abs(sound._rate);
        // Update the parameters of the sound
        sound._paused = false;
        sound._ended = false;
        sound._sprite = sprite;
        sound._seek = seek;
        sound._start = self._sprite[sprite][0] / 1000;
        sound._stop = (self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000;
        sound._loop = !!(sound._loop || self._sprite[sprite][2]);
        // Begin the actual playback.
        var node = sound._node;
        if (self._webAudio) {
            // Fire this when the sound is ready to play to begin Web Audio playback.
            var playWebAudio = function () {
                self._refreshBuffer(sound);
                // Setup the playback params.
                var vol = (sound._muted || self._muted) ? 0 : sound._volume;
                node.gain.setValueAtTime(vol, HOWL.Howler.ctx.currentTime);
                sound._playStart = HOWL.Howler.ctx.currentTime;
                // Play the sound using the supported method.
                if (typeof node.bufferSource.start === 'undefined') {
                    sound._loop ? node.bufferSource.noteGrainOn(0, seek, 86400) : node.bufferSource.noteGrainOn(0, seek, duration);
                }
                else {
                    sound._loop ? node.bufferSource.start(0, seek, 86400) : node.bufferSource.start(0, seek, duration);
                }
                // Start a new timer if none is present.
                if (timeout !== Infinity) {
                    self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);
                }
                if (!internal) {
                    self._emit('play', sound._id);
                }
            };
            if (HOWL.Howler.state === 'running') {
                playWebAudio();
            }
            else {
                self.once('resume', playWebAudio);
                // Cancel the end timer.
                self._clearTimer(sound._id);
            }
        }
        else {
            // Fire this when the sound is ready to play to begin HTML5 Audio playback.
            var playHtml5 = function () {
                node.currentTime = seek;
                node.muted = sound._muted || self._muted || HOWL.Howler._muted || node.muted;
                node.volume = sound._volume * HOWL.Howler.volume();
                node.playbackRate = sound._rate;
                // Mobile browsers will throw an error if this is called without user interaction.
                try {
                    node.play();
                    // If the node is still paused, then we can assume there was a playback issue.
                    if (node.paused) {
                        self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' +
                            'on mobile devices where playback was not within a user interaction.');
                        return;
                    }
                    // Setup the new end timer.
                    if (timeout !== Infinity) {
                        self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);
                    }
                    if (!internal) {
                        self._emit('play', sound._id);
                    }
                }
                catch (err) {
                    self._emit('playerror', sound._id, err);
                }
            };
            // Play immediately if ready, or wait for the 'canplaythrough'e vent.
            var loadedNoReadyState = (window && window.ejecta)
                || (!node.readyState && HOWL.Howler._navigator.isCocoonJS);
            if (node.readyState === 4 || loadedNoReadyState) {
                playHtml5();
            }
            else {
                var listener = function () {
                    // Begin playback.
                    playHtml5();
                    // Clear this listener.
                    node.removeEventListener(HOWL.Howler._canPlayEvent, listener, false);
                };
                node.addEventListener(HOWL.Howler._canPlayEvent, listener, false);
                // Cancel the end timer.
                self._clearTimer(sound._id);
            }
        }
        return sound._id;
    };
    return NAudio;
}(HOWL.Howl));
exports.NAudio = NAudio;


/***/ }),
/* 620 */,
/* 621 */,
/* 622 */,
/* 623 */,
/* 624 */,
/* 625 */,
/* 626 */,
/* 627 */,
/* 628 */,
/* 629 */,
/* 630 */,
/* 631 */,
/* 632 */,
/* 633 */,
/* 634 */,
/* 635 */,
/* 636 */,
/* 637 */,
/* 638 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var MiniSignal = __webpack_require__(3);
var CompView_1 = __webpack_require__(34);
var Tooltip_1 = __webpack_require__(639);
var TooltipView = /** @class */ (function (_super) {
    __extends(TooltipView, _super);
    function TooltipView() {
        var _this = _super.call(this) || this;
        _this.activeTooltips = new Array();
        _this.destroySignal = new MiniSignal();
        return _this;
    }
    TooltipView.prototype.showTooltip = function (tooltipData) {
        var isHaveTooltip = false;
        for (var index = 0; index < this.activeTooltips.length; index++) {
            var tip = this.activeTooltips[index];
            if (tip.name == tooltipData.name) {
                isHaveTooltip = true;
                tip.show();
            }
        }
        if (!isHaveTooltip) {
            var tooltip = new Tooltip_1.ToolTip(tooltipData);
            tooltip.hideSignal.add(this.oncloseTooltip, this);
            tooltip.destroySignal.add(this.onDestroyTooltip, this);
            this.activeTooltips.push(tooltip);
            this.addChild(tooltip);
        }
    };
    TooltipView.prototype.hideTooltip = function (name) {
        var tip = this.activeTooltips.find(function (e) { return e.name === name; });
        if (tip) {
            tip.hide();
        }
    };
    TooltipView.prototype.clearTooltip = function (names) {
        var _loop_1 = function (index) {
            var tip = this_1.activeTooltips.find(function (e) { return e.name === names[index]; });
            if (tip) {
                tip.destroy(true);
            }
        };
        var this_1 = this;
        for (var index = 0; index < names.length; index++) {
            _loop_1(index);
        }
    };
    TooltipView.prototype.oncloseTooltip = function (tooltip) {
        // tooltip.hide();
    };
    TooltipView.prototype.onDestroyTooltip = function (tooltip) {
        this.removeChild(tooltip);
        var index = this.activeTooltips.indexOf(tooltip);
        this.activeTooltips.splice(index, 1);
        this.destroySignal.dispatch({ name: tooltip.name, data: tooltip.actionData });
    };
    TooltipView.prototype.layoutElements = function () {
        _super.prototype.layoutElements.call(this);
        for (var i = 0; i < this.activeTooltips.length; i++) {
            this.activeTooltips[i].destroy();
        }
    };
    return TooltipView;
}(CompView_1.CompView));
exports.TooltipView = TooltipView;


/***/ }),
/* 639 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var MiniSignal = __webpack_require__(3);
var pixi_js_1 = __webpack_require__(4);
var es5_1 = __webpack_require__(0);
var Viewport_1 = __webpack_require__(6);
var Button_1 = __webpack_require__(19);
var SimpleTimer_1 = __webpack_require__(15);
var Window_1 = __webpack_require__(142);
var CommonAnimation_1 = __webpack_require__(206);
var CoreUIElementFactory_1 = __webpack_require__(28);
var CoreElement_1 = __webpack_require__(56);
var ToolTip = /** @class */ (function (_super) {
    __extends(ToolTip, _super);
    function ToolTip(config) {
        var _this = _super.call(this, config) || this;
        _this.isInClosing = false;
        _this.hideSignal = new MiniSignal();
        _this.destroySignal = new MiniSignal();
        _this.interactive = true;
        return _this;
    }
    Object.defineProperty(ToolTip.prototype, "actionData", {
        get: function () {
            return this._actionData;
        },
        enumerable: true,
        configurable: true
    });
    ToolTip.prototype.initElement = function (config) {
        var _this = this;
        if (config.onShowAnimation) {
            this.visible = false;
        }
        var titleWidth = 0;
        var titleHeight = 0;
        var paddingLeft = config.paddingLeft ? config.paddingLeft : 0;
        var paddingTop = config.paddingTop ? config.paddingTop : 0;
        // #region CREATE TITLE
        if (config.title !== undefined) {
            this.title = CoreUIElementFactory_1.CoreUIElementFactory.createInstance(config.title);
            titleWidth = this.title.width;
            titleHeight = this.title.height;
        }
        // #endregion CREATE TITLE
        if (config.text !== undefined) {
            this.text = CoreUIElementFactory_1.CoreUIElementFactory.createInstance(config.text);
        }
        // #region CREATE TOOLTIP DYNAMIC BACKGROUND WINDOW
        var windowWidth;
        var windowHeight;
        var margin = config.margin ? (config.margin * 2) : 25;
        if (config.size && !config.fixedWidth && !config.fixedHeight) {
            windowWidth = config.size.x;
            windowHeight = config.size.y;
        }
        else if (config.fixedWidth && this.text) {
            windowWidth = config.fixedWidth;
            windowHeight = titleHeight + this.text.height + margin;
        }
        else if (config.fixedHeight && this.text) {
            windowWidth = Math.max(titleWidth, this.text.width) + margin;
            windowHeight = config.fixedHeight;
        }
        else if (this.text) {
            windowWidth = Math.max(titleWidth, this.text.width) + margin;
            windowHeight = titleHeight + this.text.height + margin;
        }
        config.windowConfig.windowSize = { x: windowWidth, y: windowHeight };
        if (config.windowConfig.anchor) {
            this.config.windowConfig.position.x = -((this.config.windowConfig.windowSize.x - (this.config.windowConfig.rightWidth)) * config.windowConfig.anchor.x);
            this.config.windowConfig.position.y = -((this.config.windowConfig.windowSize.y - (this.config.windowConfig.topHeight)) * config.windowConfig.anchor.y);
        }
        this.window = new Window_1.Window(config.windowConfig);
        // #endregion CREATE TOOLTIP DYNAMIC BACKGROUND WINDOW
        if (config.position) {
            this.position.set(config.position.x, config.position.y);
        }
        else {
            var mousePosition = this.viewport.renderer.plugins.interaction.activeInteractionData[1].global;
            this.position.set(mousePosition.x, mousePosition.y);
        }
        if (this.title) {
            this.title.position.set(config.margin ? config.margin : 25, config.margin ? config.margin : 25);
        }
        if (config.closeButton) {
            this.closeButton = new Button_1.Button(config.closeButton);
            this.closeButton.clickData = __assign({}, config.closeButton.clickData);
            this.closeButton.elementSignal.add(this.close, this);
            var closeButtonPosition = new PIXI.Point(0, 0);
            switch (config.closeButton.center) {
                case Align.VERTICAL_CENTER:
                    this.closeButton.anchor.set(0, .5);
                    closeButtonPosition.x = config.closeButton.position.x;
                    closeButtonPosition.y = Math.floor(this.window.height / 2);
                    break;
                case Align.HORIZONTAL_CENTER:
                    this.closeButton.anchor.set(0.5, 0);
                    closeButtonPosition.x = Math.floor(this.window.width / 2);
                    closeButtonPosition.y = config.closeButton.position.y;
                    break;
                default:
                    closeButtonPosition = new PIXI.Point(config.closeButton.position.x, config.closeButton.position.y);
                    break;
            }
            this.closeButton.position = closeButtonPosition;
            var hitWidth = this.closeButton.width * 3;
            var hitHeight = this.closeButton.height * 3;
            this.closeButton.setRectangleHitArea(hitWidth, hitHeight, -hitWidth / 2, -hitHeight / 2);
        }
        if (this.text) {
            var textPosition = void 0;
            if (config.textTooltipTextFieldConfig) {
                switch (config.textTooltipTextFieldConfig.center) {
                    case Align.VERTICAL_CENTER:
                        this.text.anchor = new pixi_js_1.Point(0, .5);
                        textPosition = new PIXI.Point(this.text.position.x, Math.floor(this.window.height / 2));
                        break;
                    case Align.HORIZONTAL_CENTER:
                        this.text.anchor = new pixi_js_1.Point(0.5, 0);
                        textPosition = new PIXI.Point(Math.floor(this.window.width / 2), this.text.position.y);
                        break;
                    default:
                        textPosition = new PIXI.Point(this.text.position.x, this.text.position.y);
                        break;
                }
                this.text.position.set(paddingLeft + textPosition.x, paddingTop + textPosition.y + titleHeight);
            }
            else {
                textPosition = new PIXI.Point(this.text.position.x, this.text.position.y);
                this.text.position.set(paddingLeft + textPosition.x, paddingTop + textPosition.y + titleHeight);
            }
        }
        this.addChild(this.window);
        if (this.title) {
            this.addChild(this.title);
        }
        if (config.leftsideDisplayObject) {
            if (config.leftsideDisplayObject.y == 0) {
                config.leftsideDisplayObject.y = Math.floor(this.window.height / 2);
            }
            this.addChild(config.leftsideDisplayObject);
            if (config.leftsideTween) {
                var leftsideTween = config.leftsideTween;
                leftsideTween.start();
            }
        }
        if (this.text) {
            this.addChild(this.text);
        }
        if (this.closeButton) {
            this.addChild(this.closeButton);
        }
        if (config.textButton) {
            this.textButton = config.textButton;
            var xPoint = this.textButton.anchor ? this.textButton.anchor.x : 0;
            var yPoint = this.textButton.anchor ? this.textButton.anchor.y : 0;
            if (config.textButton.position.x == 0) {
                xPoint = 0.5;
                this.textButton.x = Math.floor(this.window.width / 2);
            }
            if (config.textButton.position.y == 0) {
                yPoint = 0.5;
                this.textButton.y = Math.floor(this.window.height / 2);
            }
            this.textButton.anchor = new pixi_js_1.Point(xPoint, yPoint);
            this.textButton.elementSignal.add(this.close, this);
            this.addChild(this.textButton);
        }
        if (config.timeout !== undefined) {
            this.timer = new SimpleTimer_1.SimpleTimer(config.timeout, function () {
                _this.close();
            });
        }
        if (config.onShowAnimation) {
            this.visible = true;
            var showConfig = config.onShowAnimation;
            showConfig.target = this;
            this.tween = CommonAnimation_1.CommonAnimation.startTween(showConfig);
            this.tween.start();
        }
        this.config = config;
    };
    ToolTip.prototype.show = function () {
        var _this = this;
        this.visible = true;
        this.isInClosing = false;
        if (this.config.onShowAnimation) {
            var showConfig = this.config.onShowAnimation;
            showConfig.target = this;
            this.tween = CommonAnimation_1.CommonAnimation.startTween(showConfig);
            this.tween.start();
        }
        if (this.config.timeout !== undefined) {
            this.timer = new SimpleTimer_1.SimpleTimer(this.config.timeout, function () {
                _this.close();
            });
        }
        this.parent.addChild(this); //Resets to top of display order
    };
    ToolTip.prototype.close = function (data) {
        var _this = this;
        if (this.isInClosing) {
            return;
        }
        this.isInClosing = true;
        this._actionData = data;
        if (this.config.onCloseAnimation) {
            var closeConfig = this.config.onCloseAnimation;
            closeConfig.target = this;
            this.tween = CommonAnimation_1.CommonAnimation.startTween(closeConfig);
            this.tween.onComplete(function () {
                if (_this.config.closeAction === CloseAction.HIDE) {
                    _this.hide();
                }
                else {
                    _this.destroy();
                }
            }).start();
        }
        else {
            if (this.config.closeAction === CloseAction.HIDE) {
                this.hide();
            }
            else {
                this.destroy();
            }
        }
    };
    ToolTip.prototype.hide = function () {
        if (this.tween) {
            this.tween.stop();
        }
        if (this.timer) {
            this.timer.stop();
        }
        this.hideSignal.dispatch(this);
        this.visible = false;
    };
    ToolTip.prototype.destroy = function (forceClean) {
        if (forceClean === void 0) { forceClean = false; }
        if (this.timer) {
            this.timer.destroy();
        }
        if (this.tween) {
            this.tween.stop();
            this.tween = null;
        }
        this.window.destroy();
        if (this.title) {
            this.title.destroy();
        }
        if (this.text) {
            this.text.destroy();
        }
        if (this.closeButton) {
            this.closeButton.destroy();
        }
        _super.prototype.destroy.call(this);
        if (forceClean) {
            this._actionData = { action: 'action_' + DestroyAction.CLEAN };
        }
        this.destroySignal.dispatch(this);
    };
    var _a;
    ToolTip.elementType = 'ToolTip';
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof Viewport_1.Viewport !== "undefined" && Viewport_1.Viewport) === "function" && _a || Object)
    ], ToolTip.prototype, "viewport", void 0);
    return ToolTip;
}(CoreElement_1.CoreElement));
exports.ToolTip = ToolTip;
var Align;
(function (Align) {
    Align["VERTICAL_CENTER"] = "VERTICAL_CENTER";
    Align["HORIZONTAL_CENTER"] = "HORIZONTAL_CENTER";
})(Align = exports.Align || (exports.Align = {}));
var CloseAction;
(function (CloseAction) {
    CloseAction[CloseAction["HIDE"] = 0] = "HIDE";
    CloseAction[CloseAction["DESTORY"] = 1] = "DESTORY";
})(CloseAction = exports.CloseAction || (exports.CloseAction = {}));
var DestroyAction;
(function (DestroyAction) {
    DestroyAction["CLOSE"] = "CLOSE";
    DestroyAction["CLEAN"] = "CLEAN";
    DestroyAction["FADE"] = "FADE";
})(DestroyAction = exports.DestroyAction || (exports.DestroyAction = {}));


/***/ }),
/* 640 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var SoundManager_1 = __webpack_require__(13);
var SpineAnimation_1 = __webpack_require__(63);
var SpineSoundAnimation = /** @class */ (function (_super) {
    __extends(SpineSoundAnimation, _super);
    function SpineSoundAnimation(config) {
        var _this = _super.call(this, config) || this;
        _this.stopSoundOnStateChanged = (config.stopSoundOnStateChanged) ? config.stopSoundOnStateChanged : false;
        return _this;
    }
    SpineSoundAnimation.prototype.onStart = function (trackEntry) {
        _super.prototype.onStart.call(this, trackEntry);
        this.playSound(trackEntry.animation.name);
    };
    SpineSoundAnimation.prototype.playSound = function (name) {
        var _this = this;
        if (this.config.soundMap) {
            var soundAttributes = this.getSoundAttributes(name);
            if (soundAttributes) {
                soundAttributes.forEach(function (soundAttribute) {
                    if (soundAttribute.loop && _this.soundManager.isPlaying(soundAttribute.key)) {
                        return;
                    }
                    else {
                        _this.soundManager.play(soundAttribute.key, SoundManager_1.AudioTrackName.EFFECT, soundAttribute.loop);
                    }
                });
            }
        }
    };
    SpineSoundAnimation.prototype.playByStateName = function (stateName, context, skipOnDuplicate) {
        if (skipOnDuplicate === void 0) { skipOnDuplicate = true; }
        this.prevStateName = this.currentStateName;
        this.currentStateName = stateName;
        if (this.currentStateName !== this.prevStateName && this.stopSoundOnStateChanged) {
            this.stopAllSound();
        }
        _super.prototype.playByStateName.call(this, stateName, context, skipOnDuplicate);
    };
    SpineSoundAnimation.prototype.stop = function () {
        _super.prototype.stop.call(this);
        this.stopAllSound();
    };
    SpineSoundAnimation.prototype.hide = function () {
        _super.prototype.hide.call(this);
        this.stopAllSound();
    };
    SpineSoundAnimation.prototype.stopAllSound = function () {
        var _this = this;
        if (this.config.soundMap) {
            this.config.soundMap.forEach(function (soundAttributes) {
                soundAttributes.forEach(function (soundAttribute) {
                    _this.soundManager.stop(soundAttribute.key);
                });
            });
        }
    };
    SpineSoundAnimation.prototype.getSoundAttributes = function (name) {
        if (!this.config.soundMap) {
            return null;
        }
        return this.config.soundMap.get(name);
    };
    var _a;
    SpineSoundAnimation.elementType = 'SpineSoundAnimation';
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof SoundManager_1.SoundManager !== "undefined" && SoundManager_1.SoundManager) === "function" && _a || Object)
    ], SpineSoundAnimation.prototype, "soundManager", void 0);
    return SpineSoundAnimation;
}(SpineAnimation_1.SpineAnimation));
exports.SpineSoundAnimation = SpineSoundAnimation;


/***/ }),
/* 641 */,
/* 642 */,
/* 643 */,
/* 644 */,
/* 645 */,
/* 646 */,
/* 647 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var TsMap_1 = __webpack_require__(2);
var es5_1 = __webpack_require__(0);
var SeleniumPortal_1 = __webpack_require__(143);
var NGWebSocketServer_1 = __webpack_require__(648);
var AbstractFormatter_1 = __webpack_require__(141);
var SlotSeleniumPortal_1 = __webpack_require__(368);
var SlotStates_1 = __webpack_require__(31);
var SlotNGServerConfig_1 = __webpack_require__(147);
var SlotNGHttpFormatter_1 = __webpack_require__(20);
var SlotNGHttpTransport_1 = __webpack_require__(689);
var ErrorMsgFormatter_1 = __webpack_require__(690);
var Spin_1 = __webpack_require__(691);
var GameInit_1 = __webpack_require__(371);
var ForceSpin_1 = __webpack_require__(701);
var HistoryDetail_1 = __webpack_require__(702);
var HistorySummary_1 = __webpack_require__(703);
var RunPickFeature_1 = __webpack_require__(704);
var SlotRngToolPortal_1 = __webpack_require__(706);
var RunJackpotFeature_1 = __webpack_require__(707);
var RunFreeSpinFeature_1 = __webpack_require__(709);
var SlotNGDataHookLogFormatter_1 = __webpack_require__(710);
var FreeRespin_1 = __webpack_require__(713);
var ResultHistorySummary_1 = __webpack_require__(715);
var ResultHistoryDetail_1 = __webpack_require__(717);
var SlotNGServer = /** @class */ (function (_super) {
    __extends(SlotNGServer, _super);
    function SlotNGServer() {
        var _this = _super.call(this) || this;
        _this.isSynchronized = true;
        /**
         * init message from server can emerge twice, this prevents from duplicated call
         */
        _this.isInited = false;
        _this.errorHandleService.init(es5_1.Container.get(ErrorMsgFormatter_1.ErrorMsgFormatter));
        return _this;
    }
    SlotNGServer.prototype.setupTransport = function () {
        return es5_1.Container.get(SlotNGHttpTransport_1.SlotNGHttpTransport);
    };
    SlotNGServer.prototype.obtainConfig = function () {
        return this.gameConfig.getConfig(SlotNGServerConfig_1.SlotNGServerConfig);
    };
    SlotNGServer.prototype.getDataHookLogFormatter = function () {
        return es5_1.Container.get(SlotNGDataHookLogFormatter_1.SlotNGDataHookLogFormatter);
    };
    SlotNGServer.prototype.getServerAPIs = function () {
        var serverApis = new TsMap_1.TsMap();
        serverApis.set(SlotNGHttpFormatter_1.SlotNGHttpFormatter.INIT, es5_1.Container.get(GameInit_1.GameInit));
        serverApis.set(SlotNGHttpFormatter_1.SlotNGHttpFormatter.SPIN, es5_1.Container.get(Spin_1.Spin));
        serverApis.set(SlotNGHttpFormatter_1.SlotNGHttpFormatter.RUN_PICK_FEATURE, es5_1.Container.get(RunPickFeature_1.RunPickFeature));
        serverApis.set(SlotNGHttpFormatter_1.SlotNGHttpFormatter.RUN_FREE_SPIN_FEATURE, es5_1.Container.get(RunFreeSpinFeature_1.RunFreeSpinFeature));
        serverApis.set(SlotNGHttpFormatter_1.SlotNGHttpFormatter.HISTORY_SUMMARY, es5_1.Container.get(HistorySummary_1.HistorySummary));
        serverApis.set(SlotNGHttpFormatter_1.SlotNGHttpFormatter.HISTORY_DETAIL, es5_1.Container.get(HistoryDetail_1.HistoryDetail));
        serverApis.set(SlotNGHttpFormatter_1.SlotNGHttpFormatter.RESULT_HISTORY_SUMMARY, es5_1.Container.get(ResultHistorySummary_1.ResultHistorySummary));
        serverApis.set(SlotNGHttpFormatter_1.SlotNGHttpFormatter.RESULT_HISTORY_DETAIL, es5_1.Container.get(ResultHistoryDetail_1.ResultHistoryDetail));
        serverApis.set(SlotNGHttpFormatter_1.SlotNGHttpFormatter.FORCE_SPIN, es5_1.Container.get(ForceSpin_1.ForceSpin));
        serverApis.set(SlotNGHttpFormatter_1.SlotNGHttpFormatter.RUN_JACKPOT_FEATURE, es5_1.Container.get(RunJackpotFeature_1.RunJackpotFeature));
        serverApis.set(SlotNGHttpFormatter_1.SlotNGHttpFormatter.FREE_RESPIN_REELS, es5_1.Container.get(FreeRespin_1.FreeRespin));
        return serverApis;
    };
    /**
     * Opens connection and initiate login if required
     */
    SlotNGServer.prototype.handshake = function () {
        var _this = this;
        this.selenium.setupSelenium(!this.transport.isUsingRealEnvironment());
        this.transport.onConnect = this.onConnect.bind(this);
        this.apiMapping.get(SlotNGHttpFormatter_1.SlotNGHttpFormatter.INIT).send(SlotNGHttpFormatter_1.SlotNGHttpFormatter.INIT).then(function (data) {
            _this.onInitResponse(data);
            _this.transport.init(data.payload);
        }).catch(function (data) {
            console.log('[LOGIN_FAIL]', data);
        });
    };
    SlotNGServer.prototype.send = function (messageType, data) {
        var _this = this;
        this.selenium.addToHistory(new SlotSeleniumPortal_1.SlotSeleniumHistoryMessage(messageType, SeleniumPortal_1.MessageDirection.OUTBOUND));
        if (messageType.indexOf('direct') === -1) {
            this.apiMapping.get(messageType).send(messageType, data).then(function (response) {
                _this.onResponse(response);
            });
            return null;
        }
        else {
            return this.apiMapping.get(messageType).send(messageType, data);
        }
    };
    SlotNGServer.prototype.onReceive = function (data) {
        _super.prototype.onReceive.call(this, data);
        if (data.name == AbstractFormatter_1.AbstractFormatter.INIT) {
            this.partnerCode = data.payload.state.partner_code;
            this.playerId = data.payload.state.player_id;
            this.engagements = data.payload.state.engagements;
            // check if rng tool need to be enable
            if (data.payload.force_spin_enabled != undefined && data.payload.force_spin_enabled) {
                this.rngTool.setupRngTool();
            }
            this.connectToNotificationServer();
        }
    };
    SlotNGServer.prototype.onResponse = function (response) {
        this.selenium.addToHistory(new SlotSeleniumPortal_1.SlotSeleniumHistoryMessage(response ? response.name : '', SeleniumPortal_1.MessageDirection.INBOUND));
        this.serverResponseSignal.dispatch(response);
    };
    SlotNGServer.prototype.onInitResponse = function (data) {
        if (this.isInited) {
            console.log('[ NGServer ]: received init response second time');
            return;
        }
        else {
            this.isInited = true;
            this.serverResponseSignal.dispatch(data);
        }
    };
    SlotNGServer.prototype.processState = function (stateName, stateData) {
        this.selenium.setState(stateName);
        _super.prototype.processState.call(this, stateName, stateData);
    };
    var _a, _b, _c, _d;
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof SlotNGHttpTransport_1.SlotNGHttpTransport !== "undefined" && SlotNGHttpTransport_1.SlotNGHttpTransport) === "function" && _a || Object)
    ], SlotNGServer.prototype, "transport", void 0);
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_b = typeof SlotStates_1.SlotStates !== "undefined" && SlotStates_1.SlotStates) === "function" && _b || Object)
    ], SlotNGServer.prototype, "stateNames", void 0);
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_c = typeof SlotSeleniumPortal_1.SlotSeleniumPortal !== "undefined" && SlotSeleniumPortal_1.SlotSeleniumPortal) === "function" && _c || Object)
    ], SlotNGServer.prototype, "selenium", void 0);
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_d = typeof SlotRngToolPortal_1.SlotRngToolPortal !== "undefined" && SlotRngToolPortal_1.SlotRngToolPortal) === "function" && _d || Object)
    ], SlotNGServer.prototype, "rngTool", void 0);
    return SlotNGServer;
}(NGWebSocketServer_1.NGWebSocketServer));
exports.SlotNGServer = SlotNGServer;


/***/ }),
/* 648 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var TsMap_1 = __webpack_require__(2);
var es5_1 = __webpack_require__(0);
var Translator_1 = __webpack_require__(25);
var DataHookService_1 = __webpack_require__(139);
var WebSocketService_1 = __webpack_require__(649);
var ITransport_1 = __webpack_require__(650);
var NGWebSocketTransport_1 = __webpack_require__(651);
var NGWebSocketDataDefinitions_1 = __webpack_require__(683);
var AbstractServer_1 = __webpack_require__(133);
var NGServerConfig_1 = __webpack_require__(146);
var GameConfig_1 = __webpack_require__(24);
var WebSocketFormatter_1 = __webpack_require__(366);
var NGHttpTransport_1 = __webpack_require__(367);
var NGSDKSupportList_1 = __webpack_require__(684);
/**
 * NGWebSocketServer with web socket conection.
 * connect to nurgs notification server.
 */
var NGWebSocketServer = /** @class */ (function (_super) {
    __extends(NGWebSocketServer, _super);
    function NGWebSocketServer() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.FEATURE = '{feature}';
        _this.PARTNER_CODE = '{partnerCode}';
        _this.PLAYER_ID = '{playerId}';
        _this.LOCALE = '{locale}';
        _this.isInitialized = false;
        /**
         * Mapping address with features
         * key: address
         * value: feature
         */
        _this.addressMap = new TsMap_1.TsMap();
        return _this;
    }
    Object.defineProperty(NGWebSocketServer.prototype, "sdkSupportList", {
        get: function () {
            return this._sdkSupportList.SDKSupportList;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NGWebSocketServer.prototype, "webSocketTransport", {
        get: function () {
            return this._webSocketTransport;
        },
        enumerable: true,
        configurable: true
    });
    NGWebSocketServer.prototype.setupTransport = function () {
        return es5_1.Container.get(NGHttpTransport_1.NGHttpTransport);
    };
    Object.defineProperty(NGWebSocketServer.prototype, "webSocketConfig", {
        get: function () {
            return this.config;
        },
        enumerable: true,
        configurable: true
    });
    NGWebSocketServer.prototype.obtainConfig = function () {
        return this.gameConfig.getConfig(NGServerConfig_1.NGServerConfig);
    };
    NGWebSocketServer.prototype.onReceive = function (data) {
        //
    };
    NGWebSocketServer.prototype.onConnect = function () {
        //do something
    };
    NGWebSocketServer.prototype.send = function (messageType, data) {
        return null;
    };
    /**
     * connect to notification server
     */
    NGWebSocketServer.prototype.connectToNotificationServer = function () {
        if (this.webSocketConfig.useWebSocket) {
            this.dataHookService.init(this, this.getDataHookLogFormatter());
            this._webSocketTransport = this.setupWebSocketTransport();
            this.webSocketTransport.setConfig(this.webSocketConfig);
            this.webSocketTransport.onConnect = this.onWebSocketConnected.bind(this);
            this.webSocketTransport.onError = this.onNetworkError.bind(this);
            this.webSocketTransport.onReceive = this.onWebSocketReceive.bind(this);
            this.webSocketTransport.onNotificationSignal.add(this.onWebSocketNotification, this);
            this.webSocketTransport.connect();
        }
    };
    NGWebSocketServer.prototype.getDataHookLogFormatter = function () {
        return es5_1.Container.get(WebSocketFormatter_1.WebSocketFormatter);
    };
    NGWebSocketServer.prototype.sendDataHookInfo = function (data) {
        this.webSocketService.onWebSocketRequest(data);
    };
    /**
     * Setup web socket transport
     */
    NGWebSocketServer.prototype.setupWebSocketTransport = function () {
        return es5_1.Container.get(NGWebSocketTransport_1.NGWebSocketTransport);
    };
    /**
     * On web socket connected
     */
    NGWebSocketServer.prototype.onWebSocketConnected = function () {
        if (this.isInitialized) {
            this.setDirectRegister();
            return;
        }
        this.setRegisterHandler();
        this.registerEvents();
        this.isInitialized = true;
    };
    /**
     * Register handler for direct and channel
     */
    NGWebSocketServer.prototype.setRegisterHandler = function () {
        this.setDirectRegister();
        this.setChannelRegister();
        this.setRequestRegister();
    };
    NGWebSocketServer.prototype.registerEvents = function () {
        this.webSocketService.onWebSocketRequestSignal.add(this.onWebSocketRequest, this);
    };
    /**
     * Register handler for direct by address
     */
    NGWebSocketServer.prototype.setDirectRegister = function () {
        this.webSocketConfig.directAddressFormat = this.webSocketConfig.directAddressFormat.replace(this.PARTNER_CODE, this.partnerCode);
        this.webSocketConfig.directAddressFormat = this.webSocketConfig.directAddressFormat.replace(this.PLAYER_ID, this.playerId);
        if (this.engagements != undefined) {
            for (var i = 0; i < this.engagements.length; i++) {
                var address = this.getDirectAddress(this.engagements[i].toLocaleLowerCase());
                this.addressMap.set(address, this.engagements[i].toLocaleLowerCase());
                this.webSocketTransport.onSetRegisterHandler(address);
            }
        }
        if (this.webSocketConfig.directFeatures != undefined) {
            for (var i = 0; i < this.webSocketConfig.directFeatures.length; i++) {
                var address = this.getDirectAddress(this.webSocketConfig.directFeatures[i]);
                this.addressMap.set(address, this.webSocketConfig.directFeatures[i]);
                this.webSocketTransport.onSetRegisterHandler(address);
            }
        }
    };
    /**
     * Get direct address by feature
     * @param feature
     */
    NGWebSocketServer.prototype.getDirectAddress = function (feature) {
        var directAdress = this.webSocketConfig.directAddressFormat;
        directAdress = directAdress.replace(this.FEATURE, feature);
        return directAdress;
    };
    /**
     * Register handler for channel by address
     */
    NGWebSocketServer.prototype.setChannelRegister = function () {
        if (this.webSocketConfig.channelFeatures != undefined) {
            this.webSocketConfig.channelAddressFormat = this.webSocketConfig.channelAddressFormat.replace(this.PARTNER_CODE, this.partnerCode);
            this.webSocketConfig.channelAddressFormat = this.webSocketConfig.channelAddressFormat.replace(this.LOCALE, this.translator.language);
            for (var i = 0; i < this.webSocketConfig.channelFeatures.length; i++) {
                var address = this.getChannelAddress(this.webSocketConfig.channelFeatures[i]);
                this.addressMap.set(address, this.webSocketConfig.channelFeatures[i]);
                this.webSocketTransport.onSetRegisterHandler(address);
            }
        }
    };
    /**
     * Get channel address by feature
     * @param feature
     */
    NGWebSocketServer.prototype.getChannelAddress = function (feature) {
        var channeAdress = this.webSocketConfig.channelAddressFormat;
        channeAdress = channeAdress.replace(this.FEATURE, feature);
        return channeAdress;
    };
    /**
     * Register handler for request by address
     */
    NGWebSocketServer.prototype.setRequestRegister = function () {
        if (this.webSocketConfig.requestAddressFormat != undefined) {
            for (var i = 0; i < this.webSocketConfig.requestFeatures.length; i++) {
                var address = this.getRequestAddress(this.webSocketConfig.requestFeatures[i]);
                this.addressMap.set(address, this.webSocketConfig.requestFeatures[i]);
            }
        }
    };
    /**
     * Get request address by feature
     * @param feature
     */
    NGWebSocketServer.prototype.getRequestAddress = function (feature) {
        var requestAdress = this.webSocketConfig.requestAddressFormat;
        requestAdress = requestAdress.replace(this.FEATURE, feature);
        return requestAdress;
    };
    /**
     * Send request through web socket by address
     * @param address
     * @param data
     */
    NGWebSocketServer.prototype.onWebSocketRequest = function (data) {
        this.webSocketTransport.send(data);
    };
    /**
     * Calling when receive response from server
     * @param data
     */
    NGWebSocketServer.prototype.onWebSocketReceive = function (data) {
        if (this.addressMap.has(data.address)) {
            var webSocketData = new NGWebSocketDataDefinitions_1.NGWebSocketData(this.addressMap.get(data.address), data.body.eventType, data.body);
            this.webSocketService.onWebSocketResponse(webSocketData);
        }
    };
    /**
     * Calling when receive notification from server
     * @param data
     */
    NGWebSocketServer.prototype.onWebSocketNotification = function (data) {
        if (this.addressMap.has(data.address)) {
            var webSocketData = new NGWebSocketDataDefinitions_1.NGWebSocketData(this.addressMap.get(data.address), data.body.eventType, data.body.body);
            this.webSocketService.onWebSocketNotification(webSocketData);
        }
    };
    var _a, _b, _c, _d, _e, _f;
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof GameConfig_1.GameConfig !== "undefined" && GameConfig_1.GameConfig) === "function" && _a || Object)
    ], NGWebSocketServer.prototype, "gameConfig", void 0);
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_b = typeof Translator_1.Translator !== "undefined" && Translator_1.Translator) === "function" && _b || Object)
    ], NGWebSocketServer.prototype, "translator", void 0);
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_c = typeof WebSocketService_1.WebSocketService !== "undefined" && WebSocketService_1.WebSocketService) === "function" && _c || Object)
    ], NGWebSocketServer.prototype, "webSocketService", void 0);
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_d = typeof DataHookService_1.DataHookService !== "undefined" && DataHookService_1.DataHookService) === "function" && _d || Object)
    ], NGWebSocketServer.prototype, "dataHookService", void 0);
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_e = typeof NGSDKSupportList_1.NGSDKSupportList !== "undefined" && NGSDKSupportList_1.NGSDKSupportList) === "function" && _e || Object)
    ], NGWebSocketServer.prototype, "_sdkSupportList", void 0);
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_f = typeof ITransport_1.ITransport !== "undefined" && ITransport_1.ITransport) === "function" && _f || Object)
    ], NGWebSocketServer.prototype, "_webSocketTransport", void 0);
    return NGWebSocketServer;
}(AbstractServer_1.AbstractServer));
exports.NGWebSocketServer = NGWebSocketServer;


/***/ }),
/* 649 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var MiniSignal = __webpack_require__(3);
var es5_1 = __webpack_require__(0);
/**
 * Service for broadcast web socket notification and response.
 */
var WebSocketService = /** @class */ (function () {
    function WebSocketService() {
        this.onWebSocketRequestSignal = new MiniSignal();
        this.onWebSocketNotificationSignal = new MiniSignal();
        this.onWebSocketResponseSignal = new MiniSignal();
    }
    WebSocketService.prototype.onWebSocketRequest = function (webSocketData) {
        this.onWebSocketRequestSignal.dispatch(webSocketData);
    };
    WebSocketService.prototype.onWebSocketResponse = function (webSocketData) {
        this.onWebSocketResponseSignal.dispatch(webSocketData);
    };
    WebSocketService.prototype.onWebSocketNotification = function (webSocketData) {
        this.onWebSocketNotificationSignal.dispatch(webSocketData);
    };
    WebSocketService = __decorate([
        es5_1.Singleton
    ], WebSocketService);
    return WebSocketService;
}());
exports.WebSocketService = WebSocketService;


/***/ }),
/* 650 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });


/***/ }),
/* 651 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var Helper_1 = __webpack_require__(5);
var UrlParameters_1 = __webpack_require__(14);
var WebSocketTransport_1 = __webpack_require__(652);
/**
 * Handle m4 web socket transport.
 */
var NGWebSocketTransport = /** @class */ (function (_super) {
    __extends(NGWebSocketTransport, _super);
    function NGWebSocketTransport() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.DOMAIN = '{domain}';
        _this.GAME_CODE = '{game_code}';
        _this.PARTNER_TOKEN = '{partner}';
        _this.SESSION_TOKEN = '{session}';
        _this.DEVICE = '{device}';
        _this.PORT = '{port}';
        _this.GS = '{gs}';
        return _this;
    }
    NGWebSocketTransport.prototype.setConfig = function (config) {
        this.config = config;
    };
    /**
     * Get web socket connection url
     */
    NGWebSocketTransport.prototype.getConnectionURL = function () {
        var returnURL = this.config.notificationPath;
        returnURL = returnURL.replace(this.DOMAIN, this.getDynamicDomainName());
        var partnerToken = UrlParameters_1.UrlParameters.partnerToken;
        if (!UrlParameters_1.UrlParameters.isRealMode) {
            if (UrlParameters_1.UrlParameters.isDemoMode) {
                partnerToken = this.config.demoPartnerToken;
            }
            else {
                partnerToken = this.config.playPartnerToken;
            }
        }
        returnURL = returnURL.replace(this.PARTNER_TOKEN, partnerToken);
        returnURL = returnURL.replace(this.SESSION_TOKEN, UrlParameters_1.UrlParameters.sessionToken);
        returnURL = returnURL.replace(this.GAME_CODE, this.config.gameCode);
        returnURL = returnURL.replace(this.DEVICE, Helper_1.Helper.getDeviceInfo());
        returnURL = returnURL.replace(this.PORT, this.config.connectionPort);
        returnURL = returnURL.replace(this.GS, this.getDynamicGameServerName());
        returnURL = this.config.protocol + returnURL;
        return returnURL;
    };
    NGWebSocketTransport.prototype.getDynamicGameServerName = function () {
        var gsName = UrlParameters_1.UrlParameters.gs;
        if (gsName == undefined) {
            gsName = this.config.rgsName;
        }
        return gsName;
    };
    NGWebSocketTransport = __decorate([
        es5_1.Singleton
    ], NGWebSocketTransport);
    return NGWebSocketTransport;
}(WebSocketTransport_1.WebSocketTransport));
exports.NGWebSocketTransport = NGWebSocketTransport;


/***/ }),
/* 652 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var MiniSignal = __webpack_require__(3);
var EventBus = __webpack_require__(653);
var es5_1 = __webpack_require__(0);
var BlankTransport_1 = __webpack_require__(365);
/**
 * Handle web socket transport.
 */
var WebSocketTransport = /** @class */ (function (_super) {
    __extends(WebSocketTransport, _super);
    function WebSocketTransport() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.onNotificationSignal = new MiniSignal();
        _this.isConnect = false;
        return _this;
    }
    WebSocketTransport.prototype.setConfig = function (config) {
        this.config = config;
    };
    WebSocketTransport.prototype.connect = function () {
        if (this.config.useWebSocket) {
            var URL = this.getConnectionURL();
            var options = {
                vertxbus_reconnect_attempts_max: 10,
                vertxbus_reconnect_delay_min: 1000,
                vertxbus_reconnect_delay_max: 5000,
                vertxbus_reconnect_exponent: 2,
                vertxbus_randomization_factor: 0.5 // Randomization factor between 0 and 1
            };
            this.eventBus = new EventBus(URL, options);
            this.eventBus.enableReconnect(true);
            this.eventBus.onopen = this.onConnectionEstablished.bind(this);
            this.eventBus.onclose = this.onDisconnect.bind(this);
        }
    };
    /**
     * Get web socket connection url
     */
    WebSocketTransport.prototype.getConnectionURL = function () {
        var returnURL = '';
        return returnURL;
    };
    /**
     * Register notification channel by address.
     * @param address
     */
    WebSocketTransport.prototype.onSetRegisterHandler = function (address) {
        var self = this;
        this.eventBus.registerHandler(address, null, function (error, message) {
            //handle data pushed by server
            self.onNotification(error, message);
        });
    };
    /**
     * Calling the function when connection established.
     */
    WebSocketTransport.prototype.onConnectionEstablished = function () {
        this.isConnect = true;
        if (this.onConnect) {
            this.onConnect();
        }
    };
    /**
     * Send daata to server
     * @param data
     */
    WebSocketTransport.prototype.send = function (data) {
        if (!this.isConnect) {
            return null;
        }
        var self = this;
        this.eventBus.send(data.address, data.messageData, function (error, message) {
            // receiving message from server
            self.onResponse(error, message);
        });
    };
    /**
     * Receive response from server
     * @param error
     * @param message
     */
    WebSocketTransport.prototype.onResponse = function (error, message) {
        if (error != null) {
            this.onNetworkError(error.failureCode, error.failureType);
        }
        else if (this.onReceive) {
            this.onReceive(message);
        }
    };
    /**
     * Receive notification from server
     * @param error
     * @param message
     */
    WebSocketTransport.prototype.onNotification = function (error, message) {
        if (error != null) {
            this.onNetworkError(error.failureCode, error.failureType);
        }
        else {
            this.onNotificationSignal.dispatch(message);
        }
    };
    /**
     * Receive error from server
     * @param errorCode
     * @param reason
     */
    WebSocketTransport.prototype.onNetworkError = function (errorCode, reason) {
        var errorData = { 'code': errorCode, 'reason': reason };
        if (this.onError) {
            this.onError(errorData);
        }
    };
    /**
     * Receive disconnect from server
     */
    WebSocketTransport.prototype.onDisconnect = function () {
        this.isConnect = false;
        if (this.eventBus.reconnectEnabled && this.eventBus.reconnectAttempts == this.eventBus.maxReconnectAttempts) {
            this.eventBus.enableReconnect(false);
            this.onNetworkError('-1', 'on websocket disconnect');
        }
    };
    /**
     * Calling for force disconnect from server
     */
    WebSocketTransport.prototype.disconnect = function () {
        this.eventBus.close();
    };
    WebSocketTransport = __decorate([
        es5_1.Singleton
    ], WebSocketTransport);
    return WebSocketTransport;
}(BlankTransport_1.BlankTransport));
exports.WebSocketTransport = WebSocketTransport;
var IWebSocketRequestData = /** @class */ (function () {
    function IWebSocketRequestData(address, data) {
        this.address = address;
        this.messageData = data;
    }
    return IWebSocketRequestData;
}());
exports.IWebSocketRequestData = IWebSocketRequestData;


/***/ }),
/* 653 */,
/* 654 */,
/* 655 */,
/* 656 */,
/* 657 */,
/* 658 */,
/* 659 */,
/* 660 */,
/* 661 */,
/* 662 */,
/* 663 */,
/* 664 */,
/* 665 */,
/* 666 */,
/* 667 */,
/* 668 */,
/* 669 */,
/* 670 */,
/* 671 */,
/* 672 */,
/* 673 */,
/* 674 */,
/* 675 */,
/* 676 */,
/* 677 */,
/* 678 */,
/* 679 */,
/* 680 */,
/* 681 */,
/* 682 */,
/* 683 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var NGWebSocketData = /** @class */ (function () {
    function NGWebSocketData(feature, eventType, body) {
        this.feature = feature;
        this.eventType = eventType;
        this.body = body;
    }
    return NGWebSocketData;
}());
exports.NGWebSocketData = NGWebSocketData;


/***/ }),
/* 684 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var TsMap_1 = __webpack_require__(2);
var es5_1 = __webpack_require__(0);
var AbstractSdkSupportList_1 = __webpack_require__(685);
var NGBNGController_1 = __webpack_require__(90);
/**
 * SDK support list for intergate with third party sdk
 */
var NGSDKSupportList = /** @class */ (function (_super) {
    __extends(NGSDKSupportList, _super);
    function NGSDKSupportList() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Formatters that receive messages from server
     */
    NGSDKSupportList.prototype.setupSDKSupportList = function () {
        var map = new TsMap_1.TsMap();
        var controller = es5_1.Container.get(NGBNGController_1.NGBNGController);
        controller.init();
        map.set(NGSDK.BNG, controller);
        return map;
    };
    NGSDKSupportList = __decorate([
        es5_1.Singleton
    ], NGSDKSupportList);
    return NGSDKSupportList;
}(AbstractSdkSupportList_1.AbstractSdkSupportList));
exports.NGSDKSupportList = NGSDKSupportList;
var NGSDK = /** @class */ (function (_super) {
    __extends(NGSDK, _super);
    function NGSDK() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NGSDK.BNG = 'BNG';
    return NGSDK;
}(AbstractSdkSupportList_1.SDK));
exports.NGSDK = NGSDK;


/***/ }),
/* 685 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var TsMap_1 = __webpack_require__(2);
var GameConfig_1 = __webpack_require__(24);
/**
 * SDK support list for intergate with third party sdk
 */
var AbstractSdkSupportList = /** @class */ (function () {
    function AbstractSdkSupportList() {
    }
    Object.defineProperty(AbstractSdkSupportList.prototype, "SDKSupportList", {
        get: function () {
            if (this._sdkSupportList == undefined) {
                this._sdkSupportList = this.setupSDKSupportList();
            }
            return this._sdkSupportList;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Formatters that receive messages from server
     */
    AbstractSdkSupportList.prototype.setupSDKSupportList = function () {
        var map = new TsMap_1.TsMap();
        return map;
    };
    var _a;
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof GameConfig_1.GameConfig !== "undefined" && GameConfig_1.GameConfig) === "function" && _a || Object)
    ], AbstractSdkSupportList.prototype, "gameConfig", void 0);
    return AbstractSdkSupportList;
}());
exports.AbstractSdkSupportList = AbstractSdkSupportList;
var SDK = /** @class */ (function () {
    function SDK() {
    }
    return SDK;
}());
exports.SDK = SDK;


/***/ }),
/* 686 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * if the game has any third party impelemt sdk needed,
 * implements the clss to meet your needs
 */
var AbstractSdkController = /** @class */ (function () {
    function AbstractSdkController() {
    }
    Object.defineProperty(AbstractSdkController.prototype, "serverConfig", {
        /**
         *  get sdk customize server config
         */
        get: function () {
            return null;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * receives upcoming state
     * @param {string} stateName
     */
    AbstractSdkController.prototype.processState = function (stateName, stateData) {
        if (typeof this[stateName] === 'function') {
            this[stateName](stateData);
        }
    };
    AbstractSdkController.prototype.init = function () {
        //
    };
    AbstractSdkController.prototype.onReceiveError = function (message) {
        //
    };
    return AbstractSdkController;
}());
exports.AbstractSdkController = AbstractSdkController;


/***/ }),
/* 687 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var MiniSignal = __webpack_require__(3);
var es5_1 = __webpack_require__(0);
var BankService = /** @class */ (function () {
    function BankService() {
        this._balance = 0;
        this._bet = 0;
        this._win = 0;
        this.currency = '';
        /**
         * Bet options should be sorted everytime
         */
        this._betOptions = [];
        this._currentBetIndex = 0;
        this.onBalanceUpdatedSignal = new MiniSignal();
        this.onBetUpdatedSignal = new MiniSignal();
        this.onWinUpdatedSignal = new MiniSignal();
    }
    Object.defineProperty(BankService.prototype, "maxBet", {
        get: function () {
            return this._betOptions[this._betOptions.length - 1];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BankService.prototype, "minBet", {
        get: function () {
            return this._betOptions[0];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BankService.prototype, "balance", {
        get: function () {
            return this._balance;
        },
        set: function (newBalance) {
            this._balance = newBalance;
            this.onBalanceUpdatedSignal.dispatch(this.balance);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BankService.prototype, "bet", {
        get: function () {
            return this._bet;
        },
        set: function (newBet) {
            var newBetIndex = this._betOptions.indexOf(newBet);
            if (newBetIndex >= 0) {
                this._bet = newBet;
                this._currentBetIndex = newBetIndex;
                this.onBetUpdatedSignal.dispatch(this.bet);
            }
            else {
                console.warn('Bank service can not set bet ' + newBet + ' because that bet value is illegal');
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BankService.prototype, "totalBet", {
        get: function () {
            return this._bet;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BankService.prototype, "betOptions", {
        get: function () {
            return this._betOptions;
        },
        set: function (newBetOptions) {
            if (newBetOptions) {
                this._betOptions = newBetOptions.slice(0);
                this._betOptions.sort(function (a, b) { return a - b; });
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BankService.prototype, "win", {
        get: function () {
            return this._win;
        },
        set: function (value) {
            this._win = value;
            this.onWinUpdatedSignal.dispatch(this.win);
        },
        enumerable: true,
        configurable: true
    });
    BankService.prototype.increaseBet = function () {
        if (this._currentBetIndex < this._betOptions.length - 1) {
            ++this._currentBetIndex;
            this.bet = this._betOptions[this._currentBetIndex];
            return true;
        }
        else {
            console.warn('You can\'t increaseBet because currentBet == maxBet');
            return false;
        }
    };
    BankService.prototype.decreaseBet = function () {
        if (this._currentBetIndex > 0) {
            --this._currentBetIndex;
            this.bet = this._betOptions[this._currentBetIndex];
            return true;
        }
        else {
            console.warn('You can\'t decreaseBet because currentBet == minBet');
            return false;
        }
    };
    BankService.prototype.minimumBet = function () {
        this._currentBetIndex = 0;
        this.bet = this._betOptions[this._currentBetIndex];
    };
    BankService.prototype.maximumBet = function () {
        this._currentBetIndex = this._betOptions.length - 1;
        this.bet = this._betOptions[this._currentBetIndex];
    };
    Object.defineProperty(BankService.prototype, "currentBetIndex", {
        get: function () {
            return this._currentBetIndex;
        },
        enumerable: true,
        configurable: true
    });
    BankService = __decorate([
        es5_1.Singleton,
        __metadata("design:paramtypes", [])
    ], BankService);
    return BankService;
}());
exports.BankService = BankService;


/***/ }),
/* 688 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var SlotBankData = /** @class */ (function () {
    function SlotBankData(balance, currency, currentBet, currentLine) {
        this.balance = balance;
        this.currency = currency;
        this.currentBet = currentBet;
        this.currentLine = currentLine;
    }
    return SlotBankData;
}());
exports.SlotBankData = SlotBankData;


/***/ }),
/* 689 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var NGHttpTransport_1 = __webpack_require__(367);
var SlotNGModel_1 = __webpack_require__(91);
/**
 * Handle Http transport to NG server for slot game
 */
var SlotNGHttpTransport = /** @class */ (function (_super) {
    __extends(SlotNGHttpTransport, _super);
    function SlotNGHttpTransport() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SlotNGHttpTransport.prototype.init = function (data) {
        this.onConnect();
    };
    SlotNGHttpTransport.prototype.getSessionId = function () {
        return this.slotNGModel.sessionId;
    };
    SlotNGHttpTransport.prototype.getPartnerCode = function () {
        return this.slotNGModel.partnerCode;
    };
    SlotNGHttpTransport.prototype.getStateTag = function () {
        return this.slotNGModel.stateTag;
    };
    SlotNGHttpTransport.prototype.setStateTag = function (stateTag) {
        this.slotNGModel.stateTag = stateTag;
    };
    SlotNGHttpTransport.prototype.getPlayerId = function () {
        return this.slotNGModel.playerId;
    };
    SlotNGHttpTransport.prototype.getHeaders = function () {
        var headers = _super.prototype.getHeaders.call(this);
        headers.set('X-Genesis-Session', this.getSessionId());
        return headers;
    };
    var _a;
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof SlotNGModel_1.SlotNGModel !== "undefined" && SlotNGModel_1.SlotNGModel) === "function" && _a || Object)
    ], SlotNGHttpTransport.prototype, "slotNGModel", void 0);
    return SlotNGHttpTransport;
}(NGHttpTransport_1.NGHttpTransport));
exports.SlotNGHttpTransport = SlotNGHttpTransport;


/***/ }),
/* 690 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var Translator_1 = __webpack_require__(25);
var ErrorCode_1 = __webpack_require__(370);
var SlotNGModel_1 = __webpack_require__(91);
var ErrorMsgFormatter = /** @class */ (function () {
    function ErrorMsgFormatter() {
        this.errorDialogData = es5_1.Container.get(ErrorCode_1.ErrorDialogData);
    }
    ErrorMsgFormatter.prototype.processIncomingMessage = function (errorResponse) {
        if (this.errorDialogData.ignoredErrorCode && this.errorDialogData.ignoredErrorCode.indexOf(errorResponse.code) !== -1) {
            return null;
        }
        if (errorResponse.state_tag) {
            this.slotNGModel.stateTag = errorResponse.state_tag;
        }
        return {
            type: this.errorDialogData.getErrorDialogType(errorResponse.code),
            code: errorResponse.code,
            msg: this.translator.t(this.errorDialogData.getErrorDialogKey(errorResponse.code)),
            stack: errorResponse.stack
        };
    };
    var _a, _b;
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof SlotNGModel_1.SlotNGModel !== "undefined" && SlotNGModel_1.SlotNGModel) === "function" && _a || Object)
    ], ErrorMsgFormatter.prototype, "slotNGModel", void 0);
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_b = typeof Translator_1.Translator !== "undefined" && Translator_1.Translator) === "function" && _b || Object)
    ], ErrorMsgFormatter.prototype, "translator", void 0);
    return ErrorMsgFormatter;
}());
exports.ErrorMsgFormatter = ErrorMsgFormatter;


/***/ }),
/* 691 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var HttpTransport_1 = __webpack_require__(30);
var SpinMsgFormatter_1 = __webpack_require__(116);
var SpinRequestMsgFormatter_1 = __webpack_require__(118);
var ForceSpinMsgFormatter_1 = __webpack_require__(217);
var UrlParameters_1 = __webpack_require__(14);
var NGSlotApi_1 = __webpack_require__(51);
/**
 * base spin api
 */
var Spin = /** @class */ (function (_super) {
    __extends(Spin, _super);
    function Spin() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Spin.prototype.init = function (transport, config) {
        _super.prototype.init.call(this, transport, config);
        this.responseFormatter = es5_1.Container.get(SpinMsgFormatter_1.SpinMsgFormatter);
        this.requestFormatter = (UrlParameters_1.UrlParameters.isRealMode()) ? es5_1.Container.get(SpinRequestMsgFormatter_1.SpinRequestMsgFormatter) : es5_1.Container.get(ForceSpinMsgFormatter_1.ForceSpinMsgFormatter);
    };
    Spin.prototype.encapsulation = function (messageType) {
        return {
            url: this.transport.url + this.apiPath.spin,
            name: messageType,
            method: HttpTransport_1.HTTP_METHODS.POST,
            headers: this.transport.getHeaders(),
            content: this.request
        };
    };
    return Spin;
}(NGSlotApi_1.NGSlotApi));
exports.Spin = Spin;


/***/ }),
/* 692 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var WinLine = /** @class */ (function () {
    function WinLine() {
    }
    return WinLine;
}());
exports.WinLine = WinLine;
var WinLineDisplayData = /** @class */ (function (_super) {
    __extends(WinLineDisplayData, _super);
    function WinLineDisplayData() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return WinLineDisplayData;
}(WinLine));
exports.WinLineDisplayData = WinLineDisplayData;
var WildMultiplier = /** @class */ (function () {
    function WildMultiplier() {
    }
    return WildMultiplier;
}());
exports.WildMultiplier = WildMultiplier;
var WinningCombination = /** @class */ (function () {
    function WinningCombination() {
    }
    return WinningCombination;
}());
exports.WinningCombination = WinningCombination;


/***/ }),
/* 693 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var SlotNGHttpFormatter_1 = __webpack_require__(20);
/**
 *  formatting jackpot feature
 */
var JackpotFeatureFormatter = /** @class */ (function (_super) {
    __extends(JackpotFeatureFormatter, _super);
    function JackpotFeatureFormatter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * formatting run feature api response
     * @param message
     * @param jackpotFeatureInfo
     */
    JackpotFeatureFormatter.prototype.processIncomingMessage = function (message, jackpotFeatureInfo) {
        if (jackpotFeatureInfo == undefined || !jackpotFeatureInfo.complete) {
            return null;
        }
        var jackpotDetail = jackpotFeatureInfo.feature_state;
        if (jackpotDetail == undefined) {
            return null;
        }
        var responseScenario = this.scenarioManager.getScenario(this.scenarioNames.stopJackpotFeature);
        responseScenario.setStateData(this.stateNames.jackpotStop, {
            symbol: jackpotDetail.symbol,
            position: jackpotDetail.position,
            prize: jackpotDetail.prize,
        });
        // TODO: check is there other features
        if (false) {
            //
        }
        else {
            responseScenario.addScenario(this.scenarioManager.getScenario(this.scenarioNames.gameIdle));
        }
        this.slotNGModel.stateTag = message.state_tag;
        return responseScenario;
    };
    /**
     * formatting feature in feature_triggered
     */
    JackpotFeatureFormatter.prototype.triggeredFeatureIncomingMessage = function (message, featureTriggeredInfo) {
        if (featureTriggeredInfo == undefined) {
            return null;
        }
        var jackpotReelFeatureDetail = featureTriggeredInfo;
        if (jackpotReelFeatureDetail == undefined || jackpotReelFeatureDetail.complete) {
            return null;
        }
        var jackpotDetail = jackpotReelFeatureDetail.feature_state;
        if (jackpotDetail == undefined) {
            return null;
        }
        var responseScenario = this.scenarioManager.getScenario(this.scenarioNames.jackpotFeatureIdle);
        // set to jackpot reel view.
        responseScenario.setStateData(this.stateNames.transitionToJackpot, {
            reelConfig: jackpotDetail.reels
        });
        return responseScenario;
    };
    /**
     * formatting feature while restore feature
     */
    JackpotFeatureFormatter.prototype.restoreFeatureIncomingMessage = function (jackpotFeatureDetail) {
        if (jackpotFeatureDetail == undefined) {
            return null;
        }
        var jackpotFeatureScenario = this.scenarioManager.getScenario(this.scenarioNames.jackpotFeatureIdle);
        // set to jackpot reel view.
        jackpotFeatureScenario.setStateData(this.stateNames.transitionToJackpot, {
            reelConfig: jackpotFeatureDetail.reels
        });
        return jackpotFeatureScenario;
    };
    return JackpotFeatureFormatter;
}(SlotNGHttpFormatter_1.SlotNGHttpFormatter));
exports.JackpotFeatureFormatter = JackpotFeatureFormatter;


/***/ }),
/* 694 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var SpinResponseFormatter_1 = __webpack_require__(50);
/**
 * formatting rotate feature
 */
var RotateFeatureFormatter = /** @class */ (function (_super) {
    __extends(RotateFeatureFormatter, _super);
    function RotateFeatureFormatter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * formatting run feature api response
     * @param message
     */
    RotateFeatureFormatter.prototype.processIncomingMessage = function (message, featureInfo) {
        console.warn('here shouldn\'t be triggered, since rotate feature don\'t need another transaction to complete feature');
        return null;
    };
    /**
     * formatting feature in feature_triggered
     */
    RotateFeatureFormatter.prototype.triggeredFeatureIncomingMessage = function (message, featureInfo) {
        return null;
    };
    RotateFeatureFormatter.prototype.getFeatureScenarioBeforeFreeSpinStop = function (freeSpinStopScenario, message, featureInfo) {
        return freeSpinStopScenario;
    };
    RotateFeatureFormatter.prototype.getFeatureScenarioAfterSpinStop = function (freeSpinStopScenario, message, featureInfo) {
        return freeSpinStopScenario;
    };
    RotateFeatureFormatter.prototype.getFeatureShowWinningData = function (winningData, spinResult, featureInfo) {
        var rotatesConfig = featureInfo.feature_state;
        winningData.balance -= rotatesConfig.total_rotate_wins;
        winningData.totalWin -= rotatesConfig.total_rotate_wins;
        return winningData;
    };
    RotateFeatureFormatter.prototype.getFeatureScenarioAfterWin = function (freeSpinStopScenario, message, featureInfo) {
        freeSpinStopScenario.addScenario(this.getRotateReelScenario(message, featureInfo));
        return freeSpinStopScenario;
    };
    RotateFeatureFormatter.prototype.getFeatureRestoreScenario = function (restoreScenario, featureInfo) {
        return restoreScenario;
    };
    RotateFeatureFormatter.prototype.getFeatureDetail = function (featureInfo) {
        return featureInfo.feature_state;
    };
    /**
     * this should be remove after rgs fix parameter in rotate feature
     * scatter_wins should be scatter_win in package
     * scatter_wins.position should be scatter_win.line_config
     * @param featureDetail
     * @param featureInfo
     */
    RotateFeatureFormatter.prototype.resetScatterWin = function (featureDetail, featureInfo) {
        for (var i = 0; i < featureInfo.feature_state.rotates.length; i++) {
            if (featureInfo.feature_state.rotates[i].scatter_wins) {
                featureDetail.rotates[i].scatter_win = featureInfo.feature_state.rotates[i].scatter_wins;
                featureDetail.rotates[i].scatter_win.line_config = featureInfo.feature_state.rotates[i].scatter_wins.position;
            }
        }
        return featureDetail;
    };
    RotateFeatureFormatter.prototype.getRotateReelScenario = function (message, freeSpinRotateInfo) {
        var responseScenario = null;
        var featureDetail = this.getFeatureDetail(freeSpinRotateInfo);
        featureDetail = this.resetScatterWin(featureDetail, freeSpinRotateInfo);
        var rotatesBalance = message.balance - featureDetail.total_rotate_wins;
        var featureTotalWin = message.feature_win - featureDetail.total_rotate_wins;
        for (var i = 0; i < featureDetail.rotates.length; i++) {
            var rotateSymbols = new Array();
            for (var j = 0; j < featureDetail.rotates[i].reels.length; j++) {
                rotateSymbols[j] = new Array();
                for (var k = 0; k < featureDetail.rotates[i].reels[j].symbols.length; k++) {
                    rotateSymbols[j].push(featureDetail.rotates[i].reels[j].symbols[k].symbol);
                }
            }
            if (featureDetail.rotates[i].win_amount > 0) {
                var rotateWinScenario = this.scenarioManager.getScenario(this.scenarioNames.freeSpinsRotateReelWithWinning);
                rotatesBalance += featureDetail.rotates[i].win_amount;
                var winData = this.getShowWinningData(rotatesBalance, featureDetail.rotates[i], message.features, message.bet_value);
                if (rotateWinScenario.hasStateName(this.stateNames.freeSpinsAllLineWin)) {
                    rotateWinScenario.setStateData(this.stateNames.freeSpinsAllLineWin, winData);
                }
                if (rotateWinScenario.hasStateName(this.stateNames.freeSpinsShowWinning)) {
                    rotateWinScenario.setStateData(this.stateNames.freeSpinsShowWinning, winData);
                }
                if (rotateWinScenario.hasStateName(this.stateNames.freeSpinsRotate)) {
                    rotateWinScenario.setStateData(this.stateNames.freeSpinsRotate, { symbols: rotateSymbols, totalWin: featureTotalWin });
                }
                if (responseScenario != null) {
                    responseScenario.addScenario(rotateWinScenario);
                }
                else {
                    responseScenario = rotateWinScenario;
                }
                featureTotalWin += featureDetail.rotates[i].win_amount;
            }
            else {
                var rotateScenario = this.scenarioManager.getScenario(this.scenarioNames.freeSpinsRotateReelNoWinning);
                if (rotateScenario.hasStateName(this.stateNames.freeSpinsRotate)) {
                    rotateScenario.setStateData(this.stateNames.freeSpinsRotate, { symbols: rotateSymbols, totalWin: featureTotalWin });
                }
                if (responseScenario != undefined) {
                    responseScenario.addScenario(rotateScenario);
                }
                else {
                    responseScenario = rotateScenario;
                }
            }
        }
        var idleSymbols = new Array();
        for (var i = 0; i < message.spin_result.reels.length; i++) {
            idleSymbols[i] = new Array();
            for (var j = 0; j < message.spin_result.reels[i].symbols.length; j++) {
                idleSymbols[i].push(message.spin_result.reels[i].symbols[j].symbol);
            }
        }
        // rotate back to first place
        var backRotateScenario = this.scenarioManager.getScenario(this.scenarioNames.freeSpinsRotateReelNoWinning);
        if (backRotateScenario.hasStateName(this.stateNames.freeSpinsRotate)) {
            backRotateScenario.setStateData(this.stateNames.freeSpinsRotate, { symbols: idleSymbols, totalWin: featureTotalWin });
        }
        responseScenario.addScenario(backRotateScenario);
        return responseScenario;
    };
    /**
     * formatting feature while restore feature
     */
    RotateFeatureFormatter.prototype.restoreFeatureIncomingMessage = function (rotateFeatureDetail) {
        var rotateFeatureFeatureScenario = null;
        console.warn('didn\'t plan for restore rotate feature, since it won\'t create another transection');
        return rotateFeatureFeatureScenario;
    };
    return RotateFeatureFormatter;
}(SpinResponseFormatter_1.SpinResponseFormatter));
exports.RotateFeatureFormatter = RotateFeatureFormatter;


/***/ }),
/* 695 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Helper_1 = __webpack_require__(5);
var SpinResponseFormatter_1 = __webpack_require__(50);
/**
 * formatting wild multiplier feature
 */
var WildMultiplierFeatureFormatter = /** @class */ (function (_super) {
    __extends(WildMultiplierFeatureFormatter, _super);
    function WildMultiplierFeatureFormatter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * formatting run feature api response
     * @param message
     */
    WildMultiplierFeatureFormatter.prototype.processIncomingMessage = function (message, featureInfo) {
        console.warn('here shouldn\'t be triggered, since wild multiplier feature don\'t need another transaction to complete feature');
        return null;
    };
    WildMultiplierFeatureFormatter.prototype.getFeatureScenarioBeforeFreeSpinStop = function (freeSpinStopScenario, message, featureInfo) {
        return freeSpinStopScenario;
    };
    WildMultiplierFeatureFormatter.prototype.getFeatureScenarioAfterSpinStop = function (freeSpinStopScenario, message, featureInfo) {
        if (freeSpinStopScenario.hasStateName(this.stateNames.freeSpinsOutroPopup)) {
            this.margeScenarioStateData(freeSpinStopScenario, this.stateNames.freeSpinsOutroPopup, { wildMultiplier: this.getWildMultiplierData(message, featureInfo) });
        }
        return freeSpinStopScenario;
    };
    WildMultiplierFeatureFormatter.prototype.getWildMultiplierData = function (message, featureInfo) {
        return (message.spin_result) ? featureInfo.feature_state : undefined;
    };
    /**
     * formatting feature in feature_triggered to get feature scenario
     */
    WildMultiplierFeatureFormatter.prototype.triggeredFeatureIncomingMessage = function (message, featureInfo) {
        if (featureInfo == undefined) {
            return null;
        }
        return this.getWildMultiplierScenario(message, featureInfo);
    };
    WildMultiplierFeatureFormatter.prototype.getWildMultiplierScenario = function (message, featureInfo) {
        var responseScenario = this.scenarioManager.getScenario(this.scenarioNames.freeSpinsWithWildMultipliers);
        responseScenario.setStateData(this.stateNames.freeSpinsWildMultipliers, { wildMultiplier: this.getWildMultiplierData(message, featureInfo) });
        return responseScenario;
    };
    WildMultiplierFeatureFormatter.prototype.getFeatureShowWinningData = function (winningData, spinResult, featureInfo) {
        var _this = this;
        var wildConfig = featureInfo.feature_state;
        var winTable = this.createWinTable(spinResult);
        var winLines = new Array();
        if (spinResult.reel_wins != null && spinResult.reel_wins.length > 0) {
            spinResult.reel_wins.forEach(function (winElement) {
                winLines.push(_this.getWinline(winElement, winTable, wildConfig));
            });
        }
        winningData.winLines = Helper_1.Helper.mergeTwoObjects(winningData.winLines, winLines);
        return winningData;
    };
    WildMultiplierFeatureFormatter.prototype.getFeatureScenarioAfterWin = function (freeSpinStopScenario, message, featureInfo) {
        return freeSpinStopScenario;
    };
    /**
     * formatting feature while restore feature
     */
    WildMultiplierFeatureFormatter.prototype.restoreFeatureIncomingMessage = function (wildMultiplierFeatureDetail) {
        var wildMultiplierFeatureScenario = null;
        console.warn('didn\'t plan for restore wild multiplie feature, since it won\'t create another transection');
        return wildMultiplierFeatureScenario;
    };
    WildMultiplierFeatureFormatter.prototype.getFeatureRestoreScenario = function (restoreScenario, featureInfo) {
        return restoreScenario;
    };
    return WildMultiplierFeatureFormatter;
}(SpinResponseFormatter_1.SpinResponseFormatter));
exports.WildMultiplierFeatureFormatter = WildMultiplierFeatureFormatter;


/***/ }),
/* 696 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var SpinResponseFormatter_1 = __webpack_require__(50);
/**
 * formatting wild multiplier feature
 */
var ReplacingSymbolsFeatureFormatter = /** @class */ (function (_super) {
    __extends(ReplacingSymbolsFeatureFormatter, _super);
    function ReplacingSymbolsFeatureFormatter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * formatting run feature api response
     * @param message
     */
    ReplacingSymbolsFeatureFormatter.prototype.processIncomingMessage = function (message, featureInfo) {
        console.warn('here shouldn\'t be triggered, since replacing symbols feature don\'t need another transaction to complete feature');
        return null;
    };
    ReplacingSymbolsFeatureFormatter.prototype.getFeatureScenarioBeforeFreeSpinStop = function (freeSpinStopScenario, message, featureInfo) {
        return freeSpinStopScenario;
    };
    ReplacingSymbolsFeatureFormatter.prototype.getFeatureScenarioAfterSpinStop = function (freeSpinStopScenario, message, featureInfo) {
        var reelStopSymbols = { reelIndexes: this.getReelStopSymbols(message, featureInfo) };
        if (freeSpinStopScenario.hasStateName(this.stateNames.freeSpinsStop)) {
            this.margeScenarioStateData(freeSpinStopScenario, this.stateNames.freeSpinsStop, reelStopSymbols);
        }
        if (freeSpinStopScenario.hasStateName(this.stateNames.spinStop)) {
            this.margeScenarioStateData(freeSpinStopScenario, this.stateNames.spinStop, reelStopSymbols);
        }
        return freeSpinStopScenario;
    };
    ReplacingSymbolsFeatureFormatter.prototype.getReelStopSymbols = function (message, featureInfo) {
        var result = this.getReelSymbols(message.spin_result.reels);
        if (featureInfo != undefined) {
            var replacingFeatureDetail = this.getReplacingSymbolsDetail(featureInfo);
            result = this.getReelSymbols(replacingFeatureDetail.original_reels);
        }
        return result;
    };
    /**
     * formatting feature in feature_triggered
     */
    ReplacingSymbolsFeatureFormatter.prototype.triggeredFeatureIncomingMessage = function (message, featureInfo) {
        if (featureInfo == undefined) {
            return null;
        }
        return this.getReplacingSymbolsScenario(message, featureInfo);
    };
    ReplacingSymbolsFeatureFormatter.prototype.getReplacingSymbolsScenario = function (message, featureInfo) {
        var responseScenario = this.scenarioManager.getScenario(this.scenarioNames.replacingSymbols);
        responseScenario.setStateData(this.stateNames.replacingSymbols, featureInfo.feature_state);
        var count = 0;
        var replacingData = this.getReplacingSymbolsDetail(featureInfo);
        for (var i = 0; i < replacingData.swapped_symbols.length; i++) {
            for (var j = 0; j < replacingData.swapped_symbols[i].symbols.length; j++) {
                var name = replacingData.swapped_symbols[i].symbols[j].symbol;
                if (name != '*') {
                    count++;
                }
            }
        }
        responseScenario.addStateData(this.stateNames.replacingSymbols, { count: count });
        return responseScenario;
    };
    ReplacingSymbolsFeatureFormatter.prototype.getReplacingSymbolsDetail = function (featureInfo) {
        return featureInfo.feature_state;
    };
    ReplacingSymbolsFeatureFormatter.prototype.getFeatureShowWinningData = function (winningData, spinResult, featureInfo) {
        return winningData;
    };
    ReplacingSymbolsFeatureFormatter.prototype.getFeatureScenarioAfterWin = function (freeSpinStopScenario, message, featureInfo) {
        return freeSpinStopScenario;
    };
    /**
     * formatting feature while restore feature
     */
    ReplacingSymbolsFeatureFormatter.prototype.restoreFeatureIncomingMessage = function (replacingSymbolsDetail) {
        var replacingSymbolFeatureScenario = null;
        console.warn('didn\'t plan for restore replacing symbol feature, since it won\'t create another transection');
        return replacingSymbolFeatureScenario;
    };
    ReplacingSymbolsFeatureFormatter.prototype.getFeatureRestoreScenario = function (restoreScenario, featureInfo) {
        return restoreScenario;
    };
    return ReplacingSymbolsFeatureFormatter;
}(SpinResponseFormatter_1.SpinResponseFormatter));
exports.ReplacingSymbolsFeatureFormatter = ReplacingSymbolsFeatureFormatter;


/***/ }),
/* 697 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var SlotNGHttpFormatter_1 = __webpack_require__(20);
var SlotNGFeatureDataDefinitions_1 = __webpack_require__(23);
/**
 * formatting retriggered feature
 */
var FreeSpinRetriggeredFeatureFormatter = /** @class */ (function (_super) {
    __extends(FreeSpinRetriggeredFeatureFormatter, _super);
    function FreeSpinRetriggeredFeatureFormatter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * formatting run feature api response
     * @param message
     */
    FreeSpinRetriggeredFeatureFormatter.prototype.processIncomingMessage = function (message, featureInfo) {
        console.warn('here shouldn\'t be triggered, since free spin retriggered feature don\'t need another transaction to complete feature');
        return null;
    };
    /**
     * formatting feature in feature_triggered
     */
    FreeSpinRetriggeredFeatureFormatter.prototype.triggeredFeatureIncomingMessage = function (message, featureTriggeredInfo) {
        if (featureTriggeredInfo == undefined) {
            return null;
        }
        return this.getFreeSpinsRetriggeredScenario(message);
    };
    FreeSpinRetriggeredFeatureFormatter.prototype.getFeatureScenarioBeforeFreeSpinStop = function (freeSpinStopScenario, message, featureInfo) {
        return freeSpinStopScenario;
    };
    FreeSpinRetriggeredFeatureFormatter.prototype.getFeatureScenarioAfterSpinStop = function (freeSpinStopScenario, message, featureInfo) {
        return freeSpinStopScenario;
    };
    FreeSpinRetriggeredFeatureFormatter.prototype.getFeatureShowWinningData = function (winningData, spinResult, featureInfo) {
        return winningData;
    };
    FreeSpinRetriggeredFeatureFormatter.prototype.getFeatureScenarioAfterWin = function (freeSpinStopScenario, message, featureInfo) {
        return freeSpinStopScenario;
    };
    /**
     * get free spins retriggered scenario
     * @param message
     */
    FreeSpinRetriggeredFeatureFormatter.prototype.getFreeSpinsRetriggeredScenario = function (message) {
        var responseScenario = this.scenarioManager.getScenario(this.scenarioNames.freeSpinsRetriggered);
        var featureInfo = this.getFeatureInfo(message);
        var freeSpinFeature = this.getFeatureDetail(featureInfo);
        var currentFreeSpinCount = freeSpinFeature.total_free_spin_count - freeSpinFeature.free_spins_left + 1;
        var totalFreeSpinCount = freeSpinFeature.total_free_spin_count;
        if (responseScenario.hasStateName(this.stateNames.showRetrigger)) {
            responseScenario.setStateData(this.stateNames.showRetrigger, {
                currentFreeSpinCount: currentFreeSpinCount,
                totalFreeSpinCount: totalFreeSpinCount
            });
        }
        return responseScenario;
    };
    /**
     * get feature info from message
     * @param message
     */
    FreeSpinRetriggeredFeatureFormatter.prototype.getFeatureInfo = function (message) {
        return message.features.find(function (e) { return e.type === SlotNGFeatureDataDefinitions_1.FeatureTypes.FREE_SPIN; });
    };
    FreeSpinRetriggeredFeatureFormatter.prototype.getFeatureDetail = function (featureInfo) {
        return featureInfo.feature_state;
    };
    /**
     * formatting feature while restore feature
     */
    FreeSpinRetriggeredFeatureFormatter.prototype.restoreFeatureIncomingMessage = function (retriggeredFeatureDetail) {
        var retriggeredFeatureScenario = null;
        console.warn('didn\'t plan for restore free spin retriggered feature, since it won\'t create another transection');
        return retriggeredFeatureScenario;
    };
    FreeSpinRetriggeredFeatureFormatter.prototype.getFeatureRestoreScenario = function (restoreScenario, featureInfo) {
        return restoreScenario;
    };
    return FreeSpinRetriggeredFeatureFormatter;
}(SlotNGHttpFormatter_1.SlotNGHttpFormatter));
exports.FreeSpinRetriggeredFeatureFormatter = FreeSpinRetriggeredFeatureFormatter;


/***/ }),
/* 698 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var SpinResponseFormatter_1 = __webpack_require__(50);
var SlotNGFeatureDataDefinitions_1 = __webpack_require__(23);
var MultiplierFeatureFormatter = /** @class */ (function (_super) {
    __extends(MultiplierFeatureFormatter, _super);
    function MultiplierFeatureFormatter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MultiplierFeatureFormatter.prototype.processIncomingMessage = function (message, featureInfo) {
        console.warn('here shouldn\'t be triggered, since replacing symbols feature don\'t need another transaction to complete feature');
        return null;
    };
    MultiplierFeatureFormatter.prototype.getFeatureScenarioBeforeFreeSpinStop = function (freeSpinStopScenario, message, featureInfo) {
        return freeSpinStopScenario;
    };
    MultiplierFeatureFormatter.prototype.getFeatureScenarioAfterSpinStop = function (responseScenario, message, featureInfo) {
        if (!responseScenario.hasStateName(this.scenarioNames.multiplierApplied) && this.getFeatureData(message.features).applied_multiplier != 0) {
            responseScenario.addScenario(this.scenarioManager.getScenario(this.scenarioNames.multiplierApplied));
            responseScenario.setStateData(this.stateNames.multiplierApplied, this.getFeatureData(message.features));
        }
        return responseScenario;
    };
    MultiplierFeatureFormatter.prototype.getFeatureShowWinningData = function (winningData, spinResult, featureInfo) {
        return winningData;
    };
    MultiplierFeatureFormatter.prototype.getFeatureScenarioAfterWin = function (freeSpinStopScenario, message, featureInfo) {
        return freeSpinStopScenario;
    };
    MultiplierFeatureFormatter.prototype.getFeatureDetail = function (featureInfo) {
        return featureInfo.feature_state;
    };
    MultiplierFeatureFormatter.prototype.getFeatureData = function (message) {
        var multiplier = 0;
        var appliedMultiplier = 0;
        var addedMultiplier = 0;
        if (message) {
            message.forEach(function (element) {
                if (element.type === SlotNGFeatureDataDefinitions_1.FeatureTypes.MULTIPLIER) {
                    multiplier = element.feature_state.multiplier;
                    appliedMultiplier = element.feature_state.applied_multiplier;
                    addedMultiplier = element.feature_state.added_multiplier;
                }
            });
        }
        return {
            multiplier: multiplier,
            applied_multiplier: appliedMultiplier,
            added_multiplier: addedMultiplier
        };
    };
    MultiplierFeatureFormatter.prototype.triggeredFeatureIncomingMessage = function (message, featureInfo) {
        var responseScenrio = this.scenarioManager.getScenario(this.scenarioNames.multiplierAdded);
        responseScenrio.setStateData(this.stateNames.multiplierAdded, this.getFeatureDetail(featureInfo));
        return responseScenrio;
    };
    MultiplierFeatureFormatter.prototype.getFeatureRestoreScenario = function (restoreScenario, featureInfo) {
        return restoreScenario;
    };
    MultiplierFeatureFormatter.prototype.restoreFeatureIncomingMessage = function (featureDetail) {
        // TODO: not finish yet. we need to RGS's data.
        var responseScenrio = this.scenarioManager.getScenario(this.scenarioNames.multiplierAdded);
        responseScenrio.setStateData(this.stateNames.multiplierAdded, {
            multiplier: featureDetail.multiplier,
            applied_multiplier: featureDetail.applied_multiplier,
            added_multiplier: featureDetail.added_multiplier
        });
        return responseScenrio;
    };
    return MultiplierFeatureFormatter;
}(SpinResponseFormatter_1.SpinResponseFormatter));
exports.MultiplierFeatureFormatter = MultiplierFeatureFormatter;


/***/ }),
/* 699 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var SpinResponseFormatter_1 = __webpack_require__(50);
var SymbolCrawlFeatureFormatter = /** @class */ (function (_super) {
    __extends(SymbolCrawlFeatureFormatter, _super);
    function SymbolCrawlFeatureFormatter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SymbolCrawlFeatureFormatter.prototype.getFeatureScenarioBeforeFreeSpinStop = function (freeSpinStopScenario, message, featureInfo) {
        return freeSpinStopScenario;
    };
    SymbolCrawlFeatureFormatter.prototype.getFeatureScenarioAfterSpinStop = function (freeSpinStopScenario, message, featureInfo) {
        var reelStopSymbols = { reelIndexes: this.getReelStopSymbols(message, featureInfo) };
        if (freeSpinStopScenario.hasStateName(this.stateNames.freeSpinsStop)) {
            this.margeScenarioStateData(freeSpinStopScenario, this.stateNames.freeSpinsStop, reelStopSymbols);
        }
        if (freeSpinStopScenario.hasStateName(this.stateNames.spinStop)) {
            this.margeScenarioStateData(freeSpinStopScenario, this.stateNames.spinStop, reelStopSymbols);
        }
        return freeSpinStopScenario;
    };
    SymbolCrawlFeatureFormatter.prototype.getReelStopSymbols = function (message, featureInfo) {
        var result = this.getReelSymbols(message.spin_result.reels);
        if (featureInfo != undefined) {
            var symbolCrawlFeatureDetail = this.getSymbolCrawlFeatureDetail(featureInfo.feature_state);
            result = this.getReelSymbols(symbolCrawlFeatureDetail.original_reels);
        }
        return result;
    };
    SymbolCrawlFeatureFormatter.prototype.getFeatureShowWinningData = function (winningData, spinResult, featureInfo) {
        return winningData;
    };
    SymbolCrawlFeatureFormatter.prototype.getFeatureScenarioAfterWin = function (freeSpinStopScenario, message, featureInfo) {
        return freeSpinStopScenario;
    };
    SymbolCrawlFeatureFormatter.prototype.triggeredFeatureIncomingMessage = function (message, featureInfo) {
        var responseScenario = this.scenarioManager.getScenario(this.scenarioNames.symbolCrawl);
        responseScenario.addStateData(this.stateNames.symbolCrawlTriggered, this.getSymbolCrawlFeatureDetail(featureInfo.feature_state));
        return responseScenario;
    };
    SymbolCrawlFeatureFormatter.prototype.getFeatureRestoreScenario = function (restoreScenario, featureInfo) {
        return restoreScenario;
    };
    SymbolCrawlFeatureFormatter.prototype.getSymbolCrawlScenario = function (responseScenario, message, featureInfo) {
        return null;
    };
    SymbolCrawlFeatureFormatter.prototype.getSymbolCrawlFeatureDetail = function (data) {
        var _this = this;
        var addPosition = [];
        data.added_position.forEach(function (element) {
            addPosition.push(_this.convertArrayToSymbolPostion(element));
        });
        var crawlPosition = [];
        data.crawl_position.forEach(function (element) {
            crawlPosition.push({
                position: _this.convertArrayToSymbolPostion(element.position),
                next_position: _this.convertArrayToSymbolPostion(element.next_position)
            });
        });
        var featureDetail = {
            symbol: data.symbol,
            added_position: addPosition,
            crawl_position: crawlPosition,
            original_reels: data.original_reels
        };
        return featureDetail;
    };
    SymbolCrawlFeatureFormatter.prototype.convertArrayToSymbolPostion = function (data) {
        return {
            reelIndex: data[0], symbolIndex: data[1]
        };
    };
    SymbolCrawlFeatureFormatter.prototype.restoreFeatureIncomingMessage = function (featureDetail) {
        var responseScenario = this.scenarioManager.getScenario(this.scenarioNames.symbolCrawl);
        responseScenario.addStateData(this.stateNames.symbolCrawlTriggered, this.getSymbolCrawlFeatureDetail(featureDetail));
        return responseScenario;
    };
    return SymbolCrawlFeatureFormatter;
}(SpinResponseFormatter_1.SpinResponseFormatter));
exports.SymbolCrawlFeatureFormatter = SymbolCrawlFeatureFormatter;


/***/ }),
/* 700 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Helper_1 = __webpack_require__(5);
var SlotNGHttpFormatter_1 = __webpack_require__(20);
var UrlParameters_1 = __webpack_require__(14);
/**
 * Format login request
 */
var GameInitRequestMsgFormatter = /** @class */ (function (_super) {
    __extends(GameInitRequestMsgFormatter, _super);
    function GameInitRequestMsgFormatter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Builds setting mode message
     * @param data - ignored
     * @returns {any} message object
     */
    GameInitRequestMsgFormatter.prototype.codeMessage = function (data) {
        var payload = {
            partner_token: UrlParameters_1.UrlParameters.partnerToken,
            player_token: UrlParameters_1.UrlParameters.sessionToken,
            game_code: this.config.gameCode,
            device: Helper_1.Helper.getDeviceInfo().toLocaleUpperCase()
        };
        if (!UrlParameters_1.UrlParameters.isRealMode()) {
            if (UrlParameters_1.UrlParameters.engagements) {
                payload.partner_token = this.config.demoPartnerToken;
            }
            else {
                payload.partner_token = this.config.playPartnerToken;
            }
            payload.engagements = UrlParameters_1.UrlParameters.engagements;
        }
        return payload;
    };
    return GameInitRequestMsgFormatter;
}(SlotNGHttpFormatter_1.SlotNGHttpFormatter));
exports.GameInitRequestMsgFormatter = GameInitRequestMsgFormatter;


/***/ }),
/* 701 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var AbstractApi_1 = __webpack_require__(150);
var HttpTransport_1 = __webpack_require__(30);
var SpinMsgFormatter_1 = __webpack_require__(116);
var ForceSpinMsgFormatter_1 = __webpack_require__(217);
var ForceSpin = /** @class */ (function (_super) {
    __extends(ForceSpin, _super);
    function ForceSpin() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ForceSpin.prototype.init = function (transport, config) {
        this.responseFormatter = es5_1.Container.get(SpinMsgFormatter_1.SpinMsgFormatter);
        this.requestFormatter = es5_1.Container.get(ForceSpinMsgFormatter_1.ForceSpinMsgFormatter);
        this.config = config;
        this.transport = transport;
    };
    ForceSpin.prototype.encapsulation = function (messageType) {
        return {
            url: this.transport.url + this.config.devPath.spin,
            name: messageType,
            method: HttpTransport_1.HTTP_METHODS.POST,
            headers: this.transport.getHeaders(),
            content: this.request
        };
    };
    return ForceSpin;
}(AbstractApi_1.AbstractApi));
exports.ForceSpin = ForceSpin;


/***/ }),
/* 702 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var NGSlotApi_1 = __webpack_require__(51);
var UrlParameters_1 = __webpack_require__(14);
var HttpTransport_1 = __webpack_require__(30);
var HistoryDetailRequestMsgFormatter_1 = __webpack_require__(373);
/**
 * history detail api
 */
var HistoryDetail = /** @class */ (function (_super) {
    __extends(HistoryDetail, _super);
    function HistoryDetail() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    HistoryDetail.prototype.init = function (transport, config) {
        _super.prototype.init.call(this, transport, config);
        this.responseFormatter = null;
        this.requestFormatter = es5_1.Container.get(HistoryDetailRequestMsgFormatter_1.HistoryDetailRequestMsgFormatter);
    };
    HistoryDetail.prototype.responseFormat = function (data) {
        this.response = data.payload;
    };
    HistoryDetail.prototype.encapsulation = function (messageType) {
        var url = this.getURL(this.request);
        return {
            url: url,
            name: messageType,
            method: HttpTransport_1.HTTP_METHODS.GET,
            headers: this.transport.getHeaders()
        };
    };
    HistoryDetail.prototype.getURL = function (urlParam) {
        var url = this.config.protocol + this.config.historyApiDomain + this.config.path.historyDetail;
        url = url.replace('{domain}', this.transport.getDynamicDomainName());
        url = url.replace('{partner_token}', UrlParameters_1.UrlParameters.partnerToken);
        url = url.replace('{round_id}', urlParam.roundID);
        return url;
    };
    return HistoryDetail;
}(NGSlotApi_1.NGSlotApi));
exports.HistoryDetail = HistoryDetail;


/***/ }),
/* 703 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var NGSlotApi_1 = __webpack_require__(51);
var UrlParameters_1 = __webpack_require__(14);
var SlotNGModel_1 = __webpack_require__(91);
var HttpTransport_1 = __webpack_require__(30);
var HistoryRequestMsgFormatter_1 = __webpack_require__(374);
/**
 * history summary api
 */
var HistorySummary = /** @class */ (function (_super) {
    __extends(HistorySummary, _super);
    function HistorySummary() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    HistorySummary.prototype.init = function (transport, config) {
        _super.prototype.init.call(this, transport, config);
        this.responseFormatter = null;
        this.requestFormatter = es5_1.Container.get(HistoryRequestMsgFormatter_1.HistoryRequestMsgFormatter);
    };
    HistorySummary.prototype.responseFormat = function (data) {
        this.response = data.payload.data;
    };
    HistorySummary.prototype.encapsulation = function (messageType) {
        var url = this.getURL(this.request);
        var content = this.request;
        content.game_code = this.config.gameCode;
        return {
            url: url,
            name: messageType,
            method: HttpTransport_1.HTTP_METHODS.GET,
            headers: this.transport.getHeaders(),
            urlParameters: content
        };
    };
    HistorySummary.prototype.getURL = function (urlParam) {
        var url = this.config.protocol + this.config.historyApiDomain + this.config.path.historySummaries;
        url = url.replace('{domain}', this.transport.getDynamicDomainName());
        url = url.replace('{partner_token}', UrlParameters_1.UrlParameters.partnerToken);
        url = url.replace('{partner_code}', this.slotNGModel.partnerCode);
        url = url.replace('{player_id}', this.slotNGModel.playerId);
        return url;
    };
    var _a;
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof SlotNGModel_1.SlotNGModel !== "undefined" && SlotNGModel_1.SlotNGModel) === "function" && _a || Object)
    ], HistorySummary.prototype, "slotNGModel", void 0);
    return HistorySummary;
}(NGSlotApi_1.NGSlotApi));
exports.HistorySummary = HistorySummary;


/***/ }),
/* 704 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var NGSlotApi_1 = __webpack_require__(51);
var HttpTransport_1 = __webpack_require__(30);
var RunFeaturesMsgFormatter_1 = __webpack_require__(151);
var PickFeatureRequestMsgFormatter_1 = __webpack_require__(705);
/**
 * run pick feature api
 */
var RunPickFeature = /** @class */ (function (_super) {
    __extends(RunPickFeature, _super);
    function RunPickFeature() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    RunPickFeature.prototype.init = function (transport, config) {
        _super.prototype.init.call(this, transport, config);
        this.responseFormatter = es5_1.Container.get(RunFeaturesMsgFormatter_1.RunFeaturesMsgFormatter);
        this.requestFormatter = es5_1.Container.get(PickFeatureRequestMsgFormatter_1.PickFeatureRequestMsgFormatter);
    };
    RunPickFeature.prototype.encapsulation = function (messageType) {
        return {
            url: this.transport.url + this.apiPath.spin,
            name: messageType,
            method: HttpTransport_1.HTTP_METHODS.POST,
            headers: this.transport.getHeaders(),
            content: this.request
        };
    };
    return RunPickFeature;
}(NGSlotApi_1.NGSlotApi));
exports.RunPickFeature = RunPickFeature;


/***/ }),
/* 705 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var SlotNGHttpFormatter_1 = __webpack_require__(20);
var SlotNGFeatureDataDefinitions_1 = __webpack_require__(23);
/**
 * Format pick feature request
 */
var PickFeatureRequestMsgFormatter = /** @class */ (function (_super) {
    __extends(PickFeatureRequestMsgFormatter, _super);
    function PickFeatureRequestMsgFormatter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * sends button press emulation package
     * @param data
     */
    PickFeatureRequestMsgFormatter.prototype.codeMessage = function (data) {
        return {
            player_id: this.slotNGModel.playerId,
            session_token: this.slotNGModel.sessionId,
            partner_code: this.slotNGModel.partnerCode,
            game_code: this.config.gameCode,
            action: SlotNGFeatureDataDefinitions_1.FeatureTypes.PICK,
            state_tag: this.slotNGModel.stateTag,
            choice_id: this.getPickData(data)
        };
    };
    PickFeatureRequestMsgFormatter.prototype.getPickData = function (data) {
        return data.pick;
    };
    return PickFeatureRequestMsgFormatter;
}(SlotNGHttpFormatter_1.SlotNGHttpFormatter));
exports.PickFeatureRequestMsgFormatter = PickFeatureRequestMsgFormatter;


/***/ }),
/* 706 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var GlobalDispatcher_1 = __webpack_require__(7);
var SlotEvent_1 = __webpack_require__(32);
var SlotStates_1 = __webpack_require__(31);
/**
 * RNG tool object
 * use below command to use it
 * rngTool.setRngSpinData([
                [
                    [ "T", "PIC1", "A" ],
                    [ "J", "PIC1", "J" ],
                    [ "Q", "PIC1", "Q" ],
                    [ "T", "PIC1", "K" ],
                    [ "K", "PIC1", "T" ]
                ],
                [
                    [ "T", "PIC2", "A" ],
                    [ "J", "PIC2", "J" ],
                    [ "Q", "PIC2", "Q" ],
                    [ "T", "PIC2", "K" ],
                    [ "K", "PIC2", "T" ]
                ]
            ])
 */
var SlotRngToolPortal = /** @class */ (function () {
    function SlotRngToolPortal() {
    }
    SlotRngToolPortal.prototype.setupRngTool = function () {
        global['rngTool'] = this;
        window['rngTool'] = this;
    };
    SlotRngToolPortal.prototype.setRngSpinData = function (data) {
        var rngToolSpinResultQueue = data;
        var eventData = [];
        rngToolSpinResultQueue.forEach(function (result) {
            eventData.push({ symbols: result });
        });
        GlobalDispatcher_1.GlobalDispatcher.dispatchIntoExpectedStates(SlotEvent_1.SlotEvent.UPDATE_RNG_TOOL_SPIN_DATA, [this.stateNames.baseGameIdle, this.stateNames.showWinning, this.stateNames.showWinningLoop], eventData);
    };
    var _a;
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof SlotStates_1.SlotStates !== "undefined" && SlotStates_1.SlotStates) === "function" && _a || Object)
    ], SlotRngToolPortal.prototype, "stateNames", void 0);
    SlotRngToolPortal = __decorate([
        es5_1.Singleton
    ], SlotRngToolPortal);
    return SlotRngToolPortal;
}());
exports.SlotRngToolPortal = SlotRngToolPortal;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(11)))

/***/ }),
/* 707 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var NGSlotApi_1 = __webpack_require__(51);
var HttpTransport_1 = __webpack_require__(30);
var RunFeaturesMsgFormatter_1 = __webpack_require__(151);
var JackpotFeatureRequestMsgFormatter_1 = __webpack_require__(708);
/**
 * run jackpot feature api
 */
var RunJackpotFeature = /** @class */ (function (_super) {
    __extends(RunJackpotFeature, _super);
    function RunJackpotFeature() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    RunJackpotFeature.prototype.init = function (transport, config) {
        _super.prototype.init.call(this, transport, config);
        this.responseFormatter = es5_1.Container.get(RunFeaturesMsgFormatter_1.RunFeaturesMsgFormatter);
        this.requestFormatter = es5_1.Container.get(JackpotFeatureRequestMsgFormatter_1.JackpotFeatureRequestMsgFormatter);
    };
    RunJackpotFeature.prototype.encapsulation = function (messageType) {
        return {
            url: this.transport.url + this.apiPath.spin,
            name: messageType,
            method: HttpTransport_1.HTTP_METHODS.POST,
            headers: this.transport.getHeaders(),
            content: this.request
        };
    };
    return RunJackpotFeature;
}(NGSlotApi_1.NGSlotApi));
exports.RunJackpotFeature = RunJackpotFeature;


/***/ }),
/* 708 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var SlotNGHttpFormatter_1 = __webpack_require__(20);
var SlotNGFeatureDataDefinitions_1 = __webpack_require__(23);
/**
 * Format jackpot request
 */
var JackpotFeatureRequestMsgFormatter = /** @class */ (function (_super) {
    __extends(JackpotFeatureRequestMsgFormatter, _super);
    function JackpotFeatureRequestMsgFormatter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * sends button press emulation package
     * @param data
     */
    JackpotFeatureRequestMsgFormatter.prototype.codeMessage = function (data) {
        return {
            player_id: this.slotNGModel.playerId,
            session_token: this.slotNGModel.sessionId,
            partner_code: this.slotNGModel.partnerCode,
            game_code: this.config.gameCode,
            action: SlotNGFeatureDataDefinitions_1.FeatureTypes.JACKPOT,
            state_tag: this.slotNGModel.stateTag
        };
    };
    return JackpotFeatureRequestMsgFormatter;
}(SlotNGHttpFormatter_1.SlotNGHttpFormatter));
exports.JackpotFeatureRequestMsgFormatter = JackpotFeatureRequestMsgFormatter;


/***/ }),
/* 709 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var NGSlotApi_1 = __webpack_require__(51);
var HttpTransport_1 = __webpack_require__(30);
var RunFeaturesMsgFormatter_1 = __webpack_require__(151);
var FreeSpinFeatureRequestMsgFormatter_1 = __webpack_require__(375);
/**
 * run free spin api
 */
var RunFreeSpinFeature = /** @class */ (function (_super) {
    __extends(RunFreeSpinFeature, _super);
    function RunFreeSpinFeature() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    RunFreeSpinFeature.prototype.init = function (transport, config) {
        _super.prototype.init.call(this, transport, config);
        this.responseFormatter = es5_1.Container.get(RunFeaturesMsgFormatter_1.RunFeaturesMsgFormatter);
        this.requestFormatter = es5_1.Container.get(FreeSpinFeatureRequestMsgFormatter_1.FreeSpinFeatureRequestMsgFormatter);
    };
    RunFreeSpinFeature.prototype.encapsulation = function (messageType) {
        return {
            url: this.transport.url + this.apiPath.spin,
            name: messageType,
            method: HttpTransport_1.HTTP_METHODS.POST,
            headers: this.transport.getHeaders(),
            content: this.request
        };
    };
    return RunFreeSpinFeature;
}(NGSlotApi_1.NGSlotApi));
exports.RunFreeSpinFeature = RunFreeSpinFeature;


/***/ }),
/* 710 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var SlotNGModel_1 = __webpack_require__(91);
var NGDataHookLogFormatter_1 = __webpack_require__(711);
/**
 * formatting data hook log data
 */
var SlotNGDataHookLogFormatter = /** @class */ (function (_super) {
    __extends(SlotNGDataHookLogFormatter, _super);
    function SlotNGDataHookLogFormatter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SlotNGDataHookLogFormatter.prototype.getPartnerCode = function () {
        return this.slotNGModel.partnerCode;
    };
    var _a;
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof SlotNGModel_1.SlotNGModel !== "undefined" && SlotNGModel_1.SlotNGModel) === "function" && _a || Object)
    ], SlotNGDataHookLogFormatter.prototype, "slotNGModel", void 0);
    return SlotNGDataHookLogFormatter;
}(NGDataHookLogFormatter_1.NGDataHookLogFormatter));
exports.SlotNGDataHookLogFormatter = SlotNGDataHookLogFormatter;


/***/ }),
/* 711 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var NGWebSocketFormatter_1 = __webpack_require__(712);
/**
 * formatting data hook log data
 */
var NGDataHookLogFormatter = /** @class */ (function (_super) {
    __extends(NGDataHookLogFormatter, _super);
    function NGDataHookLogFormatter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * sends button press emulation package
     * @param data
     */
    NGDataHookLogFormatter.prototype.codeMessage = function (data) {
        return {
            address: this.config.requestAddressFormat.replace('{feature}', 'data_hook'),
            messageData: this.getData(data)
        };
    };
    NGDataHookLogFormatter.prototype.getData = function (data) {
        return __assign({}, data, { partnerCode: this.getPartnerCode(), gameCode: this.config.gameCode });
    };
    NGDataHookLogFormatter.prototype.getPartnerCode = function () {
        return '';
    };
    return NGDataHookLogFormatter;
}(NGWebSocketFormatter_1.NGWebSocketFormatter));
exports.NGDataHookLogFormatter = NGDataHookLogFormatter;


/***/ }),
/* 712 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var NGServerConfig_1 = __webpack_require__(146);
var WebSocketFormatter_1 = __webpack_require__(366);
/**
 * Encapsulates code/encode rules for messages
 */
var NGWebSocketFormatter = /** @class */ (function (_super) {
    __extends(NGWebSocketFormatter, _super);
    function NGWebSocketFormatter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(NGWebSocketFormatter.prototype, "config", {
        get: function () {
            if (this._config == undefined) {
                this._config = this.gameConfig.getConfig(NGServerConfig_1.NGServerConfig);
            }
            return this._config;
        },
        enumerable: true,
        configurable: true
    });
    return NGWebSocketFormatter;
}(WebSocketFormatter_1.WebSocketFormatter));
exports.NGWebSocketFormatter = NGWebSocketFormatter;


/***/ }),
/* 713 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var HttpTransport_1 = __webpack_require__(30);
var NGSlotApi_1 = __webpack_require__(51);
var FreeRespinReelsRequestMsgFormatter_1 = __webpack_require__(714);
var FreeRespinReelsFormatter_1 = __webpack_require__(117);
var FreeRespin = /** @class */ (function (_super) {
    __extends(FreeRespin, _super);
    function FreeRespin() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FreeRespin.prototype.init = function (transport, config) {
        _super.prototype.init.call(this, transport, config);
        this.responseFormatter = es5_1.Container.get(FreeRespinReelsFormatter_1.FreeRespinReelsFormatter);
        this.requestFormatter = es5_1.Container.get(FreeRespinReelsRequestMsgFormatter_1.FreeRespinReelsRequestMsgFormatter);
    };
    FreeRespin.prototype.encapsulation = function (messageType) {
        return {
            url: this.transport.url + this.apiPath.spin,
            name: messageType,
            method: HttpTransport_1.HTTP_METHODS.POST,
            headers: this.transport.getHeaders(),
            content: this.request
        };
    };
    return FreeRespin;
}(NGSlotApi_1.NGSlotApi));
exports.FreeRespin = FreeRespin;


/***/ }),
/* 714 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var SpinRequestMsgFormatter_1 = __webpack_require__(118);
var SlotNGFeatureDataDefinitions_1 = __webpack_require__(23);
var FreeRespinReelsRequestMsgFormatter = /** @class */ (function (_super) {
    __extends(FreeRespinReelsRequestMsgFormatter, _super);
    function FreeRespinReelsRequestMsgFormatter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * request free respin reels
     * @param data
     */
    FreeRespinReelsRequestMsgFormatter.prototype.codeMessage = function (data) {
        var requestData = {
            player_id: this.slotNGModel.playerId,
            session_token: this.slotNGModel.sessionId,
            partner_code: this.slotNGModel.partnerCode,
            game_code: this.config.gameCode,
            action: SlotNGFeatureDataDefinitions_1.FeatureTypes.FREE_RESPIN_REELS,
            state_tag: this.slotNGModel.stateTag
        };
        requestData = this.mergeForceSpinData(requestData, data);
        return requestData;
    };
    return FreeRespinReelsRequestMsgFormatter;
}(SpinRequestMsgFormatter_1.SpinRequestMsgFormatter));
exports.FreeRespinReelsRequestMsgFormatter = FreeRespinReelsRequestMsgFormatter;


/***/ }),
/* 715 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var NGSlotApi_1 = __webpack_require__(51);
var UrlParameters_1 = __webpack_require__(14);
var SlotNGModel_1 = __webpack_require__(91);
var HttpTransport_1 = __webpack_require__(30);
var HistoryRequestMsgFormatter_1 = __webpack_require__(374);
var HistorySummaryFormatter_1 = __webpack_require__(716);
/**
 * history summary api for result panel
 */
var ResultHistorySummary = /** @class */ (function (_super) {
    __extends(ResultHistorySummary, _super);
    function ResultHistorySummary() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ResultHistorySummary.prototype.init = function (transport, config) {
        _super.prototype.init.call(this, transport, config);
        this.responseFormatter = es5_1.Container.get(HistorySummaryFormatter_1.HistorySummaryFormatter);
        this.requestFormatter = es5_1.Container.get(HistoryRequestMsgFormatter_1.HistoryRequestMsgFormatter);
    };
    ResultHistorySummary.prototype.encapsulation = function (messageType) {
        var url = this.getURL(this.request);
        var content = this.request;
        content.game_code = this.config.gameCode;
        return {
            url: url,
            name: messageType,
            method: HttpTransport_1.HTTP_METHODS.GET,
            headers: this.transport.getHeaders(),
            urlParameters: content
        };
    };
    ResultHistorySummary.prototype.getURL = function (urlParam) {
        var url = this.config.protocol + this.config.historyApiDomain + this.config.path.historySummaries;
        url = url.replace('{domain}', this.transport.getDynamicDomainName());
        url = url.replace('{partner_token}', UrlParameters_1.UrlParameters.partnerToken);
        url = url.replace('{partner_code}', this.slotNGModel.partnerCode);
        url = url.replace('{player_id}', this.slotNGModel.playerId);
        return url;
    };
    var _a;
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof SlotNGModel_1.SlotNGModel !== "undefined" && SlotNGModel_1.SlotNGModel) === "function" && _a || Object)
    ], ResultHistorySummary.prototype, "slotNGModel", void 0);
    return ResultHistorySummary;
}(NGSlotApi_1.NGSlotApi));
exports.ResultHistorySummary = ResultHistorySummary;


/***/ }),
/* 716 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var MoneyFormatter_1 = __webpack_require__(16);
var SlotNGHttpFormatter_1 = __webpack_require__(20);
/**
 * formatter for history summary api. (* reminder: RESULT_HISTORY_SUMMAY same with HISTORY_SUMMARY )
 * currently, only use by result panel. 2020/03/12
 */
var HistorySummaryFormatter = /** @class */ (function (_super) {
    __extends(HistorySummaryFormatter, _super);
    function HistorySummaryFormatter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    HistorySummaryFormatter.prototype.processIncomingMessage = function (message) {
        return this.getSummaryLog(message.data);
    };
    HistorySummaryFormatter.prototype.getSummaryLog = function (data) {
        // sort by time
        data.payload.sort(function (a, b) {
            return (new Date(a.date)).getTime() - (new Date(b.date)).getTime();
        });
        var summary = new Array();
        for (var i = 0; i < data.payload.length; i++) {
            var payload = {
                date: data.payload[i].date.toString(),
                roundId: data.payload[i].round_id,
                bet: this.moneyFormatter.formatMoney(data.payload[i].bet_value, MoneyFormatter_1.NumberDisplayMode.VALUE_ONLY),
                win: this.moneyFormatter.formatMoney(data.payload[i].total_win, MoneyFormatter_1.NumberDisplayMode.VALUE_ONLY),
                balance: this.moneyFormatter.formatMoney(data.payload[i].balance, MoneyFormatter_1.NumberDisplayMode.VALUE_ONLY),
                roundType: data.payload[i].round_type,
                withFreeSpin: data.payload[i].with_free_spin,
                featureTrack: data.payload[i].feature_track,
                isWin: (data.payload[i].total_win > 0)
            };
            summary.push(payload);
        }
        var result = {
            summaryLog: summary,
            query: data.query
        };
        return result;
    };
    var _a;
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof MoneyFormatter_1.MoneyFormatter !== "undefined" && MoneyFormatter_1.MoneyFormatter) === "function" && _a || Object)
    ], HistorySummaryFormatter.prototype, "moneyFormatter", void 0);
    return HistorySummaryFormatter;
}(SlotNGHttpFormatter_1.SlotNGHttpFormatter));
exports.HistorySummaryFormatter = HistorySummaryFormatter;


/***/ }),
/* 717 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var NGSlotApi_1 = __webpack_require__(51);
var UrlParameters_1 = __webpack_require__(14);
var HttpTransport_1 = __webpack_require__(30);
var HistoryDetailRequestMsgFormatter_1 = __webpack_require__(373);
var HistoryDetailFormatter_1 = __webpack_require__(718);
/**
 * history detail api for result panel
 */
var ResultHistoryDetail = /** @class */ (function (_super) {
    __extends(ResultHistoryDetail, _super);
    function ResultHistoryDetail() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ResultHistoryDetail.prototype.init = function (transport, config) {
        _super.prototype.init.call(this, transport, config);
        this.responseFormatter = es5_1.Container.get(HistoryDetailFormatter_1.HistoryDetailFormatter);
        this.requestFormatter = es5_1.Container.get(HistoryDetailRequestMsgFormatter_1.HistoryDetailRequestMsgFormatter);
    };
    ResultHistoryDetail.prototype.encapsulation = function (messageType) {
        var url = this.getURL(this.request);
        return {
            url: url,
            name: messageType,
            method: HttpTransport_1.HTTP_METHODS.GET,
            headers: this.transport.getHeaders()
        };
    };
    ResultHistoryDetail.prototype.getURL = function (urlParam) {
        var url = this.config.protocol + this.config.historyApiDomain + this.config.path.historyDetail;
        url = url.replace('{domain}', this.transport.getDynamicDomainName());
        url = url.replace('{partner_token}', UrlParameters_1.UrlParameters.partnerToken);
        url = url.replace('{round_id}', urlParam.roundID);
        return url;
    };
    return ResultHistoryDetail;
}(NGSlotApi_1.NGSlotApi));
exports.ResultHistoryDetail = ResultHistoryDetail;


/***/ }),
/* 718 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var MoneyFormatter_1 = __webpack_require__(16);
var SlotNGHttpFormatter_1 = __webpack_require__(20);
/**
 * formatter for history detail api. (* reminder: RESULT_HISTORY_DETAIL same with HISTORY_DETAIL )
 * currently, only use by result panel. 2020/03/12
 */
var HistoryDetailFormatter = /** @class */ (function (_super) {
    __extends(HistoryDetailFormatter, _super);
    function HistoryDetailFormatter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    HistoryDetailFormatter.prototype.processIncomingMessage = function (message) {
        return this.getDetailLog(message);
    };
    HistoryDetailFormatter.prototype.getDetailLog = function (data) {
        var _this = this;
        var logs = new Array();
        // sort by time
        data.spin_results.sort(function (a, b) {
            return (new Date(a.transaction_time)).getTime() - (new Date(b.transaction_time)).getTime();
        });
        var _loop_1 = function (i) {
            var sWin = {};
            if (data.spin_results[i].scatter_win && data.spin_results[i].scatter_win.symbol) {
                sWin = {
                    symbol: data.spin_results[i].scatter_win.symbol,
                    ofKind: data.spin_results[i].scatter_win.of_kind,
                    lineConfig: data.spin_results[i].scatter_win.line_config,
                    prize: this_1.moneyFormatter.formatMoney(data.spin_results[i].scatter_win.prize, MoneyFormatter_1.NumberDisplayMode.VALUE_ONLY)
                };
            }
            else {
                sWin = null;
            }
            var rWins = [];
            if (data.spin_results[i].reel_wins) {
                data.spin_results[i].reel_wins.forEach(function (element) {
                    var w = {
                        symbol: element.symbol,
                        ofKind: element.of_kind,
                        wildWin: element.wild_win,
                        lineNumber: element.line_number,
                        lineConfig: element.line_config,
                        prize: _this.moneyFormatter.formatMoney(element.prize, MoneyFormatter_1.NumberDisplayMode.VALUE_ONLY)
                    };
                    rWins.push(w);
                });
            }
            var log = {
                transactionId: data.spin_results[i].transaction_id,
                totalBet: this_1.moneyFormatter.formatMoney(data.spin_results[i].total_bet, MoneyFormatter_1.NumberDisplayMode.VALUE_ONLY),
                betValue: this_1.moneyFormatter.formatMoney(data.spin_results[i].bet_value, MoneyFormatter_1.NumberDisplayMode.VALUE_ONLY),
                totalWin: this_1.moneyFormatter.formatMoney(data.spin_results[i].total_win, MoneyFormatter_1.NumberDisplayMode.VALUE_ONLY),
                balance: this_1.moneyFormatter.formatMoney(data.spin_results[i].balance, MoneyFormatter_1.NumberDisplayMode.VALUE_ONLY),
                reelWins: rWins,
                scatterWin: sWin,
                transactionType: data.spin_results[i].transaction_type,
                featuresTriggered: data.spin_results[i].features_triggered,
                features: data.spin_results[i].features
            };
            logs.push(log);
        };
        var this_1 = this;
        for (var i = 0; i < data.spin_results.length; i++) {
            _loop_1(i);
        }
        var result = {
            roundId: data.round_id,
            spinResults: logs
        };
        return result;
    };
    var _a;
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof MoneyFormatter_1.MoneyFormatter !== "undefined" && MoneyFormatter_1.MoneyFormatter) === "function" && _a || Object)
    ], HistoryDetailFormatter.prototype, "moneyFormatter", void 0);
    return HistoryDetailFormatter;
}(SlotNGHttpFormatter_1.SlotNGHttpFormatter));
exports.HistoryDetailFormatter = HistoryDetailFormatter;


/***/ }),
/* 719 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var Application_1 = __webpack_require__(720);
var UrlParameters_1 = __webpack_require__(14);
var GameController_1 = __webpack_require__(53);
var ScenarioNames_1 = __webpack_require__(136);
var SoundConfig_1 = __webpack_require__(55);
var MoneyFormatter_1 = __webpack_require__(16);
var ScenarioManager_1 = __webpack_require__(135);
var SeleniumPortal_1 = __webpack_require__(143);
var DialogView_1 = __webpack_require__(220);
var ButtonsStateSet_1 = __webpack_require__(75);
var MarqueeView_1 = __webpack_require__(221);
var ButtonsController_1 = __webpack_require__(134);
var AbstractServer_1 = __webpack_require__(133);
var MarqueeConfig_1 = __webpack_require__(222);
var NGServerConfig_1 = __webpack_require__(146);
var NGBNGController_1 = __webpack_require__(90);
var DialogController_1 = __webpack_require__(380);
var TooltipController_1 = __webpack_require__(336);
var BackgroundConfig_1 = __webpack_require__(224);
var UILocalButtonsStateSet_1 = __webpack_require__(348);
var UILocalButtonsController_1 = __webpack_require__(110);
var SlotScenarioNames_1 = __webpack_require__(114);
var SlotGameController_1 = __webpack_require__(733);
var SlotSoundConfig_1 = __webpack_require__(36);
var SlotScenarioManager_1 = __webpack_require__(115);
var SlotSeleniumPortal_1 = __webpack_require__(368);
var ReelController_1 = __webpack_require__(156);
var SlotUIController_1 = __webpack_require__(390);
var SlotDialogView_1 = __webpack_require__(232);
var SlotMarqueeView_1 = __webpack_require__(233);
var BigWinController_1 = __webpack_require__(93);
var SlotMarqueeConfig_1 = __webpack_require__(159);
var SlotNGServerConfig_1 = __webpack_require__(147);
var SlotBNGController_1 = __webpack_require__(744);
var SlotButtonsStateSet_1 = __webpack_require__(755);
var SlotDialogController_1 = __webpack_require__(393);
var SlotButtonController_1 = __webpack_require__(757);
var BaseWinLinesController_1 = __webpack_require__(758);
var SlotBackgroundConfig_1 = __webpack_require__(240);
var ForcingSpinController_1 = __webpack_require__(153);
var PaylinesController_1 = __webpack_require__(764);
var SlotFreeSpinsController_1 = __webpack_require__(155);
var SlotBackgroundController_1 = __webpack_require__(397);
var SlotCoinShowerController_1 = __webpack_require__(236);
var SlotUILocalButtonsStateSet_1 = __webpack_require__(242);
var SlotUILocalButtonsController_1 = __webpack_require__(158);
var SlotApplication = /** @class */ (function (_super) {
    __extends(SlotApplication, _super);
    function SlotApplication() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SlotApplication.prototype.setupBindings = function () {
        //do basic bindings first!
        _super.prototype.setupBindings.call(this);
        es5_1.Container.bind(GameController_1.GameController).to(SlotGameController_1.SlotGameController);
        // server
        es5_1.Container.bind(NGServerConfig_1.NGServerConfig).to(SlotNGServerConfig_1.SlotNGServerConfig);
        // sdk
        es5_1.Container.bind(NGBNGController_1.NGBNGController).to(SlotBNGController_1.SlotNGBNGController);
        // button
        es5_1.Container.bind(ButtonsStateSet_1.ButtonsStateSet).to(SlotButtonsStateSet_1.SlotButtonsStateSet);
        es5_1.Container.bind(ButtonsController_1.ButtonsController).to(SlotButtonController_1.SlotButtonController);
        // selenium
        es5_1.Container.bind(SeleniumPortal_1.SeleniumPortal).to(SlotSeleniumPortal_1.SlotSeleniumPortal);
        // ui
        es5_1.Container.bind(UILocalButtonsStateSet_1.UILocalButtonsStateSet).to(SlotUILocalButtonsStateSet_1.SlotUILocalButtonsStateSet);
        es5_1.Container.bind(UILocalButtonsController_1.UILocalButtonsController).to(SlotUILocalButtonsController_1.SlotUILocalButtonsController);
        // scenario
        es5_1.Container.bind(ScenarioNames_1.ScenarioNames).to(SlotScenarioNames_1.SlotScenarioNames);
        es5_1.Container.bind(ScenarioManager_1.ScenarioManager).to(SlotScenarioManager_1.SlotScenarioManager);
        // components
        es5_1.Container.bind(DialogView_1.DialogView).to(SlotDialogView_1.SlotDialogView);
        es5_1.Container.bind(SoundConfig_1.SoundConfig).to(SlotSoundConfig_1.SlotSoundConfig);
        es5_1.Container.bind(MarqueeView_1.MarqueeView).to(SlotMarqueeView_1.SlotMarqueeView);
        es5_1.Container.bind(MarqueeConfig_1.MarqueeConfig).to(SlotMarqueeConfig_1.SlotMarqueeConfig);
        es5_1.Container.bind(BackgroundConfig_1.BackgroundConfig).to(SlotBackgroundConfig_1.SlotBackgroundConfig);
        es5_1.Container.bind(DialogController_1.DialogController).to(SlotDialogController_1.SlotDialogController);
    };
    SlotApplication.prototype.createComponentList = function (components) {
        components.push({ id: 'background', class: SlotBackgroundController_1.SlotBackgroundController });
        components.push({ id: 'reel', class: ReelController_1.ReelController });
        components.push({ id: 'lines', class: BaseWinLinesController_1.BaseWinLinesController });
        components.push({ id: 'paylines', class: PaylinesController_1.PaylinesController });
        components.push({ id: 'coinShower', class: SlotCoinShowerController_1.SlotCoinShowerController });
        components.push({ id: 'bigWin', class: BigWinController_1.BigWinController });
        components.push({ id: 'freeSpins', class: SlotFreeSpinsController_1.SlotFreeSpinsController });
        components.push({ id: 'ui', class: SlotUIController_1.SlotUIController });
        components.push({ id: 'tooltip', class: TooltipController_1.TooltipController });
        if (!UrlParameters_1.UrlParameters.isRealMode) {
            components.push({ id: 'forceOutcomeComponent', class: ForcingSpinController_1.ForcingSpinController });
        }
    };
    SlotApplication.prototype.createPreloader = function () {
        _super.prototype.createPreloader.call(this);
        this.preloader.gameStartSignal.add(this.onShowGame, this);
    };
    SlotApplication.prototype.onPreloadingDone = function (data) {
        this.initCallBack = data.callback.bind(data.thisArg);
        _super.prototype.onPreloadingDone.call(this);
    };
    SlotApplication.prototype.createServer = function () {
        this.server = es5_1.Container.get(AbstractServer_1.AbstractServer);
        this.gameController.setServer(this.server);
        this.gameController.gameReadySignal.once(this.onGameReady, this);
    };
    SlotApplication.prototype.onGameReady = function () {
        this.setPageTitle();
        this.initCallBack();
    };
    SlotApplication.prototype.setup = function () {
        _super.prototype.setup.call(this);
        this.moneyFormatter.coinSize = 100;
    };
    var _a;
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof MoneyFormatter_1.MoneyFormatter !== "undefined" && MoneyFormatter_1.MoneyFormatter) === "function" && _a || Object)
    ], SlotApplication.prototype, "moneyFormatter", void 0);
    return SlotApplication;
}(Application_1.Application));
exports.SlotApplication = SlotApplication;


/***/ }),
/* 720 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var PIXI = __webpack_require__(4);
var es5_1 = __webpack_require__(0);
var GameConfig_1 = __webpack_require__(24);
var Browser_1 = __webpack_require__(72);
var MainConfig_1 = __webpack_require__(61);
var GameController_1 = __webpack_require__(53);
var Translator_1 = __webpack_require__(25);
var HeartTicker_1 = __webpack_require__(87);
var PixiTickConsumer_1 = __webpack_require__(721);
var Viewport_1 = __webpack_require__(6);
var GameContainerManager_1 = __webpack_require__(205);
var KeyboardManager_1 = __webpack_require__(204);
var ComponentManager_1 = __webpack_require__(376);
var TweenJSTickConsumer_1 = __webpack_require__(345);
var AbstractServer_1 = __webpack_require__(133);
var ExternalModuleManager_1 = __webpack_require__(218);
var ErrorDialogController_1 = __webpack_require__(722);
var OrientationHintController_1 = __webpack_require__(725);
var SmartPreloaderController_1 = __webpack_require__(727);
var AssetLoader_1 = __webpack_require__(54);
var GlobalDispatcher_1 = __webpack_require__(7);
var SoundManager_1 = __webpack_require__(13);
var PartnerHelper_1 = __webpack_require__(202);
var DOMContent_1 = __webpack_require__(283);
/**
 * Basic Core class of game.
 */
var Application = /** @class */ (function () {
    function Application() {
        Browser_1.Browser.init();
        this.pixi = new PIXI.Application(this.getPIXIConfiguration());
        this.pixi.renderer.view.id = 'gameCanvas';
        this.gameContainerManager.init(this.pixi);
        this.bindAPI();
        this.setupBindings();
        this.mainConfig = this.gameConfig.getConfig(MainConfig_1.MainConfig);
        this.setup();
        this.componentManager = new ComponentManager_1.ComponentManager();
        this.gameController.createStateMachine(this.componentManager);
        this.externalModuleManager.init();
        this.addComponents();
        this.createPreloader();
        this.preloader.run();
        if (Browser_1.Browser.isMobile() && this.mainConfig.orientation !== Viewport_1.Orientation.BOTH) {
            this.orientationHint = new OrientationHintController_1.OrientationHintController();
        }
        this.gameContainerManager.enableGameInteraction(false);
    }
    Application.prototype.getPIXIConfiguration = function () {
        var result = {};
        if (window.devicePixelRatio && window.devicePixelRatio >= 2) { // limit max resolution to 2.
            result.resolution = 2;
        }
        return result;
    };
    Application.prototype.addEventListeners = function () {
        GlobalDispatcher_1.GlobalDispatcher.addListener(this, Application.BIND_API, this.addAPI);
    };
    Application.prototype.addAPI = function (message) {
        var apiMessage = message.data;
        this.server.addAPI(apiMessage.messageType, apiMessage.api);
    };
    Application.prototype.bindAPI = function () {
        //
    };
    /**
     * Adds all relations for injection in project ( matters for abstract classes only
     * cause there are no direct link to implementation )
     */
    Application.prototype.setupBindings = function () {
        //
    };
    /**
     * Methods that invokes before we start adding objects to stage.
     * We setup basic settings here.
     */
    Application.prototype.setup = function () {
        this.translator.init();
        this.partnerHelper.init();
        this.soundManager.init(this.assetLoader);
        //fill update listeners with some vital components
        this.timeManager.init(this.mainConfig);
        this.timeManager.register(new PixiTickConsumer_1.PixiTickConsumer());
        this.timeManager.register(new TweenJSTickConsumer_1.TweenJSTickConsumer());
        this.viewport.init(this.pixi, this.mainConfig.orientation, this.mainConfig.resolution.height, this.mainConfig.resolution.width);
        this.setupAssetLoader();
        // if isDesktop
        if (!Browser_1.Browser.isMobile()) {
            this.keyboardManager.init();
        }
    };
    /**
     * Methods that init asset loader
     * And setup error handle service for loader to catch error when failed to load asset
     */
    Application.prototype.setupAssetLoader = function () {
        this.assetLoader.init();
        this.assetLoader.errorHandleService.init(es5_1.Container.get(AssetLoader_1.AssetLoadErrorFormatter));
        this.errorDialog.init(this.assetLoader.errorHandleService);
    };
    Application.prototype.addComponents = function () {
        var _this = this;
        var components = new Array();
        this.createComponentList(components);
        components.forEach(function (component) {
            var comp = es5_1.Container.get(component.class);
            comp.componentID = component.id;
            _this.componentManager.addComponent(comp);
        });
    };
    Application.prototype.createComponentList = function (components) {
        //Example:
        // components.push( { id : 'background', class: BackgroundController }  );
        // components.push( { id : 'reel', class: ReelsController }  );
    };
    /**
     * Insert the component after previousComponentID in components array
     * @param components array with all components of game
     * @param componentToAdd the component that we are going to insert
     * @param previousComponentID id of the component that will be before componentToAdd
     */
    Application.prototype.insertComponentAfter = function (components, componentToAdd, previousComponentID) {
        var indexOfPreviousComponent = components.length - 1;
        for (var index = 0; index < components.length; index++) {
            var element = components[index];
            if (element.id == previousComponentID) {
                indexOfPreviousComponent = index;
                break;
            }
        }
        components.splice(indexOfPreviousComponent, 0, componentToAdd);
    };
    /**
     * Instantiates preloader and fill it with list of required assets for loading
     */
    Application.prototype.createPreloader = function () {
        this.preloader = es5_1.Container.get(SmartPreloaderController_1.SmartPreloaderController);
        this.preloader.loadingFinishedSignal.add(this.onPreloadingDone, this);
        this.preloader.setAssetsForLoading(this.componentManager.listOfFilesToLoad);
    };
    Application.prototype.onShowGame = function () {
        this.preloader.destroy();
        this.preloader = null;
        this.gameContainerManager.enableGameInteraction(true);
    };
    Application.prototype.onPreloadingDone = function (data) {
        //Parse the JSON assets for localisation
        this.translator.onAssetsLoaded();
        this.createServer();
        this.errorDialog.init(this.server.errorHandleService);
        this.server.connect();
        this.addEventListeners();
    };
    /**
     * Creates server
     */
    Application.prototype.createServer = function () {
        this.server = es5_1.Container.get(AbstractServer_1.AbstractServer);
        this.gameController.setServer(this.server);
        this.gameController.gameReadySignal.once(this.onGameReady, this);
    };
    Application.prototype.onGameReady = function () {
        this.setPageTitle();
        this.preloader.destroy();
    };
    Application.prototype.setPageTitle = function () {
        DOMContent_1.DOMContent.setPageTitle(this.translator.t('gameName'));
    };
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
    Application.BIND_API = 'BIND_API';
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof Viewport_1.Viewport !== "undefined" && Viewport_1.Viewport) === "function" && _a || Object)
    ], Application.prototype, "viewport", void 0);
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_b = typeof HeartTicker_1.HeartTicker !== "undefined" && HeartTicker_1.HeartTicker) === "function" && _b || Object)
    ], Application.prototype, "timeManager", void 0);
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_c = typeof GameController_1.GameController !== "undefined" && GameController_1.GameController) === "function" && _c || Object)
    ], Application.prototype, "gameController", void 0);
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_d = typeof Translator_1.Translator !== "undefined" && Translator_1.Translator) === "function" && _d || Object)
    ], Application.prototype, "translator", void 0);
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_e = typeof PartnerHelper_1.PartnerHelper !== "undefined" && PartnerHelper_1.PartnerHelper) === "function" && _e || Object)
    ], Application.prototype, "partnerHelper", void 0);
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_f = typeof GameConfig_1.GameConfig !== "undefined" && GameConfig_1.GameConfig) === "function" && _f || Object)
    ], Application.prototype, "gameConfig", void 0);
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_g = typeof ExternalModuleManager_1.ExternalModuleManager !== "undefined" && ExternalModuleManager_1.ExternalModuleManager) === "function" && _g || Object)
    ], Application.prototype, "externalModuleManager", void 0);
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_h = typeof KeyboardManager_1.KeyboardManager !== "undefined" && KeyboardManager_1.KeyboardManager) === "function" && _h || Object)
    ], Application.prototype, "keyboardManager", void 0);
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_j = typeof GameContainerManager_1.GameContainerManager !== "undefined" && GameContainerManager_1.GameContainerManager) === "function" && _j || Object)
    ], Application.prototype, "gameContainerManager", void 0);
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_k = typeof ErrorDialogController_1.ErrorDialogController !== "undefined" && ErrorDialogController_1.ErrorDialogController) === "function" && _k || Object)
    ], Application.prototype, "errorDialog", void 0);
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_l = typeof AssetLoader_1.AssetLoader !== "undefined" && AssetLoader_1.AssetLoader) === "function" && _l || Object)
    ], Application.prototype, "assetLoader", void 0);
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_m = typeof SoundManager_1.SoundManager !== "undefined" && SoundManager_1.SoundManager) === "function" && _m || Object)
    ], Application.prototype, "soundManager", void 0);
    return Application;
}());
exports.Application = Application;


/***/ }),
/* 721 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var PIXI = __webpack_require__(4);
var PixiTickConsumer = /** @class */ (function () {
    function PixiTickConsumer() {
        this.timeMs = 0;
        // We stop the main PIXI ticker to setup the ticker time in our custom update
        this.mainPixiTicker = PIXI.ticker.shared;
        this.mainPixiTicker.autoStart = false;
        this.mainPixiTicker.stop();
    }
    PixiTickConsumer.prototype.isAlive = function () {
        return true;
    };
    PixiTickConsumer.prototype.tick = function (deltaTimeMs) {
        this.timeMs += deltaTimeMs;
        this.mainPixiTicker.update(this.timeMs);
    };
    return PixiTickConsumer;
}());
exports.PixiTickConsumer = PixiTickConsumer;


/***/ }),
/* 722 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var ErrorDialogView_1 = __webpack_require__(723);
var ErrorDialogConfig_1 = __webpack_require__(203);
var CoreEvent_1 = __webpack_require__(137);
var GameConfig_1 = __webpack_require__(24);
var DataHookService_1 = __webpack_require__(139);
var GlobalDispatcher_1 = __webpack_require__(7);
var ErrorDialogController = /** @class */ (function () {
    function ErrorDialogController(view) {
        this.view = view;
    }
    ErrorDialogController.prototype.init = function (errorHandleService) {
        var config = this.gameConfig.getConfig(ErrorDialogConfig_1.ErrorDialogConfig);
        config.onCloseDialog = this.onCloseDialog.bind(this);
        this.view.initialize(config);
        errorHandleService.onReceiveErrorSignal.add(this.openDialog, this);
        this.errorHandleService = errorHandleService;
    };
    ErrorDialogController.prototype.onCloseDialog = function () {
        GlobalDispatcher_1.GlobalDispatcher.dispatchIntoAllStates(CoreEvent_1.CoreEvent.ON_CLOSE_ERROR_DIALOG);
    };
    ErrorDialogController.prototype.openDialog = function (msgData) {
        if (!msgData) {
            return;
        }
        GlobalDispatcher_1.GlobalDispatcher.dispatchIntoAllStates(CoreEvent_1.CoreEvent.ON_OPEN_ERROR_DIALOG, msgData);
        this.sendOpenDialogDataHook(msgData.code);
        this.view.openDialog(msgData.type, msgData.code, msgData.msg);
    };
    ErrorDialogController.prototype.sendOpenDialogDataHook = function (errorCode) {
        this.dataHookService.onButtonClicked('SHOW_ERROR_DIALOG', 'NGF', {
            action: 'actions_SHOW_ERROR_DIALOG',
            errorCode: errorCode
        });
    };
    var _a, _b, _c;
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof GameConfig_1.GameConfig !== "undefined" && GameConfig_1.GameConfig) === "function" && _a || Object)
    ], ErrorDialogController.prototype, "gameConfig", void 0);
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_b = typeof DataHookService_1.DataHookService !== "undefined" && DataHookService_1.DataHookService) === "function" && _b || Object)
    ], ErrorDialogController.prototype, "dataHookService", void 0);
    ErrorDialogController = __decorate([
        es5_1.Singleton,
        __param(0, es5_1.Inject),
        __metadata("design:paramtypes", [typeof (_c = typeof ErrorDialogView_1.ErrorDialogView !== "undefined" && ErrorDialogView_1.ErrorDialogView) === "function" && _c || Object])
    ], ErrorDialogController);
    return ErrorDialogController;
}());
exports.ErrorDialogController = ErrorDialogController;


/***/ }),
/* 723 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var pixi_js_1 = __webpack_require__(4);
var CompView_1 = __webpack_require__(34);
var Viewport_1 = __webpack_require__(6);
var WebTextField_1 = __webpack_require__(35);
var CoreUIElementFactory_1 = __webpack_require__(28);
var ErrorDialogConfig_1 = __webpack_require__(724);
var ErrorDialogView = /** @class */ (function (_super) {
    __extends(ErrorDialogView, _super);
    function ErrorDialogView() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ErrorDialogView.prototype.createElements = function (config) {
        this.config = config;
        this.mainContainer = this.gameContainerManager.errorDialogContainer;
        if (!this.background) {
            this.background = new pixi_js_1.Graphics();
            this.background.beginFill(config.background.color, config.background.alpha);
            this.background.drawRect(0, 0, this.viewport.width, this.viewport.height);
            this.background.endFill();
            this.background.interactive = true;
            this.addChild(this.background);
        }
        if (!this.errorCode) {
            this.errorCode = new WebTextField_1.WebTextField(config.errorCode);
            this.addChild(this.errorCode);
        }
        if (!this.errorMsg) {
            this.errorMsg = new WebTextField_1.WebTextField(config.errorMsg);
            this.addChild(this.errorMsg);
        }
        try {
            if (!this.closeButton) {
                this.closeButton = CoreUIElementFactory_1.CoreUIElementFactory.createInstance(config.closeButton);
                this.closeButton.elementSignal.add(this.closeDialog.bind(this));
                // it's only add in second createElements.
                this.addChild(this.closeButton);
            }
        }
        catch (err) {
            // don't need to do anything because the game will stop.
            console.log(err);
        }
        this.visible = false;
    };
    ErrorDialogView.prototype.layoutElements = function () {
        _super.prototype.layoutElements.call(this);
        this.background.width = this.viewport.width;
        this.background.height = this.viewport.height;
        var center = this.viewport.getAlignedPoint(Viewport_1.ViewportAlign.CENTER_MIDDLE);
        this.errorCode.x = center.x;
        this.errorCode.y = center.y + this.config.errorCodeOffset.y;
        this.errorMsg.x = center.x;
        this.errorMsg.y = center.y + this.config.errorMsgOffset.y;
    };
    ErrorDialogView.prototype.openDialog = function (type, errorCode, msg) {
        this.visible = true;
        var content = msg;
        this.errorCode.text = "Error " + errorCode;
        this.errorMsg.text = content;
        // if closeButton exist
        if (this.closeButton) {
            this.setCloseButtonActionData(errorCode);
            switch (type) {
                case ErrorDialogConfig_1.ErrorDialogType.FULL_SCREEN:
                    this.closeButton.visible = false;
                    break;
                case ErrorDialogConfig_1.ErrorDialogType.WITH_OPTION:
                    this.closeButton.visible = true;
                    break;
                case ErrorDialogConfig_1.ErrorDialogType.WITHOUT_OPTION:
                    this.closeButton.visible = false;
                    break;
            }
        }
    };
    ErrorDialogView.prototype.closeDialog = function () {
        this.visible = false;
        this.config.onCloseDialog();
    };
    ErrorDialogView.prototype.setCloseButtonActionData = function (errorCode) {
        this.closeButton.clickData = { errorCode: errorCode };
    };
    return ErrorDialogView;
}(CompView_1.CompView));
exports.ErrorDialogView = ErrorDialogView;


/***/ }),
/* 724 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var TsMap_1 = __webpack_require__(2);
var Helper_1 = __webpack_require__(5);
var Actions_1 = __webpack_require__(22);
var Viewport_1 = __webpack_require__(6);
var Button_1 = __webpack_require__(19);
/**
 * WITH_OPTION: The dialog with YES or NO, and close button
 * WITHOUT_OPTION: The dialog only with close button
 * FULL_SCREEN: The dialog which has no button
 *
 * @export
 * @enum {number}
 */
var ErrorDialogType;
(function (ErrorDialogType) {
    ErrorDialogType[ErrorDialogType["WITH_OPTION"] = 0] = "WITH_OPTION";
    ErrorDialogType[ErrorDialogType["WITHOUT_OPTION"] = 1] = "WITHOUT_OPTION";
    ErrorDialogType[ErrorDialogType["FULL_SCREEN"] = 2] = "FULL_SCREEN";
})(ErrorDialogType = exports.ErrorDialogType || (exports.ErrorDialogType = {}));
var ErrorDialogConfig = /** @class */ (function () {
    function ErrorDialogConfig() {
        this.name = 'errorDialog';
        this.background = { color: 0, alpha: 0.8 };
        this.closeButton = {
            elementConfig: {
                name: 'closeButton',
                position: {
                    x: 648,
                    y: 96
                },
                anchor: { x: 0.5, y: 0.5 },
                id: 'ERROR_CLOSE',
                productLine: 'NGF',
                assetName: 'close',
                action: Actions_1.Actions.CLOSE_ERROR_DIALOG,
                isLocal: true,
                visible: false,
                isOrientationSupported: true
            },
            elementType: Button_1.Button.elementType
        };
        this.errorCode = {
            name: 'errorCode',
            key: '',
            style: {
                fontFamily: Helper_1.Helper.DEFAULT_FONTS,
                fontSize: 48,
                fontWeight: 'bold',
                fill: 'white',
                align: 'left',
                padding: 50
            },
            anchor: { x: 0.5, y: 0.5 }
        };
        this.errorCodeOffset = new PIXI.Point(0, -100);
        this.errorMsg = {
            name: 'errorMsg',
            key: '',
            style: {
                fontFamily: Helper_1.Helper.DEFAULT_FONTS,
                fontSize: 22,
                fill: 'white',
                align: 'center',
            },
            anchor: { x: 0.5, y: 0.5 }
        };
        this.errorMsgOffset = new PIXI.Point(0, 40);
        this.onCloseDialog = function () { return null; };
        this.coreElementOrientationConfig = new TsMap_1.TsMap([
            [
                Viewport_1.Orientation.PORTRAIT, new TsMap_1.TsMap([
                    [
                        this.closeButton.elementConfig.name, {
                            name: this.closeButton.elementConfig.name,
                            position: this.closeButton.elementConfig.position
                        }
                    ]
                ])
            ],
            [
                Viewport_1.Orientation.LANDSCAPE, new TsMap_1.TsMap([
                    [
                        this.closeButton.elementConfig.name, {
                            name: this.closeButton.elementConfig.name,
                            position: { x: 1120, y: 80 }
                        }
                    ]
                ])
            ]
        ]);
    }
    return ErrorDialogConfig;
}());
exports.ErrorDialogConfig = ErrorDialogConfig;


/***/ }),
/* 725 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var GameConfig_1 = __webpack_require__(24);
var OrientationHintView_1 = __webpack_require__(726);
var MainConfig_1 = __webpack_require__(61);
var OrientationHintController = /** @class */ (function () {
    function OrientationHintController() {
        var mainConfig = this.gameConfig.getConfig(MainConfig_1.MainConfig);
        this.view = new OrientationHintView_1.OrientationHintView();
        this.view.initialize(mainConfig.orientation);
    }
    var _a;
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof GameConfig_1.GameConfig !== "undefined" && GameConfig_1.GameConfig) === "function" && _a || Object)
    ], OrientationHintController.prototype, "gameConfig", void 0);
    return OrientationHintController;
}());
exports.OrientationHintController = OrientationHintController;


/***/ }),
/* 726 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var CompView_1 = __webpack_require__(34);
var Viewport_1 = __webpack_require__(6);
var AssetLoader_1 = __webpack_require__(54);
var ResourceConfig_1 = __webpack_require__(62);
var OrientationHintView = /** @class */ (function (_super) {
    __extends(OrientationHintView, _super);
    function OrientationHintView() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.container = null;
        _this.supportOrientation = null;
        return _this;
    }
    OrientationHintView.prototype.initialize = function (supportOrientation) {
        if (supportOrientation) {
            this.supportOrientation = supportOrientation;
        }
        else {
            console.warn('gameConfig:orientation is undefined');
        }
        //if ( supportOrientation !== Orientation.BOTH ) {
        this.createElements(supportOrientation);
        this.registerEvents();
        //}
        this.layoutElements();
    };
    OrientationHintView.prototype.portraitLayout = function () {
        if (!this.viewport.isPortraitMode || !this.assetLoader.isResourceReady(ResourceConfig_1.ResourceConfig.PORTRAIT_VIEW)) {
            this.container.style.display = 'block';
        }
        else {
            this.container.style.display = 'none';
        }
    };
    OrientationHintView.prototype.landscapeLayout = function () {
        if (this.viewport.isPortraitMode || !this.assetLoader.isResourceReady(ResourceConfig_1.ResourceConfig.LANDSCAPE_VIEW)) {
            this.container.style.display = 'block';
        }
        else {
            this.container.style.display = 'none';
        }
    };
    /**
     * Create the orientation hint DOM. For PORTRAIT-only mode, rotates the image by 90 degee.
     *
     * @protected
     * @param {*} [supportOrientation]
     * @memberof OrientationHintView
     */
    OrientationHintView.prototype.createElements = function (supportOrientation) {
        var body = document.body;
        this.container = document.createElement('div');
        var img = document.createElement('img');
        var url = 'assets/core/orientation.png';
        try {
            url = "1ae629c8909f7093a8f96c4e6e226e4c" + '_' + url;
        }
        catch (_a) {
            console.warn('please add MD5HASH setting into your project');
        }
        img.setAttribute('src', url);
        this.container.style.position = 'fixed';
        this.container.style.zIndex = '100';
        this.container.style.top = '0px';
        this.container.style.width = '100%';
        this.container.style.height = '100%';
        this.container.style.background = 'black';
        this.container.style.display = 'none';
        img.style.width = '75%';
        img.style.position = 'absolute';
        img.style.top = '0';
        img.style.bottom = '0';
        img.style.right = '0';
        img.style.left = '0';
        img.style.margin = 'auto';
        if (supportOrientation === Viewport_1.Orientation.PORTRAIT) {
            img.style.width = '50%';
            img.style.transform = 'rotate(90deg)';
        }
        this.container.appendChild(img);
        body.appendChild(this.container);
    };
    var _a;
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof AssetLoader_1.AssetLoader !== "undefined" && AssetLoader_1.AssetLoader) === "function" && _a || Object)
    ], OrientationHintView.prototype, "assetLoader", void 0);
    return OrientationHintView;
}(CompView_1.CompView));
exports.OrientationHintView = OrientationHintView;


/***/ }),
/* 727 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var MiniSignal = __webpack_require__(3);
var es5_1 = __webpack_require__(0);
var SmartPreloaderView_1 = __webpack_require__(219);
var Viewport_1 = __webpack_require__(6);
var GameConfig_1 = __webpack_require__(24);
var Translator_1 = __webpack_require__(25);
var SoundManager_1 = __webpack_require__(13);
var MainConfig_1 = __webpack_require__(61);
var AssetLoader_1 = __webpack_require__(54);
var SeleniumPortal_1 = __webpack_require__(143);
var ResourceConfig_1 = __webpack_require__(62);
var SmartPreloadConfig_1 = __webpack_require__(730);
/**
 * Load all assets and show loading screen with progress bar during loading.
 */
var SmartPreloaderController = /** @class */ (function () {
    function SmartPreloaderController() {
        /**
         * Amount of loaded assets
         */
        this.loadCount = 0;
        /**
         * Total Amount of assets that we should load
         */
        this.totalResourcesNumber = 0;
        /**
         * Progress of the loader
         */
        this.progress = 0;
        this.listenedSignals = {};
        this.isInPreloader = true;
        this.gameStartSignal = new MiniSignal();
        this.preloaderView = es5_1.Container.get(SmartPreloaderView_1.SmartPreloaderView);
        this.loadingFinishedSignal = new MiniSignal();
        this.preloaderView.initialize(this.getConfig());
        this.assetLoader.onGroupProgress.add(this.onProgress.bind(this));
        this.assetLoader.onGroupCompleted.add(this.onResourceReady.bind(this));
    }
    SmartPreloaderController.prototype.getConfig = function () {
        return this.gameConfig.getConfig(SmartPreloadConfig_1.SmartPreloaderConfig);
    };
    /**
     * Show preloader and preloader bar on stage
     */
    SmartPreloaderController.prototype.showPreloader = function (idx) {
        if (idx === ResourceConfig_1.ResourceConfig.PRELOAD) {
            this.preloaderView.showPreloader();
        }
    };
    /**
     * Showing progress of loading resources using progress bar
     * Firing event once all necessary files are loaded and then start loading
     * optional sounds
     */
    SmartPreloaderController.prototype.onProgress = function (groupIdx, ratio) {
        if (groupIdx !== ResourceConfig_1.ResourceConfig.MAIN_GAME) {
            return;
        }
        // prevent progress bar from jumping backward
        this.progress = Math.max(this.progress, ratio);
        this.preloaderView.setProgress(this.progress);
    };
    SmartPreloaderController.prototype.setLoaderBarComplete = function () {
        this.preloaderView.setLoaderBarComplete();
        this.seleniumPortal.closePreloaderSignal.once(this.preloaderView.onClickEnterGame, this.preloaderView);
    };
    SmartPreloaderController.prototype.showGame = function () {
        if (!this.isInPreloader) {
            return;
        }
        this.isInPreloader = false;
        this.gameStartSignal.dispatch();
    };
    SmartPreloaderController.prototype.setAssetsForLoading = function (pFilesToLoad) {
        this.filesToLoad = pFilesToLoad;
    };
    /**
     * Loading vital assets for preloader - preloader background and preloader bar.
     */
    SmartPreloaderController.prototype.run = function () {
        var preloadAssets = this.preloaderView.getAssetsList().map(function (asset) {
            var rtn = {
                group: ResourceConfig_1.ResourceConfig.PRELOAD,
                assetKey: asset.assetKey,
                assetURL: asset.assetURL
            };
            return rtn;
        });
        var allFiles = preloadAssets.concat(this.translator.getLocalisationAssets()).concat(this.filesToLoad);
        this.assetLoader.add(allFiles);
        this.assetLoader.start(this.showPreloader.bind(this));
    };
    /**
     * Loading vital configs before all the rest
     */
    SmartPreloaderController.prototype.loadConfigFiles = function () {
        var _this = this;
        var mainConfig = this.gameConfig.getConfig(MainConfig_1.MainConfig);
        if (mainConfig.configFiles != undefined) {
            this.assetLoader.add(mainConfig.configFiles);
            this.assetLoader.start(function () {
                _this.gameConfig.setConfigStorageObject(_this.assetLoader.resources);
                _this.loadAssets();
            });
        }
        else {
            this.loadAssets();
        }
    };
    /**
     * Load all assets that we need for game
     */
    SmartPreloaderController.prototype.loadAssets = function () {
        this.assetLoader.reset(true);
        // Load assets for localisation
        this.assetLoader.add(this.translator.getLocalisationAssets());
        // Load essential assets
        this.assetLoader.add(this.filesToLoad);
        this.assetLoader.start();
    };
    SmartPreloaderController.prototype.onResourceReady = function (groupIdx) {
        if (groupIdx !== ResourceConfig_1.ResourceConfig.MAIN_GAME) {
            return;
        }
        this.loadingFinishedSignal.dispatch({ callback: this.preloaderView.finishLoading, thisArg: this.preloaderView });
        this.setLoaderBarComplete();
        this.preloaderView.onClickEnterGameSignal.add(this.showGame, this);
    };
    SmartPreloaderController.prototype.destroy = function () {
        this.gameStartSignal.detachAll();
        this.gameStartSignal = null;
        this.loadingFinishedSignal.detachAll();
        this.loadingFinishedSignal = null;
        this.assetLoader.detachAll();
        this.preloaderView.destroy();
    };
    var _a, _b, _c, _d, _e, _f;
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof SoundManager_1.SoundManager !== "undefined" && SoundManager_1.SoundManager) === "function" && _a || Object)
    ], SmartPreloaderController.prototype, "soundManager", void 0);
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_b = typeof GameConfig_1.GameConfig !== "undefined" && GameConfig_1.GameConfig) === "function" && _b || Object)
    ], SmartPreloaderController.prototype, "gameConfig", void 0);
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_c = typeof Translator_1.Translator !== "undefined" && Translator_1.Translator) === "function" && _c || Object)
    ], SmartPreloaderController.prototype, "translator", void 0);
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_d = typeof Viewport_1.Viewport !== "undefined" && Viewport_1.Viewport) === "function" && _d || Object)
    ], SmartPreloaderController.prototype, "viewport", void 0);
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_e = typeof SeleniumPortal_1.SeleniumPortal !== "undefined" && SeleniumPortal_1.SeleniumPortal) === "function" && _e || Object)
    ], SmartPreloaderController.prototype, "seleniumPortal", void 0);
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_f = typeof AssetLoader_1.AssetLoader !== "undefined" && AssetLoader_1.AssetLoader) === "function" && _f || Object)
    ], SmartPreloaderController.prototype, "assetLoader", void 0);
    return SmartPreloaderController;
}());
exports.SmartPreloaderController = SmartPreloaderController;


/***/ }),
/* 728 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var MiniSignal = __webpack_require__(3);
var Helper_1 = __webpack_require__(5);
var pixi_js_1 = __webpack_require__(4);
var Animation_1 = __webpack_require__(26);
var CoreElement_1 = __webpack_require__(56);
var LoadingBar = /** @class */ (function (_super) {
    __extends(LoadingBar, _super);
    function LoadingBar() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.currentPercentage = 0;
        return _this;
    }
    LoadingBar.prototype.initElement = function (config) {
        this.finishedLoadingSignal = new MiniSignal();
        this.createEmptyBar(config.emptyAssetName);
        this.createFullBar(config.fullAssetName);
        this.createLoadAnimation(config.animationAssets);
        this.createCompleteAnimation(config.completeAnimationAssets);
        if (!this.loadAnimation) {
            this.fullBar.mask = this.fullMask;
        }
    };
    LoadingBar.prototype.createEmptyBar = function (emptyAsset) {
        if (emptyAsset == undefined || emptyAsset == Helper_1.Helper.EMPTY) {
            return;
        }
        this.emptyBar = new pixi_js_1.Sprite(pixi_js_1.Texture.fromFrame(emptyAsset));
        this.addChild(this.emptyBar);
    };
    LoadingBar.prototype.createFullBar = function (fullAsset) {
        if (fullAsset == undefined || fullAsset == Helper_1.Helper.EMPTY) {
            return;
        }
        this.fullBar = new pixi_js_1.Sprite(pixi_js_1.Texture.fromFrame(fullAsset));
        this.addChild(this.fullBar);
        this.fullMask = new pixi_js_1.Graphics();
        this.fullMask.beginFill(0);
        this.fullMask.drawRect(this.fullBar.x, this.fullBar.y, this.fullBar.width, this.fullBar.height);
        this.fullMask.endFill();
        var newX = this.fullBar.x - this.fullMask.x;
        var newY = this.fullBar.y - this.fullMask.y;
        this.fullMask.position.set(newX, newY);
        this.addChild(this.fullMask);
    };
    LoadingBar.prototype.createLoadAnimation = function (animationAssets) {
        if (animationAssets == undefined) {
            return;
        }
        this.loadAnimation = Animation_1.Animation.createFrameAnimation(animationAssets);
        this.loadAnimation.loop = true;
        this.loadAnimation.visible = false;
        this.loadAnimation.animationSpeed = 0.25;
        this.addChildAt(this.loadAnimation, 1);
        this.loadAnimation.mask = this.fullMask;
        this.loadAnimation.play();
    };
    LoadingBar.prototype.createCompleteAnimation = function (completeAnimationAssets) {
        var _this = this;
        if (completeAnimationAssets == undefined) {
            return;
        }
        this.completeAnimation = Animation_1.Animation.createFrameAnimation(completeAnimationAssets);
        this.completeAnimation.loop = false;
        this.completeAnimation.visible = false;
        this.completeAnimation.animationSpeed = 0.25;
        this.completeAnimation.blendMode = pixi_js_1.BLEND_MODES.ADD;
        this.completeAnimation.onComplete = function () {
            _this.completeAnimation.visible = false;
            _this.finishedLoadingSignal.dispatch();
        };
        this.addChild(this.completeAnimation);
    };
    LoadingBar.prototype.updateAttributes = function (config) {
        if (config == undefined) {
            return;
        }
        _super.prototype.updateAttributes.call(this, config);
        if (this.fullBar && config.fullAssetName) {
            this.fullBar.texture = pixi_js_1.Texture.fromFrame(config.fullAssetName);
            this.fullMask.width = this.fullBar.width;
            this.fullMask.height = this.fullBar.height;
            this.update(this.currentPercentage);
        }
        if (config.anchor) {
            this.setAnchor(config.anchor);
        }
    };
    LoadingBar.prototype.update = function (percentage) {
        this.currentPercentage = percentage;
        if (this.loadAnimation != undefined) {
            this.loadAnimation.visible = percentage != undefined && percentage != 0;
        }
        else {
            this.fullBar.visible = percentage != 0;
        }
        var newX = this.fullBar.x - (this.fullBar.width + (this.fullBar.width * this.fullBar.anchor.x)) + (percentage * this.fullMask.width);
        var newY = this.fullBar.y - (this.fullBar.height * this.fullBar.anchor.y);
        this.fullMask.position.set(newX, newY);
    };
    LoadingBar.prototype.playCompleteAnimation = function () {
        if (this.completeAnimation == undefined) {
            this.finishedLoadingSignal.dispatch();
        }
        else {
            this.completeAnimation.visible = true;
            this.completeAnimation.play();
        }
    };
    LoadingBar.prototype.dispose = function () {
        this.emptyBar.destroy();
        this.fullBar.destroy();
        this.emptyBar = undefined;
        this.fullBar = undefined;
        this.fullMask.destroy();
        this.fullMask = undefined;
        if (this.completeAnimation != undefined) {
            this.completeAnimation.destroy();
            this.completeAnimation = undefined;
        }
        this.finishedLoadingSignal.detachAll();
        this.finishedLoadingSignal = undefined;
    };
    LoadingBar.prototype.setAnchor = function (anchor) {
        var _this = this;
        this.children.forEach(function (child) {
            if (_this.isSprite(child)) {
                child.anchor.set(anchor.x, anchor.y);
            }
        });
    };
    LoadingBar.prototype.isSprite = function (displayObject) {
        return displayObject.anchor !== undefined;
    };
    return LoadingBar;
}(CoreElement_1.CoreElement));
exports.LoadingBar = LoadingBar;


/***/ }),
/* 729 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var MiniSignal = __webpack_require__(3);
var CoreElement_1 = __webpack_require__(56);
var CoreUIElementFactory_1 = __webpack_require__(28);
var SpineLoadingBar = /** @class */ (function (_super) {
    __extends(SpineLoadingBar, _super);
    function SpineLoadingBar() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.currentPercentage = 0;
        _this.currentAnimationState = '';
        _this.loadingDone = false;
        return _this;
    }
    SpineLoadingBar.prototype.initElement = function (config) {
        this.finishedLoadingSignal = new MiniSignal();
        this.updateAnimationMap = config.animationConfig.elementConfig.stateAnimationMap;
        this.createAnimation(config.animationConfig);
    };
    SpineLoadingBar.prototype.createAnimation = function (animationConfig) {
        this.animation = CoreUIElementFactory_1.CoreUIElementFactory.createInstance(animationConfig);
        this.animation.completeSignal.add(this.onAnimationComplete, this);
        this.addChild(this.animation);
    };
    SpineLoadingBar.prototype.onAnimationComplete = function (animation, entry) {
        if (entry.animation.name == this.config.completeAnimationName) {
            //this.animation.renderable = false;
            this.finishedLoadingSignal.dispatch();
        }
    };
    SpineLoadingBar.prototype.update = function (percentage) {
        var _this = this;
        if (this.loadingDone) {
            return;
        }
        this.currentPercentage = percentage;
        var keyValue;
        this.updateAnimationMap.keys().forEach(function (key) {
            var percentValue = +key;
            if (percentValue <= _this.currentPercentage * 100) {
                keyValue = key;
            }
        });
        if (keyValue != this.currentAnimationState) {
            this.currentAnimationState = keyValue;
            this.animation.playByStateName(this.currentAnimationState);
        }
    };
    SpineLoadingBar.prototype.playCompleteAnimation = function () {
        this.loadingDone = true;
        this.animation.playByStateName(this.config.completeAnimationName);
    };
    SpineLoadingBar.prototype.dispose = function () {
        if (this.animation != undefined) {
            this.animation.destroy();
            this.animation = undefined;
        }
        this.config = undefined;
        this.finishedLoadingSignal.detachAll();
        this.finishedLoadingSignal = undefined;
    };
    return SpineLoadingBar;
}(CoreElement_1.CoreElement));
exports.SpineLoadingBar = SpineLoadingBar;


/***/ }),
/* 730 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var TsMap_1 = __webpack_require__(2);
var Helper_1 = __webpack_require__(5);
var Actions_1 = __webpack_require__(22);
var ButtonId_1 = __webpack_require__(377);
var Viewport_1 = __webpack_require__(6);
var SmartPreloaderConfig = /** @class */ (function () {
    function SmartPreloaderConfig() {
        this.name = 'preloader';
        this.background = {
            name: 'preloaderBackground',
            isOrientationSupported: true,
            assetName: 'preloaderBackground.jpg',
            position: { x: 0, y: 0 }
        };
        this.loadingBar = {
            name: 'preloadBar',
            isOrientationSupported: true,
            position: { x: 360, y: 1150.5 },
            fullAssetName: 'loadingBar.png',
            emptyAssetName: Helper_1.Helper.EMPTY,
            animationAssets: null,
            completeAnimationAssets: null,
            anchor: { x: 0.5, y: 0.5 }
        };
        this.buttonStartYPositionPortrait = 1120;
        this.buttonStartYPositionLandscape = 585;
        this.preloaderButton = {
            id: ButtonId_1.ButtonId.BUTTON_CLOSE_PRELOADER,
            name: ButtonId_1.ButtonId.BUTTON_CLOSE_PRELOADER,
            isOrientationSupported: true,
            action: Actions_1.Actions.ON_GAME_START,
            productLine: 'NGF',
            assetName: 'playNow',
            isLocal: false,
            alpha: 0,
            position: { x: 360, y: 1060 },
            anchor: { x: 0.5, y: 0.5 },
            rectangleHitArea: { width: 0, height: 0 }
        };
        this.coreElementOrientationConfig = new TsMap_1.TsMap([
            [
                Viewport_1.Orientation.PORTRAIT, new TsMap_1.TsMap([
                    [
                        this.preloaderButton.name, {
                            name: this.preloaderButton.name,
                            position: this.preloaderButton.position
                        }
                    ],
                    [
                        this.loadingBar.name, {
                            name: this.loadingBar.name,
                            position: this.loadingBar.position,
                            fullAssetName: this.loadingBarConfig.fullAssetName
                        }
                    ],
                    [
                        this.background.name, {
                            name: this.background.name,
                            assetName: this.background.assetName
                        }
                    ]
                ])
            ],
            [
                Viewport_1.Orientation.LANDSCAPE, new TsMap_1.TsMap([
                    [
                        this.preloaderButton.name, {
                            name: this.preloaderButton.name,
                            position: { x: 640, y: 555 }
                        }
                    ],
                    [
                        this.loadingBar.name, {
                            name: this.loadingBar.name,
                            position: { x: 640, y: 600 },
                            fullAssetName: Viewport_1.Orientation.LANDSCAPE + '_' + this.loadingBarConfig.fullAssetName
                        }
                    ],
                    [
                        this.background.name, {
                            name: this.background.name,
                            assetName: Viewport_1.Orientation.LANDSCAPE + '_' + this.background.assetName
                        }
                    ]
                ])
            ]
        ]);
    }
    Object.defineProperty(SmartPreloaderConfig.prototype, "loadingBarConfig", {
        get: function () {
            return this.loadingBar;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SmartPreloaderConfig.prototype, "spineLoadingBarConfig", {
        get: function () {
            return this.loadingBar;
        },
        enumerable: true,
        configurable: true
    });
    return SmartPreloaderConfig;
}());
exports.SmartPreloaderConfig = SmartPreloaderConfig;


/***/ }),
/* 731 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var GlobalDispatcher_1 = __webpack_require__(7);
var TransitionSceneView_1 = __webpack_require__(378);
var TransitionSceneConfig_1 = __webpack_require__(732);
var LazyCompController_1 = __webpack_require__(381);
var ResourceConfig_1 = __webpack_require__(62);
/**
 * Basic transition scene handler.
 * The class monitor the specific resource group.
 * User should handle the UI while the resource is loading.
 * @export
 * @class TransitionSceneView
 * @extends {CompView}
 */
var TransitionSceneController = /** @class */ (function (_super) {
    __extends(TransitionSceneController, _super);
    function TransitionSceneController(view) {
        var _this = _super.call(this, view) || this;
        _this.isReady = false;
        _this.view = view;
        return _this;
    }
    TransitionSceneController_1 = TransitionSceneController;
    TransitionSceneController.prototype.addEventListeners = function () {
        GlobalDispatcher_1.GlobalDispatcher.addListener(this, TransitionSceneController_1.MONITOR_GROUP, this.onChangeGroupIndex);
        GlobalDispatcher_1.GlobalDispatcher.addListener(this, TransitionSceneController_1.TRIGGER_LOAD_ASSET, this.triggerLoadAsset);
    };
    TransitionSceneController.prototype.init = function (stateData) {
        var config = this.gameConfig.getConfig(TransitionSceneConfig_1.TransitionSceneConfig);
        this.target = [config.target];
        this.view.initialize(config);
        this.finishStateAction();
    };
    TransitionSceneController.prototype.onGroupProgress = function (groupIdx, ratio) {
        if (this.lazyGroupIndex === groupIdx && this.view.initialized && this.view.visible) {
            this.updateViewProgress(ratio);
        }
    };
    TransitionSceneController.prototype.updateViewProgress = function (ratio) {
        this.view.updateProgress(ratio);
    };
    TransitionSceneController.prototype.onChangeGroupIndex = function (message) {
        var data = message.data;
        this.isReady = false;
        this.target = (Array.isArray(data.group)) ? data.group : [data.group];
    };
    TransitionSceneController.prototype.triggerLoadAsset = function (message) {
        var _this = this;
        var data = message.data;
        if (Array.isArray(data.group)) {
            data.group.forEach(function (name) {
                _this.assetLoader.start(null, name);
            });
        }
    };
    TransitionSceneController.prototype.checkResource = function () {
        var _this = this;
        if (!this.target) {
            this.isReady = true;
            return Promise.resolve();
        }
        return new Promise(function (resolve) {
            if (_this.isResourceReady()) {
                _this.isReady = true;
                resolve();
            }
            else {
                _this.resolveForCheckResource = resolve;
            }
        });
    };
    TransitionSceneController.prototype.isResourceReady = function () {
        var _this = this;
        var retrunValue = true;
        var cloneTarget = this.target.slice(0);
        cloneTarget.forEach(function (group) {
            var isReady = _this.assetLoader.isResourceReady(group);
            if (isReady) {
                // remove group from watch list if it is ready.
                var index = _this.target.indexOf(group);
                if (index !== -1) {
                    _this.target.splice(index, 1);
                }
            }
            retrunValue = retrunValue && isReady;
        });
        return retrunValue;
    };
    TransitionSceneController.prototype.onGroupCompleted = function (groupIdx) {
        if (groupIdx <= ResourceConfig_1.ResourceConfig.PORTRAIT_VIEW || !this.target) {
            return;
        }
        var index = this.target.indexOf(groupIdx);
        if (index !== -1) {
            this.target.splice(index, 1);
        }
        if (this.canResolve(groupIdx) && this.resolveForCheckResource) {
            this.isReady = true;
            this.resolveForCheckResource();
            this.resolveForCheckResource = null;
        }
    };
    TransitionSceneController.prototype.canResolve = function (groupIdx) {
        return this.target.length === 0;
    };
    var TransitionSceneController_1, _a;
    TransitionSceneController.MONITOR_GROUP = 'MONITOR_GROUP';
    TransitionSceneController.TRIGGER_LOAD_ASSET = 'TRIGGER_LOAD_ASSET';
    TransitionSceneController = TransitionSceneController_1 = __decorate([
        es5_1.Singleton,
        __param(0, es5_1.Inject),
        __metadata("design:paramtypes", [typeof (_a = typeof TransitionSceneView_1.TransitionSceneView !== "undefined" && TransitionSceneView_1.TransitionSceneView) === "function" && _a || Object])
    ], TransitionSceneController);
    return TransitionSceneController;
}(LazyCompController_1.LazyCompController));
exports.TransitionSceneController = TransitionSceneController;


/***/ }),
/* 732 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var TransitionSceneConfig = /** @class */ (function () {
    function TransitionSceneConfig() {
    }
    return TransitionSceneConfig;
}());
exports.TransitionSceneConfig = TransitionSceneConfig;


/***/ }),
/* 733 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var TsMap_1 = __webpack_require__(2);
var Helper_1 = __webpack_require__(5);
var CoreEvent_1 = __webpack_require__(137);
var GameController_1 = __webpack_require__(53);
var GlobalDispatcher_1 = __webpack_require__(7);
var ForcingSpinController_1 = __webpack_require__(153);
var SlotFreeSpinsController_1 = __webpack_require__(155);
var SlotScenarioNames_1 = __webpack_require__(114);
var SlotStates_1 = __webpack_require__(31);
var SlotEvent_1 = __webpack_require__(32);
var SlotScenarioManager_1 = __webpack_require__(115);
var SlotHttpFormatter_1 = __webpack_require__(369);
var SlotBankService_1 = __webpack_require__(49);
/**
 * GameController is the main class that connects Server, StateMachine and Components.
 * This class is responsible for communications between them.
 */
var SlotGameController = /** @class */ (function (_super) {
    __extends(SlotGameController, _super);
    function SlotGameController() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SlotGameController_1 = SlotGameController;
    Object.defineProperty(SlotGameController.prototype, "engagementStateHandlerList", {
        get: function () {
            if (!this._engagementStateHandlerList) {
                this._engagementStateHandlerList = new TsMap_1.TsMap();
            }
            return this._engagementStateHandlerList;
        },
        set: function (value) {
            this._engagementStateHandlerList = value;
        },
        enumerable: true,
        configurable: true
    });
    SlotGameController.prototype.addEventListeners = function () {
        _super.prototype.addEventListeners.call(this);
        GlobalDispatcher_1.GlobalDispatcher.addListener(this, SlotEvent_1.SlotEvent.UPDATE_RNG_TOOL_SPIN_DATA, this.setRngToolSpinData);
        GlobalDispatcher_1.GlobalDispatcher.addListener(this, ForcingSpinController_1.ForcingSpinController.FORCE_SPIN_RESULTS, this.forceSpin);
        GlobalDispatcher_1.GlobalDispatcher.addListener(this, SlotFreeSpinsController_1.SlotFreeSpinsController.FREE_SPINS_FINISH, this.freeSpinsFinish);
        GlobalDispatcher_1.GlobalDispatcher.addListener(this, SlotFreeSpinsController_1.SlotFreeSpinsController.PICK_SELECT_EVENT, this.pickGameSelect);
        GlobalDispatcher_1.GlobalDispatcher.addListener(this, SlotEvent_1.SlotEvent.SHOW_DEMO_SCREEN_UI, this.onOpenDemoPanel);
        GlobalDispatcher_1.GlobalDispatcher.addListener(this, SlotEvent_1.SlotEvent.HISTORY_SUMMARY, this.getHistorySummary);
        GlobalDispatcher_1.GlobalDispatcher.addListener(this, SlotEvent_1.SlotEvent.HISTORY_DETAIL, this.getHistoryDetail);
        GlobalDispatcher_1.GlobalDispatcher.addListener(this, SlotEvent_1.SlotEvent.RESULT_HISTORY_SUMMARY, this.getResultHistorySummary);
        GlobalDispatcher_1.GlobalDispatcher.addListener(this, SlotEvent_1.SlotEvent.RESULT_HISTORY_DETAIL, this.getResultHistoryDetail);
        GlobalDispatcher_1.GlobalDispatcher.addListener(this, SlotEvent_1.SlotEvent.STOP_SPIN, this.stopSpin);
        GlobalDispatcher_1.GlobalDispatcher.addListener(this, CoreEvent_1.CoreEvent.ON_CLOSE_ERROR_DIALOG, this.restoreFromSpinning);
        GlobalDispatcher_1.GlobalDispatcher.addListener(this, SlotGameController_1.REGISTER_STATE_HANDLER, this.addStateHandler);
        GlobalDispatcher_1.GlobalDispatcher.addListener(this, SlotEvent_1.SlotEvent.RESPIN_REELS, this.freeRespinReels);
    };
    SlotGameController.prototype.addStateHandler = function (message) {
        this.engagementStateHandlerList.set(message.data.engagement, message.data.stateHandler);
    };
    SlotGameController.prototype.restoreFromSpinning = function () {
        var scenario;
        if (this.currentStateName == this.stateNames.spinning) {
            scenario = this.scenarioManager.getScenario(this.scenarioNames.baseSpinStop);
            scenario.addScenario(this.scenarioManager.getScenario(this.scenarioNames.gameIdle));
            this.stateMachine.pushStates(scenario.getStates());
            this.stateMachine.skipState(this.currentStateName);
        }
        else {
            scenario = this.scenarioManager.getScenario(this.scenarioNames.gameIdle);
            this.stateMachine.pushStates(scenario.getStates());
            this.stateMachine.skipState(this.currentStateName);
        }
    };
    SlotGameController.prototype.gambleChoice = function (data) {
        this.server.send(SlotHttpFormatter_1.SlotHttpFormatter.GAMBLE_CHOICE, data);
    };
    SlotGameController.prototype.freeSpinsFinish = function (e) {
        this.stateMachine.pushStates(this.scenarioManager.getScenario(this.scenarioNames.freeSpinsFinish).getStates());
    };
    SlotGameController.prototype.pickGameSelect = function (e) {
        this.server.send(SlotHttpFormatter_1.SlotHttpFormatter.RUN_PICK_FEATURE, e.data);
    };
    SlotGameController.prototype.action_freeSpin = function (e) {
        this.server.send(SlotHttpFormatter_1.SlotHttpFormatter.RUN_FREE_SPIN_FEATURE, this.getRngToolExpectedResult());
    };
    SlotGameController.prototype.action_skipLineWin = function (e) {
        this.stateMachine.skipState(this.stateNames.freeSpinsShowWinning);
    };
    SlotGameController.prototype.setRngToolSpinData = function (e) {
        this.rngToolSpinResultQueue = e.data;
    };
    SlotGameController.prototype.forceSpin = function (e) {
        this.startSpin();
        this.server.send(SlotHttpFormatter_1.SlotHttpFormatter.FORCE_SPIN, e.data);
    };
    SlotGameController.prototype.action_payout = function (data) {
        this.server.send(SlotHttpFormatter_1.SlotHttpFormatter.PAYOUT, data);
    };
    SlotGameController.prototype.action_spin = function () {
        var _this = this;
        this.startSpin();
        this.readyToSpin().then(function () {
            // set next spin result
            _this.server.send(SlotHttpFormatter_1.SlotHttpFormatter.SPIN, _this.getRngToolExpectedResult());
            _this.resolveToSpin = undefined;
        });
    };
    SlotGameController.prototype.getRngToolExpectedResult = function () {
        var expectedResult = undefined;
        if (this.rngToolSpinResultQueue && this.rngToolSpinResultQueue.length > 0) {
            expectedResult = this.rngToolSpinResultQueue.shift();
        }
        return expectedResult;
    };
    SlotGameController.prototype.action_autoSpin = function (data) {
        this.startAutoSpin(data);
    };
    SlotGameController.prototype.startAutoSpin = function (data) {
        var scenario = this.scenarioManager.getScenario(this.scenarioNames.startAutoSpin);
        scenario.setStateData(this.stateNames.transitionToAutoSpin, data);
        this.stateMachine.pushStates(scenario.getStates(), true);
    };
    SlotGameController.prototype.startSpin = function () {
        this.stateMachine.pushStates(this.scenarioManager.getScenario(this.scenarioNames.startSpin).getStates(), true);
    };
    SlotGameController.prototype.freeRespinReels = function (e) {
        this.server.send(SlotHttpFormatter_1.SlotHttpFormatter.FREE_RESPIN_REELS, this.getRngToolExpectedResult());
    };
    SlotGameController.prototype.action_startGamble = function () {
        this.server.send(SlotHttpFormatter_1.SlotHttpFormatter.START_GAMBLE);
    };
    SlotGameController.prototype.action_stopSpin = function () {
        this.stopSpin();
    };
    SlotGameController.prototype.stopSpin = function () {
        if (this.currentStateName === this.stateNames.spinning || this.currentStateName === this.stateNames.spinStop) {
            this.stateMachine.skipState(this.currentStateName);
        }
    };
    SlotGameController.prototype.action_freeSpinStop = function () {
        var avaliableStates = [
            this.stateNames.freeSpinsAllLineWin,
            this.stateNames.freeSpinsShowWinning,
            this.stateNames.freeSpinsStop
        ];
        if (avaliableStates.indexOf(this.currentStateName) !== -1) {
            this.stateMachine.skipState(this.currentStateName);
        }
    };
    SlotGameController.prototype.action_startJackpot = function () {
        //console.error( 'action_startJackpot' );
        this.stateMachine.pushStates(this.scenarioManager.getScenario(this.scenarioNames.startJackpotFeature).getStates());
        this.server.send(SlotHttpFormatter_1.SlotHttpFormatter.RUN_JACKPOT_FEATURE);
    };
    SlotGameController.prototype.action_takeWin = function () {
        this.server.send(SlotHttpFormatter_1.SlotHttpFormatter.TAKE_WIN);
    };
    SlotGameController.prototype.onServerResponse = function (scenario) {
        if (scenario == null) {
            return;
        }
        if (scenario.name === this.scenarioNames.gameInit) {
            this.stateMachine.isPause = false;
        }
        // if reels are spinning we want to notify Buttons controller that
        // we can show Stop button
        if (this.currentStateName == this.stateNames.spinning) {
            GlobalDispatcher_1.GlobalDispatcher.dispatchIntoExpectedState(SlotEvent_1.SlotEvent.GAME_READY_FOR_STOP, this.stateNames.spinning);
        }
        _super.prototype.onServerResponse.call(this, scenario);
    };
    SlotGameController.prototype.getHistorySummary = function (request) {
        this.send(SlotHttpFormatter_1.SlotHttpFormatter.HISTORY_SUMMARY, request.data).then(function (response) {
            GlobalDispatcher_1.GlobalDispatcher.dispatchIntoAllStates(SlotEvent_1.SlotEvent.RECV_HISTORY_SUMMARY, response);
        });
    };
    SlotGameController.prototype.getHistoryDetail = function (request) {
        this.send(SlotHttpFormatter_1.SlotHttpFormatter.HISTORY_DETAIL, request.data).then(function (response) {
            GlobalDispatcher_1.GlobalDispatcher.dispatchIntoAllStates(SlotEvent_1.SlotEvent.RECV_HISTORY_DETAIL, response);
        });
    };
    SlotGameController.prototype.getResultHistorySummary = function (request) {
        this.send(SlotHttpFormatter_1.SlotHttpFormatter.RESULT_HISTORY_SUMMARY, request.data).then(function (response) {
            GlobalDispatcher_1.GlobalDispatcher.dispatchIntoAllStates(SlotEvent_1.SlotEvent.RECV_RESULT_HISTORY_SUMMARY, response);
        });
    };
    SlotGameController.prototype.getResultHistoryDetail = function (request) {
        this.send(SlotHttpFormatter_1.SlotHttpFormatter.RESULT_HISTORY_DETAIL, request.data).then(function (response) {
            GlobalDispatcher_1.GlobalDispatcher.dispatchIntoAllStates(SlotEvent_1.SlotEvent.RECV_RESULT_HISTORY_DETAIL, response);
        });
    };
    SlotGameController.prototype.featureSpin = function (engagement, messageType, data, isFreeGame) {
        var _this = this;
        if (this.engagementStateHandlerList.has(engagement)) {
            this.engagementStateHandlerList.get(engagement).updateStateForfeatureSpin(this.stateMachine, this.currentStateName, data);
        }
        var expectedResult = this.getRngToolExpectedResult();
        if (expectedResult) {
            data = Helper_1.Helper.mergeTwoObjects(data, expectedResult);
        }
        if (isFreeGame) {
            this.server.send(messageType, data);
        }
        else {
            this.readyToSpin().then(function () {
                _this.server.send(messageType, data);
                _this.resolveToSpin = undefined;
            });
        }
    };
    SlotGameController.prototype.readyToSpin = function () {
        return __awaiter(this, void 0, Promise, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve) {
                        if (_this._currentStateName === _this.stateNames.spinning) {
                            resolve();
                        }
                        else {
                            _this.resolveToSpin = resolve;
                        }
                    })];
            });
        });
    };
    SlotGameController.prototype.onStateIsChanged = function (stateName, stateData) {
        _super.prototype.onStateIsChanged.call(this, stateName, stateData);
        switch (stateName) {
            case this.stateNames.spinning:
                this.bankService.win = 0;
                if (this.resolveToSpin) {
                    this.resolveToSpin();
                }
                break;
            case this.stateNames.transitionToFreeSpins:
                this.bankService.win = 0;
                break;
        }
    };
    SlotGameController.prototype.onOpenDemoPanel = function () {
        this.handleButtonAction('action_showDemoPanel');
    };
    SlotGameController.prototype.isTakeWinEnable = function (action) {
        var avaliableStates = [
            this.stateNames.showWinning,
            this.stateNames.showWinningLoop,
            this.stateNames.allLineWin
        ];
        var avaliableTakewinActions = [
            'action_showBetOptions',
            'action_showAutoPlayPanel',
            'action_showMenuOptions',
            'action_betMax',
            'action_showDemoPanel',
            'action_betIncrease',
            'action_betDecrease'
        ];
        return avaliableTakewinActions.indexOf(action) !== -1 && avaliableStates.indexOf(this.currentStateName) !== -1;
    };
    SlotGameController.prototype.handleButtonAction = function (action, data) {
        // takewin: click in win display states, switch to baseGameIdle state.
        if (this.isTakeWinEnable(action)) {
            this.stateMachine.pushStates(this.scenarioManager.getScenario(this.scenarioNames.gameIdle).getStates(), true);
        }
        _super.prototype.handleButtonAction.call(this, action, data);
    };
    var SlotGameController_1, _a, _b, _c, _d;
    SlotGameController.REGISTER_STATE_HANDLER = 'REGISTER_STATE_HANDLER';
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof SlotScenarioManager_1.SlotScenarioManager !== "undefined" && SlotScenarioManager_1.SlotScenarioManager) === "function" && _a || Object)
    ], SlotGameController.prototype, "scenarioManager", void 0);
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_b = typeof SlotScenarioNames_1.SlotScenarioNames !== "undefined" && SlotScenarioNames_1.SlotScenarioNames) === "function" && _b || Object)
    ], SlotGameController.prototype, "scenarioNames", void 0);
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_c = typeof SlotStates_1.SlotStates !== "undefined" && SlotStates_1.SlotStates) === "function" && _c || Object)
    ], SlotGameController.prototype, "stateNames", void 0);
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_d = typeof SlotBankService_1.SlotBankService !== "undefined" && SlotBankService_1.SlotBankService) === "function" && _d || Object)
    ], SlotGameController.prototype, "bankService", void 0);
    SlotGameController = SlotGameController_1 = __decorate([
        es5_1.Singleton
    ], SlotGameController);
    return SlotGameController;
}(GameController_1.GameController));
exports.SlotGameController = SlotGameController;


/***/ }),
/* 734 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var pixi_js_1 = __webpack_require__(4);
var MiniSignal = __webpack_require__(3);
var Actions_1 = __webpack_require__(22);
var CompView_1 = __webpack_require__(34);
var Viewport_1 = __webpack_require__(6);
var Button_1 = __webpack_require__(19);
var TextButton_1 = __webpack_require__(154);
var WebTextField_1 = __webpack_require__(35);
var ForcingSpinController_1 = __webpack_require__(153);
var ForcingSpinView = /** @class */ (function (_super) {
    __extends(ForcingSpinView, _super);
    function ForcingSpinView() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.clickSignal = new MiniSignal();
        _this.hidePopupSignal = new MiniSignal();
        _this.forcingSpinButtonAction = '';
        _this.showDemoPanelstate = true;
        return _this;
    }
    ForcingSpinView.prototype.createElements = function (config) {
        this.config = config;
        this.forcingSpinButtonAction = Actions_1.Actions.CLICK_ACTION_PREFIX + ForcingSpinController_1.DemoActions.SHOW_DEMO_PANEL;
        this.background = this.getFillBg();
        this.background.visible = false;
        this.mainContainer.addChildAt(this.background, 0);
        this.createSelectPanel(config);
        this.addCloseButton(config.closeButton);
        this.addTitle(config.title);
        this.setDemoPanelVisible(false);
    };
    ForcingSpinView.prototype.setDemoPanelVisible = function (show) {
        this.mainContainer.visible = true;
        this.mainContainer.children.forEach(function (element) {
            element.visible = show;
        });
    };
    ForcingSpinView.prototype.addTitle = function (data) {
        this.title = new WebTextField_1.WebTextField(data);
        this.mainContainer.addChild(this.title);
    };
    ForcingSpinView.prototype.addCloseButton = function (data) {
        this.closeButton = new Button_1.Button(data);
        this.closeButton.anchor = new pixi_js_1.Point(0.5, 0.5);
        this.closeButton.elementSignal.add(this.hidePopup.bind(this));
        this.addChild(this.closeButton);
    };
    ForcingSpinView.prototype.createSelectPanel = function (config) {
        var selectorButtonConfig = config.selectorButtonConfig;
        var defaultButtonConfig = config.selectorButtonConfig.selectorButton;
        var selectorKeys = config.selectorData.keys();
        var xNum = 0;
        var yNum = 0;
        for (var index = 0; index < selectorKeys.length; index++) {
            var name = selectorKeys[index];
            var buttonConfig = defaultButtonConfig;
            buttonConfig.action = name;
            buttonConfig.text.name = name;
            buttonConfig.text.key = name;
            buttonConfig.scale = new pixi_js_1.Point(selectorButtonConfig.scaleX, selectorButtonConfig.scaleY);
            var posX = selectorButtonConfig.startX + selectorButtonConfig.widthX * xNum;
            var posY = selectorButtonConfig.startY + selectorButtonConfig.heightY * yNum;
            buttonConfig.position.x = posX;
            buttonConfig.position.y = posY;
            this.addDemeButton(buttonConfig);
            xNum++;
            if (xNum % selectorButtonConfig.buttonOffset == 0) {
                yNum++;
                xNum = 0;
            }
        }
    };
    ForcingSpinView.prototype.addDemeButton = function (data) {
        var button = new TextButton_1.TextButton(data);
        button.anchor = new pixi_js_1.Point(0.5, 0.5);
        button.interactive = !false;
        button.elementSignal.add(this.onClickHandler.bind(this));
        this.mainContainer.addChild(button);
    };
    ForcingSpinView.prototype.resetSelectorButtonsPosition = function () {
        var _this = this;
        var xNum = 0;
        var yNum = 0;
        var width = this.config.selectorButtonConfig.widthX;
        var height = this.config.selectorButtonConfig.heightY;
        var offset = this.config.selectorButtonConfig.buttonOffset;
        var startX = (this.viewport.width / 2) - (offset / 2) * width + width / 2;
        var startY = (this.viewport.height / 2) - (this.config.selectorData.size / offset / 2 * height);
        this.mainContainer.children.forEach(function (element) {
            if (element.name == _this.config.selectorButtonConfig.selectorButton.name) {
                element.position.x = startX + width * xNum;
                element.position.y = startY + height * yNum;
                xNum++;
                if (xNum % offset == 0) {
                    yNum++;
                    xNum = 0;
                }
            }
        });
    };
    ForcingSpinView.prototype.onClickHandler = function (buttonData, data) {
        this.clickSignal.dispatch(buttonData.action, data);
    };
    ForcingSpinView.prototype.getFillBg = function () {
        var leftTopPoint = this.viewport.getAlignedPoint(Viewport_1.ViewportAlign.LEFT_TOP);
        var g = new pixi_js_1.Graphics();
        g.beginFill(0, 0.8);
        g.drawRect(leftTopPoint.x, leftTopPoint.y, this.viewport.width, this.viewport.height);
        g.endFill();
        return g.clone();
    };
    ForcingSpinView.prototype.layoutElements = function () {
        _super.prototype.layoutElements.call(this);
        this.resetSelectorButtonsPosition();
        this.background.width = this.viewport.width;
        this.background.height = this.viewport.height;
    };
    ForcingSpinView.prototype.showDemoPanel = function () {
        this.showDemoPanelstate = false;
        this.background.visible = true;
        this.setDemoPanelVisible(true);
        this.forcingSpinButtonAction = Actions_1.Actions.CLICK_ACTION_PREFIX + ForcingSpinController_1.DemoActions.HIDE_DEMO_PANEL;
    };
    ForcingSpinView.prototype.hideDemoPanel = function () {
        this.showDemoPanelstate = true;
        this.background.visible = false;
        this.setDemoPanelVisible(false);
        this.forcingSpinButtonAction = Actions_1.Actions.CLICK_ACTION_PREFIX + ForcingSpinController_1.DemoActions.SHOW_DEMO_PANEL;
    };
    ForcingSpinView.prototype.hidePopup = function () {
        this.hideDemoPanel();
        this.hidePopupSignal.dispatch();
    };
    ForcingSpinView.prototype.setInteractive = function (value, inValidState) {
        if (!false && value && inValidState) {
            this.mainContainer.interactive = true;
        }
        else {
            this.mainContainer.interactive = false;
        }
    };
    return ForcingSpinView;
}(CompView_1.CompView));
exports.ForcingSpinView = ForcingSpinView;


/***/ }),
/* 735 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var MiniSignal = __webpack_require__(3);
var TsMap_1 = __webpack_require__(2);
var ReelsConfig_1 = __webpack_require__(52);
var ReelStripModel_1 = __webpack_require__(385);
var IReelsConfig_1 = __webpack_require__(66);
var ReelModel = /** @class */ (function () {
    function ReelModel() {
        this.countTopExtraSymbol = 1;
        this.countBottomExtraSymbol = 1;
        this._reelStripModelsMap = new TsMap_1.TsMap();
        this._isLegalResponse = true;
        this._isFastStopPending = false;
        this.scattersDropped = [];
        this.isShaking = false;
        this.onTweenSymbolComplete = new MiniSignal();
        this.onAllReelStopped = new MiniSignal();
        this.onFastStopReels = new MiniSignal();
        this.currentReelSetIndex = ReelsConfig_1.ReelSet.BASE;
        this.currentReelIndex = 0;
    }
    Object.defineProperty(ReelModel.prototype, "generalSymbolConfig", {
        get: function () {
            return this.symbolDefinition.generalSymbol;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReelModel.prototype, "reelStripModelsMap", {
        get: function () {
            return this._reelStripModelsMap;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReelModel.prototype, "currentReelStrips", {
        get: function () {
            return this.reelStripModelsMap.get(this.currentReelSetIndex);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReelModel.prototype, "currentReelSetIndex", {
        get: function () {
            return this._currentReelSetIndex;
        },
        set: function (value) {
            this._currentReelSetIndex = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReelModel.prototype, "currentReelIndex", {
        get: function () {
            return this._currentReelIndex;
        },
        set: function (value) {
            this._currentReelIndex = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReelModel.prototype, "isLegalResponse", {
        get: function () {
            return this._isLegalResponse;
        },
        set: function (value) {
            this._isLegalResponse = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReelModel.prototype, "isFastStopPending", {
        get: function () {
            return this._isFastStopPending;
        },
        set: function (value) {
            if (value && this.onFastStopReels) {
                this.onFastStopReels.dispatch();
            }
            this._isFastStopPending = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReelModel.prototype, "featureData", {
        get: function () {
            return this._featureData;
        },
        set: function (value) {
            this._featureData = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReelModel.prototype, "lastSymbolsOutcome", {
        get: function () {
            return this._lastSymbolsOutcome;
        },
        set: function (value) {
            this._lastSymbolsOutcome = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReelModel.prototype, "currentSymbolsOutcome", {
        get: function () {
            return this._currentSymbolsOutcome;
        },
        set: function (value) {
            this._currentSymbolsOutcome = value;
        },
        enumerable: true,
        configurable: true
    });
    ReelModel.prototype.initialize = function (config) {
        this.countTopExtraSymbol = (config.countTopExtraSymbol !== undefined) ? config.countTopExtraSymbol : 1;
        this.countBottomExtraSymbol = (config.countBottomExtraSymbol !== undefined) ? config.countBottomExtraSymbol : 1;
        this.symbolDefinition = config.symbolDefinition;
    };
    ReelModel.prototype.setReelStripModel = function (reelSetIndex, reelStripModels) {
        this.reelStripModelsMap.set(reelSetIndex, reelStripModels);
    };
    ReelModel.prototype.nextSymbol = function (reelId) {
        return this.currentReelStrips[reelId].nextSymbol();
    };
    ReelModel.prototype.getSymbolHeightBySymbolName = function (name) {
        return this.currentReelStrips[0].getSymbolHeightByName(name);
    };
    ReelModel.prototype.shouldMoveLastSymbolToTop = function (reelId, spinDirection) {
        var reelSymbols = this.currentReelStrips[reelId].reelSymbols;
        var symbol = reelSymbols[(spinDirection == IReelsConfig_1.SpinDirection.SpinDown) ? reelSymbols.length - 1 : 0];
        if (spinDirection == IReelsConfig_1.SpinDirection.SpinDown && symbol.posY >= this.currentReelStrips[reelId].lowerBound) {
            return true;
        }
        else if (spinDirection == IReelsConfig_1.SpinDirection.SpinUp && symbol.posY <= this.currentReelStrips[reelId].upperBoundOfTopExtraY) {
            return true;
        }
        else {
            return false;
        }
    };
    ReelModel.prototype.createNextSymbol = function (reelId, spinDirection, symbolName) {
        var nextSymbolName = symbolName || this.nextSymbol(reelId);
        var data;
        if (spinDirection == IReelsConfig_1.SpinDirection.SpinDown) {
            data = new ReelStripModel_1.SymbolData(nextSymbolName, this.currentReelStrips[reelId].reelSymbols[0].posY - this.getSymbolHeightBySymbolName(nextSymbolName));
            this.currentReelStrips[reelId].reelSymbols.pop();
            this.currentReelStrips[reelId].reelSymbols.unshift(data);
        }
        else {
            var posY = this.currentReelStrips[reelId].reelSymbols[this.currentReelStrips[reelId].reelSymbols.length - 1].posY;
            data = new ReelStripModel_1.SymbolData(nextSymbolName, posY + this.getSymbolHeightBySymbolName(nextSymbolName));
            this.currentReelStrips[reelId].reelSymbols.shift();
            this.currentReelStrips[reelId].reelSymbols.push(data);
        }
        return data;
    };
    ReelModel.prototype.getReelSymbols = function (reelId) {
        return this.currentReelStrips[reelId].reelSymbols.length;
    };
    ReelModel.prototype.getSymbolDataByIndex = function (reelId, symbolIndex) {
        return this.currentReelStrips[reelId].reelSymbols[symbolIndex];
    };
    ReelModel.prototype.reset = function () {
        this.isFastStopPending = false;
        this.currentReelStrips.forEach(function (reelStripModel, index) {
            reelStripModel.reset();
        });
        this.scattersDropped = [];
    };
    ReelModel.prototype.setSymbolOutcome = function (symbolOutcome) {
        this.currentReelStrips.forEach(function (reelStripModel, index) {
            reelStripModel.symbolsOutcome = symbolOutcome[index];
        });
    };
    ReelModel.prototype.setScatterDropped = function (symbolOutcome) {
        var _this = this;
        symbolOutcome.forEach(function (reel, reelIndex) {
            reel.forEach(function (symbol, symbolIndex) {
                if (symbol === 'SCATTER') {
                    var position = {
                        reelIndex: reelIndex,
                        symbolIndex: symbolIndex
                    };
                    _this.scattersDropped.push(position);
                }
            });
        });
    };
    return ReelModel;
}());
exports.ReelModel = ReelModel;


/***/ }),
/* 736 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var MiniSignal = __webpack_require__(3);
var TsMap_1 = __webpack_require__(2);
/**
 * A class that combines required reel actions with corresponding states.
 *
 * @export
 * @class ReelActionHandler
 */
var ReelActionHandler = /** @class */ (function () {
    function ReelActionHandler() {
        this._actionMap = new TsMap_1.TsMap();
        this.actionPromise = Promise.resolve();
        this.onStateChanged = new MiniSignal();
    }
    ReelActionHandler.prototype.initialize = function (reelModel, view, config) {
        var _this = this;
        if (config.startSpin) {
            this._startSpin = config.startSpin.model;
            this._actionMap.set(this._startSpin.key, this._startSpin);
            this._startSpin.initialize(reelModel, view, this.onStateChanged, config.startSpin.config);
        }
        if (config.spinning) {
            this._spinning = config.spinning.model;
            this._actionMap.set(this._spinning.key, this._spinning);
            this._spinning.initialize(reelModel, view, this.onStateChanged, config.spinning.config);
        }
        if (config.spinStop) {
            this._spinStop = config.spinStop.model;
            this._actionMap.set(this._spinStop.key, this._spinStop);
            this._spinStop.initialize(reelModel, view, this.onStateChanged, config.spinStop.config);
        }
        if (config.allReelStopped) {
            this._allReelStopped = config.allReelStopped.model;
            this._actionMap.set(this._allReelStopped.key, this._allReelStopped);
            this._allReelStopped.initialize(reelModel, view, this.onStateChanged, config.allReelStopped.config);
        }
        if (config.featureAction) {
            this._featureAction = config.featureAction.model;
            this._actionMap.set(this._featureAction.key, this._featureAction);
            this._featureAction.initialize(reelModel, view, this.onStateChanged, config.featureAction.config);
        }
        if (config.customActionMap) {
            config.customActionMap.forEach(function (value, key) {
                _this._actionMap.set(key, value.model);
                value.model.initialize(reelModel, view, _this.onStateChanged, value.config);
            });
        }
    };
    ReelActionHandler.prototype.setState = function (state) {
        if (this.currentStateName !== state.stateName) {
            this.currentStateName = state.stateName;
            this.onStateChanged.dispatch(this.currentStateName);
        }
    };
    ReelActionHandler.prototype.startSpin = function (data) {
        this.actionPromise = this._startSpin.run(data);
        return this.actionPromise;
    };
    ReelActionHandler.prototype.spinning = function (data) {
        var _this = this;
        this.actionPromise = this.actionPromise.then(function () {
            return _this._spinning.run(data);
        });
        return this.actionPromise;
    };
    ReelActionHandler.prototype.spinStop = function (data) {
        var _this = this;
        this.actionPromise = this.actionPromise.then(function () {
            return _this._spinStop.run(data);
        });
        return this.actionPromise;
    };
    ReelActionHandler.prototype.allReelStopped = function (data) {
        if (!this._allReelStopped) {
            return;
        }
        this._allReelStopped.run(data);
    };
    ReelActionHandler.prototype.featureAction = function (data) {
        var _this = this;
        if (!this._featureAction) {
            return Promise.resolve();
        }
        this.actionPromise = this.actionPromise.then(function () {
            return _this._featureAction.run(data);
        });
        return this.actionPromise;
    };
    /**
     * Trigger features by given action items
     *
     * @param {Array<ReelActionItem>} items
     * @param {boolean} [async=false] run in asynchronous mode. Default value is false.
     * @returns {Promise<any>}
     * @memberof ReelActionHandler
     */
    ReelActionHandler.prototype.triggerActionByKey = function (items, async) {
        var _this = this;
        if (async === void 0) { async = false; }
        if (this._actionMap.size === 0) {
            return;
        }
        this.actionPromise = this.actionPromise.then(function () {
            if (async === true) {
                return Promise.all(items.map(function (item) { return _this._actionMap.get(item.key).run(item.data); }));
            }
            else {
                var actions = items.map(function (item) { return _this._actionMap.get(item.key); });
                return actions.reduce(function (prev, reelActionModel, currentIndex) {
                    return prev.then(function () {
                        return reelActionModel.run(items[currentIndex].data);
                    });
                }, Promise.resolve());
            }
        });
        return this.actionPromise;
    };
    return ReelActionHandler;
}());
exports.ReelActionHandler = ReelActionHandler;


/***/ }),
/* 737 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var pixi_js_1 = __webpack_require__(4);
var Animation_1 = __webpack_require__(26);
var IReelsConfig_1 = __webpack_require__(66);
var Anticipation = /** @class */ (function (_super) {
    __extends(Anticipation, _super);
    function Anticipation() {
        var _this = _super.call(this) || this;
        _this.defaultSpineTransitionTime = 0;
        _this.name = 'AnticipationContainer';
        _this.visible = false;
        _this.anticipationAnimations = new Array();
        return _this;
    }
    Anticipation.prototype.initialize = function (reelsConfig) {
        var _this = this;
        this.reelConfig = reelsConfig;
        this.reelConfig.anticipationData.animations.forEach(function (animation) {
            if (animation.type == IReelsConfig_1.AnticipationAnimationType.SPINE) {
                _this.anticipationAnimations.push(_this.createSpineAnimation(animation));
            }
            else if (animation.type == IReelsConfig_1.AnticipationAnimationType.SEQUENCE) {
                _this.anticipationAnimations.push(_this.createSequenceAnimation(animation.name));
            }
            else {
                _this.anticipationAnimations.push(_this.createParticleAnimation(animation));
            }
        });
    };
    Anticipation.prototype.createSpineAnimation = function (data) {
        var animation = Animation_1.Animation.createSpineAnimation(data.name);
        var totalReels = new Array();
        for (var reelSetIndex in this.reelConfig.reelSet) {
            if (this.reelConfig.reelSet.hasOwnProperty(reelSetIndex)) {
                totalReels.push(this.reelConfig.reelSet[reelSetIndex].length);
            }
        }
        var largestNumReels = Math.max.apply(Math, totalReels);
        for (var i = (1 + this.reelConfig.anticipationData.modelData[0].anticipationSymbolCountTrigger); i < largestNumReels; i++) {
            animation.stateData.setMix(animation.name + '_Reel' + i.toString(), animation.name + '_Reel' + (i + 1).toString(), data.reelTransitionTime ? data.reelTransitionTime : this.defaultSpineTransitionTime);
        }
        animation.skeleton.slots.forEach(function (value, i) {
            animation.slotContainers[i].name = value.data.name;
        });
        this.addChild(animation);
        return animation;
    };
    Anticipation.prototype.createSequenceAnimation = function (name) {
        var animation = Animation_1.Animation.getAnimationByName(name);
        animation.gotoAndStop(0);
        animation.loop = true;
        this.addChild(animation);
        return animation;
    };
    Anticipation.prototype.createParticleAnimation = function (data) {
        var particleResource = PIXI.loader.resources[data.name].data;
        var particleImages = new Array();
        var container = new PIXI.particles.ParticleContainer();
        this.addChild(container);
        data.images.forEach(function (image) {
            particleImages.push(PIXI.Texture.fromImage(image));
        });
        var animation = new pixi_js_1.particles.Emitter(container, particleImages, particleResource);
        animation.emit = false;
        animation.autoUpdate = true;
        return animation;
    };
    Anticipation.prototype.anticipateReel = function (reelView, reelId) {
        var _this = this;
        this.visible = true;
        this.anticipationAnimations.forEach(function (animation) {
            if (_this.isSpineAnimation(animation)) {
                animation.state.setAnimation(0, animation.name + '_Idle', true);
                animation.state.setAnimation(1, animation.name + '_Reel' + (reelId + 1), false); //Need reelID +1 because reelIDs are 0 based and animations are 1 based
            }
            else if (_this.isSequenceAnimation(animation)) {
                animation.position.x = reelView.position.x;
                animation.position.y = reelView.position.y;
                animation.play();
            }
            else {
                animation.parent.x = reelView.position.x;
                animation.parent.y = reelView.position.y;
                animation.emit = true;
            }
        });
    };
    Anticipation.prototype.stopAnticipate = function () {
        var _this = this;
        this.visible = false;
        this.anticipationAnimations.forEach(function (animation) {
            if (_this.isSpineAnimation(animation)) {
                animation.state.setEmptyAnimation(0, 0);
                animation.state.setEmptyAnimation(1, 0);
            }
            else if (_this.isSequenceAnimation(animation)) {
                animation.gotoAndStop(0);
            }
            else {
                animation.emit = false;
            }
        });
    };
    Anticipation.prototype.playAnticipationIntro = function (reelView, reelId) {
        //
    };
    Anticipation.prototype.isSpineAnimation = function (animation) {
        return animation.spineData !== undefined;
    };
    Anticipation.prototype.isSequenceAnimation = function (animation) {
        return animation.playing !== undefined;
    };
    return Anticipation;
}(PIXI.Container));
exports.Anticipation = Anticipation;


/***/ }),
/* 738 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var MiniSignal = __webpack_require__(3);
var AbstractSymbol_1 = __webpack_require__(230);
var SpineAnimation_1 = __webpack_require__(63);
var SpineSymbol = /** @class */ (function (_super) {
    __extends(SpineSymbol, _super);
    function SpineSymbol(config) {
        var _this = _super.call(this) || this;
        _this.symbolName = config.animationName;
        _this._symbolContainer = new SpineAnimation_1.SpineAnimation(config);
        _this.animationCompleteSignal = new MiniSignal();
        return _this;
    }
    Object.defineProperty(SpineSymbol.prototype, "symbolContainer", {
        get: function () {
            return this._symbolContainer;
        },
        enumerable: true,
        configurable: true
    });
    SpineSymbol.prototype.playAnimation = function (type) {
        var _this = this;
        var animationName = this.getAnimationName(type);
        this._symbolContainer.play(0, animationName, false);
        this._symbolContainer.completeSignal.add(function () {
            _this.animationCompleteSignal.dispatch(_this.position, type);
        });
        return true;
    };
    SpineSymbol.prototype.getAnimationName = function (type) {
        return "this.symbolName" + type;
    };
    return SpineSymbol;
}(AbstractSymbol_1.AbstractSymbol));
exports.SpineSymbol = SpineSymbol;


/***/ }),
/* 739 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var MiniSignal = __webpack_require__(3);
var AbstractSymbol_1 = __webpack_require__(230);
var Animation_1 = __webpack_require__(26);
var SpriteSymbol = /** @class */ (function (_super) {
    __extends(SpriteSymbol, _super);
    function SpriteSymbol(name) {
        var _this = _super.call(this) || this;
        _this.symbolName = name;
        _this._symbolContainer = Animation_1.Animation.getAnimationFromPool(name);
        _this._symbolContainer.animationSpeed = _this._symbolContainer.totalFrames / SpriteSymbol.SYMBOL_ANIMATION_FRAME_COUNT;
        _this.animationCompleteSignal = new MiniSignal();
        return _this;
    }
    Object.defineProperty(SpriteSymbol.prototype, "visible", {
        get: function () {
            return this._symbolContainer.visible;
        },
        set: function (value) {
            this._symbolContainer.visible = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SpriteSymbol.prototype, "symbolContainer", {
        get: function () {
            return this._symbolContainer;
        },
        enumerable: true,
        configurable: true
    });
    SpriteSymbol.prototype.playAnimation = function (type) {
        return false;
    };
    SpriteSymbol.SYMBOL_ANIMATION_FRAME_COUNT = 60;
    return SpriteSymbol;
}(AbstractSymbol_1.AbstractSymbol));
exports.SpriteSymbol = SpriteSymbol;


/***/ }),
/* 740 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var SoundConfig_1 = __webpack_require__(55);
var DashboardController_1 = __webpack_require__(741);
var UILocalButtonsController_1 = __webpack_require__(110);
/**
 * Handel all the element behavior for user interface.
 * It has it's own local machine
 */
var UIController = /** @class */ (function (_super) {
    __extends(UIController, _super);
    function UIController() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.STATE_MACHINE_NAME = 'ui_state_machine';
        return _this;
    }
    /**
     * Add components in component list into ui component manager.
     * @param components
     */
    UIController.prototype.createComponentList = function (components) {
        //
    };
    Object.defineProperty(UIController.prototype, "loaderList", {
        get: function () {
            return this.getAssetsList();
        },
        enumerable: true,
        configurable: true
    });
    UIController.prototype.getAssetsList = function () {
        return [{
                assetKey: SoundConfig_1.SoundConfig.buttonClick,
                assetURL: "assets/sound/ui/" + SoundConfig_1.SoundConfig.buttonClick + ".mp3"
            },];
    };
    UIController.prototype.onLocalStateChanged = function (stateName) {
        this.localButtonsController.applyButtonsTemplate(stateName);
    };
    var _a;
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof UILocalButtonsController_1.UILocalButtonsController !== "undefined" && UILocalButtonsController_1.UILocalButtonsController) === "function" && _a || Object)
    ], UIController.prototype, "localButtonsController", void 0);
    return UIController;
}(DashboardController_1.DashboardController));
exports.UIController = UIController;


/***/ }),
/* 741 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var Helper_1 = __webpack_require__(5);
var States_1 = __webpack_require__(74);
var CoreState_1 = __webpack_require__(76);
var GameConfig_1 = __webpack_require__(24);
var ComponentManager_1 = __webpack_require__(376);
var LocalStateMachine_1 = __webpack_require__(742);
var CompController_1 = __webpack_require__(43);
var DashboardController = /** @class */ (function (_super) {
    __extends(DashboardController, _super);
    function DashboardController() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.STATE_MACHINE_NAME = 'dashboard_state_machine';
        return _this;
    }
    /**
     * override for init controller.
     * @param stateData
     */
    DashboardController.prototype.init = function (stateData) {
        this.dashboardComponentManager = new ComponentManager_1.ComponentManager();
        this.createLocalStateMachine(this.dashboardComponentManager);
        this.addComponents();
        this.onStateInit(stateData);
        this.finishStateAction();
    };
    /**
     * Create local state machine.
     * @param componentManager
     */
    DashboardController.prototype.createLocalStateMachine = function (componentManager) {
        if (this.dashboardLocalStateMachine == undefined) {
            this.dashboardComponentManager = componentManager;
            this.dashboardLocalStateMachine = es5_1.Container.get(LocalStateMachine_1.LocalStateMachine);
            this.dashboardLocalStateMachine.initialize(componentManager);
            this.dashboardLocalStateMachine.stateMachineName = this.STATE_MACHINE_NAME;
            this.dashboardLocalStateMachine.stateChangedSignal.add(this.onLocalStateChanged, this);
        }
        else {
            throw 'dashboard stateMachine is already created';
        }
    };
    /**
     * Add components in component list into dashboard component manager.
     */
    DashboardController.prototype.addComponents = function () {
        var _this = this;
        var components = new Array();
        this.createComponentList(components);
        components.forEach(function (component) {
            var comp = es5_1.Container.get(component.class);
            comp.componentID = component.id;
            _this.dashboardComponentManager.addComponent(comp);
        });
    };
    /**
     * Setup component list that need listen by local state machine
     * @param components
     */
    DashboardController.prototype.createComponentList = function (components) {
        //Example:
        // components.push( { id : 'autoPlay', class: SlotAutoPlayController } );
    };
    /**
     * set dashboard local state machine to init state
     * @param stateData
     */
    DashboardController.prototype.onStateInit = function (stateData) {
        this.dashboardLocalStateMachine.setState(new CoreState_1.CoreState(this.stateNames.init, Helper_1.Helper.mergeTwoObjects({}, stateData)));
    };
    DashboardController.prototype.onLocalStateChanged = function (stateName) {
        //
    };
    var _a, _b;
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof GameConfig_1.GameConfig !== "undefined" && GameConfig_1.GameConfig) === "function" && _a || Object)
    ], DashboardController.prototype, "gameConfig", void 0);
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_b = typeof States_1.States !== "undefined" && States_1.States) === "function" && _b || Object)
    ], DashboardController.prototype, "stateNames", void 0);
    return DashboardController;
}(CompController_1.CompController));
exports.DashboardController = DashboardController;


/***/ }),
/* 742 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var MiniSignal = __webpack_require__(3);
/**
 * Local State Machine.
 * Handles states to component manager.
 */
var LocalStateMachine = /** @class */ (function () {
    function LocalStateMachine() {
        this.stateMachineName = 'localStateMachine';
    }
    Object.defineProperty(LocalStateMachine.prototype, "currentState", {
        get: function () {
            return this._currentState;
        },
        enumerable: true,
        configurable: true
    });
    LocalStateMachine.prototype.initialize = function (componentManager) {
        this.componentManager = componentManager;
        this.stateChangedSignal = new MiniSignal();
    };
    /**
     * Set state for all components.
     * @param state
     */
    LocalStateMachine.prototype.setState = function (state) {
        console.log(this.stateMachineName + ' current state - ' + state.stateName);
        if (this._currentState != state) {
            this._currentState = state;
            this.componentManager.setState(state);
            this.stateChangedSignal.dispatch(state.stateName);
        }
        else {
            console.warn('LocalStateMachine setState, try to set same state again, state = ' + state);
        }
    };
    return LocalStateMachine;
}());
exports.LocalStateMachine = LocalStateMachine;


/***/ }),
/* 743 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var pixi_js_1 = __webpack_require__(4);
var es5_1 = __webpack_require__(0);
var NMath_1 = __webpack_require__(65);
var Viewport_1 = __webpack_require__(6);
var SlotCoinParticle = /** @class */ (function (_super) {
    __extends(SlotCoinParticle, _super);
    function SlotCoinParticle(frames, model) {
        var _this = this;
        var textures = new Array();
        for (var _i = 0, frames_1 = frames; _i < frames_1.length; _i++) {
            var frame = frames_1[_i];
            var texture = pixi_js_1.Texture.fromFrame(frame);
            textures.push(texture);
        }
        _this = _super.call(this, textures, true) || this;
        _this.emitterModel = model;
        _this.loop = true;
        _this.anchor.set(0.5, 0.5);
        _this.velocity = new pixi_js_1.Point(0, 0);
        _this._alive = false;
        _this.reset();
        return _this;
    }
    SlotCoinParticle.prototype.update = function (deltaTime) {
        if (!this._alive) {
            return;
        }
        _super.prototype.update.call(this, deltaTime);
        var model = this.emitterModel;
        var scale = this.scale.x;
        var timeStep = model.speedMultiplier * deltaTime / 1000;
        if (scale < model.maximumScale) {
            scale += this.scaleSpeed * timeStep;
            scale = NMath_1.NMath.clamp(scale, 0, model.maximumScale);
            this.scale.set(scale, scale);
        }
        this.angularVelocity += model.angularAcceleration * timeStep;
        this.rotation += this.angularVelocity * timeStep * NMath_1.NMath.sign(this.velocity.x);
        this.x += this.velocity.x * timeStep;
        this.velocity.y += model.gravity * timeStep;
        this.y += this.velocity.y * timeStep;
        this.animationSpeed += model.animationAcceleration * timeStep;
        if (this.velocity.y > 0 && this.y >= this.viewport.height) {
            this.alive = false;
        }
    };
    SlotCoinParticle.prototype.reset = function () {
        var model = this.emitterModel;
        this.visible = false;
        var xOffsetDirection = 1;
        if (NMath_1.NMath.randomInt(0, 10) % 2 == 0) {
            xOffsetDirection = -1;
        }
        var yOffsetDirection = 1;
        if (NMath_1.NMath.randomInt(0, 10) % 2 == 0) {
            yOffsetDirection = -1;
        }
        if (NMath_1.NMath.randomInt(0, 10) % 2 == 0) {
            this.animationSpeed = Math.abs(this.animationSpeed);
        }
        else {
            this.animationSpeed = -Math.abs(this.animationSpeed);
        }
        this.x = model.emitterX + (xOffsetDirection * NMath_1.NMath.randomInt(0, model.xOffsetRange));
        this.y = model.emitterY + (yOffsetDirection * NMath_1.NMath.randomInt(0, model.yOffsetRange));
        this.velocity.x = NMath_1.NMath.randomInt(model.minimumInitialVelocityX, model.maximumInitialVelocityX);
        this.velocity.y = NMath_1.NMath.randomInt(model.minimumInitialVelocityY, model.maximumInitialVelocityY);
        this.angularVelocity = model.angularVelocity;
        this.rotation = NMath_1.NMath.randomInt(0, 360);
        this.scale.set(model.minimumScale, model.minimumScale);
        this.scaleSpeed =
            Math.min(model.maximumScaleSpeed * Math.random() + model.minimumScaleSpeed, model.maximumScaleSpeed);
        this.animationSpeed = model.animationSpeed;
    };
    SlotCoinParticle.prototype.play = function () {
        this.visible = true;
        _super.prototype.play.call(this);
    };
    Object.defineProperty(SlotCoinParticle.prototype, "alive", {
        get: function () {
            return this._alive;
        },
        set: function (value) {
            this._alive = value;
            if (value) {
                this.play();
            }
            else {
                this.reset();
            }
        },
        enumerable: true,
        configurable: true
    });
    var _a;
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof Viewport_1.Viewport !== "undefined" && Viewport_1.Viewport) === "function" && _a || Object)
    ], SlotCoinParticle.prototype, "viewport", void 0);
    return SlotCoinParticle;
}(pixi_js_1.extras.AnimatedSprite));
exports.SlotCoinParticle = SlotCoinParticle;


/***/ }),
/* 744 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var TsMap_1 = __webpack_require__(2);
var GameConfig_1 = __webpack_require__(24);
var NGBNGController_1 = __webpack_require__(90);
var BNGSpin_1 = __webpack_require__(745);
var BNGGameInit_1 = __webpack_require__(751);
var SlotNGHttpFormatter_1 = __webpack_require__(20);
var SlotBNGServerConfig_1 = __webpack_require__(753);
var BNGRunFreeSpinFeature_1 = __webpack_require__(754);
/**
 * integrate with NPS sdk
 */
var SlotNGBNGController = /** @class */ (function (_super) {
    __extends(SlotNGBNGController, _super);
    function SlotNGBNGController() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.isRoundcompleted = true;
        return _this;
    }
    Object.defineProperty(SlotNGBNGController.prototype, "serverConfig", {
        get: function () {
            return this.gameConfig.getConfig(SlotBNGServerConfig_1.SlotBNGServerConfig);
        },
        enumerable: true,
        configurable: true
    });
    SlotNGBNGController.prototype.getSdkAPI = function () {
        var apiMapping = new TsMap_1.TsMap();
        apiMapping.set(SlotNGHttpFormatter_1.SlotNGHttpFormatter.INIT, es5_1.Container.get(BNGGameInit_1.BNGGameInit));
        apiMapping.set(SlotNGHttpFormatter_1.SlotNGHttpFormatter.SPIN, es5_1.Container.get(BNGSpin_1.BNGSpin));
        apiMapping.set(SlotNGHttpFormatter_1.SlotNGHttpFormatter.RUN_FREE_SPIN_FEATURE, es5_1.Container.get(BNGRunFreeSpinFeature_1.BNGRunFreeSpinFeature));
        return apiMapping;
    };
    /**
     * where can I get data from
     * @param data
     */
    SlotNGBNGController.prototype.baseGameIdle = function (data) {
        if (data && data.roundCompleted) {
            this.isRoundcompleted = true;
            this.dispatchRoundComplete();
        }
    };
    SlotNGBNGController.prototype.startSpin = function () {
        if (this.isRoundcompleted) {
            this.isRoundcompleted = false;
            this.dispatchRoundStart();
        }
    };
    /**
     * where can I get data from
     * @param data
     */
    SlotNGBNGController.prototype.allLineWin = function (data) {
        if (data.roundCompleted) {
            this.isRoundcompleted = true;
            this.dispatchRoundComplete();
        }
    };
    SlotNGBNGController.prototype.dispatchRoundStart = function () {
        NGBNGController_1.NGBNGController.postMessage('roundStarted');
    };
    SlotNGBNGController.prototype.dispatchRoundComplete = function () {
        NGBNGController_1.NGBNGController.postMessage('roundFinished');
    };
    var _a;
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof GameConfig_1.GameConfig !== "undefined" && GameConfig_1.GameConfig) === "function" && _a || Object)
    ], SlotNGBNGController.prototype, "gameConfig", void 0);
    return SlotNGBNGController;
}(NGBNGController_1.NGBNGController));
exports.SlotNGBNGController = SlotNGBNGController;


/***/ }),
/* 745 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var BNGEntropyAPI_1 = __webpack_require__(746);
var UrlParameters_1 = __webpack_require__(14);
var HttpTransport_1 = __webpack_require__(30);
var ForceSpinMsgFormatter_1 = __webpack_require__(217);
var BNGSpinRequestMsgFormatter_1 = __webpack_require__(750);
var SpinMsgFormatter_1 = __webpack_require__(116);
var NGBNGController_1 = __webpack_require__(90);
var BNGSpin = /** @class */ (function (_super) {
    __extends(BNGSpin, _super);
    function BNGSpin() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    BNGSpin.prototype.init = function (transport, config) {
        _super.prototype.init.call(this, transport, config);
        this.requestFormatter = (UrlParameters_1.UrlParameters.isRealMode()) ? es5_1.Container.get(BNGSpinRequestMsgFormatter_1.BNGSpinRequestMsgFormatter) : es5_1.Container.get(ForceSpinMsgFormatter_1.ForceSpinMsgFormatter);
        this.responseFormatter = es5_1.Container.get(SpinMsgFormatter_1.SpinMsgFormatter);
    };
    BNGSpin.prototype.encapsulation = function (messageType) {
        return {
            url: this.transport.url + (UrlParameters_1.UrlParameters.isRealMode() ? this.config.path.spin : this.config.devPath.spin),
            name: messageType,
            method: HttpTransport_1.HTTP_METHODS.POST,
            headers: this.transport.getHeaders(),
            content: this.request
        };
    };
    /**
     *
     * @param messageType
     * @param data
     */
    BNGSpin.prototype.send = function (messageType, data) {
        var _this = this;
        return this.generateEntropy()
            .then(function (entropyData) { return _this.getBetSeedData(entropyData); })
            .then(function (makeBetResponse) {
            _this.slotNGModel.makeBetInfo = JSON.parse(makeBetResponse);
            _this.requestFormat(data);
            var apiPackage = _this.encapsulation(messageType);
            return _this.transport.psend(apiPackage);
        })
            .then(function (response) {
            console.log('[TAKE_TURN_RESP]', response);
            _this.responseFormat(response);
            return _this.onResponse();
        })
            .catch(function (error) {
            if (typeof error === 'object') {
                throw new Error("[ERROR] " + JSON.stringify(error));
            }
            else {
                throw new Error(error);
            }
        });
    };
    BNGSpin.prototype.getBetSeedData = function (entropyData) {
        if (NGBNGController_1.NGBNGController.version == 'v1') {
            return this.makeBetTx(entropyData);
        }
        return this.makeSeedTx(entropyData);
    };
    return BNGSpin;
}(BNGEntropyAPI_1.BNGEntropyAPI));
exports.BNGSpin = BNGSpin;


/***/ }),
/* 746 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var MoneyFormatter_1 = __webpack_require__(16);
var NGBNGController_1 = __webpack_require__(90);
var BNGBaseAPI_1 = __webpack_require__(392);
var SlotNPSModel_1 = __webpack_require__(160);
var BNGGenerateEntropy_1 = __webpack_require__(747);
var BNGEntropyAPI = /** @class */ (function (_super) {
    __extends(BNGEntropyAPI, _super);
    function BNGEntropyAPI() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    BNGEntropyAPI.prototype.init = function (transport, config) {
        _super.prototype.init.call(this, transport, config);
        this.generateEntropyAPI = es5_1.Container.get(BNGGenerateEntropy_1.BNGGenerateEntropy);
        this.generateEntropyAPI.init(transport, config);
        NGBNGController_1.NGBNGController.onIframeResponse.add(this.onIframeResponse.bind(this));
    };
    BNGEntropyAPI.prototype.onIframeResponse = function (message) {
        if (message.method !== 'makeBetTx' && message.method !== 'makeSeedTx') {
            return;
        }
        var payload = message.payload;
        if (payload.error && this.reject) {
            this.reject(payload.error);
            this.reject = null;
        }
        else if (this.resolve) {
            this.resolve(payload.result);
            this.resolve = null;
        }
    };
    BNGEntropyAPI.prototype.generateEntropy = function () {
        return this.generateEntropyAPI.send('generate_entropy', null);
    };
    BNGEntropyAPI.prototype.postRequestMessage = function (method, data) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.resolve = resolve;
            _this.reject = reject;
            NGBNGController_1.NGBNGController.postMessage(method, data);
        });
    };
    BNGEntropyAPI.prototype.makeBetTx = function (data) {
        var playerInfo = this.slotNGModel.playerInfo;
        console.log('[BNG_PLAYERINFO]', playerInfo);
        var totalBet = this.moneyFormatter.formatMoney(this.bankService.totalBet, MoneyFormatter_1.NumberDisplayMode.VALUE_WITH_CURRENCY, false, this.slotNGModel.fraction);
        totalBet = totalBet.replace(',', '');
        var requestData = {
            totalBet: totalBet,
            hashedEntropy: data.entropy_hex,
            gameId: this.config.gameCode
        };
        return this.postRequestMessage('makeBetTx', requestData);
    };
    BNGEntropyAPI.prototype.makeSeedTx = function (data) {
        var playerInfo = this.slotNGModel.playerInfo;
        console.log('[BNG_PLAYERINFO]', playerInfo);
        var totalBet = this.moneyFormatter.formatMoney(this.bankService.totalBet, MoneyFormatter_1.NumberDisplayMode.VALUE_WITH_CURRENCY, false, this.slotNGModel.fraction);
        totalBet = totalBet.replace(',', '');
        var requestData = {
            totalBet: totalBet,
            hashedEntropy: data.entropy_hex,
            gameId: this.config.gameCode
        };
        return this.postRequestMessage('makeSeedTx', requestData);
    };
    var _a;
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof SlotNPSModel_1.SlotNPSModel !== "undefined" && SlotNPSModel_1.SlotNPSModel) === "function" && _a || Object)
    ], BNGEntropyAPI.prototype, "slotNGModel", void 0);
    return BNGEntropyAPI;
}(BNGBaseAPI_1.BNGBaseAPI));
exports.BNGEntropyAPI = BNGEntropyAPI;


/***/ }),
/* 747 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var AbstractApi_1 = __webpack_require__(150);
var HttpTransport_1 = __webpack_require__(30);
var BNGGenerateEntropyMsgFormatter_1 = __webpack_require__(748);
var BNGGenerateEntropyRequestMsgFormatter_1 = __webpack_require__(749);
/**
 * generate entropy
 */
var BNGGenerateEntropy = /** @class */ (function (_super) {
    __extends(BNGGenerateEntropy, _super);
    function BNGGenerateEntropy() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    BNGGenerateEntropy.prototype.init = function (transport, config) {
        this.responseFormatter = es5_1.Container.get(BNGGenerateEntropyMsgFormatter_1.BNGGenerateEntropyMsgFormatter);
        this.requestFormatter = es5_1.Container.get(BNGGenerateEntropyRequestMsgFormatter_1.BNGGenerateEntropyRequestMsgFormatter);
        this.config = config;
        this.transport = transport;
    };
    BNGGenerateEntropy.prototype.encapsulation = function (messageType) {
        return {
            url: this.transport.url + this.config.path.generateEntropy,
            name: messageType,
            method: HttpTransport_1.HTTP_METHODS.POST,
            headers: this.transport.getHeaders(),
            content: this.request
        };
    };
    BNGGenerateEntropy.prototype.send = function (messageType, data) {
        var _this = this;
        this.requestFormat(data);
        var apiPackage = this.encapsulation(messageType);
        return this.transport.psend(apiPackage).then(function (response) {
            _this._rawData = response.payload;
            _this.responseFormat(response);
            return Promise.resolve(response.payload);
        });
    };
    return BNGGenerateEntropy;
}(AbstractApi_1.AbstractApi));
exports.BNGGenerateEntropy = BNGGenerateEntropy;


/***/ }),
/* 748 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var BNGGenerateEntropyMsgFormatter = /** @class */ (function () {
    function BNGGenerateEntropyMsgFormatter() {
    }
    BNGGenerateEntropyMsgFormatter.prototype.processIncomingMessage = function (message) {
        //
    };
    return BNGGenerateEntropyMsgFormatter;
}());
exports.BNGGenerateEntropyMsgFormatter = BNGGenerateEntropyMsgFormatter;


/***/ }),
/* 749 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var SlotNGHttpFormatter_1 = __webpack_require__(20);
/**
 * Format login request
 */
var BNGGenerateEntropyRequestMsgFormatter = /** @class */ (function (_super) {
    __extends(BNGGenerateEntropyRequestMsgFormatter, _super);
    function BNGGenerateEntropyRequestMsgFormatter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Builds setting mode message
     * @param data - ignored
     * @returns {any} message object
     */
    BNGGenerateEntropyRequestMsgFormatter.prototype.codeMessage = function (data) {
        return {
            player_id: this.slotNGModel.playerId,
            partner_code: this.slotNGModel.partnerCode,
            game_code: this.config.gameCode,
            action: 'GENERATE_ENTROPY',
            session_token: this.slotNGModel.sessionId,
            state_tag: this.slotNGModel.stateTag
        };
    };
    return BNGGenerateEntropyRequestMsgFormatter;
}(SlotNGHttpFormatter_1.SlotNGHttpFormatter));
exports.BNGGenerateEntropyRequestMsgFormatter = BNGGenerateEntropyRequestMsgFormatter;


/***/ }),
/* 750 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var SlotNPSModel_1 = __webpack_require__(160);
var SpinRequestMsgFormatter_1 = __webpack_require__(118);
/**
 * Format spin request
 */
var BNGSpinRequestMsgFormatter = /** @class */ (function (_super) {
    __extends(BNGSpinRequestMsgFormatter, _super);
    function BNGSpinRequestMsgFormatter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * sends button press emulation package
     * @param data - ignored
     * @returns {any} message object
     */
    BNGSpinRequestMsgFormatter.prototype.codeMessage = function (data) {
        var msg = _super.prototype.codeMessage.call(this, data);
        msg.custom_props = this.slotNPSModel.makeBetInfo;
        console.log('[BNG_Spin REQUEST data]', msg);
        return msg;
    };
    var _a;
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof SlotNPSModel_1.SlotNPSModel !== "undefined" && SlotNPSModel_1.SlotNPSModel) === "function" && _a || Object)
    ], BNGSpinRequestMsgFormatter.prototype, "slotNPSModel", void 0);
    return BNGSpinRequestMsgFormatter;
}(SpinRequestMsgFormatter_1.SpinRequestMsgFormatter));
exports.BNGSpinRequestMsgFormatter = BNGSpinRequestMsgFormatter;


/***/ }),
/* 751 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var ErrorHandleService_1 = __webpack_require__(197);
var NGBNGController_1 = __webpack_require__(90);
var GameInit_1 = __webpack_require__(371);
var SlotNPSModel_1 = __webpack_require__(160);
var GameInitMsgFormatter_1 = __webpack_require__(372);
var BNGGameInitRequestMsgFormatter_1 = __webpack_require__(752);
var ErrorCode_1 = __webpack_require__(370);
var BNGGameInit = /** @class */ (function (_super) {
    __extends(BNGGameInit, _super);
    function BNGGameInit() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    BNGGameInit.prototype.init = function (transport, config) {
        _super.prototype.init.call(this, transport, config);
        this.responseFormatter = es5_1.Container.get(GameInitMsgFormatter_1.GameInitMsgFormatter);
        this.requestFormatter = es5_1.Container.get(BNGGameInitRequestMsgFormatter_1.BNGGameInitRequestMsgFormatter);
        NGBNGController_1.NGBNGController.onIframeResponse.add(this.onIframeResponse.bind(this));
    };
    BNGGameInit.prototype.onIframeResponse = function (message) {
        if (message.method !== 'getPlayerInfo') {
            return;
        }
        var payload = message.payload;
        if (!payload && this.reject) {
            this.reject({ code: ErrorCode_1.ErrorCode.INTERNET_DISCONNECTED, stack: new Error().stack });
            this.reject = null;
            return;
        }
        if (payload.error && this.reject) {
            this.reject(payload.error);
            this.reject = null;
        }
        else if (this.resolve) {
            this.resolve(payload.result);
            this.resolve = null;
        }
    };
    BNGGameInit.prototype.send = function (messageType, data) {
        var _this = this;
        console.log('CALL INIT', this.request);
        return this.getPlayerInfo()
            .then(function (msg) {
            _this.slotNGModel.playerInfo = msg;
            _this.requestFormat(msg);
            var apiPackage = _this.encapsulation(messageType);
            console.log('getPlayerInfo success', _this.request);
            return _this.transport.psend(apiPackage);
        })
            .then(function (sessionLoginResponse) {
            _this._rawData = sessionLoginResponse.payload;
            _this.responseFormat(sessionLoginResponse);
            _this.slotNGModel.fraction = sessionLoginResponse.payload.state.fraction;
            return _this.onResponse();
        })
            .catch(function (msg) {
            return Promise.reject(msg);
        });
    };
    BNGGameInit.prototype.getPlayerInfo = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.resolve = resolve;
            _this.reject = reject;
            NGBNGController_1.NGBNGController.postMessage('getPlayerInfo');
        });
    };
    var _a, _b;
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof ErrorHandleService_1.ErrorHandleService !== "undefined" && ErrorHandleService_1.ErrorHandleService) === "function" && _a || Object)
    ], BNGGameInit.prototype, "errorHandleService", void 0);
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_b = typeof SlotNPSModel_1.SlotNPSModel !== "undefined" && SlotNPSModel_1.SlotNPSModel) === "function" && _b || Object)
    ], BNGGameInit.prototype, "slotNGModel", void 0);
    return BNGGameInit;
}(GameInit_1.GameInit));
exports.BNGGameInit = BNGGameInit;


/***/ }),
/* 752 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Helper_1 = __webpack_require__(5);
var UrlParameters_1 = __webpack_require__(14);
var SlotNGHttpFormatter_1 = __webpack_require__(20);
/**
 * Format login request
 */
var BNGGameInitRequestMsgFormatter = /** @class */ (function (_super) {
    __extends(BNGGameInitRequestMsgFormatter, _super);
    function BNGGameInitRequestMsgFormatter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Builds setting mode message
     * @param data - ignored
     * @returns {any} message object
     */
    BNGGameInitRequestMsgFormatter.prototype.codeMessage = function (data) {
        var requestPayload = {};
        requestPayload.game_code = this.config.gameCode;
        requestPayload.player_id = data.playerId;
        requestPayload.player_token = UrlParameters_1.UrlParameters.sessionToken;
        requestPayload.device = Helper_1.Helper.getDeviceInfo().toLocaleUpperCase();
        return requestPayload;
    };
    return BNGGameInitRequestMsgFormatter;
}(SlotNGHttpFormatter_1.SlotNGHttpFormatter));
exports.BNGGameInitRequestMsgFormatter = BNGGameInitRequestMsgFormatter;


/***/ }),
/* 753 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var SlotNGServerConfig_1 = __webpack_require__(147);
var SlotBNGServerConfig = /** @class */ (function (_super) {
    __extends(SlotBNGServerConfig, _super);
    function SlotBNGServerConfig() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.devPath = {
            init: '/nps/sessions/',
            generateEntropy: '/nps/take-turn',
            spin: '/nps/take-turn',
            historySummaries: '/api/slot/partnercode/{partner_code}/playerid/{player_id}',
            historyDetail: '/api/slot/roundid/{round_id}'
        };
        _this.path = {
            init: '/nps/sessions/',
            generateEntropy: '/nps/take-turn',
            spin: '/nps/take-turn',
            historySummaries: '/api/slot/partnercode/{partner_code}/playerid/{player_id}',
            historyDetail: '/api/slot/roundid/{round_id}'
        };
        return _this;
    }
    return SlotBNGServerConfig;
}(SlotNGServerConfig_1.SlotNGServerConfig));
exports.SlotBNGServerConfig = SlotBNGServerConfig;


/***/ }),
/* 754 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var UrlParameters_1 = __webpack_require__(14);
var HttpTransport_1 = __webpack_require__(30);
var BNGBaseAPI_1 = __webpack_require__(392);
var RunFeaturesMsgFormatter_1 = __webpack_require__(151);
var FreeSpinFeatureRequestMsgFormatter_1 = __webpack_require__(375);
/**
 * run free spin api
 */
var BNGRunFreeSpinFeature = /** @class */ (function (_super) {
    __extends(BNGRunFreeSpinFeature, _super);
    function BNGRunFreeSpinFeature() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    BNGRunFreeSpinFeature.prototype.init = function (transport, config) {
        _super.prototype.init.call(this, transport, config);
        this.responseFormatter = es5_1.Container.get(RunFeaturesMsgFormatter_1.RunFeaturesMsgFormatter);
        this.requestFormatter = es5_1.Container.get(FreeSpinFeatureRequestMsgFormatter_1.FreeSpinFeatureRequestMsgFormatter);
    };
    BNGRunFreeSpinFeature.prototype.encapsulation = function (messageType) {
        return {
            url: this.transport.url + (UrlParameters_1.UrlParameters.isRealMode() ? this.config.path.spin : this.config.devPath.spin),
            name: messageType,
            method: HttpTransport_1.HTTP_METHODS.POST,
            headers: this.transport.getHeaders(),
            content: this.request
        };
    };
    BNGRunFreeSpinFeature.prototype.send = function (messageType, data) {
        var _this = this;
        this.requestFormat(data);
        var apiPackage = this.encapsulation(messageType);
        return this.transport.psend(apiPackage)
            .then(function (response) {
            _this.responseFormat(response);
            return _this.onResponse();
        });
    };
    return BNGRunFreeSpinFeature;
}(BNGBaseAPI_1.BNGBaseAPI));
exports.BNGRunFreeSpinFeature = BNGRunFreeSpinFeature;


/***/ }),
/* 755 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var SlotButtonId_1 = __webpack_require__(756);
var TsMap_1 = __webpack_require__(2);
var SlotStates_1 = __webpack_require__(31);
var ButtonsStateSet_1 = __webpack_require__(75);
/**
 * Buttons State Class
 * Set state for the buttons
 */
var SlotButtonsStateSet = /** @class */ (function (_super) {
    __extends(SlotButtonsStateSet, _super);
    function SlotButtonsStateSet() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * set states for the buttons
     */
    SlotButtonsStateSet.prototype.initStates = function () {
        _super.prototype.initStates.call(this);
        this.buttonStates.set(this.stateNames.spinStop, this.spinStop());
        this.buttonStates.set(this.stateNames.skip_spinStop, this.skip_spinStop());
        this.buttonStates.set(this.stateNames.freeSpinsStop, this.freeSpinsStop());
        this.buttonStates.set(this.stateNames.skip_freeSpinsStop, this.skip_freeSpinsStop());
        this.buttonStates.set(this.stateNames.freeRespinsStop, this.freeSpinsStop());
        this.buttonStates.set(this.stateNames.skip_freeRepinsStop, this.skip_freeSpinsStop());
        this.buttonStates.set(this.stateNames.transitionToJackpot, this.transitionToJackpot());
    };
    SlotButtonsStateSet.prototype.default = function () {
        var buttonState = _super.prototype.default.call(this);
        buttonState.set(SlotButtonId_1.SlotButtonId.PAYOUT, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(SlotButtonId_1.SlotButtonId.SKIP_STATE, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(SlotButtonId_1.SlotButtonId.SKIP_MESSAGE, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(SlotButtonId_1.SlotButtonId.START_JACKPOT, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        return buttonState;
    };
    SlotButtonsStateSet.prototype.baseGameIdle = function () {
        var buttonState = _super.prototype.baseGameIdle.call(this);
        buttonState.set(SlotButtonId_1.SlotButtonId.PAYOUT, new ButtonsStateSet_1.ButtonBehaviour());
        buttonState.set(SlotButtonId_1.SlotButtonId.RESERVE, new ButtonsStateSet_1.ButtonBehaviour());
        return buttonState;
    };
    SlotButtonsStateSet.prototype.transitionToJackpot = function () {
        var buttonState = new TsMap_1.TsMap();
        buttonState.set(SlotButtonId_1.SlotButtonId.START_JACKPOT, new ButtonsStateSet_1.ButtonBehaviour(true, true));
        return buttonState;
    };
    SlotButtonsStateSet.prototype.jackpotStart = function () {
        var buttonState = new TsMap_1.TsMap();
        buttonState.set(SlotButtonId_1.SlotButtonId.START_JACKPOT, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        return buttonState;
    };
    SlotButtonsStateSet.prototype.spinStop = function () {
        var buttonState = new TsMap_1.TsMap();
        buttonState.set(SlotButtonId_1.SlotButtonId.SKIP_STATE, new ButtonsStateSet_1.ButtonBehaviour());
        return buttonState;
    };
    SlotButtonsStateSet.prototype.skip_spinStop = function () {
        var buttonState = new TsMap_1.TsMap();
        buttonState.set(SlotButtonId_1.SlotButtonId.SKIP_STATE, new ButtonsStateSet_1.ButtonBehaviour(false, true));
        return buttonState;
    };
    SlotButtonsStateSet.prototype.freeSpinsStop = function () {
        return this.spinStop();
    };
    SlotButtonsStateSet.prototype.skip_freeSpinsStop = function () {
        return this.skip_spinStop();
    };
    SlotButtonsStateSet.prototype.freeRespinsStop = function () {
        return this.freeSpinsStop();
    };
    SlotButtonsStateSet.prototype.skip_freeRepinsStop = function () {
        return this.skip_freeSpinsStop();
    };
    SlotButtonsStateSet.prototype.skip_showWinning = function () {
        return this.skip_spinStop();
    };
    var _a;
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof SlotStates_1.SlotStates !== "undefined" && SlotStates_1.SlotStates) === "function" && _a || Object)
    ], SlotButtonsStateSet.prototype, "stateNames", void 0);
    return SlotButtonsStateSet;
}(ButtonsStateSet_1.ButtonsStateSet));
exports.SlotButtonsStateSet = SlotButtonsStateSet;


/***/ }),
/* 756 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ButtonId_1 = __webpack_require__(377);
var SlotButtonId = /** @class */ (function (_super) {
    __extends(SlotButtonId, _super);
    function SlotButtonId() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SlotButtonId.SKIP_STATE = 'skipState';
    SlotButtonId.SKIP_MESSAGE = 'skipMessage';
    SlotButtonId.PAYOUT = 'payout';
    SlotButtonId.RESERVE = 'reserve';
    SlotButtonId.START_JACKPOT = 'startJackpot';
    return SlotButtonId;
}(ButtonId_1.ButtonId));
exports.SlotButtonId = SlotButtonId;


/***/ }),
/* 757 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ButtonsController_1 = __webpack_require__(134);
var SlotButtonController = /** @class */ (function (_super) {
    __extends(SlotButtonController, _super);
    function SlotButtonController() {
        var _this = _super.call(this) || this;
        _this.addEventListeners();
        return _this;
    }
    SlotButtonController.prototype.addEventListeners = function () {
        //
    };
    return SlotButtonController;
}(ButtonsController_1.ButtonsController));
exports.SlotButtonController = SlotButtonController;


/***/ }),
/* 758 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var WinLinesConfig_1 = __webpack_require__(394);
var SimpleTimer_1 = __webpack_require__(15);
var MainConfig_1 = __webpack_require__(61);
var SlotCompController_1 = __webpack_require__(77);
var ReelsController_1 = __webpack_require__(759);
var GlobalDispatcher_1 = __webpack_require__(7);
var ReelsControllerView_1 = __webpack_require__(395);
var WinDisplayController_1 = __webpack_require__(161);
var BigWinController_1 = __webpack_require__(93);
var IBigWinConfig_1 = __webpack_require__(67);
var SlotNGFeatureDataDefinitions_1 = __webpack_require__(23);
var ReelsConfig_1 = __webpack_require__(52);
var BaseWinLinesController = /** @class */ (function (_super) {
    __extends(BaseWinLinesController, _super);
    function BaseWinLinesController() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.freeSpinLastspinDelay = 0;
        _this.winTable = [];
        _this.skipDisplay = false;
        return _this;
    }
    BaseWinLinesController.prototype.addEventListeners = function () {
        GlobalDispatcher_1.GlobalDispatcher.addListener(this, ReelsControllerView_1.ReelsControllerView.ALL_SYMBOLS_ANIMATION_COMPLETE, this.onCombinationAnimateComplete);
        GlobalDispatcher_1.GlobalDispatcher.addListener(this, BaseWinLinesController.SHOW_WIN_LINE_LOOP_COMPLETE, this.showWinningLoopComplete);
    };
    BaseWinLinesController.prototype.init = function () {
        this.initWinLinesConfig();
        this.finishStateAction();
        this.freeSpinLastspinDelay = this.config.freeSpinLastspinDelay;
    };
    BaseWinLinesController.prototype.baseGameIdle = function () {
        this.reset();
        this.finishStateAction();
    };
    BaseWinLinesController.prototype.freeSpinsIdle = function () {
        this.reset();
        this.finishStateAction();
    };
    BaseWinLinesController.prototype.startSpin = function () {
        this.reset();
        this.finishStateAction();
    };
    BaseWinLinesController.prototype.transitionToBaseGame = function () {
        this.isInFreeGame = false;
        this.reset();
        this.finishStateAction();
    };
    BaseWinLinesController.prototype.transitionToFreeSpins = function () {
        this.isInFreeGame = true;
        this.finishStateAction();
    };
    BaseWinLinesController.prototype.freeSpinsAllLineWin = function (data) {
        this.skipDisplay = false;
        this.allLineWin(data);
    };
    BaseWinLinesController.prototype.skip_freeSpinsAllLineWin = function (data) {
        this.skipDisplay = true;
        this.reset();
        this.finishStateAction();
    };
    BaseWinLinesController.prototype.skip_freeSpinsShowWinning = function (data) {
        this.reset();
        this.finishStateAction();
    };
    BaseWinLinesController.prototype.freeRespinsAllLineWin = function (data) {
        this.allLineWin(data);
    };
    BaseWinLinesController.prototype.allLineWin = function (data) {
        if (!data.winLines || data.winLines.length === 0) {
            this.finishStateAction();
            return;
        }
        this.data = data;
        this.showLinesStopped = false;
        this.showComplete = false;
        this.loopedShow = false;
        var winline = {
            line: undefined,
            payout: data.totalWin,
            symbol: undefined,
            reelPositions: this.getReelPositionFromWinTable(data.winTable),
            wildMultiplier: undefined,
            winningCombinations: undefined,
            rightToLeft: undefined
        };
        winline.winTable = data.winTable.slice(0);
        var winLines = [winline];
        this.winLines = winLines;
        this.winTable = data.winTable.slice(0);
        this.showWinLine();
    };
    BaseWinLinesController.prototype.showWinning = function (data) {
        if (!data.winLines || data.winLines.length === 0) {
            this.finishStateAction();
            return;
        }
        this.data = data;
        this.winLines = data.winLines;
        this.showLinesStopped = false;
        this.showComplete = false;
        this.loopedShow = false;
        var finalBigWinTier = BigWinController_1.BigWinController.getBigWinTier(data.totalWin, data.totalBet);
        var showPaylineLabel = (data.totalWin != 0 && finalBigWinTier === IBigWinConfig_1.BigWinTierType.Balance);
        this.currentWinLineIndex = 0;
        this.setWinTable(data.winTable, data.winLines.slice(0, 1));
        this.winTable = data.winTable.slice(0);
        this.showWinLine(0, showPaylineLabel);
    };
    BaseWinLinesController.prototype.skip_showWinning = function (data) {
        this.reset();
        this.finishStateAction();
    };
    BaseWinLinesController.prototype.skip_allLineWin = function () {
        this.reset();
        this.finishStateAction();
    };
    BaseWinLinesController.prototype.freeSpinsShowWinning = function (data) {
        if (this.skipDisplay) {
            this.finishStateAction();
            return;
        }
        this.data = data;
        this.showWinning(data);
    };
    BaseWinLinesController.prototype.prefeatureWinning = function (data) {
        this.allLineWin(data);
    };
    BaseWinLinesController.prototype.showWinningLoop = function (data) {
        if (!data.winLines || data.winLines.length === 0) {
            this.finishStateAction();
            return;
        }
        this.winLines = data.winLines;
        if (this.delayAnimationTimer != null) {
            this.delayAnimationTimer.stop();
            this.delayAnimationTimer = null;
        }
        this.showLinesStopped = false;
        this.showComplete = true;
        this.loopedShow = true;
        this.showWinLine();
    };
    BaseWinLinesController.prototype.skip_showWinningLoop = function (data) {
        this.showWinningLoopComplete();
    };
    BaseWinLinesController.prototype.showWinningLoopComplete = function () {
        this.reset();
        this.finishStateAction();
    };
    BaseWinLinesController.prototype.reset = function () {
        this.winLines = [];
        this.showLinesStopped = true;
        this.loopedShow = false;
        this.showComplete = false;
        if (this.delayAnimationTimer != null) {
            this.delayAnimationTimer.stop();
            this.delayAnimationTimer = null;
        }
    };
    BaseWinLinesController.prototype.initWinLinesConfig = function () {
        this.mainConfig = this.gameConfig.getConfig(MainConfig_1.MainConfig);
        this.config = this.gameConfig.getConfig(WinLinesConfig_1.WinLinesConfig);
    };
    BaseWinLinesController.prototype.onCombinationAnimateComplete = function () {
        var _this = this;
        if (!this.showLinesStopped) {
            var deltaMS = this.loopedShow ? this.config.winLineLoopAnimationDelay : this.config.winLineAnimationDelay;
            if (deltaMS === 0) {
                ++this.currentWinLineIndex;
                this.showWinLine(this.currentWinLineIndex);
            }
            else {
                this.delayAnimationTimer = new SimpleTimer_1.SimpleTimer(deltaMS, (function () {
                    _this.showWinLine(++_this.currentWinLineIndex);
                }));
            }
        }
    };
    BaseWinLinesController.prototype.showWinLine = function (id, showPaylineLabel) {
        var _this = this;
        if (id === void 0) { id = 0; }
        if (showPaylineLabel === void 0) { showPaylineLabel = true; }
        if (this.showLinesStopped || this.winLines == null) {
            return;
        }
        this.currentWinLineIndex = id;
        if (this.currentWinLineIndex >= this.winLines.length) {
            this.currentWinLineIndex = 0;
            this.loopedShow = true;
        }
        var winData = this.winLines[this.currentWinLineIndex];
        this.setWinTable(this.winTable, this.winLines.slice(this.currentWinLineIndex, this.currentWinLineIndex + 1));
        winData.winTable = this.winTable.slice(0);
        winData.currentState = this.currentStateName;
        if (this.loopedShow) {
            if (this.showComplete) {
                this.dispatchWinLine(winData, !this.loopedShow && showPaylineLabel, this.winLines.length, [this.stateNames.showWinningLoop]);
            }
            else {
                this.showComplete = true;
                if (this.isInFreeGame && this.data.featureState && this.data.featureState.type === SlotNGFeatureDataDefinitions_1.FeatureTypes.FREE_SPIN) {
                    if (this.data.featureState.feature_state.free_spins_left === 0) {
                        var timer_1 = new SimpleTimer_1.SimpleTimer(this.freeSpinLastspinDelay, function () {
                            _this.finishStateAction();
                            timer_1.destroy();
                        });
                    }
                    else {
                        this.finishStateAction();
                    }
                }
                else if (this.isSpecialLine(this.winLines[this.winLines.length - 1])) {
                    this.specialSymbolLineAction();
                }
                else {
                    this.finishStateAction();
                }
            }
        }
        else if (this.isAllLineWinState() && !this.config.showAllLineWin) {
            this.finishStateAction();
        }
        else {
            this.dispatchWinLine(winData, !this.loopedShow && showPaylineLabel, this.winLines.length, [
                this.stateNames.freeRespinsAllLineWin,
                this.stateNames.freeRespinsShowWinning,
                this.stateNames.allLineWin,
                this.stateNames.showWinning,
                this.stateNames.freeSpinsShowWinning,
                this.stateNames.freeSpinsAllLineWin,
                this.stateNames.prefeatureWinning
            ]);
        }
    };
    BaseWinLinesController.prototype.isAllLineWinState = function () {
        return (this.currentStateName === this.stateNames.allLineWin
            || this.currentStateName === this.stateNames.freeSpinsAllLineWin
            || this.currentStateName === this.stateNames.freeRespinsAllLineWin);
    };
    BaseWinLinesController.prototype.specialSymbolLineAction = function () {
        var _this = this;
        var timer = new SimpleTimer_1.SimpleTimer(this.config.specialSymbolDelay, function () {
            _this.finishStateAction();
            timer.destroy();
        });
    };
    BaseWinLinesController.prototype.isSpecialLine = function (winline) {
        // TODO: need support for not only symbol. ex: win 3 symbols in one reel.
        return winline.symbol === ReelsConfig_1.SymbolSet.SCATTER;
    };
    BaseWinLinesController.prototype.dispatchWinLine = function (winData, showPaylineLabel, totalWinLines, states) {
        GlobalDispatcher_1.GlobalDispatcher.dispatchIntoExpectedStates(ReelsController_1.ReelsController.SHOW_WIN_LINE_NOTIFICATION, states, winData);
        GlobalDispatcher_1.GlobalDispatcher.dispatchIntoExpectedStates(WinDisplayController_1.WinDisplayController.SHOW_WIN_LINE, states, {
            winData: winData,
            showPaylineLabel: showPaylineLabel,
            totalWinLines: totalWinLines
        });
    };
    BaseWinLinesController.prototype.getReelPositionFromWinTable = function (winTable) {
        var reelPosition = [];
        winTable.forEach(function (reel) {
            var reelInfo = [];
            reel.forEach(function (value, y) {
                if (value) {
                    reelInfo.push(y);
                }
            });
            reelPosition.push(reelInfo);
        });
        return reelPosition;
    };
    BaseWinLinesController.prototype.setWinTable = function (winTable, winData) {
        winData.forEach(function (winline) {
            winline.reelPositions.forEach(function (winSymbolIndexArr, x) {
                winTable[x].forEach(function (_value, y) { winTable[x][y] = false; });
                winSymbolIndexArr.forEach(function (index) {
                    winTable[x][index] = true;
                });
            });
        });
    };
    BaseWinLinesController.SHOW_WIN_LINE_LOOP_COMPLETE = 'showWinLineLoopComplete';
    return BaseWinLinesController;
}(SlotCompController_1.SlotCompController));
exports.BaseWinLinesController = BaseWinLinesController;


/***/ }),
/* 759 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var NMath_1 = __webpack_require__(65);
var Helper_1 = __webpack_require__(5);
var SimpleTimer_1 = __webpack_require__(15);
var SoundManager_1 = __webpack_require__(13);
var GlobalDispatcher_1 = __webpack_require__(7);
var ReelsEnums_1 = __webpack_require__(37);
var ReelStripModel_1 = __webpack_require__(760);
var ReelsConfig_1 = __webpack_require__(52);
var ReelsControllerView_1 = __webpack_require__(395);
var SlotCompController_1 = __webpack_require__(77);
var SlotSoundConfig_1 = __webpack_require__(36);
var SlotEvent_1 = __webpack_require__(32);
var ReelsController = /** @class */ (function (_super) {
    __extends(ReelsController, _super);
    function ReelsController(view) {
        var _this = _super.call(this, view) || this;
        _this._currentReelSetIndex = ReelsConfig_1.ReelSet.BASE;
        _this.isAnticipating = false;
        _this.isFeatureReelsInited = false;
        _this.initData = null;
        _this.isShaking = false;
        return _this;
    }
    Object.defineProperty(ReelsController.prototype, "currentReelSetIndex", {
        get: function () {
            return this._currentReelSetIndex;
        },
        set: function (value) {
            this._currentReelSetIndex = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReelsController.prototype, "currentReelSet", {
        get: function () {
            return this.reelSet[this.currentReelSetIndex];
        },
        enumerable: true,
        configurable: true
    });
    ReelsController.prototype.addEventListeners = function () {
        GlobalDispatcher_1.GlobalDispatcher.addListener(this, ReelsController.SHOW_WIN_LINE_NOTIFICATION, this.onShowWinLine);
    };
    ReelsController.prototype.init = function (data) {
        this.initData = data;
        this.initReelsConfig();
        this.initViewController();
        this.initReelsModel(data.strips, data.idleSymbols);
        this.finishStateAction();
    };
    ReelsController.prototype.initReelsConfig = function () {
        var _this = this;
        this.componentConfig = this.gameConfig.getConfig(ReelsConfig_1.ReelsConfig);
        this.reelSet = this.componentConfig.reelSet;
        this.reels = [];
        this.componentConfig.avaliableReelSet.forEach(function (index) {
            var reelSet = _this.reelSet[index];
            var reels = [];
            reelSet.forEach(function (reel) {
                var base = Helper_1.Helper.mergeTwoObjects({}, _this.componentConfig.reelDefinition);
                reels.push(Helper_1.Helper.mergeTwoObjects(base, reel));
            });
            _this.reelSet[index] = reels;
            _this.reels = _this.reels.concat(reels);
        });
        this.reelBackgroundConfig = this.componentConfig.reelBackground;
    };
    ReelsController.prototype.baseGameIdle = function () {
        this.view.deleteAllAnimations();
        this.view.setSymbolsStateForAll(ReelsEnums_1.SymbolState.STATIC);
        this.idleTimer = new SimpleTimer_1.SimpleTimer(this.componentConfig.idleAnimationDelay, this.playIdleAnimations.bind(this));
        this.finishStateAction();
    };
    ReelsController.prototype.startSpin = function () {
        this.resetReels();
        this.activeReelsID = this.getActiveReelsID();
        this.startReels(this.activeReelsID);
        this.finishStateAction();
    };
    ReelsController.prototype.pickFeature = function () {
        this.view.visible = false;
        this.finishStateAction();
    };
    ReelsController.prototype.transitionToFreeSpins = function () {
        var lastSpin = this.reels;
        this.setReelSet(ReelsConfig_1.ReelSet.FEATURE);
        if (!this.isFeatureReelsInited) {
            this.initReelsModel(this.initData.strips, this.initData.idleSymbols);
            this.isFeatureReelsInited = true;
        }
        this.setSymbolsToTransition(lastSpin);
        this.view.positionUpdateOnTransition();
        this.view.visible = true;
        this.finishStateAction();
    };
    ReelsController.prototype.transitionToBaseGame = function () {
        var lastSpin = this.reels;
        this.setReelSet(ReelsConfig_1.ReelSet.BASE);
        this.view.setSymbolsStateForAll(ReelsEnums_1.SymbolState.STATIC);
        this.setSymbolsToTransition(lastSpin);
        this.view.positionUpdateOnTransition();
        this.view.visible = true;
        this.finishStateAction();
    };
    ReelsController.prototype.setSymbolsToTransition = function (reels) {
        var _this = this;
        reels.forEach(function (reelStrip, reelIndex) {
            reelStrip.symbolsOutcome.forEach(function (symbol, symbolIndex) {
                //copy reels (from base to free spins)/(free spins to base) during scren transition
                _this.view.reelSetSymbolName(reelIndex, symbolIndex + 1, symbol, ReelsEnums_1.SymbolState.STATIC);
            });
        });
    };
    //TODO
    ReelsController.prototype.freeRespinReels = function (data) {
        this.resetReels();
        GlobalDispatcher_1.GlobalDispatcher.dispatchIntoExpectedState(SlotEvent_1.SlotEvent.RESPIN_REELS, this.stateNames.freeRespinReels);
        this.finishStateAction();
    };
    ReelsController.prototype.freeSpinsIntroPopup = function () {
        this.view.setSymbolsStateForAll(ReelsEnums_1.SymbolState.STATIC);
        this.finishStateAction();
    };
    ReelsController.prototype.freeSpinsStart = function () {
        this.startSpin();
    };
    ReelsController.prototype.spinning = function () {
        this.normalTimer = new SimpleTimer_1.SimpleTimer(this.componentConfig.reelStopNormalTime, this.onSpinTimeout.bind(this));
    };
    /**
     * player clicked spin for skip spinning animation
     */
    ReelsController.prototype.skip_spinning = function () {
        this.normalTimer.stop();
        this.isFastStopPending = true;
        this.finishStateAction();
    };
    ReelsController.prototype.freeSpinning = function () {
        this.spinning();
    };
    ReelsController.prototype.skip_freeSpinning = function () {
        this.skip_spinning();
    };
    ReelsController.prototype.spinStop = function (stateData) {
        var _this = this;
        for (var i = 0; i < this.reels.length; i++) {
            if (stateData && stateData.reelIndexes) {
                this.reels[i].symbolsOutcome = stateData.reelIndexes[i];
            }
        }
        this.activeReelsIndex = 0;
        if (this.isFastStopPending) {
            this.fastStopReels();
        }
        else {
            var delay = (this.currentReelSet[0].stopReelNormalDelay) ? this.currentReelSet[0].stopReelNormalDelay : 0;
            this.nextReelStopTimer = new SimpleTimer_1.SimpleTimer(delay, function () {
                _this.stopNextStrip();
            });
        }
    };
    /**
     * player clicked spin for skip stop animations
     */
    ReelsController.prototype.skip_spinStop = function () {
        if (!this.isFastStopPending) {
            this.isFastStopPending = true;
            if (!this.fastStopTimeout) {
                if (this.nextReelStopTimer != null) {
                    this.nextReelStopTimer.stop();
                }
                this.fastStopReels();
            }
        }
    };
    ReelsController.prototype.freeSpinsStop = function (stateData) {
        this.spinStop(stateData);
    };
    ReelsController.prototype.skip_freeSpinsStop = function () {
        this.skip_spinStop();
    };
    ReelsController.prototype.freeRespinsStop = function (stateData) {
        this.freeSpinsStop(stateData);
    };
    ReelsController.prototype.skip_freeRepinsStop = function () {
        this.skip_freeSpinsStop();
    };
    ReelsController.prototype.initViewController = function () {
        this.view.idleAnimationsCompleteSignal.add(this.idleAnimationsComplete, this);
        this.view.initialize(this.componentConfig);
    };
    /**
     * Initial reels model from init state.
     * If idleSymbols didn't exist, make one from reel strips.
     * @param strips
     * @param idleSymbols
     */
    ReelsController.prototype.initReelsModel = function (strips, idleSymbols) {
        var _this = this;
        this.reels = new Array();
        this.activeReelsID = this.getActiveReelsID();
        this.activeReelsIndex = 0;
        var stripIndex = 0;
        this.currentReelSet.forEach(function (stripConfig, index) {
            _this.view.reelInitView(index, stripConfig);
            _this.view.reelInitOverView(index, stripConfig);
            var reelModelStrip = _this.createReelStripModel();
            reelModelStrip.setConfig(stripConfig, index);
            _this.addModelListeners(reelModelStrip);
            if (strips == undefined || strips.length == 0) {
                reelModelStrip.allStripSymbols = undefined;
                stripIndex = index % _this.activeReelsID.length;
            }
            else {
                stripIndex = index % strips.length;
                reelModelStrip.allStripSymbols = strips[stripIndex];
            }
            // if last spin didn't exist
            if (idleSymbols == undefined || idleSymbols.length == 0) {
                reelModelStrip.symbolsOutcome = _this.getIdleSymbolFromReelStrip(reelModelStrip.allStripSymbols);
            }
            else {
                reelModelStrip.symbolsOutcome = idleSymbols[stripIndex];
            }
            reelModelStrip.initReel();
            _this.reels.push(reelModelStrip);
        });
        this.setReelSet(this.currentReelSetIndex);
    };
    /**
     * Get idleSymbols from reel strips
     * @param strips
     */
    ReelsController.prototype.getIdleSymbolFromReelStrip = function (strip) {
        var idleSymbols = new Array();
        var sample = this.currentReelSet[0];
        for (var i = 0; i < sample.symbolsOnReel; i++) {
            idleSymbols.push(strip[i + 1]);
        }
        return idleSymbols;
    };
    ReelsController.prototype.addModelListeners = function (reelModel) {
        reelModel.reelStopedSignal.add(this.onReelStoped, this);
        reelModel.stopRequestedSignal.add(this.onStopRequested, this);
        reelModel.hideBlurSymbolSignal.add(this.onHideBlurSymbolRequested, this);
        reelModel.dropAnimationSignal.add(this.onSymbolDropAnimation, this);
        reelModel.setSymbolNameSignal.add(this.onSetSymbolNameToView, this);
        reelModel.spinTweenUpdateSignal.add(this.onTweenUpdateSymbols, this);
        reelModel.moveLastSymbolToTopSignal.add(this.onMoveLastSymbolToTop, this);
    };
    ReelsController.prototype.createReelStripModel = function () {
        return es5_1.Container.get(ReelStripModel_1.ReelStripModel);
    };
    ReelsController.prototype.playIdleAnimations = function () {
        if (this.componentConfig.idleAnimationLoop) {
            this.view.playIdleAnimationsLoop();
        }
        else {
            this.idleRandomTimer = new SimpleTimer_1.SimpleTimer(this.componentConfig.idleAnimationRandomChance.time, this.view.playRandomIdleAnimations.bind(this.view), true);
        }
    };
    ReelsController.prototype.resetReels = function () {
        this.isFastStopPending = false;
        this.fastStopTimeout = false;
        this.view.deleteAllAnimations();
        this.view.setSymbolsStateForAll(ReelsEnums_1.SymbolState.STATIC);
        if (this.idleTimer != null) {
            this.idleTimer.stop();
        }
        if (this.idleRandomTimer != null) {
            this.idleRandomTimer.stop();
        }
        if (this.normalTimer != null) {
            this.normalTimer.stop();
        }
    };
    ReelsController.prototype.getActiveReelsID = function () {
        var activeReelsID = new Array();
        this.currentReelSet.forEach(function (stripConfig, index) {
            activeReelsID.push(index);
        });
        return activeReelsID;
    };
    ReelsController.prototype.setReelSet = function (set) {
        this.view.setActiveReelStripSet(set);
        this.currentReelSetIndex = set;
    };
    ReelsController.prototype.startReels = function (reelsId) {
        this.stopRequestCounter = this.currentSpinningReelsCounter = reelsId.length;
        this.soundManager.play(SlotSoundConfig_1.SlotSoundConfig.reelSpin + "0" + NMath_1.NMath.randomInt(1, 5), SoundManager_1.AudioTrackName.EFFECT);
        for (var i = 0; i < this.currentSpinningReelsCounter; i++) {
            this.reels[reelsId[i]].startSpinning();
        }
    };
    /**
     * checks how many remaining spinning reels
     * if all reels stopped then finishStateAction
     * Before the last reel spinning, the user has time to press the stopSpin button
     * @param {number} reelId of the stopped reel
     */
    ReelsController.prototype.onReelStoped = function (reelId) {
        this.reelStoppedAction(reelId);
        this.playSound(SlotSoundConfig_1.SlotSoundConfig.reelStopped, reelId);
        if (this.reels[reelId].symbolsOutcome.indexOf(ReelsConfig_1.SymbolSet.SCATTER) !== -1) {
            this.playSound(SlotSoundConfig_1.SlotSoundConfig.scatter, reelId);
        }
    };
    ReelsController.prototype.playSound = function (soundType, reelId) {
        switch (soundType) {
            case SlotSoundConfig_1.SlotSoundConfig.reelStopped:
                this.soundManager.play(SlotSoundConfig_1.SlotSoundConfig.reelStopped + "0" + (reelId + 1), SoundManager_1.AudioTrackName.EFFECT);
                break;
            case SlotSoundConfig_1.SlotSoundConfig.scatter:
                this.soundManager.play(SlotSoundConfig_1.SlotSoundConfig.scatter + "0" + (reelId + 1), SoundManager_1.AudioTrackName.EFFECT);
                break;
        }
    };
    ReelsController.prototype.reelStoppedAction = function (reelId) {
        this.currentSpinningReelsCounter--;
        if (this.currentSpinningReelsCounter == 0) {
            this.stopAnticipate(reelId);
            this.finishStateAction();
        }
        else {
            if (!this.isFastStopPending && this.isAnticipationReel(reelId + 1, false)) {
                GlobalDispatcher_1.GlobalDispatcher.dispatchIntoExpectedStates(ReelsController.ANTICIPATE_REEL_NOTIFICATION, [
                    this.stateNames.spinStop,
                    this.stateNames.freeSpinsStop,
                    this.stateNames.freeRespinsStop
                ], reelId);
                this.startShaking(reelId);
                this.view.anticipateReel(reelId + 1);
                this.view.anticipateScatters(this.scattersDroped);
                this.isAnticipating = true;
            }
            else {
                this.stopAnticipate(reelId);
            }
            if (this.currentSpinningReelsCounter == 1) {
                if (!this.isFastStopPending) {
                    this.fastStopTimeout = true;
                }
            }
        }
    };
    ReelsController.prototype.stopAnticipate = function (reelId) {
        if (this.isAnticipating) {
            this.isAnticipating = false;
            GlobalDispatcher_1.GlobalDispatcher.dispatchIntoExpectedStates(ReelsController.ANTICIPATE_END_NOTIFICATION, [
                this.stateNames.spinStop,
                this.stateNames.freeSpinsStop,
                this.stateNames.freeRespinsStop
            ], reelId);
            this.stopShaking();
            this.view.stopAnticipate();
        }
    };
    ReelsController.prototype.onStopRequested = function (reelId) {
        this.stopRequestCounter--;
        if (!this.isFastStopPending) {
            if (this.activeReelsIndex < this.activeReelsID.length - 1) {
                this.activeReelsIndex++;
                var stripConfigIndex = this.activeReelsID[this.activeReelsIndex];
                var anticipationDelay = this.isAnticipationReel(reelId + 1, true) ? this.componentConfig.anticipationData.anticipationDelay : 0;
                this.nextReelStopTimer = new SimpleTimer_1.SimpleTimer(this.currentReelSet[stripConfigIndex].stopReelNormalDelay + anticipationDelay, this.stopNextStrip.bind(this));
            }
        }
    };
    ReelsController.prototype.startShaking = function (reelId) {
        if (!this.isShaking) {
            // frist shaking, ths before reels , need together shake.
            for (var i = 0; i <= reelId; i++) {
                this.isShaking = this.view.playShaking(i);
            }
        }
        else {
            this.view.playShaking(reelId);
        }
    };
    ReelsController.prototype.stopShaking = function () {
        this.isShaking = false;
        this.view.stopShaking();
    };
    ReelsController.prototype.isAnticipationReel = function (reelId, preStop) {
        var scatterCount = 0;
        this.scattersDroped = [];
        for (var column = 0; column < reelId; column++) {
            this.scattersDroped.push(-1);
            for (var row = 0; row < this.reels[column].symbolsOutcome.length; row++) {
                if (this.reels[column].symbolsOutcome[row] == ReelsConfig_1.SymbolSet.SCATTER) {
                    scatterCount++;
                    this.scattersDroped[column] = row + 1;
                }
            }
        }
        var symbolCountTrigger = this.componentConfig.anticipationData.modelData[this.currentReelSetIndex].anticipationSymbolCountTrigger;
        return (!this.isFastStopPending && scatterCount >= symbolCountTrigger && this.isFeaturePossible(scatterCount, preStop));
    };
    ReelsController.prototype.isFeaturePossible = function (scatterCount, preStop) {
        var symbolCountRequired = this.componentConfig.anticipationData.modelData[this.currentReelSetIndex].anticipationSymbolCountRequired;
        return symbolCountRequired - scatterCount <= (preStop ? this.stopRequestCounter : this.currentSpinningReelsCounter);
    };
    ReelsController.prototype.fastStopReels = function () {
        for (var i = 0; i < this.activeReelsID.length; i++) {
            if (this.activeReelsIndex < this.activeReelsID.length) {
                this.reels[this.activeReelsID[this.activeReelsIndex]].requestStop();
                if (this.activeReelsIndex < this.activeReelsID.length - 1) {
                    this.activeReelsIndex++;
                }
                else {
                    break;
                }
            }
        }
    };
    ReelsController.prototype.onShowWinLine = function (e) {
        var winLine = e.data;
        this.view.setSymbolStateFromPositions(winLine.winTable, ReelsEnums_1.SymbolState.STATIC, ReelsEnums_1.SymbolState.LOSE);
        this.view.showWinLine(winLine);
    };
    ReelsController.prototype.stopNextStrip = function () {
        this.reels[this.activeReelsID[this.activeReelsIndex]].requestStop();
    };
    /**
     * time for normal spin is over
     */
    ReelsController.prototype.onSpinTimeout = function () {
        this.finishStateAction();
    };
    ReelsController.prototype.onSetSymbolNameToView = function (reelId, itemId, symbolName, state) {
        this.view.reelSetSymbolName(reelId, itemId, symbolName, state);
    };
    ReelsController.prototype.onHideBlurSymbolRequested = function (reelId, symbolIndex, state) {
        this.view.reelSetSymbolState(reelId, symbolIndex, state);
    };
    ReelsController.prototype.onMoveLastSymbolToTop = function (reelId, symbolData, state) {
        this.view.moveLastSymbolToTop(reelId, symbolData, state);
    };
    ReelsController.prototype.onTweenUpdateSymbols = function (reelId, symbolId, y) {
        this.view.tweenSymbolsUpdate(reelId, symbolId, y);
    };
    ReelsController.prototype.onSymbolDropAnimation = function (reelId, symbolId) {
        this.view.symbolDropAnimation(reelId, symbolId);
    };
    ReelsController.prototype.idleAnimationsComplete = function () {
        if (this.componentConfig.idleAnimationLoop) {
            this.idleTimer = new SimpleTimer_1.SimpleTimer(this.componentConfig.idleAnimationDelay, this.playIdleAnimations.bind(this));
        }
    };
    var _a;
    ReelsController.SHOW_WIN_LINE_NOTIFICATION = 'reelsShowWinLineNotification';
    ReelsController.ANTICIPATE_REEL_NOTIFICATION = 'anticipateReel';
    ReelsController.ANTICIPATE_END_NOTIFICATION = 'anticipateEnd';
    ReelsController = __decorate([
        __param(0, es5_1.Inject),
        __metadata("design:paramtypes", [typeof (_a = typeof ReelsControllerView_1.ReelsControllerView !== "undefined" && ReelsControllerView_1.ReelsControllerView) === "function" && _a || Object])
    ], ReelsController);
    return ReelsController;
}(SlotCompController_1.SlotCompController));
exports.ReelsController = ReelsController;


/***/ }),
/* 760 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var SimpleTween_1 = __webpack_require__(27);
var SimpleTimer_1 = __webpack_require__(15);
var NMath_1 = __webpack_require__(65);
var ReelsEnums_1 = __webpack_require__(37);
var MiniSignal = __webpack_require__(3);
/**
 * Class contains the logic for single reel
 */
var ReelStripModel = /** @class */ (function () {
    function ReelStripModel() {
        this.countTopExtraSymbol = 1;
        this.countBottomExtraSymbol = 1;
        /**
         * If reel strip didn't come from server and config,
         * it will generate fake strip,
         * the length of the fake strip will equals to defaultStripLength.
         */
        this.defaultStripLength = 30;
        this.setSymbolNameSignal = new MiniSignal();
        this.moveLastSymbolToTopSignal = new MiniSignal();
        this.reelStopedSignal = new MiniSignal();
        this.stopRequestedSignal = new MiniSignal();
        this.spinTweenUpdateSignal = new MiniSignal();
        this.dropAnimationSignal = new MiniSignal();
        this.hideBlurSymbolSignal = new MiniSignal(); // add comment
        this.reelsStripIndex = 0;
        this.outcomeSymbolsCounter = 0;
    }
    Object.defineProperty(ReelStripModel.prototype, "symbolsOutcome", {
        get: function () {
            return this._symbolsOutcome;
        },
        set: function (symbolsOutcome) {
            this._symbolsOutcome = symbolsOutcome;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReelStripModel.prototype, "allStripSymbols", {
        get: function () {
            return this._allStripSymbols;
        },
        /**
         * setter for _allStripSymbols
         * if stripSymbols didn't exist, try create strips from predefined reel in config,
         * if there is no strips been predefined, create it randomly based on rangeSymbols.
         */
        set: function (stripSymbols) {
            this._allStripSymbols = new Array();
            if (stripSymbols != undefined) {
                this._allStripSymbols = stripSymbols;
            }
            else {
                if (this.config.stripOrder != undefined) {
                    this._allStripSymbols = this.config.stripOrder;
                }
                else {
                    for (var j = 0; j < this.defaultStripLength; j++) {
                        this._allStripSymbols.push(this.config.rangeSymbols[NMath_1.NMath.randomInt(0, this.config.rangeSymbols.length - 1)]);
                    }
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReelStripModel.prototype, "id", {
        get: function () {
            return this._id;
        },
        enumerable: true,
        configurable: true
    });
    ReelStripModel.prototype.setConfig = function (config, index) {
        this._id = index;
        this.config = config;
        this.totalStageSymbolsCount = this.countTopExtraSymbol + this.config.symbolsOnReel + this.countBottomExtraSymbol;
    };
    /**
     * Filling in the symbols according to strips
     */
    ReelStripModel.prototype.initReel = function () {
        this.reelSymbols = new Array();
        for (var i = 0; i < this.totalStageSymbolsCount; i++) {
            var name = void 0;
            if (i > 0 && i <= this.config.symbolsOnReel) {
                name = this.symbolsOutcome[i - this.countTopExtraSymbol];
            }
            else {
                name = this.nextSymbol();
            }
            this.setSymbolNameSignal.dispatch(this.id, i, name, ReelsEnums_1.SymbolState.STATIC);
            this.reelSymbols.push(new SymbolData(name, i * this.config.symbol.height - this.config.symbol.height));
        }
    };
    /**
     * Returns the next symbol from wholeStripSymbols.
     */
    ReelStripModel.prototype.nextSymbol = function () {
        if (this.allStripSymbols && this.allStripSymbols.length > 0) {
            this.reelsStripIndex++;
            if (this.reelsStripIndex >= this.allStripSymbols.length - 1) {
                this.reelsStripIndex = 0;
            }
            return this.allStripSymbols[this.reelsStripIndex];
        }
        return this.config.rangeSymbols[NMath_1.NMath.randomInt(0, this.config.rangeSymbols.length - 1)];
    };
    /**
     * Start spinning after startDelay time
     */
    ReelStripModel.prototype.startSpinning = function () {
        this.outcomeSymbolsCounter = 0;
        this.stopRequested = false;
        new SimpleTimer_1.SimpleTimer(this.config.startReelDelay, this.spin.bind(this));
    };
    /**
     * Process of spinning - we move the last symbol on top and then start the tween
     */
    ReelStripModel.prototype.spin = function () {
        this.moveLastSymbolToTopSignal.dispatch(this.id, this.createNextSymbol(this.nextSymbol()), ReelsEnums_1.SymbolState.BLUR);
        this.tweenSymbolsDown(this.config.reelTween.duration, this.config.reelTween.ease);
    };
    ReelStripModel.prototype.tweenSymbolsDown = function (duration, easing) {
        var _this = this;
        var arr = [];
        for (var j = 0; j < this.reelSymbols.length; j++) {
            arr.push(this.reelSymbols[j].posY);
        }
        var tween = new SimpleTween_1.SimpleTween({ y: 0 })
            .to({ y: this.config.symbol.height }, duration)
            .easing(easing)
            .onUpdate(function (coords) {
            for (var i = 0; i < _this.reelSymbols.length; i++) {
                _this.reelSymbols[i].posY = arr[i] + coords.y;
                _this.spinTweenUpdateSignal.dispatch(_this.id, i, _this.reelSymbols[i].posY);
            }
        })
            .onComplete(function () {
            _this.tweenComplete();
        });
        tween.start();
    };
    /**
     * Remove the last element from reelSymbols and insert the new one at the beginning.
     * @return the symbol id of the next symbol in strip
     */
    ReelStripModel.prototype.createNextSymbol = function (name) {
        var data = new SymbolData(name, this.reelSymbols[0].posY - this.config.symbol.height);
        this.reelSymbols.pop();
        this.reelSymbols.unshift(data);
        return data;
    };
    /**
     * Invoke that method once we want to stop the reel
     */
    ReelStripModel.prototype.requestStop = function () {
        this.stopRequested = true;
    };
    /**
     * Spinning tween is completed in view.
     */
    ReelStripModel.prototype.tweenComplete = function () {
        if (this.stopRequested) {
            this.finalTweenComplete();
        }
        else {
            this.spin();
        }
    };
    /**
     * Setting up the final spin outcome.
     * The final spinning tweens.
     */
    ReelStripModel.prototype.finalTweenComplete = function () {
        var index = (this.symbolsOutcome.length - 1) - this.outcomeSymbolsCounter;
        if (this.outcomeSymbolsCounter <= this.config.symbolsOnReel) {
            if (this.outcomeSymbolsCounter == 0) {
                this.stopRequestedSignal.dispatch(this.id);
            }
            var symbolName = index > -1 ? this.symbolsOutcome[index] : this.nextSymbol();
            this.moveLastSymbolToTopSignal.dispatch(this.id, this.createNextSymbol(symbolName), ReelsEnums_1.SymbolState.STATIC);
            if (this.outcomeSymbolsCounter == this.config.symbolsOnReel) {
                this.tweenSymbolsDown(this.config.stopTween.duration, this.config.stopTween.ease);
            }
            else {
                this.tweenSymbolsDown(this.config.reelTween.duration, this.config.reelTween.ease);
            }
            this.outcomeSymbolsCounter++;
        }
        else {
            this.reelStopFinished();
        }
    };
    /**
     * The reel has been stopped.
     * All symbols are on own place right now.
     */
    ReelStripModel.prototype.reelStopFinished = function () {
        this.hideBlurSymbolSignal.dispatch(this.id, this.reelSymbols.length - 1, ReelsEnums_1.SymbolState.STATIC);
        this.dropAnimation();
        this.reelStopedSignal.dispatch(this.id);
    };
    /**
     * Checking all symbols, are there any among them - dropSymbols from config
     */
    ReelStripModel.prototype.dropAnimation = function () {
        for (var i = 1; i <= this.config.symbolsOnReel; i++) {
            if (this.config.dropSymbols.indexOf(this.reelSymbols[i].symbolName) > -1) {
                this.dropAnimationSignal.dispatch(this.id, i);
            }
        }
    };
    return ReelStripModel;
}());
exports.ReelStripModel = ReelStripModel;
var SymbolData = /** @class */ (function () {
    function SymbolData(symbolName, posY) {
        this.symbolName = symbolName;
        this.posY = posY;
    }
    return SymbolData;
}());
exports.SymbolData = SymbolData;


/***/ }),
/* 761 */,
/* 762 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ReelStripView_1 = __webpack_require__(396);
var ReelStripOverlay = /** @class */ (function (_super) {
    __extends(ReelStripOverlay, _super);
    function ReelStripOverlay() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ReelStripOverlay.prototype.createSymbols = function () {
        _super.prototype.createSymbols.call(this);
        for (var i = 0; i < this.totalSymbolsCount; i++) {
            this.symbols[i].symbolContainer.visible = false;
        }
    };
    return ReelStripOverlay;
}(ReelStripView_1.ReelStripView));
exports.ReelStripOverlay = ReelStripOverlay;


/***/ }),
/* 763 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var MiniSignal = __webpack_require__(3);
var tween_js_1 = __webpack_require__(47);
var pixi_js_1 = __webpack_require__(4);
var SimpleTween_1 = __webpack_require__(27);
var Animation_1 = __webpack_require__(26);
var ReelsEnums_1 = __webpack_require__(37);
var Symbol = /** @class */ (function () {
    function Symbol() {
        this.animationCompleteSignal = new MiniSignal();
        this.symbolLayer = new pixi_js_1.Sprite();
        this.symbolLayer.anchor.set(0.5, 0.5);
        this.textureName = '';
        this.animationLayer = new pixi_js_1.Container();
        this._symbolContainer = new pixi_js_1.Container();
        this._symbolContainer.addChild(this.symbolLayer);
        this._symbolContainer.addChild(this.animationLayer);
    }
    Symbol.addWinAnimationOverrides = function (symbolNames, tweenData) {
        this.winAnimationOverrides = symbolNames;
        this.winTweenData = tweenData;
    };
    Symbol.prototype.setId = function (id) {
        this.id = id;
    };
    Symbol.prototype.setConfig = function (config) {
        this.config = config;
    };
    Symbol.prototype.setSymbolNameWithState = function (symbolName, state) {
        this.symbolName = symbolName;
        this.setSymbolState(state);
    };
    Symbol.prototype.setSymbolState = function (state) {
        if (this.textureName == this.getFullSymbolName(state)) {
            return;
        }
        this.symbolState = state;
        var texture;
        try {
            this.textureName = this.getFullSymbolName(state);
            texture = pixi_js_1.Sprite.fromFrame(this.textureName).texture;
        }
        catch (e) {
            if (state == ReelsEnums_1.SymbolState.BLUR || state == ReelsEnums_1.SymbolState.LOSE) {
                this.textureName = this.getFullSymbolName(ReelsEnums_1.SymbolState.STATIC);
                texture = pixi_js_1.Sprite.fromFrame(this.textureName).texture;
            }
            else {
                throw 'not found texture, this.textureName = ' + this.textureName;
            }
        }
        this.symbolLayer.position.set(this.config.width / 2, this.config.height / 2);
        this.symbolLayer.texture = texture;
    };
    Symbol.prototype.getAssetPostfixForState = function (state) {
        switch (state) {
            case ReelsEnums_1.SymbolState.STATIC:
                return ReelsEnums_1.SymbolStatePostfix.STATIC;
            case ReelsEnums_1.SymbolState.LOSE:
                return ReelsEnums_1.SymbolStatePostfix.LOSE;
            case ReelsEnums_1.SymbolState.BLUR:
                return ReelsEnums_1.SymbolStatePostfix.BLUR;
        }
    };
    Symbol.prototype.deleteAnimation = function () {
        this.stopAnimation();
        this.stopTweens();
        this.resetSymbol();
        this.animationLayer.removeChildren();
        this.symbolLayer.visible = true;
    };
    Symbol.prototype.stopAnimation = function () {
        if (this.itemAnimation != null) {
            this.itemAnimation.gotoAndStop(0);
        }
    };
    Symbol.prototype.stopTweens = function () {
        if (this.animationTween) {
            this.animationTween.stop();
            this.animationTween.stopChainedTweens();
            this.animationTween = undefined;
        }
    };
    Symbol.prototype.resetSymbol = function () {
        this.symbolLayer.scale.set(1, 1);
    };
    Symbol.prototype.playAnimation = function (type, useNativeSpeed) {
        var _this = this;
        if (useNativeSpeed === void 0) { useNativeSpeed = false; }
        this.symbolLayer.visible = true;
        var introAnimation;
        if (type == ReelsEnums_1.SymbolAnimationPostfix.WIN) {
            if (this.isSymbolWinOverriden()) {
                this.playWinAnimationOverride();
                return true;
            }
            introAnimation = Animation_1.Animation.getAnimationFromPool('symbol_' + this.symbolName + ReelsEnums_1.SymbolAnimationPostfix.WIN_INTRO);
        }
        this.itemAnimation = Animation_1.Animation.getAnimationFromPool('symbol_' + this.symbolName + type);
        if (this.itemAnimation == undefined) {
            return false;
        }
        this.symbolLayer.visible = false;
        if (!useNativeSpeed) {
            this.itemAnimation.animationSpeed = this.itemAnimation.totalFrames / Symbol.SYMBOL_ANIMATION_FRAME_COUNT;
        }
        this.itemAnimation.anchor.set(0.5);
        this.itemAnimation.x = this.config.width / 2;
        this.itemAnimation.y = this.config.height / 2;
        this.animationLayer.removeChildren();
        this.animationLayer.addChild(this.itemAnimation);
        this.itemAnimation.gotoAndStop(0);
        this.itemAnimation.loop = false;
        this.itemAnimation.onComplete = this.onCompleteItemAnimation.bind(this, this.id, type); // todo sometimes lost context
        if (introAnimation != undefined) {
            this.itemAnimation.visible = false;
            introAnimation.anchor.set(0.5);
            introAnimation.x = this.config.width / 2;
            introAnimation.y = this.config.height / 2;
            introAnimation.gotoAndStop(0);
            introAnimation.loop = false;
            introAnimation.visible = true;
            this.animationLayer.addChild(introAnimation);
            introAnimation.onComplete = function () {
                introAnimation.visible = false;
                introAnimation.removeChild(introAnimation);
                introAnimation = undefined;
                if (_this.itemAnimation != undefined) {
                    _this.itemAnimation.visible = true;
                    _this.itemAnimation.gotoAndPlay(0);
                }
                else {
                    _this.animationCompleteSignal.dispatch(_this.id, ReelsEnums_1.SymbolAnimationPostfix.WIN);
                }
            };
            introAnimation.gotoAndPlay(0);
        }
        else {
            this.itemAnimation.gotoAndPlay(0);
        }
        return true;
    };
    Symbol.prototype.playWinAnimationOverride = function () {
        var _this = this;
        this.stopTweens();
        this.setSymbolState(ReelsEnums_1.SymbolState.STATIC);
        var tweenData = { scale: 1 };
        var tweenOut = new SimpleTween_1.SimpleTween(tweenData)
            .to({ scale: 1 }, Symbol.winTweenData.outDuration)
            .delay(Symbol.winTweenData.outDelay)
            .onUpdate(function () {
            _this.symbolLayer.scale.set(tweenData.scale, tweenData.scale);
        })
            .onComplete(this.onCompleteItemAnimation.bind(this, this.id, ReelsEnums_1.SymbolAnimationPostfix.WIN));
        var tweenIn = new SimpleTween_1.SimpleTween(tweenData)
            .to({ scale: Symbol.winTweenData.scale }, Symbol.winTweenData.inDuration)
            .onUpdate(function () {
            _this.symbolLayer.scale.set(tweenData.scale, tweenData.scale);
        })
            .easing(Symbol.winTweenData.ease ? Symbol.winTweenData.ease : tween_js_1.Easing.Linear.None)
            .chain(tweenOut);
        this.animationTween = tweenIn.start();
    };
    Symbol.prototype.onCompleteItemAnimation = function (id, type) {
        this.animationCompleteSignal.dispatch(id, type);
    };
    Symbol.prototype.getFullSymbolName = function (state) {
        if (state === void 0) { state = this.symbolState; }
        return 'symbol_' + this.symbolName + this.getAssetPostfixForState(state) + '.png';
    };
    Object.defineProperty(Symbol.prototype, "symbolContainer", {
        get: function () {
            return this._symbolContainer;
        },
        enumerable: true,
        configurable: true
    });
    Symbol.prototype.isSymbolWinOverriden = function () {
        return Symbol.winAnimationOverrides.indexOf(this.symbolName) != -1;
    };
    Symbol.prototype.playShaking = function () {
        if (this.config.shakeConfig == undefined) {
            return;
        }
        this.playShakingIn();
    };
    Symbol.prototype.stopShaking = function (restorePosX, restorePosY) {
        if (this.shakingTweenTo != undefined) {
            this.shakingTweenTo.stop();
            this.shakingTweenTo = undefined;
        }
        if (this.shakingTweenBack != undefined) {
            this.shakingTweenBack.stop();
            this.shakingTweenBack = undefined;
        }
        this._symbolContainer.x = restorePosX;
        this._symbolContainer.y = restorePosY;
    };
    Symbol.prototype.playShakingIn = function () {
        var _this = this;
        var intensity = this.config.shakeConfig.intensity;
        var delay = this.config.shakeConfig.delay;
        this.shakingTweenTo = new SimpleTween_1.SimpleTween(this._symbolContainer)
            .to({ x: this._symbolContainer.x + intensity, y: this._symbolContainer.y + intensity }, delay)
            .onComplete(function () {
            _this.shakingTweenTo = new SimpleTween_1.SimpleTween(_this._symbolContainer)
                .to({ x: _this._symbolContainer.x - intensity, y: _this._symbolContainer.y - intensity }, delay)
                .onComplete(function () {
                _this.playShakingOut();
            })
                .start();
        })
            .start();
    };
    Symbol.prototype.playShakingOut = function () {
        var _this = this;
        var intensity = this.config.shakeConfig.intensity;
        var delay = this.config.shakeConfig.delay;
        this.shakingTweenBack = new SimpleTween_1.SimpleTween(this._symbolContainer)
            .to({ x: this._symbolContainer.x + intensity, y: this._symbolContainer.y - intensity }, delay)
            .onComplete(function () {
            _this.shakingTweenBack = new SimpleTween_1.SimpleTween(_this._symbolContainer)
                .to({ x: _this._symbolContainer.x - intensity, y: _this._symbolContainer.y + intensity }, delay)
                .onComplete(function () {
                _this.playShakingIn();
            })
                .start();
        })
            .start();
    };
    Symbol.SYMBOL_ANIMATION_FRAME_COUNT = 60;
    Symbol.winAnimationOverrides = new Array();
    return Symbol;
}());
exports.Symbol = Symbol;


/***/ }),
/* 764 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var PaylinesView_1 = __webpack_require__(765);
var ReelsConfig_1 = __webpack_require__(52);
var PaylineConfig_1 = __webpack_require__(767);
var WinDisplayController_1 = __webpack_require__(161);
var PaylinesController = /** @class */ (function (_super) {
    __extends(PaylinesController, _super);
    function PaylinesController(view) {
        return _super.call(this, view) || this;
    }
    PaylinesController.prototype.init = function () {
        var config = this.gameConfig.getConfig(PaylineConfig_1.PaylineConfig);
        this.view.setReelsConfig(this.gameConfig.getConfig(ReelsConfig_1.ReelsConfig));
        this.view.initialize(config);
        this.finishStateAction();
    };
    var _a;
    PaylinesController = __decorate([
        __param(0, es5_1.Inject),
        __metadata("design:paramtypes", [typeof (_a = typeof PaylinesView_1.PaylinesView !== "undefined" && PaylinesView_1.PaylinesView) === "function" && _a || Object])
    ], PaylinesController);
    return PaylinesController;
}(WinDisplayController_1.WinDisplayController));
exports.PaylinesController = PaylinesController;


/***/ }),
/* 765 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var pixi_js_1 = __webpack_require__(4);
var Payline_1 = __webpack_require__(766);
var WinDisplayView_1 = __webpack_require__(120);
var PaylinesView = /** @class */ (function (_super) {
    __extends(PaylinesView, _super);
    function PaylinesView() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.activePaylines = new Array();
        return _this;
    }
    PaylinesView.prototype.createElements = function (config) {
        this.config = config;
    };
    PaylinesView.prototype.showPayline = function (data) {
        var _this = this;
        //check to prevent animating same line with 2 objects
        for (var i = 0; i < this.activePaylines.length; i++) {
            if (this.activePaylines[i].lineNumber == data.winData.line) {
                throw '[PaylinesView] : attempt to animate same payline twice line number : ' + data.winData.line;
            }
        }
        var canvasPositions = new Array();
        //TODO: need support Both landscape and portrait
        var symbolInfo = this.reelsConfig.reelDefinition.symbol;
        data.winData.winTable.forEach(function (reel, x) {
            var winSymbolIndex = _this.getWinSymbolIndex(reel);
            var pointX = _this.layoutData.position.x + symbolInfo.width / 2;
            var pointY = _this.layoutData.position.y + symbolInfo.height / 2 + symbolInfo.height * winSymbolIndex;
            canvasPositions.push(new pixi_js_1.Point(pointX, pointY));
        });
        this.activePaylines.push(Payline_1.Payline.payline(canvasPositions, data.winData.winTable.length, this.config, data.winData.line));
        this.addChild(this.activePaylines[this.activePaylines.length - 1].container);
        this.activePaylines[this.activePaylines.length - 1].play();
        //delete itself when animation is done
        this.activePaylines[this.activePaylines.length - 1].onCompleteSignal.add(this.onPaylineAnimationComplete, this);
    };
    PaylinesView.prototype.hide = function () {
        this.activePaylines.forEach(function (payline) {
            payline.destroy();
        });
        this.activePaylines = [];
    };
    PaylinesView.prototype.onPaylineAnimationComplete = function (payline) {
        var index = this.activePaylines.indexOf(payline);
        if (index > -1) {
            this.activePaylines[index].destroy();
            this.activePaylines.splice(index, 1);
        }
        else {
            throw '[PaylinesView] : no payline index found to remove! lineNumber : ' + payline.lineNumber;
        }
    };
    /**
     * Get the first win index.
     *
     * @protected
     * @param {Array<boolean>} reel
     * @returns {number}
     * @memberof PaylinesView
     */
    PaylinesView.prototype.getWinSymbolIndex = function (reel) {
        var index = -1;
        reel.forEach(function (value, i) {
            if (value) {
                index = i;
            }
        });
        return index;
    };
    return PaylinesView;
}(WinDisplayView_1.WinDisplayView));
exports.PaylinesView = PaylinesView;


/***/ }),
/* 766 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var pixi_js_1 = __webpack_require__(4);
var MiniSignal = __webpack_require__(3);
var NMath_1 = __webpack_require__(65);
var SimpleTimer_1 = __webpack_require__(15);
var Animation_1 = __webpack_require__(26);
var Payline = /** @class */ (function () {
    function Payline(config, lineNumber) {
        this.activeAnimationsCount = 0;
        this.onCompleteSignal = new MiniSignal();
        this.config = config;
        this.container = new pixi_js_1.Container();
        this.mask = new pixi_js_1.Graphics();
        this.container.addChild(this.mask);
        this.elements = [];
        this.timers = [];
        this.lineNumber = lineNumber;
    }
    /**
     * Override this for symbol frame customization
     */
    Payline.prototype.addFrame = function (position) {
        var _this = this;
        var assetNameParts = this.config.frameAssetName.split('{}');
        var sprite = Animation_1.Animation.createFrameAnimation(Animation_1.Animation.generateFrameNames(assetNameParts[0], 1, this.config.frameFR, assetNameParts[1], 2));
        sprite.anchor.set(0.5, 0.5);
        sprite.position = position;
        sprite.loop = false;
        sprite.visible = false;
        sprite.animationSpeed = this.config.frameAnimSpeed;
        sprite.onComplete = function () {
            _this.onElementAnimComplete(sprite);
        };
        this.container.addChild(sprite);
        this.elements.push({ type: ElementType.FRAME, sprite: sprite, delayMS: this.config.frameDisplayTimeMs });
    };
    /**
     * Override this for connection line customization
     */
    Payline.prototype.addLine = function (position, angle, scale) {
        var _this = this;
        var assetNameParts = this.config.lineAssetName.split('{}');
        var sprite = Animation_1.Animation.createFrameAnimation(Animation_1.Animation.generateFrameNames(assetNameParts[0], 1, this.config.lineFR, assetNameParts[1], 2));
        sprite.anchor.set(0.5, 0.5);
        sprite.position = position;
        sprite.rotation = angle;
        sprite.scale.set(scale, 1);
        sprite.loop = false;
        sprite.visible = false;
        sprite.animationSpeed = this.config.lineAnimSpeed;
        sprite.onComplete = function () {
            _this.onElementAnimComplete(sprite);
        };
        //sprite.mask = this.mask;
        this.container.addChild(sprite);
        this.elements.push({ type: ElementType.LINE, sprite: sprite, delayMS: this.config.lineDisplayTimeMs });
    };
    /**
     * Override this for dot customization
     */
    Payline.prototype.addDot = function (position) {
        //TODO: add dot animation later
    };
    Payline.prototype.play = function () {
        var _this = this;
        this.clearTimers();
        this.activeAnimationsCount = this.elements.length;
        var delayMs = 0;
        var _loop_1 = function (i) {
            this_1.timers.push(new SimpleTimer_1.SimpleTimer(delayMs, function () {
                _this.elements[i].sprite.visible = true;
                _this.elements[i].sprite.gotoAndPlay(0);
            }));
            delayMs += this_1.elements[i].delayMS;
        };
        var this_1 = this;
        for (var i = 0; i < this.elements.length; i++) {
            _loop_1(i);
        }
    };
    Payline.prototype.stop = function () {
        this.clearTimers();
        //hide all elements
        for (var i = 0; i < this.elements.length; i++) {
            this.elements[i].sprite.visible = false;
        }
    };
    Payline.prototype.clearTimers = function () {
        for (var i = 0; i < this.timers.length; i++) {
            this.timers[i].stop(false);
        }
        this.activeAnimationsCount = 0;
    };
    Payline.prototype.onSequenceComplete = function () {
        this.clearTimers();
        //dispatch callback
        this.onCompleteSignal.dispatch(this);
    };
    Payline.prototype.onElementAnimComplete = function (sprite) {
        sprite.visible = false;
        if (--this.activeAnimationsCount <= 0) {
            this.onSequenceComplete();
        }
    };
    /**
     * creates new animated payline
     * @param positions relative coords of framed symbols
     * @param winComboLenght symbols count that should have frame
     * @param config meta for payline
     * @param viewport viewport
     */
    Payline.payline = function (positions, winComboLength, config, lineNumber) {
        var payline = new Payline(config, lineNumber);
        for (var i = 0; i < positions.length; i++) {
            //is current node is beginning of line?
            if (i == 0) {
                if (winComboLength > 0) {
                    payline.addFrame(positions[i]);
                }
            }
            else {
                if (winComboLength > 0 && winComboLength > i) {
                    //ensure that we display connection to previous node first
                    payline.addLine(new pixi_js_1.Point((positions[i].x + positions[i - 1].x) / 2.0, (positions[i].y + positions[i - 1].y) / 2.0), NMath_1.NMath.angleBetweenPointsRad(positions[i - 1], positions[i]), NMath_1.NMath.distanceBetweenPoints(positions[i - 1], positions[i]) / config.lineWidth);
                    payline.addFrame(positions[i]);
                }
                else {
                    payline.addLine(new pixi_js_1.Point((positions[i].x + positions[i - 1].x) / 2.0, (positions[i].y + positions[i - 1].y) / 2.0), NMath_1.NMath.angleBetweenPointsRad(positions[i - 1], positions[i]), NMath_1.NMath.distanceBetweenPoints(positions[i - 1], positions[i]) / config.lineWidth);
                    //add dot only if this is not the last node
                    if (positions.length - 1 > i) {
                        payline.addDot(positions[i]);
                    }
                }
            }
        }
        return payline;
    };
    Payline.prototype.destroy = function () {
        for (var i = 0; i < this.elements.length; i++) {
            this.elements[i].sprite.destroy();
            this.elements[i].sprite = undefined;
        }
        this.elements = undefined;
        for (var i = 0; i < this.timers.length; i++) {
            this.timers[i].destroy();
        }
        this.timers = undefined;
        this.container.destroy();
        this.container = undefined;
    };
    return Payline;
}());
exports.Payline = Payline;
var PaylineElement = /** @class */ (function () {
    function PaylineElement() {
    }
    return PaylineElement;
}());
var ElementType;
(function (ElementType) {
    ElementType[ElementType["FRAME"] = 0] = "FRAME";
    ElementType[ElementType["LINE"] = 1] = "LINE";
    ElementType[ElementType["DOT"] = 2] = "DOT";
})(ElementType || (ElementType = {}));


/***/ }),
/* 767 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var PaylineConfig = /** @class */ (function () {
    function PaylineConfig() {
        this.name = 'payline';
        this.frameAssetName = 'paylineFrame_{}.png';
        this.frameAnimSpeed = 0.5;
        this.frameFR = 15;
        this.frameWidth = 225;
        this.frameHeight = 225;
        this.frameDisplayTimeMs = 200;
        this.lineAssetName = 'payline2_{}.png';
        this.lineAnimSpeed = 0.4;
        this.lineFR = 14;
        this.lineWidth = 470;
        this.lineHeight = 55;
        this.lineDisplayTimeMs = 200;
        this.dotAssetName = '';
        this.dotAnimSpeed = 0;
        this.dotFR = 0;
        this.dotWidth = 0;
        this.dotHeight = 0;
        this.dotDisplayTimeMs = 0;
        this.labelSideFrame = 'End.png';
        this.labelMidFrame = 'Middle.png';
    }
    return PaylineConfig;
}());
exports.PaylineConfig = PaylineConfig;


/***/ }),
/* 768 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var AnimationViewController_1 = __webpack_require__(398);
var BackgroundView_1 = __webpack_require__(399);
var BackgroundConfig_1 = __webpack_require__(224);
var BackgroundController = /** @class */ (function (_super) {
    __extends(BackgroundController, _super);
    function BackgroundController(view) {
        return _super.call(this, view) || this;
    }
    BackgroundController.prototype.init = function (data) {
        if (this.view != undefined) {
            this.view.initialize(this.gameConfig.getConfig(BackgroundConfig_1.BackgroundConfig));
        }
        this.finishStateAction();
    };
    var _a;
    BackgroundController = __decorate([
        __param(0, es5_1.Inject),
        __metadata("design:paramtypes", [typeof (_a = typeof BackgroundView_1.BackgroundView !== "undefined" && BackgroundView_1.BackgroundView) === "function" && _a || Object])
    ], BackgroundController);
    return BackgroundController;
}(AnimationViewController_1.AnimationViewController));
exports.BackgroundController = BackgroundController;


/***/ }),
/* 769 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var Helper_1 = __webpack_require__(5);
var CoreEvent_1 = __webpack_require__(137);
var CoreState_1 = __webpack_require__(76);
var HeartTicker_1 = __webpack_require__(87);
var GlobalDispatcher_1 = __webpack_require__(7);
var UIBankController_1 = __webpack_require__(770);
var SlotEvent_1 = __webpack_require__(32);
var SlotUIController_1 = __webpack_require__(390);
var MLUIStates_1 = __webpack_require__(401);
var MLUISoundConfig_1 = __webpack_require__(243);
var MLUIBetController_1 = __webpack_require__(771);
var MLUISpinController_1 = __webpack_require__(245);
var MLUIMenuController_1 = __webpack_require__(777);
var MLUIRulesController_1 = __webpack_require__(780);
var MLUIExternalModuleController_1 = __webpack_require__(164);
var MLUIHistoryController_1 = __webpack_require__(788);
var MLUIPaytableController_1 = __webpack_require__(895);
var MLUISettingsController_1 = __webpack_require__(896);
var MLUISlotPanelController_1 = __webpack_require__(900);
var MLUIBackgroundController_1 = __webpack_require__(902);
var MLUITurboController_1 = __webpack_require__(905);
var MLUISpinSettingsController_1 = __webpack_require__(263);
var SlotInformationHeaderController_1 = __webpack_require__(915);
/**
 * Handel all the element behavior for user interface.
 * It has it's own local machine
 */
var MLUIController = /** @class */ (function (_super) {
    __extends(MLUIController, _super);
    function MLUIController() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.slotPanelId = 'slotPanel';
        _this.turboPanelId = 'turbo';
        _this.bankPanelId = 'bank';
        _this.maxBetPanelId = 'maxBet';
        _this.spinPanelId = 'spin';
        _this.spinSettingsPanelId = 'spinSettings';
        _this.menuPanelId = 'menu';
        _this.settingPanelId = 'settings';
        _this.betPanelId = 'bet';
        return _this;
    }
    MLUIController.prototype.createComponentList = function (components) {
        components.push({ id: this.slotPanelId, class: MLUISlotPanelController_1.MLUISlotPanelController });
        // layer 1 panel
        components.push({ id: this.bankPanelId, class: UIBankController_1.UIBankController });
        components.push({ id: this.turboPanelId, class: MLUITurboController_1.MLUITurboController });
        components.push({ id: this.spinPanelId, class: MLUISpinController_1.MLUISpinController });
        components.push({ id: 'uiBackground', class: MLUIBackgroundController_1.MLUIBackgroundController });
        components.push({ id: this.spinSettingsPanelId, class: MLUISpinSettingsController_1.MLUISpinSettingsController });
        components.push({ id: this.betPanelId, class: MLUIBetController_1.MLUIBetController });
        components.push({ id: this.menuPanelId, class: MLUIMenuController_1.MLUIMenuController });
        // layer 2 panel
        components.push({ id: this.settingPanelId, class: MLUISettingsController_1.MLUISettingsController });
        // External DOM pages
        components.push({ id: 'paytable', class: MLUIPaytableController_1.MLUIPaytableController });
        components.push({ id: 'rules', class: MLUIRulesController_1.MLUIRulesController });
        components.push({ id: 'history', class: MLUIHistoryController_1.MLUIHistoryController });
        components.push({ id: 'informationHeader', class: SlotInformationHeaderController_1.SlotInformationHeaderController });
        //DOM elements
        /* add this feature back while we have broadcast system
        if ( Helper.isShowMessage() ) {
            components.push( { id: 'messenger', class: MLUIMessengerController } );
        }
        */
    };
    MLUIController.prototype.getAssetsList = function () {
        var assetsList = _super.prototype.getAssetsList.call(this);
        assetsList.push.apply(assetsList, [
            {
                assetKey: 'mlui_main_view',
                assetURL: 'assets/ngmoonlightui/mlui_main_view.json'
            },
            {
                assetKey: 'mlui_menu',
                assetURL: 'assets/ngmoonlightui/mlui_menu.json'
            },
            {
                assetKey: 'external-helpscreens',
                assetURL: 'assets/helpscreens/helpscreens.ejs'
            },
            {
                assetKey: 'external-history',
                assetURL: 'assets/history/history.ejs'
            },
            {
                assetKey: 'BankFont',
                assetURL: 'assets/fonts/bitmap/BankFont.xml'
            },
            {
                assetKey: MLUISoundConfig_1.MLUISoundConfig.spin,
                assetURL: "assets/sound/ui/" + MLUISoundConfig_1.MLUISoundConfig.spin + ".mp3"
            },
            {
                assetKey: MLUISoundConfig_1.MLUISoundConfig.betDown,
                assetURL: "assets/sound/ui/" + MLUISoundConfig_1.MLUISoundConfig.betDown + ".mp3"
            },
            {
                assetKey: MLUISoundConfig_1.MLUISoundConfig.betUp,
                assetURL: "assets/sound/ui/" + MLUISoundConfig_1.MLUISoundConfig.betUp + ".mp3"
            }
        ]);
        return assetsList;
    };
    MLUIController.prototype.addEventListeners = function () {
        _super.prototype.addEventListeners.call(this);
        GlobalDispatcher_1.GlobalDispatcher.addListener(this, CoreEvent_1.CoreEvent.ON_OPEN_ERROR_DIALOG, this.onOpenErrorDialog.bind(this));
        GlobalDispatcher_1.GlobalDispatcher.addListener(this, SlotEvent_1.SlotEvent.SHOW_FULL_SCREEN_UI, this.onFullScreenUIShow.bind(this));
        GlobalDispatcher_1.GlobalDispatcher.addListener(this, SlotEvent_1.SlotEvent.HIDE_FULL_SCREEN_UI, this.onFullScreenUIHide.bind(this));
        GlobalDispatcher_1.GlobalDispatcher.addListener(this, MLUIExternalModuleController_1.MLUIExternalModuleController.OPEN_EXTERNAL_MODULE, this.onFullScreenUIShow.bind(this));
        GlobalDispatcher_1.GlobalDispatcher.addListener(this, MLUIExternalModuleController_1.MLUIExternalModuleController.CLOSE_EXTERNAL_MODULE, this.onFullScreenUIHide.bind(this));
    };
    MLUIController.prototype.onOpenErrorDialog = function (e) {
        if (this.menuController) {
            this.menuController.closeExternalModules();
        }
    };
    MLUIController.prototype.onStateInit = function (stateData) {
        this.slotPanelController = this.dashboardComponentManager.getComponentByID(this.slotPanelId);
        this.bankController = this.dashboardComponentManager.getComponentByID(this.bankPanelId);
        this.turboController = this.dashboardComponentManager.getComponentByID(this.turboPanelId);
        this.spinController = this.dashboardComponentManager.getComponentByID(this.spinPanelId);
        this.spinSettingsController = this.dashboardComponentManager.getComponentByID(this.spinSettingsPanelId);
        this.menuController = this.dashboardComponentManager.getComponentByID(this.menuPanelId);
        this.settingsControler = this.dashboardComponentManager.getComponentByID(this.settingPanelId);
        this.betController = this.dashboardComponentManager.getComponentByID(this.betPanelId);
        this.addComponentsEventListeners();
        _super.prototype.onStateInit.call(this, stateData);
    };
    MLUIController.prototype.addComponentsEventListeners = function () {
        this.slotPanelController.showBetPanelEventSignal.add(this.onShowBetPanel, this);
        this.slotPanelController.showSpinSettingsPanelEventSignal.add(this.onShowSpinSettingsPanel, this);
        this.slotPanelController.showMenuPanelEventSignal.add(this.onShowMenuPlayPanel, this);
        this.slotPanelController.betIncraseSignal.add(this.onBetChange, this);
        this.slotPanelController.betDecraseSignal.add(this.onBetChange, this);
        this.bankService.onBetUpdatedSignal.add(this.onBetChange, this);
        this.bankService.onLinesUpdatedSignal.add(this.onLineChange, this);
        this.bankService.onBalanceUpdatedSignal.add(this.onBalanceChange, this);
        this.bankService.onWinUpdatedSignal.add(this.onWinChange, this);
        this.spinSettingsController.autoPlayStartSignal.add(this.onAutoPlayStart, this);
        this.spinSettingsController.onAutoSpinEventSignal.add(this.onAutoSpinEvent, this);
        this.spinSettingsController.autoPlayStopSignal.add(this.onAutoPlayStop, this);
        this.menuController.showMenuPopupSignal.add(this.onSubMenuPopup, this);
        this.turboController.turboModeSignal.add(this.onTurboModeChange, this);
    };
    MLUIController.prototype.onTurboModeChange = function (speed) {
        this.heartTicker.turnOnTurbo(speed);
        this.turboController.setTurboButtonMode(speed);
    };
    MLUIController.prototype.onShowBetPanel = function () {
        this.betController.showPopup();
    };
    MLUIController.prototype.onShowSpinSettingsPanel = function () {
        this.spinSettingsController.showPopup();
    };
    MLUIController.prototype.onShowMenuPlayPanel = function () {
        this.menuController.showPopup();
    };
    MLUIController.prototype.onAutoSpinEvent = function () {
        this.spinController.onAutoSpinEvent();
    };
    MLUIController.prototype.onBetChange = function (newbet) {
        this.bankController.totalBetUpdate(this.bankService.totalBet);
    };
    MLUIController.prototype.onLineChange = function (newline) {
        this.bankController.totalBetUpdate(this.bankService.totalBet);
    };
    MLUIController.prototype.onBalanceChange = function (balance) {
        this.bankController.balanceUpdate(balance);
    };
    MLUIController.prototype.onWinChange = function (win) {
        //
    };
    MLUIController.prototype.freeSpinsStart = function (stateData) {
        this.dashboardLocalStateMachine.setState(new CoreState_1.CoreState(this.states.freeSpinsStart, Helper_1.Helper.mergeTwoObjects({}, stateData)));
        if (stateData && stateData.currentFreeSpinCount !== undefined) {
            this.spinController.setSpinButtonFreeSpins(stateData.currentFreeSpinCount, stateData.totalFreeSpinCount);
        }
        this.finishStateAction();
    };
    MLUIController.prototype.onSubMenuPopup = function (subMenu) {
        if (subMenu == this.settingPanelId) {
            this.settingsControler.showPopup();
        }
    };
    MLUIController.prototype.onFullScreenPanel = function (e) {
        console.log(e);
    };
    MLUIController.prototype.onAutoPlayStop = function () {
        _super.prototype.onAutoPlayStop.call(this);
        if (!this.isFreeSpin) {
            this.spinController.stopAutoSpins();
        }
    };
    MLUIController.prototype.onLocalStateChanged = function (stateName) {
        if (this.dashboardLocalStateMachine.currentState.stateName == this.states.autoSpinDashboardIdle) {
            if (!this.isAutoSpin) {
                stateName = this.states.baseGameIdle;
            }
        }
        this.localButtonsController.applyButtonsTemplate(stateName);
    };
    MLUIController.prototype.onFullScreenUIShow = function () {
        this.dashboardLocalStateMachine.setState(new CoreState_1.CoreState(this.states.dashboardDisable, null));
        this.isShowFullScreenUI = true;
    };
    MLUIController.prototype.onFullScreenUIHide = function () {
        this.dashboardLocalStateMachine.setState(new CoreState_1.CoreState(this.states.baseGameIdle, null));
        this.isShowFullScreenUI = false;
    };
    MLUIController.prototype.gameStartTutorial = function () {
        this.dashboardLocalStateMachine.setState(new CoreState_1.CoreState(this.states.gameStartTutorial, null));
        this.finishStateAction();
    };
    var _a, _b;
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof MLUIStates_1.MLUIStates !== "undefined" && MLUIStates_1.MLUIStates) === "function" && _a || Object)
    ], MLUIController.prototype, "states", void 0);
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_b = typeof HeartTicker_1.HeartTicker !== "undefined" && HeartTicker_1.HeartTicker) === "function" && _b || Object)
    ], MLUIController.prototype, "heartTicker", void 0);
    return MLUIController;
}(SlotUIController_1.SlotUIController));
exports.MLUIController = MLUIController;


/***/ }),
/* 770 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var CompController_1 = __webpack_require__(43);
var UIBankPanelView_1 = __webpack_require__(208);
var UIBankConfig_1 = __webpack_require__(207);
var UIBankController = /** @class */ (function (_super) {
    __extends(UIBankController, _super);
    function UIBankController(view) {
        return _super.call(this, view) || this;
    }
    UIBankController.prototype.init = function (data) {
        var config = this.gameConfig.getConfig(UIBankConfig_1.UIBankConfig);
        this.view.initialize(config);
        this.totalBetUpdate(data.totalBet);
        this.balanceUpdate(data.balance);
        this.finishStateAction();
    };
    UIBankController.prototype.totalBetUpdate = function (totalBet) {
        this.view.totalBet = totalBet;
    };
    UIBankController.prototype.balanceUpdate = function (balance) {
        this.view.balance = balance;
    };
    var _a;
    UIBankController = __decorate([
        __param(0, es5_1.Inject),
        __metadata("design:paramtypes", [typeof (_a = typeof UIBankPanelView_1.UIBankPanelView !== "undefined" && UIBankPanelView_1.UIBankPanelView) === "function" && _a || Object])
    ], UIBankController);
    return UIBankController;
}(CompController_1.CompController));
exports.UIBankController = UIBankController;


/***/ }),
/* 771 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var GlobalDispatcher_1 = __webpack_require__(7);
var UIPanelController_1 = __webpack_require__(58);
var SlotEvent_1 = __webpack_require__(32);
var SlotGameType_1 = __webpack_require__(92);
var MLUIBetPanel_1 = __webpack_require__(772);
var MLUIBetConfig_1 = __webpack_require__(774);
var MLUIBetController = /** @class */ (function (_super) {
    __extends(MLUIBetController, _super);
    function MLUIBetController(view) {
        return _super.call(this, view) || this;
    }
    MLUIBetController.prototype.init = function (data) {
        this.gameType = data.gametype;
        if (!SlotGameType_1.SlotGameType[data.gametype]) {
            console.error('MLUIBetController, unknow game type : ' + data.gametype);
        }
        this.view.setGameType(this.gameType);
        var config = this.gameConfig.getConfig(MLUIBetConfig_1.MLUIBetConfig);
        this.view.initialize(config);
        this.view.onBetChangeSignal.add(this.onBetChange.bind(this));
        this.setLocalButtonEvents(config);
        this.finishStateAction();
    };
    /**
     * setup button callback for local button events
     * @param config
     */
    MLUIBetController.prototype.setLocalButtonEvents = function (config) {
        this.setButtonActionEventListeners(config.confirmButton);
        this.setButtonActionEventListeners(config.closeButton);
    };
    MLUIBetController.prototype.action_hideBetOptions = function () {
        this.view.onClose();
        this.onHideBetPanel();
    };
    MLUIBetController.prototype.action_confirmBetOptions = function () {
        this.view.confirmBet();
        this.onHideBetPanel();
    };
    MLUIBetController.prototype.onHideBetPanel = function () {
        GlobalDispatcher_1.GlobalDispatcher.dispatchIntoAllStates(SlotEvent_1.SlotEvent.HIDE_FULL_SCREEN_UI);
    };
    MLUIBetController.prototype.onBetChange = function (betIndex) {
        this.betIndex = betIndex;
    };
    MLUIBetController.prototype.showPopup = function () {
        this.view.showPopup();
        GlobalDispatcher_1.GlobalDispatcher.dispatchIntoAllStates(SlotEvent_1.SlotEvent.SHOW_FULL_SCREEN_UI);
    };
    var _a;
    MLUIBetController = __decorate([
        __param(0, es5_1.Inject),
        __metadata("design:paramtypes", [typeof (_a = typeof MLUIBetPanel_1.MLUIBetPanel !== "undefined" && MLUIBetPanel_1.MLUIBetPanel) === "function" && _a || Object])
    ], MLUIBetController);
    return MLUIBetController;
}(UIPanelController_1.UIPanelController));
exports.MLUIBetController = MLUIBetController;


/***/ }),
/* 772 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var MiniSignal = __webpack_require__(3);
var es5_1 = __webpack_require__(0);
var Window_1 = __webpack_require__(142);
var Sprite_1 = __webpack_require__(48);
var Button_1 = __webpack_require__(19);
var TextButton_1 = __webpack_require__(154);
var MoneyFormatter_1 = __webpack_require__(16);
var WebTextField_1 = __webpack_require__(35);
var ValueStepper_1 = __webpack_require__(773);
var SlotGameType_1 = __webpack_require__(92);
var SlotBankService_1 = __webpack_require__(49);
var MLUIPanel_1 = __webpack_require__(94);
var Translator_1 = __webpack_require__(25);
var pixi_js_1 = __webpack_require__(4);
var CoreUIElementFactory_1 = __webpack_require__(28);
var MLUIBetPanel = /** @class */ (function (_super) {
    __extends(MLUIBetPanel, _super);
    function MLUIBetPanel() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.onBetChangeSignal = new MiniSignal();
        _this.betStartIndex = 0;
        _this.linesStartIndex = 0;
        return _this;
    }
    MLUIBetPanel.prototype.createElements = function (config) {
        _super.prototype.createElements.call(this, config);
        this.createPanelBackground();
        this.createMainTitle();
        this.addConfirmButton(config.confirmButton);
        this.createCloseButton(config.closeButton);
        this.createMaxBetButton(config.maxBetButton);
        this.addShowTotalBetValue(config.showTotalBetValue);
        this.createBetStepper(this.config.betStepper);
        this.createLineStepper(this.config.lineStepper);
        this.createSeparateLine(this.config.separateLine);
        this.createButtonsSprites(this.config);
        this.hidePopup();
    };
    MLUIBetPanel.prototype.createSeparateLine = function (config) {
        this.separateLine = new Sprite_1.Sprite(config);
        this.addChild(this.separateLine);
    };
    MLUIBetPanel.prototype.createMainTitle = function () {
        var title = new WebTextField_1.WebTextField(this.config.mainTitle);
        this.addChild(title);
    };
    MLUIBetPanel.prototype.createButtonsSprites = function (config) {
        this.confirmSprite = new Sprite_1.Sprite(config.confirmSprite);
        this.addChild(this.confirmSprite);
    };
    MLUIBetPanel.prototype.createMaxBetButton = function (data) {
        this.maxBetButton = new TextButton_1.TextButton(data);
        this.maxBetButton.elementSignal.add(this.maxBet.bind(this));
        this.maxBetButton.anchor = new pixi_js_1.Point(0.5, 0.5);
        this.addChild(this.maxBetButton);
    };
    MLUIBetPanel.prototype.maxBet = function () {
        this.onBetChange(this.bankService.betOptions.length - 1);
        if (this.betStepper != null) {
            this.betStepper.index = this.bankService.betOptions.length - 1;
        }
        if (this.gameType == SlotGameType_1.SlotGameType.LINEGAME) {
            this.onLinesChange(this.bankService.availableLines.length - 1);
            if (this.lineStepper != null) {
                this.lineStepper.index = this.bankService.availableLines.length - 1;
            }
        }
        this.confirmButton.setEnable(true);
    };
    MLUIBetPanel.prototype.createPanelBackground = function () {
        var background = new Window_1.Window(this.config.background);
        this.addChild(background);
    };
    MLUIBetPanel.prototype.addShowTotalBetValue = function (data) {
        this.showTotalBetValue = new WebTextField_1.WebTextField(data);
        this.showTotalBetValue.text = this.moneyFormatter.formatMoney(this.bankService.totalBet, MoneyFormatter_1.NumberDisplayMode.VALUE_WITH_CURRENCY);
        this.showTotalBetValue.x = this.viewport.width / 2 - this.showTotalBetValue.width / 2;
        this.addChild(this.showTotalBetValue);
    };
    MLUIBetPanel.prototype.addConfirmButton = function (data) {
        this.confirmButton = new Button_1.Button(data, this.localButtonsController);
        this.setConfirmClickData();
        this.addChild(this.confirmButton);
    };
    MLUIBetPanel.prototype.setConfirmClickData = function () {
        this.confirmButton.clickData = {
            data: {}
        };
    };
    MLUIBetPanel.prototype.createCloseButton = function (data) {
        this.closeButton = new Button_1.Button(data, this.localButtonsController);
        this.addChild(this.closeButton);
    };
    MLUIBetPanel.prototype.createBetStepper = function (valueStepperConfig) {
        this.betStepper = new ValueStepper_1.ValueStepper(valueStepperConfig);
        var bets = new Array();
        for (var i = 0; i < this.bankService.betOptions.length; i++) {
            bets.push(this.moneyFormatter.formatMoney(this.bankService.betOptions[i], MoneyFormatter_1.NumberDisplayMode.VALUE_ONLY));
        }
        this.betStepper.onIndexChanged.add(this.onBetChange, this);
        this.betStepper.setItems(bets, this.bankService.betOptions.indexOf(this.bankService.bet));
        this.addChild(this.betStepper);
    };
    MLUIBetPanel.prototype.createLineStepper = function (valueStepperConfig) {
        this.lineStepper = new ValueStepper_1.ValueStepper(valueStepperConfig);
        if (this.gameType === SlotGameType_1.SlotGameType.LINEGAME) {
            this.lineStepper.setItems(this.bankService.availableLines, this.bankService.availableLines.indexOf(this.bankService.lines));
        }
        else if (this.gameType === SlotGameType_1.SlotGameType.FIXED_LINEGAME) {
            this.lineStepper.setItems([this.bankService.maxLines]);
        }
        else if (this.gameType === SlotGameType_1.SlotGameType.ALLPAYS) {
            this.setAllPaysConfigData();
        }
        this.lineStepper.onIndexChanged.add(this.onLinesChange, this);
        this.addChild(this.lineStepper);
    };
    MLUIBetPanel.prototype.onBetChange = function (newBet) {
        this.onBetChangeSignal.dispatch(newBet);
        this.bankService.bet = this.bankService.betOptions[newBet];
        if (this.gameType === SlotGameType_1.SlotGameType.LINEGAME || this.gameType === SlotGameType_1.SlotGameType.FIXED_LINEGAME) {
            var clickData = this.confirmButton.clickData;
            clickData.data.betAmount = this.bankService.bet;
            clickData.data.lines = this.bankService.lines;
            this.confirmButton.clickData = clickData;
        }
        this.totalBetUpdate();
        this.confirmButton.setEnable(true);
    };
    MLUIBetPanel.prototype.onLinesChange = function (newLines) {
        if (this.gameType === SlotGameType_1.SlotGameType.LINEGAME) {
            this.bankService.lines = this.bankService.availableLines[newLines];
            var clickData = this.confirmButton.clickData;
            clickData.data.betAmount = this.bankService.bet;
            clickData.data.lines = this.bankService.lines;
            this.confirmButton.clickData = clickData;
        }
        this.totalBetUpdate();
        this.confirmButton.setEnable(true);
    };
    MLUIBetPanel.prototype.totalBetUpdate = function () {
        var index = this.bankService.betOptions.indexOf(this.bankService.bet);
        var totalBet = this.bankService.betOptions[index] * this.bankService.lines;
        var clickData = this.confirmButton.clickData;
        clickData.data.totalBet = totalBet;
        this.confirmButton.clickData = clickData;
        this.showTotalBetValueUpdate();
        this.setMaxButtonEnable();
    };
    MLUIBetPanel.prototype.showTotalBetValueUpdate = function () {
        if (this.showTotalBetValue != null) {
            // tslint:disable-next-line: max-line-length
            this.showTotalBetValue.text = this.translator.t('totalBet') + ' ' + this.moneyFormatter.formatMoney(this.bankService.totalBet, MoneyFormatter_1.NumberDisplayMode.VALUE_WITH_CURRENCY);
            this.showTotalBetValue.x = this.viewport.width / 2 - this.showTotalBetValue.width / 2;
        }
    };
    MLUIBetPanel.prototype.setGameType = function (type) {
        this.gameType = type;
    };
    MLUIBetPanel.prototype.portraitLayout = function () {
        _super.prototype.portraitLayout.call(this);
        this.showTotalBetValueUpdate();
    };
    MLUIBetPanel.prototype.landscapeLayout = function () {
        _super.prototype.landscapeLayout.call(this);
        this.showTotalBetValueUpdate();
    };
    MLUIBetPanel.prototype.showPopup = function () {
        this.betStartIndex = this.bankService.betOptions.indexOf(this.bankService.bet);
        if (this.gameType === SlotGameType_1.SlotGameType.LINEGAME) {
            this.linesStartIndex = this.bankService.availableLines.indexOf(this.bankService.lines);
        }
        this.reset();
        this.confirmButton.setEnable(false);
        this.setMaxButtonEnable();
        this.visible = true;
    };
    MLUIBetPanel.prototype.onClose = function () {
        this.reset();
        this.hidePopup();
    };
    MLUIBetPanel.prototype.reset = function () {
        this.betStepper.index = this.betStartIndex;
        this.lineStepper.index = this.linesStartIndex;
    };
    MLUIBetPanel.prototype.confirmBet = function () {
        this.hidePopup();
    };
    MLUIBetPanel.prototype.hidePopup = function () {
        this.visible = false;
    };
    MLUIBetPanel.prototype.setAllPaysConfigData = function () {
        var allPaysCoins;
        allPaysCoins = CoreUIElementFactory_1.CoreUIElementFactory.createInstance(this.config.lineStepper.value);
        allPaysCoins.text = allPaysCoins.getTextByKey(this.config.lineStepper.value.elementConfig.key);
        this.config.lineStepper.title.elementConfig.key = 'coinValue';
        this.lineStepper.setItems([allPaysCoins.text]);
        this.lineStepper.updateAttributes(this.config.lineStepper);
        this.lineStepper.setNextButtonVisible(false);
        this.lineStepper.setPrevButtonVisible(false);
    };
    MLUIBetPanel.prototype.setMaxButtonEnable = function () {
        if (this.bankService.lines == this.bankService.availableLines[this.bankService.availableLines.length - 1] &&
            this.bankService.bet == this.bankService.betOptions[this.bankService.betOptions.length - 1]) {
            this.maxBetButton.setEnable(false);
        }
        else {
            this.maxBetButton.setEnable(true);
        }
    };
    var _a, _b, _c;
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof Translator_1.Translator !== "undefined" && Translator_1.Translator) === "function" && _a || Object)
    ], MLUIBetPanel.prototype, "translator", void 0);
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_b = typeof SlotBankService_1.SlotBankService !== "undefined" && SlotBankService_1.SlotBankService) === "function" && _b || Object)
    ], MLUIBetPanel.prototype, "bankService", void 0);
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_c = typeof MoneyFormatter_1.MoneyFormatter !== "undefined" && MoneyFormatter_1.MoneyFormatter) === "function" && _c || Object)
    ], MLUIBetPanel.prototype, "moneyFormatter", void 0);
    return MLUIBetPanel;
}(MLUIPanel_1.MLUIPanel));
exports.MLUIBetPanel = MLUIBetPanel;


/***/ }),
/* 773 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var MiniSignal = __webpack_require__(3);
var Button_1 = __webpack_require__(19);
var Window_1 = __webpack_require__(142);
var InteractiveElement_1 = __webpack_require__(140);
var CoreUIElementFactory_1 = __webpack_require__(28);
/**
 *  ValueStepper
 *
 * @export
 * @class ValueStepper
 * @extends {InteractiveElement}
 */
var ValueStepper = /** @class */ (function (_super) {
    __extends(ValueStepper, _super);
    function ValueStepper() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * Invoked every time when the value changed.
         *
         * @type {MiniSignal}
         * @memberof ValuePicker
         */
        _this.onIndexChanged = new MiniSignal();
        _this._index = 0;
        _this._items = [];
        return _this;
    }
    Object.defineProperty(ValueStepper.prototype, "index", {
        get: function () {
            return this._index;
        },
        set: function (index) {
            if (index !== this._index) {
                this.onIndexChanged.dispatch(index);
            }
            this._index = index;
            this.updateValueText();
            this.updateButtonStatus();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ValueStepper.prototype, "currentValue", {
        get: function () {
            return this._items[this.index];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ValueStepper.prototype, "items", {
        get: function () {
            return this.items;
        },
        enumerable: true,
        configurable: true
    });
    ValueStepper.prototype.initElement = function (config) {
        this.config = config;
        if (config.mainBoxBackground) {
            var mainBackground = this.config.mainBoxBackground;
            this.mainBackground = new Window_1.Window(config.mainBoxBackground);
            this.mainBackground.x = mainBackground.position.x || 0;
            this.mainBackground.y = mainBackground.position.y || 0;
            this.addChild(this.mainBackground);
        }
        if (config.textBoxBackground) {
            var textBackground = this.config.textBoxBackground;
            this.textBackground = new Window_1.Window(config.textBoxBackground);
            this.textBackground.x = textBackground.position.x || 0;
            this.textBackground.y = textBackground.position.y || 0;
            this.addChild(this.textBackground);
        }
        if (config.prevButton) {
            this.prevButton = new Button_1.Button(config.prevButton);
            this.prevButton.elementSignal.add(this.prev.bind(this));
            this.addChild(this.prevButton);
        }
        if (config.nextButton) {
            this.nextButton = new Button_1.Button(this.config.nextButton);
            this.nextButton.elementSignal.add(this.next.bind(this));
            this.addChild(this.nextButton);
        }
        this.titleText = CoreUIElementFactory_1.CoreUIElementFactory.createInstance(config.title);
        this.valueText = CoreUIElementFactory_1.CoreUIElementFactory.createInstance(config.value);
        this.addChild(this.titleText);
        this.addChild(this.valueText);
        if (config.items) {
            this.setItems(config.items, config.defaultIndex);
        }
    };
    ValueStepper.prototype.updateAttributes = function (config) {
        _super.prototype.updateAttributes.call(this, config);
        if (config == undefined) {
            return;
        }
        if (config.anchor) {
            this.setAnchor(config.anchor);
        }
        if (config.mainBoxBackground) {
            this.mainBackground.updateAttributes(config.mainBoxBackground);
        }
        if (config.textBoxBackground) {
            this.textBackground.updateAttributes(config.textBoxBackground);
        }
        if (config.title) {
            this.titleText.updateAttributes(config.title.elementConfig);
        }
        if (config.value) {
            this.valueText.updateAttributes(config.value.elementConfig);
        }
        if (config.nextButton) {
            this.nextButton.updateAttributes(config.nextButton);
        }
        if (config.prevButton) {
            this.prevButton.updateAttributes(config.prevButton);
        }
    };
    ValueStepper.prototype.setAnchor = function (anchor) {
        this.children.forEach(function (child) {
            try {
                child.anchor = { x: anchor.x, y: anchor.y };
            }
            catch (_a) {
                //
            }
        });
    };
    ValueStepper.prototype.getCurrentIndex = function () {
        return this.index;
    };
    ValueStepper.prototype.setItems = function (_items, defaultIndex) {
        if (defaultIndex === void 0) { defaultIndex = 0; }
        this._items = _items.slice(0);
        if (this.valueText) {
            this.index = defaultIndex;
        }
    };
    ValueStepper.prototype.next = function () {
        if (this.index < this._items.length - 1) {
            ++this.index;
        }
    };
    ValueStepper.prototype.prev = function () {
        if (this.index > 0) {
            --this.index;
        }
    };
    /**
     * Set to last item
     *
     * @memberof ValueStepper
     */
    ValueStepper.prototype.last = function () {
        this.index = this.items.length - 1;
    };
    /**
     * Set to first item
     *
     * @memberof ValueStepper
     */
    ValueStepper.prototype.first = function () {
        this.index = 0;
    };
    ValueStepper.prototype.setPrevButtonEnable = function (enable) {
        if (this.prevButton) {
            this.prevButton.setEnable(enable);
        }
    };
    ValueStepper.prototype.setNextButtonEnable = function (enable) {
        if (this.nextButton) {
            this.nextButton.setEnable(enable);
        }
    };
    ValueStepper.prototype.updateButtonStatus = function () {
        if (this._items.length === 1) {
            this.setPrevButtonEnable(false);
            this.setNextButtonEnable(false);
            return;
        }
        if (this._index === 0 && this.config.disableOnEnd) {
            this.setPrevButtonEnable(false);
            this.setNextButtonEnable(true);
        }
        else if (this._index === this._items.length - 1 && this.config.disableOnEnd) {
            this.setNextButtonEnable(false);
            this.setPrevButtonEnable(true);
        }
        else {
            this.setPrevButtonEnable(true);
            this.setNextButtonEnable(true);
        }
    };
    ValueStepper.prototype.updateValueText = function () {
        this.valueText.text = this.currentValue.toString();
    };
    ValueStepper.prototype.setPrevButtonVisible = function (enable) {
        if (this.prevButton !== undefined) {
            this.prevButton.visible = enable;
        }
    };
    ValueStepper.prototype.setNextButtonVisible = function (enable) {
        if (this.nextButton !== undefined) {
            this.nextButton.visible = enable;
        }
    };
    return ValueStepper;
}(InteractiveElement_1.InteractiveElement));
exports.ValueStepper = ValueStepper;


/***/ }),
/* 774 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var pixi_js_1 = __webpack_require__(4);
var TsMap_1 = __webpack_require__(2);
var Viewport_1 = __webpack_require__(6);
var WebTextField_1 = __webpack_require__(35);
var SlotActions_1 = __webpack_require__(44);
var IMLUIConfig_1 = __webpack_require__(59);
var MLUIButtonId_1 = __webpack_require__(38);
var MLUIFontStyles_1 = __webpack_require__(244);
var Helper_1 = __webpack_require__(5);
var MLUIBetConfig = /** @class */ (function (_super) {
    __extends(MLUIBetConfig, _super);
    function MLUIBetConfig() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.name = 'betPanel';
        _this.background = {
            name: 'betPanelBackground',
            anchor: { x: 0.5, y: 0.5 },
            isOrientationSupported: true,
            leftWidth: 5,
            topHeight: 5,
            rightWidth: 5,
            bottomHeight: 5,
            windowSize: { x: 670, y: 860 },
            position: { x: 25, y: 55 }
        };
        _this.mainTitle = {
            name: 'mainTitle',
            key: 'betTitle',
            isOrientationSupported: true,
            style: MLUIFontStyles_1.RegularTitleStyle,
            position: { x: 80, y: 95 }
        };
        _this.showTotalBetValue = {
            name: 'showTotalBetValue',
            isOrientationSupported: true,
            key: '',
            position: {
                x: 340,
                y: 565
            },
            style: MLUIFontStyles_1.BetPanelTotalBetStyle
        };
        _this.separateLine = {
            name: 'separateLine',
            assetName: 'horizontal_line.png',
            isOrientationSupported: true,
            position: { x: 70, y: 756 }
        };
        _this.confirmSprite = {
            name: 'confirmSprite',
            assetName: 'icon_confirm.png',
            isOrientationSupported: true,
            position: { x: 325, y: 803 }
        };
        _this.closeButton = {
            name: 'closeButton',
            isOrientationSupported: true,
            action: SlotActions_1.SlotActions.HIDE_BET_OPTIONS,
            id: MLUIButtonId_1.MLUIButtonId.BUTTON_HIDE_BET_OPTIONS,
            position: { x: 610, y: 120 },
            anchor: { x: 0.5, y: 0.5 },
            productLine: _this.productLine,
            assetName: 'icon_cancel',
            isLocal: true,
            scale: { x: 1.5, y: 1.5 },
        };
        _this.confirmButton = {
            name: 'confirmButton',
            isOrientationSupported: true,
            action: SlotActions_1.SlotActions.BUTTON_CONFIRM_BET_OPTIONS,
            id: MLUIButtonId_1.MLUIButtonId.BUTTON_CONFIRM_BET_OPTIONS,
            position: { x: 360, y: 840 },
            anchor: { x: 0.5, y: 0.5 },
            productLine: _this.productLine,
            assetName: 'genericButton1',
            isLocal: true
        };
        _this.maxBetButton = {
            name: 'maxBetButton',
            isOrientationSupported: true,
            action: SlotActions_1.SlotActions.BET_MAX,
            id: MLUIButtonId_1.MLUIButtonId.BUTTON_BET_MAX,
            position: { x: 360, y: 690 },
            productLine: _this.productLine,
            assetName: 'genericButton1',
            isLocal: true,
            text: {
                name: 'maxBetButtonText',
                key: 'maxBet',
                style: {
                    fontFamily: Helper_1.Helper.DEFAULT_FONTS,
                    fontWeight: 'bold',
                    fontSize: 24,
                    align: 'center',
                    fill: 'white'
                },
                autoscale: { x: 135, y: 135 },
                position: { x: 0, y: 0 }
            },
            selected: true
        };
        _this.betStepper = {
            name: 'betStepper',
            disableOnEnd: true,
            isOrientationSupported: true,
            anchor: { x: 0.5, y: 0.5 },
            position: { x: 360, y: 337 },
            title: {
                elementType: WebTextField_1.WebTextField.elementType,
                elementConfig: {
                    name: 'betStepperTitle',
                    key: 'bet',
                    style: __assign({}, MLUIFontStyles_1.BetPanelHighlightStyle, { align: 'center', fill: 0xffffff }),
                    position: { x: null, y: -50 },
                    autoscale: { x: 100, y: 50 }
                }
            },
            value: {
                elementType: WebTextField_1.WebTextField.elementType,
                elementConfig: {
                    name: 'betStepperTitle',
                    key: '',
                    style: __assign({}, MLUIFontStyles_1.BetPanelHighlightStyle, { align: 'center', fill: 0xffffff }),
                    autoscale: { x: 100, y: 50 }
                }
            },
            prevButton: {
                name: 'prevBetButton',
                position: {
                    x: -260,
                    y: -30
                },
                action: SlotActions_1.SlotActions.BET_DECREASE,
                id: MLUIButtonId_1.MLUIButtonId.BUTTON_BET_DECREASE,
                productLine: _this.productLine,
                assetName: 'arrow',
                isLocal: true,
                scale: new pixi_js_1.Point(1, 1),
            },
            nextButton: {
                name: 'nextBetButton',
                position: {
                    x: 260,
                    y: -30
                },
                action: SlotActions_1.SlotActions.BET_INCREASE,
                id: MLUIButtonId_1.MLUIButtonId.BUTTON_BET_INCREASE,
                productLine: _this.productLine,
                assetName: 'arrow',
                isLocal: true,
                scale: new pixi_js_1.Point(-1, 1),
            },
            textBoxBackground: {
                name: 'betStepperTextBoxBackground',
                leftWidth: 5,
                topHeight: 5,
                rightWidth: 5,
                bottomHeight: 5,
                windowSize: { x: 380, y: 140 },
                position: { x: -190, y: -90 }
            }
        };
        _this.lineStepper = {
            name: 'lineStepper',
            disableOnEnd: true,
            isOrientationSupported: true,
            anchor: { x: 0.5, y: 0.5 },
            position: { x: 360, y: 494 },
            title: {
                elementType: WebTextField_1.WebTextField.elementType,
                elementConfig: {
                    name: 'lineStepperTitle',
                    key: 'lines',
                    style: __assign({}, MLUIFontStyles_1.BetPanelHighlightStyle, { align: 'center', fill: 0xffffff }),
                    position: { x: null, y: -50 },
                    autoscale: { x: 100, y: 50 }
                }
            },
            value: {
                elementType: WebTextField_1.WebTextField.elementType,
                elementConfig: {
                    name: 'lineStepperTitle',
                    key: '40',
                    style: __assign({}, MLUIFontStyles_1.BetPanelHighlightStyle, { align: 'center', fill: 0xffffff }),
                    autoscale: { x: 100, y: 50 }
                }
            },
            prevButton: {
                name: 'prevLineButton',
                position: {
                    x: -260,
                    y: -30
                },
                action: SlotActions_1.SlotActions.LINE_DECREASE,
                id: MLUIButtonId_1.MLUIButtonId.BUTTON_LINE_DECREASE,
                productLine: _this.productLine,
                assetName: 'arrow',
                isLocal: true,
                scale: new pixi_js_1.Point(1, 1),
            },
            nextButton: {
                name: 'nextBetButton',
                position: {
                    x: 260,
                    y: -30
                },
                action: SlotActions_1.SlotActions.LINE_INCREASE,
                id: MLUIButtonId_1.MLUIButtonId.BUTTON_LINE_INCREASE,
                productLine: _this.productLine,
                assetName: 'arrow',
                isLocal: true,
                scale: new pixi_js_1.Point(-1, 1),
            },
            textBoxBackground: {
                name: 'lineStepperTextBoxBackground',
                leftWidth: 5,
                topHeight: 5,
                rightWidth: 5,
                bottomHeight: 5,
                windowSize: { x: 380, y: 140 },
                position: { x: -190, y: -90 }
            }
        };
        _this.coreElementOrientationConfig = new TsMap_1.TsMap([
            [
                Viewport_1.Orientation.PORTRAIT, new TsMap_1.TsMap([
                    [
                        _this.background.name, {
                            position: _this.background.position,
                            windowSize: _this.background.windowSize
                        }
                    ],
                    [
                        _this.mainTitle.name, {
                            position: _this.mainTitle.position
                        }
                    ],
                    [
                        _this.closeButton.name, {
                            position: _this.closeButton.position
                        }
                    ],
                    [
                        _this.confirmButton.name, {
                            position: _this.confirmButton.position
                        }
                    ],
                    [
                        _this.maxBetButton.name, {
                            position: _this.maxBetButton.position
                        }
                    ],
                    [
                        _this.showTotalBetValue.name, {
                            position: _this.showTotalBetValue.position,
                        }
                    ],
                    [
                        _this.betStepper.name, {
                            position: _this.betStepper.position,
                            textBoxBackground: {
                                windowSize: _this.betStepper.textBoxBackground.windowSize,
                                position: _this.betStepper.textBoxBackground.position,
                            },
                            prevButton: {
                                position: _this.betStepper.prevButton.position
                            },
                            nextButton: {
                                position: _this.betStepper.nextButton.position
                            }
                        }
                    ],
                    [
                        _this.lineStepper.name, {
                            position: _this.lineStepper.position,
                            textBoxBackground: {
                                windowSize: _this.lineStepper.textBoxBackground.windowSize,
                                position: _this.lineStepper.textBoxBackground.position
                            },
                            prevButton: {
                                position: _this.lineStepper.prevButton.position
                            },
                            nextButton: {
                                position: _this.lineStepper.nextButton.position
                            }
                        }
                    ],
                    [
                        _this.separateLine.name, {
                            position: _this.separateLine.position,
                        }
                    ],
                    [
                        _this.confirmSprite.name, {
                            position: _this.confirmSprite.position,
                        }
                    ]
                ])
            ],
            [
                Viewport_1.Orientation.LANDSCAPE, new TsMap_1.TsMap([
                    [
                        _this.background.name, {
                            position: { x: 228, y: 50 },
                            windowSize: { x: 824, y: 610 }
                        }
                    ],
                    [
                        _this.mainTitle.name, {
                            position: { x: 280, y: 95 }
                        }
                    ],
                    [
                        _this.closeButton.name, {
                            position: { x: 970, y: 120 }
                        }
                    ],
                    [
                        _this.confirmButton.name, {
                            position: { x: 780, y: 588 }
                        }
                    ],
                    [
                        _this.maxBetButton.name, {
                            position: { x: 500, y: 588 }
                        }
                    ],
                    [
                        _this.showTotalBetValue.name, {
                            position: { x: 720, y: 470 }
                        }
                    ],
                    [
                        _this.betStepper.name, {
                            position: { x: 640, y: 270 },
                            textBoxBackground: {
                                windowSize: { x: 500, y: 120 },
                                position: { x: -250, y: -90 }
                            },
                            prevButton: {
                                position: { x: -330, y: -30 }
                            },
                            nextButton: {
                                position: { x: 330, y: -30 }
                            }
                        }
                    ],
                    [
                        _this.lineStepper.name, {
                            position: { x: 640, y: 420 },
                            textBoxBackground: {
                                windowSize: { x: 500, y: 120 },
                                position: { x: -250, y: -90 }
                            },
                            prevButton: {
                                position: { x: -330, y: -30 }
                            },
                            nextButton: {
                                position: { x: 330, y: -30 }
                            }
                        }
                    ],
                    [
                        _this.separateLine.name, {
                            position: { x: 354, y: 508 },
                        }
                    ],
                    [
                        _this.confirmSprite.name, {
                            position: { x: 745, y: 550 },
                        }
                    ]
                ])
            ]
        ]);
        return _this;
    }
    return MLUIBetConfig;
}(IMLUIConfig_1.MLUIConfig));
exports.MLUIBetConfig = MLUIBetConfig;


/***/ }),
/* 775 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var pixi_js_1 = __webpack_require__(4);
var Helper_1 = __webpack_require__(5);
var Actions_1 = __webpack_require__(22);
var Viewport_1 = __webpack_require__(6);
var SimpleTween_1 = __webpack_require__(27);
var Button_1 = __webpack_require__(19);
var CoreUIElementFactory_1 = __webpack_require__(28);
var SlotActions_1 = __webpack_require__(44);
var MLUISoundConfig_1 = __webpack_require__(243);
/**
 * base game idle -> action spin
 * base game spining -> action empty
 * base game ready for stop -> action stop
 * base game spin stop -> action empty
 * base game with out win -> action spin
 * base game with win -> action spin
 * base game win loop  -> action spin
 *
 * free spin idle -> action free spin
 * free spin spining -> action empty
 * free spin ready for stop -> action free stop
 * free spin spin stop -> action empty
 * free spin with out win -> action free spin
 * free spin with win -> action free spin
 */
var SpinButton = /** @class */ (function (_super) {
    __extends(SpinButton, _super);
    function SpinButton() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(SpinButton.prototype, "currentButtonState", {
        get: function () {
            return this.iconState;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SpinButton.prototype, "isFreeSpin", {
        get: function () {
            return this._isFreeSpin;
        },
        set: function (value) {
            this._isFreeSpin = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SpinButton.prototype, "isSpinning", {
        get: function () {
            return this._isSpinning;
        },
        set: function (value) {
            this._isSpinning = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SpinButton.prototype, "anchor", {
        set: function (anchorPoint) {
            this.activeElement.anchor.set(anchorPoint.x, anchorPoint.y);
            this.iconElement.anchor.set(anchorPoint.x, anchorPoint.y);
            this.glowElement.anchor.set(anchorPoint.x, anchorPoint.y);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SpinButton.prototype, "isAutoSpins", {
        get: function () {
            return this._isAutoSpins;
        },
        enumerable: true,
        configurable: true
    });
    SpinButton.prototype.createElements = function (config) {
        var _this = this;
        _super.prototype.createElements.call(this, config);
        this._isAutoSpins = false;
        this.autoSpinCounter = 0;
        this.autoSpins = 0;
        this.spinIcon = this.getTexture(config.spinIconAsset);
        this.disabledIcon = this.getTexture(config.disabledIconAsset);
        this.stopIcon = this.getTexture(config.stopIconAsset);
        this.autoSpinIcon = this.getTexture(config.autoIconAsset);
        this.iconElement = new pixi_js_1.Sprite();
        this.iconElement.texture = this.spinIcon;
        this.glowElement = new pixi_js_1.Sprite();
        if (config.normalGlowAsset != Helper_1.Helper.EMPTY) {
            this.normalGlow = this.getTexture(config.normalGlowAsset, false);
            this.glowElement.texture = this.normalGlow;
        }
        else {
            this.normalGlow = this.glowElement.texture;
        }
        this.spinGlow = this.getTexture(config.spinGlowAsset);
        this.activeElement.addChild(this.iconElement);
        this.activeElement.addChild(this.glowElement);
        this.spinGlowTween = new SimpleTween_1.SimpleTween(this.glowElement)
            .to({ rotation: 360 * Math.PI / 180 }, 350)
            .onComplete(function () {
            _this.glowElement.rotation = 0;
        })
            .onStop(function () {
            _this.glowElement.rotation = 0;
        })
            .repeat(Infinity);
        this.autoSpinCounterLabel = CoreUIElementFactory_1.CoreUIElementFactory.createInstance(config.autoSpinCounterLabel);
        this.autoSpinTotalLabel = CoreUIElementFactory_1.CoreUIElementFactory.createInstance(config.autoSpinTotalLabel);
        this.autoSpinCounterLabel.visible = false;
        this.autoSpinTotalLabel.visible = false;
        this.addChild(this.autoSpinCounterLabel);
        this.addChild(this.autoSpinTotalLabel);
    };
    SpinButton.prototype.switchIconState = function (state) {
        this.iconState = state;
        switch (state) {
            case SpinButtonState.STOP_SPIN:
                this.switchIconToStopSpin();
                this.soundKey = '';
                break;
            case SpinButtonState.STOP_REELS:
                this.switchIconToStopReels();
                this.soundKey = '';
                break;
            case SpinButtonState.SPIN:
                this.switchIconToSpin();
                this.soundKey = MLUISoundConfig_1.MLUISoundConfig.spin;
                break;
            case SpinButtonState.DISABLED:
                this.switchIconToDisabled();
                this.soundKey = '';
                break;
        }
    };
    SpinButton.prototype.getCurrentIconState = function () {
        return this.iconState;
    };
    SpinButton.prototype.switchIconToSpin = function () {
        this.spinGlowTween.stop();
        this.isSpinning = false;
        if (this._isAutoSpins) {
            this.iconElement.texture = this.autoSpinIcon;
            this.glowElement.texture = this.spinGlow;
            if (this.isFreeSpin) {
                this.action = SlotActions_1.SlotActions.FREE_SPIN;
            }
            else {
                this.action = SlotActions_1.SlotActions.SPIN;
            }
        }
        else {
            this.iconElement.texture = this.spinIcon;
            this.glowElement.texture = this.normalGlow;
            this.autoSpinCounterLabel.visible = false;
            this.autoSpinTotalLabel.visible = false;
            this.action = SlotActions_1.SlotActions.SPIN;
        }
    };
    SpinButton.prototype.switchIconToStopSpin = function () {
        this.spinGlowTween.start();
        this.isSpinning = true;
        this.switchIconToStopReels();
    };
    SpinButton.prototype.switchIconToStopReels = function () {
        if (this._isAutoSpins) {
            this.iconElement.texture = this.autoSpinIcon;
            this.glowElement.texture = this.spinGlow;
            if (this.isFreeSpin) {
                this.action = SlotActions_1.SlotActions.FREE_SPIN_STOP;
            }
            else {
                this.action = SlotActions_1.SlotActions.STOP_SPIN;
            }
        }
        else {
            this.iconElement.texture = this.stopIcon;
            this.glowElement.texture = this.spinGlow;
            this.autoSpinCounterLabel.visible = false;
            this.autoSpinTotalLabel.visible = false;
            this.action = SlotActions_1.SlotActions.STOP_SPIN;
        }
    };
    SpinButton.prototype.switchIconToDisabled = function () {
        this.iconElement.texture = this.disabledIcon;
    };
    SpinButton.prototype.stopAutoSpins = function () {
        this._isAutoSpins = false;
        this.autoSpins = 0;
        this.autoSpinCounter = 0;
    };
    SpinButton.prototype.setAutospins = function (currentSpin, value) {
        this._isAutoSpins = true;
        this.autoSpins = value;
        this.autoSpinCounter = currentSpin ? currentSpin : 0;
        if (this.isFreeSpin) {
            this.autoSpinCounter--;
        }
        this.updateCurrentSpinLabel();
        this.autoSpinTotalLabel.text = this.autoSpins == -1 ? '∞' : this.autoSpins.toString();
        this.clickData.totalSpin = this.autoSpins == -1 ? '∞' : this.autoSpins;
        this.autoSpinCounterLabel.visible = true;
        this.autoSpinTotalLabel.visible = true;
    };
    SpinButton.prototype.setFreeSpinCount = function (currentCount, totalCount) {
        this.autoSpinCounterLabel.text = currentCount.toString();
        this.autoSpinTotalLabel.text = totalCount.toString();
        this.clickData.totalSpin = totalCount;
    };
    SpinButton.prototype.onSpinStart = function () {
        this.updateCurrentSpinLabel();
    };
    SpinButton.prototype.updateCurrentSpinLabel = function () {
        var currentSpin;
        currentSpin = this.autoSpinCounter;
        if (currentSpin == 0) {
            currentSpin = 1;
        }
        this.autoSpinCounterLabel.text = currentSpin.toString();
    };
    SpinButton.prototype.onSpinStop = function () {
        if (!this._isAutoSpins || this.autoSpins == -1) {
            return;
        }
        this.autoSpins--;
    };
    SpinButton.prototype.checkAndStopAutoSpins = function () {
        if (this.autoSpins == 0) {
            this.stopAutoSpins();
        }
    };
    SpinButton.prototype.updateClickDataCounts = function (currentCount, totalCount) {
        this.clickData.totalSpin = totalCount;
        this.clickData.currentSpin = currentCount ? currentCount : 1;
    };
    SpinButton.prototype.onPressEvent = function () {
        this.onClick(null);
    };
    /**
     * if it's triggered by clicking, the spin button send current spin,
     * or it send current spin + 1 because current spin hasn't update yet.
     * * @param {*} event
     */
    SpinButton.prototype.onClick = function (event) {
        this.setInteractive(false);
        this.clickData.action = Actions_1.Actions.CLICK_ACTION_PREFIX + this.action;
        if (this._isAutoSpins) { // including free spins
            if (this.clickData.action == 'action_freeSpin' || this.clickData.action == 'action_spin') {
                this.autoSpinCounter++;
            }
            this.updateClickDataCounts(this.autoSpinCounter, this.clickData.totalSpin);
        }
        else {
            if (this.clickData.currentSpin) {
                delete this.clickData.currentSpin;
            }
            if (this.clickData.totalSpin) {
                delete this.clickData.totalSpin;
            }
        }
        this.clickData.orientation = this.viewport.orientation;
        _super.prototype.onClick.call(this, event);
    };
    var _a;
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof Viewport_1.Viewport !== "undefined" && Viewport_1.Viewport) === "function" && _a || Object)
    ], SpinButton.prototype, "viewport", void 0);
    return SpinButton;
}(Button_1.Button));
exports.SpinButton = SpinButton;
var SpinButtonState;
(function (SpinButtonState) {
    SpinButtonState[SpinButtonState["SPIN"] = 0] = "SPIN";
    SpinButtonState[SpinButtonState["STOP_SPIN"] = 1] = "STOP_SPIN";
    SpinButtonState[SpinButtonState["STOP_REELS"] = 2] = "STOP_REELS";
    SpinButtonState[SpinButtonState["DISABLED"] = 3] = "DISABLED";
})(SpinButtonState = exports.SpinButtonState || (exports.SpinButtonState = {}));


/***/ }),
/* 776 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var TsMap_1 = __webpack_require__(2);
var Helper_1 = __webpack_require__(5);
var Viewport_1 = __webpack_require__(6);
var KeyboardManager_1 = __webpack_require__(204);
var WebTextField_1 = __webpack_require__(35);
var SlotActions_1 = __webpack_require__(44);
var IMLUIConfig_1 = __webpack_require__(59);
var MLUIButtonId_1 = __webpack_require__(38);
var MLUISoundConfig_1 = __webpack_require__(243);
var MLUIFontStyles_1 = __webpack_require__(244);
var MLUISpinConfig = /** @class */ (function (_super) {
    __extends(MLUISpinConfig, _super);
    function MLUISpinConfig() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.name = 'spinPanel';
        _this.spinButton = _this.getSpinButtonConfig();
        _this.coreElementOrientationConfig = new TsMap_1.TsMap([
            [
                Viewport_1.Orientation.PORTRAIT, new TsMap_1.TsMap([
                    [
                        _this.spinButton.name, {
                            name: _this.spinButton.name,
                            position: _this.spinButton.position,
                            circleHitArea: {
                                radius: 90
                            }
                        }
                    ],
                ])
            ],
            [
                Viewport_1.Orientation.LANDSCAPE, new TsMap_1.TsMap([
                    [
                        _this.spinButton.name, {
                            name: _this.spinButton.name,
                            position: { x: 1156, y: 426 },
                            circleHitArea: {
                                radius: 90
                            }
                        }
                    ],
                ])
            ]
        ]);
        return _this;
    }
    MLUISpinConfig.prototype.getSpinButtonConfig = function () {
        return {
            isOrientationSupported: true,
            name: 'spin_button',
            position: {
                x: 360,
                y: 1114
            },
            soundKey: MLUISoundConfig_1.MLUISoundConfig.spin,
            keyCode: KeyboardManager_1.Keycode.space,
            assetName: 'spin',
            action: SlotActions_1.SlotActions.SPIN,
            id: MLUIButtonId_1.MLUIButtonId.BUTTON_START_SPIN,
            productLine: this.productLine,
            isLocal: true,
            spinIconAsset: '_spin.png',
            disabledIconAsset: '_icon_Disabled.png',
            stopIconAsset: '_stop.png',
            autoIconAsset: '_bar.png',
            normalGlowAsset: Helper_1.Helper.EMPTY,
            spinGlowAsset: '_glow_gradient.png',
            autoSpinCounterLabel: {
                elementType: WebTextField_1.WebTextField.elementType,
                elementConfig: {
                    name: 'autoSpinCounterLabel',
                    key: '',
                    position: {
                        x: 0,
                        y: -25
                    },
                    anchor: {
                        x: 0.5,
                        y: 0.5
                    },
                    style: MLUIFontStyles_1.SpinButtonAutoSpinStyle
                }
            },
            autoSpinTotalLabel: {
                elementType: WebTextField_1.WebTextField.elementType,
                elementConfig: {
                    name: 'autoSpinTotalLabel',
                    key: '',
                    position: {
                        x: 0,
                        y: 25
                    },
                    anchor: {
                        x: 0.5,
                        y: 0.5
                    },
                    style: MLUIFontStyles_1.SpinButtonAutoSpinStyle
                }
            }
        };
    };
    return MLUISpinConfig;
}(IMLUIConfig_1.MLUIConfig));
exports.MLUISpinConfig = MLUISpinConfig;


/***/ }),
/* 777 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var MiniSignal = __webpack_require__(3);
var es5_1 = __webpack_require__(0);
var GlobalDispatcher_1 = __webpack_require__(7);
var UIPanelController_1 = __webpack_require__(58);
var SlotEvent_1 = __webpack_require__(32);
var MLUIMenuPanel_1 = __webpack_require__(778);
var MLUIMenuConfig_1 = __webpack_require__(779);
var MLUIMenuController = /** @class */ (function (_super) {
    __extends(MLUIMenuController, _super);
    function MLUIMenuController(view) {
        var _this = _super.call(this, view) || this;
        _this.showMenuPopupSignal = new MiniSignal();
        return _this;
    }
    MLUIMenuController.prototype.init = function () {
        var config = this.gameConfig.getConfig(MLUIMenuConfig_1.MLUIMenuConfig);
        this.view.initialize(config);
        this.setButtonActionEventListeners(config.settingsButton);
        this.setButtonActionEventListeners(config.closeButton);
        this.finishStateAction();
    };
    MLUIMenuController.prototype.addEventListeners = function () {
        _super.prototype.addEventListeners.call(this);
        this.view.showSignal.add(this.onDisplayChange, this);
    };
    MLUIMenuController.prototype.action_showSettings = function () {
        this.showMenuPopupSignal.dispatch('settings');
    };
    MLUIMenuController.prototype.action_hideMenuOptions = function () {
        this.view.hidePopup();
    };
    MLUIMenuController.prototype.onDisplayChange = function (value) {
        if (value) {
            GlobalDispatcher_1.GlobalDispatcher.dispatchIntoAllStates(SlotEvent_1.SlotEvent.SHOW_FULL_SCREEN_UI);
        }
        else {
            GlobalDispatcher_1.GlobalDispatcher.dispatchIntoAllStates(SlotEvent_1.SlotEvent.HIDE_FULL_SCREEN_UI);
        }
    };
    MLUIMenuController.prototype.showPopup = function () {
        this.view.showPopup();
    };
    MLUIMenuController.prototype.closeExternalModules = function () {
        this.view.closeExternalModules();
    };
    var _a;
    MLUIMenuController = __decorate([
        __param(0, es5_1.Inject),
        __metadata("design:paramtypes", [typeof (_a = typeof MLUIMenuPanel_1.MLUIMenuPanel !== "undefined" && MLUIMenuPanel_1.MLUIMenuPanel) === "function" && _a || Object])
    ], MLUIMenuController);
    return MLUIMenuController;
}(UIPanelController_1.UIPanelController));
exports.MLUIMenuController = MLUIMenuController;


/***/ }),
/* 778 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var MiniSignal = __webpack_require__(3);
var es5_1 = __webpack_require__(0);
var pixi_js_1 = __webpack_require__(4);
var SimpleTween_1 = __webpack_require__(27);
var UrlParameters_1 = __webpack_require__(14);
var MLUIFullScreenPanel_1 = __webpack_require__(163);
var MLUIExternalModuleManager_1 = __webpack_require__(404);
var tween_js_1 = __webpack_require__(47);
var TextButton_1 = __webpack_require__(154);
var MLUIMenuPanel = /** @class */ (function (_super) {
    __extends(MLUIMenuPanel, _super);
    function MLUIMenuPanel() {
        var _this = _super.call(this) || this;
        _this.menuButtons = new Array();
        _this.showSubMenuPanelEventSignal = new MiniSignal();
        _this.showSignal = new MiniSignal();
        return _this;
    }
    Object.defineProperty(MLUIMenuPanel.prototype, "showHomeButton", {
        get: function () {
            return (UrlParameters_1.UrlParameters.returnUrl != undefined);
        },
        enumerable: true,
        configurable: true
    });
    MLUIMenuPanel.prototype.createElements = function (config) {
        _super.prototype.createElements.call(this, config);
        this.background.alpha = 0;
        this.menuContainer = new pixi_js_1.Container();
        this.mainContainer.addChild(this.menuContainer);
        this.addBackground();
        this.addSettingsButton(config.settingsButton);
        this.addHistoryButton(config.historyButton);
        this.addHomeButton(config.homeButton);
        this.addPaytableButton(config.paytableButton);
        this.addRulesButton(config.rulesButton);
        this.addCloseButton(config.closeButton);
        this.closedContainer.visible = true;
        this.menuContainer.visible = false;
        this.visible = false;
        this.addListeners();
    };
    MLUIMenuPanel.prototype.addListeners = function () {
        var _this = this;
        this.panelContainer.interactive = true;
        this.panelContainer.on('pointerdown', function (e) {
            if (_this.visible &&
                (_this.viewport.isPortraitMode ? e.data.getLocalPosition(_this.menuContainer).y < 0
                    : e.data.getLocalPosition(_this.menuContainer).y > _this.menuBackground.height)) {
                _this.hidePopup();
            }
        });
    };
    MLUIMenuPanel.prototype.addBackground = function () {
        this.menuBackground = new pixi_js_1.Graphics();
        this.menuBackground.beginFill(0, 0.9);
        this.menuBackground.drawRect(0, 0, this.viewport.width, this.config.menuTwoRowHeight);
        this.menuBackground.endFill();
        this.menuContainer.addChildAt(this.menuBackground, 0);
    };
    MLUIMenuPanel.prototype.addSettingsButton = function (data) {
        this.settingsButton = new TextButton_1.TextButton(data, this.localButtonsController);
        this.settingsButton.anchor = new pixi_js_1.Point(0.5, 0.5);
        this.menuContainer.addChild(this.settingsButton);
        this.menuButtons.push(this.settingsButton);
    };
    MLUIMenuPanel.prototype.addHistoryButton = function (data) {
        this.historyButton = new TextButton_1.TextButton(data, this.localButtonsController);
        this.historyButton.elementSignal.add(this.showHistory.bind(this));
        this.historyButton.anchor = new pixi_js_1.Point(0.5, 0.5);
        this.historyButton.visible = UrlParameters_1.UrlParameters.isHistoryVisible();
        this.menuContainer.addChild(this.historyButton);
        this.menuButtons.push(this.historyButton);
    };
    MLUIMenuPanel.prototype.addHomeButton = function (data) {
        this.homeButton = new TextButton_1.TextButton(data);
        this.homeButton.anchor = new pixi_js_1.Point(0.5, 0.5);
        this.homeButton.visible = this.showHomeButton;
        this.homeButton.elementSignal.add(this.onClickHome.bind(this));
        this.homeButton.clickData = {
            url: UrlParameters_1.UrlParameters.returnUrl
        };
        this.menuContainer.addChild(this.homeButton);
        this.menuButtons.push(this.homeButton);
    };
    MLUIMenuPanel.prototype.addPaytableButton = function (data) {
        this.paytableButton = new TextButton_1.TextButton(data);
        this.paytableButton.elementSignal.add(this.showPaytable.bind(this));
        this.paytableButton.anchor = new pixi_js_1.Point(0.5, 0.5);
        this.menuContainer.addChild(this.paytableButton);
        this.menuButtons.push(this.paytableButton);
    };
    MLUIMenuPanel.prototype.addRulesButton = function (data) {
        this.rulesButton = new TextButton_1.TextButton(data);
        this.rulesButton.elementSignal.add(this.showRules.bind(this));
        this.rulesButton.anchor = new pixi_js_1.Point(0.5, 0.5);
        this.menuContainer.addChild(this.rulesButton);
        this.menuButtons.push(this.rulesButton);
    };
    MLUIMenuPanel.prototype.addCloseButton = function (data) {
        this.closeButton = new TextButton_1.TextButton(data, this.localButtonsController);
        this.closeButton.anchor = new pixi_js_1.Point(0.5, 0.5);
        this.menuContainer.addChild(this.closeButton);
        this.menuButtons.push(this.closeButton);
    };
    MLUIMenuPanel.prototype.onClickHome = function (data) {
        window.location.href = data.url;
    };
    MLUIMenuPanel.prototype.onShowSettings = function () {
        this.showSubMenuPanelEventSignal.dispatch('settings');
    };
    MLUIMenuPanel.prototype.showPopup = function () {
        var _this = this;
        this.visible = true;
        this.closedContainer.visible = false;
        this.menuContainer.visible = true;
        var y = this.showY;
        this.menuTween = new SimpleTween_1.SimpleTween(this.menuContainer)
            .to({ y: y }, 100)
            .onComplete(function () { _this.menuContainer.y = y; })
            .start();
        this.showSignal.dispatch(true);
    };
    MLUIMenuPanel.prototype.showPaytable = function () {
        this.externalModuleManager.GenesisPayTable.open();
    };
    MLUIMenuPanel.prototype.showRules = function () {
        this.externalModuleManager.GenesisRule.open();
    };
    MLUIMenuPanel.prototype.showHistory = function () {
        this.externalModuleManager.GenesisHistory.open();
    };
    MLUIMenuPanel.prototype.closeExternalModules = function () {
        this.externalModuleManager.GenesisPayTable.close();
        this.externalModuleManager.GenesisRule.close();
        this.externalModuleManager.GenesisHistory.close();
    };
    MLUIMenuPanel.prototype.hidePopup = function () {
        var _this = this;
        this.visible = false;
        this.closedContainer.visible = true;
        var y = this.hideY;
        this.menuTween = new SimpleTween_1.SimpleTween(this.menuContainer)
            .to({ y: y }, 100)
            .onComplete(function () { _this.menuContainer.visible = false; })
            .start();
        this.showSignal.dispatch(false);
    };
    Object.defineProperty(MLUIMenuPanel.prototype, "showY", {
        get: function () {
            if (this.viewport.isPortraitMode) {
                this._showY = this.viewport.height - this.config.menuTwoRowHeight;
            }
            else {
                this._showY = 0;
            }
            return this._showY;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MLUIMenuPanel.prototype, "hideY", {
        get: function () {
            if (this.viewport.isPortraitMode) {
                this._hideY = this.viewport.height;
            }
            else {
                this._hideY = 0 - this.config.menuTwoRowHeight;
            }
            return this._hideY;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MLUIMenuPanel.prototype, "backgroundHeight", {
        get: function () {
            if (this.viewport.isPortraitMode) {
                this._backgroundHeight = 350;
            }
            else {
                this._backgroundHeight = 200;
            }
            return this._backgroundHeight;
        },
        enumerable: true,
        configurable: true
    });
    MLUIMenuPanel.prototype.layoutElements = function () {
        _super.prototype.layoutElements.call(this);
        if (this.menuContainer.visible) {
            this.menuContainer.y = this.showY;
            tween_js_1.remove(this.menuTween);
        }
        else {
            this.menuContainer.y = this.hideY;
        }
        this.menuBackground.height = this.backgroundHeight;
        this.menuBackground.width = this.viewport.width;
    };
    MLUIMenuPanel.prototype.coreElementLayout = function (orientation) {
        _super.prototype.coreElementLayout.call(this, orientation);
        if (this.config != undefined) {
            if (this.config.coreElementOrientationConfig != undefined) {
                var orientationConfig_1 = this.config.coreElementOrientationConfig.get(orientation);
                this.menuButtons.forEach(function (element) {
                    if (orientationConfig_1.has(element.name)) {
                        element.updateAttributes(orientationConfig_1.get(element.name));
                    }
                });
            }
        }
    };
    var _a;
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof MLUIExternalModuleManager_1.MLUIExternalModuleManager !== "undefined" && MLUIExternalModuleManager_1.MLUIExternalModuleManager) === "function" && _a || Object)
    ], MLUIMenuPanel.prototype, "externalModuleManager", void 0);
    return MLUIMenuPanel;
}(MLUIFullScreenPanel_1.MLUIFullScreenPanel));
exports.MLUIMenuPanel = MLUIMenuPanel;


/***/ }),
/* 779 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var TsMap_1 = __webpack_require__(2);
var Viewport_1 = __webpack_require__(6);
var SlotActions_1 = __webpack_require__(44);
var IMLUIConfig_1 = __webpack_require__(59);
var MLUIButtonId_1 = __webpack_require__(38);
var Helper_1 = __webpack_require__(5);
var MLUIMenuConfig = /** @class */ (function (_super) {
    __extends(MLUIMenuConfig, _super);
    function MLUIMenuConfig() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.name = 'menuPanel';
        _this.settingsButton = {
            name: 'settingsButton',
            isOrientationSupported: true,
            position: { x: 81, y: 230 },
            action: SlotActions_1.SlotActions.SHOW_SETTINGS,
            id: MLUIButtonId_1.MLUIButtonId.BUTTON_SHOW_SETTINGS,
            productLine: _this.productLine,
            assetName: 'settings',
            isLocal: true,
            text: {
                name: 'showSettingsButtonLabel',
                key: 'settingLable',
                style: {
                    fontFamily: Helper_1.Helper.DEFAULT_FONTS,
                    fontWeight: 'bold',
                    fontSize: 24,
                    align: 'center',
                    fill: 'white'
                },
                autoscale: { x: 155, y: 155 },
                position: { x: 0, y: 70 }
            },
            selected: true
        };
        _this.historyButton = {
            name: 'historyButton',
            isOrientationSupported: true,
            position: { x: 267, y: 230 },
            action: SlotActions_1.SlotActions.HISTORY_SUMMARY,
            id: MLUIButtonId_1.MLUIButtonId.BUTTON_SHOW_HISTORY,
            productLine: _this.productLine,
            assetName: 'history',
            isLocal: true,
            text: {
                name: 'showHistoryButtonLabel',
                key: 'historyLable',
                style: {
                    fontFamily: Helper_1.Helper.DEFAULT_FONTS,
                    fontWeight: 'bold',
                    fontSize: 24,
                    align: 'center',
                    fill: 'white'
                },
                autoscale: { x: 155, y: 155 },
                position: { x: 0, y: 70 }
            },
            selected: true
        };
        _this.rulesButton = {
            name: 'rulesButton',
            isOrientationSupported: true,
            position: { x: 453, y: 230 },
            action: SlotActions_1.SlotActions.SHOW_RULES,
            id: MLUIButtonId_1.MLUIButtonId.BUTTON_SHOW_RULES,
            productLine: _this.productLine,
            assetName: 'rules',
            isLocal: true,
            text: {
                name: 'showRulesButtonLabel',
                key: 'rulesLable',
                style: {
                    fontFamily: Helper_1.Helper.DEFAULT_FONTS,
                    fontWeight: 'bold',
                    fontSize: 24,
                    align: 'center',
                    fill: 'white'
                },
                autoscale: { x: 155, y: 155 },
                position: { x: 0, y: 70 }
            },
            selected: true
        };
        _this.paytableButton = {
            name: 'paytableButton',
            isOrientationSupported: true,
            position: { x: 639, y: 230 },
            action: SlotActions_1.SlotActions.SHOW_PAYTABLE,
            id: MLUIButtonId_1.MLUIButtonId.BUTTON_SHOW_PAYTABLE,
            productLine: _this.productLine,
            assetName: 'paytable',
            isLocal: true,
            text: {
                name: 'showPaytableButtonLabel',
                key: 'paytableLable',
                style: {
                    fontFamily: Helper_1.Helper.DEFAULT_FONTS,
                    fontWeight: 'bold',
                    fontSize: 24,
                    align: 'center',
                    fill: 'white'
                },
                autoscale: { x: 155, y: 155 },
                position: { x: 0, y: 70 }
            },
            selected: true
        };
        _this.closeButton = {
            name: 'closeButton',
            isOrientationSupported: true,
            position: { x: 639, y: 75 },
            action: SlotActions_1.SlotActions.HIDE_MENU_OPTIONS,
            id: MLUIButtonId_1.MLUIButtonId.BUTTON_HIDE_MENU_OPTIONS,
            productLine: _this.productLine,
            assetName: 'icon_cancel',
            isLocal: true,
            scale: { x: 1.2, y: 1.2 },
            text: {
                name: '',
                key: '',
                style: {
                    fontFamily: Helper_1.Helper.DEFAULT_FONTS,
                    fontWeight: 'bold',
                    fontSize: 24,
                    align: 'center',
                    fill: 'white'
                },
                position: { x: 0, y: 0 }
            },
            selected: true
        };
        _this.homeButton = {
            name: 'homeButton',
            isOrientationSupported: true,
            position: { x: 81, y: 85 },
            action: SlotActions_1.SlotActions.HOME_BUTTON,
            id: MLUIButtonId_1.MLUIButtonId.BUTTON_HOME,
            productLine: _this.productLine,
            assetName: 'home',
            isLocal: true,
            text: {
                name: 'showHomeButtonLabel',
                key: 'homeLable',
                style: {
                    fontFamily: Helper_1.Helper.DEFAULT_FONTS,
                    fontWeight: 'bold',
                    fontSize: 24,
                    align: 'center',
                    fill: 'white'
                },
                autoscale: { x: 155, y: 155 },
                position: { x: 0, y: 70 }
            },
            selected: true
        };
        _this.menuTwoRowHeight = 350;
        _this.coreElementOrientationConfig = new TsMap_1.TsMap([
            [
                Viewport_1.Orientation.PORTRAIT, new TsMap_1.TsMap([
                    [
                        _this.settingsButton.name, {
                            position: _this.settingsButton.position,
                            text: {
                                autoscale: {
                                    x: _this.settingsButton.text.autoscale.x,
                                    y: _this.settingsButton.text.autoscale.y
                                }
                            }
                        }
                    ],
                    [
                        _this.historyButton.name, {
                            position: _this.historyButton.position,
                            text: {
                                autoscale: {
                                    x: _this.historyButton.text.autoscale.x,
                                    y: _this.historyButton.text.autoscale.y
                                }
                            }
                        }
                    ],
                    [
                        _this.rulesButton.name, {
                            position: _this.rulesButton.position,
                            text: {
                                autoscale: {
                                    x: _this.rulesButton.text.autoscale.x,
                                    y: _this.rulesButton.text.autoscale.y
                                }
                            }
                        }
                    ],
                    [
                        _this.paytableButton.name, {
                            position: _this.paytableButton.position,
                            text: {
                                autoscale: {
                                    x: _this.paytableButton.text.autoscale.x,
                                    y: _this.paytableButton.text.autoscale.y
                                }
                            }
                        }
                    ],
                    [
                        _this.closeButton.name, {
                            position: _this.closeButton.position
                        }
                    ],
                    [
                        _this.homeButton.name, {
                            position: _this.homeButton.position,
                            text: {
                                autoscale: {
                                    x: _this.homeButton.text.autoscale.x,
                                    y: _this.homeButton.text.autoscale.y
                                }
                            }
                        }
                    ]
                ])
            ],
            [
                Viewport_1.Orientation.LANDSCAPE, new TsMap_1.TsMap([
                    [
                        _this.settingsButton.name, {
                            position: { x: 370, y: 85 },
                            text: {
                                autoscale: { x: 180, y: 180 }
                            }
                        }
                    ],
                    [
                        _this.historyButton.name, {
                            position: { x: 570, y: 85 },
                            text: {
                                autoscale: { x: 180, y: 180 }
                            }
                        }
                    ],
                    [
                        _this.rulesButton.name, {
                            position: { x: 770, y: 85 },
                            text: {
                                autoscale: { x: 180, y: 180 }
                            }
                        }
                    ],
                    [
                        _this.paytableButton.name, {
                            position: { x: 970, y: 85 },
                            text: {
                                autoscale: { x: 180, y: 180 }
                            }
                        }
                    ],
                    [
                        _this.closeButton.name, {
                            position: { x: 1200, y: 85 }
                        }
                    ],
                    [
                        _this.homeButton.name, {
                            position: { x: 170, y: _this.homeButton.position.y },
                            text: {
                                autoscale: { x: 180, y: 180 }
                            }
                        }
                    ]
                ])
            ]
        ]);
        return _this;
    }
    return MLUIMenuConfig;
}(IMLUIConfig_1.MLUIConfig));
exports.MLUIMenuConfig = MLUIMenuConfig;


/***/ }),
/* 780 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var ExternalModuleView_1 = __webpack_require__(246);
var MLUIExternalModuleController_1 = __webpack_require__(164);
var MLUIRulesConfig_1 = __webpack_require__(247);
var Helper_1 = __webpack_require__(5);
var WebElementFactory_1 = __webpack_require__(45);
var MLUIRulesController = /** @class */ (function (_super) {
    __extends(MLUIRulesController, _super);
    function MLUIRulesController(view) {
        var _this = _super.call(this, view) || this;
        _this.config = es5_1.Container.get(MLUIRulesConfig_1.MLUIRulesConfig);
        _this.productLine = _this.config.productLine;
        return _this;
    }
    MLUIRulesController.prototype.init = function (stateData) {
        var loader = PIXI.loader;
        var interruptionAdditionalRule = (stateData.gameViewConfig && stateData.gameViewConfig.incomplete_game_desc)
            ? stateData.gameViewConfig.incomplete_game_desc : Helper_1.Helper.EMPTY;
        this.moduleConfig = {
            assets: this.convertAssetNames(loader, this.config.assetNames),
            handleClose: this.onClose.bind(this),
            handleOpen: this.onOpen.bind(this),
            language: this.getLocalisationMap(loader),
            soundKey: this.config.soundKey,
            dataHook: this.sendDataHook.bind(this),
            playSound: this.playSound.bind(this),
            style: this.getExternalModuleConfig({
                interruptionAdditionalRule: interruptionAdditionalRule,
                rtp: stateData.rtp
            })
        };
        _super.prototype.init.call(this);
        this.view.onOrientationChangeSignal.add(this.onOrientationChanged, this);
    };
    MLUIRulesController.prototype.onOrientationChanged = function (orientation) {
        if (this.externalModule.GenesisRule) {
            this.externalModule.GenesisRule.update(orientation);
        }
    };
    MLUIRulesController.prototype.getExternalModuleConfig = function (data) {
        var portraitContainerConfig = this.getPortraitContainerConfig();
        var landscapeContainerConfig = this.getLandscapeContainerConfig();
        var pagingElement = landscapeContainerConfig.paragraphs.find(function (e) { return e.type === WebElementFactory_1.WebFactoryElementType.WEB_GENERAL_PAGING_ELEMENT; });
        //add "How To Win" and "Others"
        portraitContainerConfig.paragraphs =
            portraitContainerConfig.paragraphs.concat(this.config.getPortraitHowToWinElement());
        portraitContainerConfig.paragraphs =
            portraitContainerConfig.paragraphs.concat(this.config.getPortraitOthersElement(data.interruptionAdditionalRule));
        if (pagingElement) {
            pagingElement.pages = pagingElement.pages.concat(this.config.getLandscapeHowToWinElement());
            pagingElement.pages = pagingElement.pages.concat(this.config.getLandscapeOthersElement(data.interruptionAdditionalRule));
        }
        //add "rtp"
        if (data.rtp) {
            portraitContainerConfig.paragraphs = portraitContainerConfig.paragraphs.concat(this.config.getPortraitRTPElements(data.rtp.toString()));
            if (pagingElement) {
                pagingElement.pages = pagingElement.pages.concat(this.config.getLandscapeRTPElements(data.rtp.toString()));
            }
        }
        return this.config;
    };
    MLUIRulesController.prototype.onClose = function () {
        //
    };
    MLUIRulesController.prototype.onOpen = function () {
        //
    };
    var _a;
    MLUIRulesController = __decorate([
        __param(0, es5_1.Inject),
        __metadata("design:paramtypes", [typeof (_a = typeof ExternalModuleView_1.ExternalModuleView !== "undefined" && ExternalModuleView_1.ExternalModuleView) === "function" && _a || Object])
    ], MLUIRulesController);
    return MLUIRulesController;
}(MLUIExternalModuleController_1.MLUIExternalModuleController));
exports.MLUIRulesController = MLUIRulesController;


/***/ }),
/* 781 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var CompController_1 = __webpack_require__(43);
var ExternalModuleManager_1 = __webpack_require__(218);
var SoundManager_1 = __webpack_require__(13);
var DataHookService_1 = __webpack_require__(139);
var GlobalDispatcher_1 = __webpack_require__(7);
/**
 *  A controller class for eval external JS.
 *
 * @export
 * @class ExternalModuleController
 * @extends {CompController}
 */
var ExternalModuleController = /** @class */ (function (_super) {
    __extends(ExternalModuleController, _super);
    function ExternalModuleController() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.productLine = '';
        _this.initialized = false;
        _this.moduleConfig = {
            assets: null,
            handleOpen: null,
            handleClose: null,
            language: null,
            playSound: function () { return null; }
        };
        return _this;
    }
    ExternalModuleController.prototype.sendDataHook = function (buttonId, action, actionData, productLine) {
        if (actionData === void 0) { actionData = {}; }
        if (productLine === void 0) { productLine = this.productLine; }
        var generalActionData = action ? { action: action } : { action: "action_" + buttonId.replace('BUTTON_', '') };
        this.dataHook.onButtonClicked(buttonId, productLine, Object.assign(generalActionData, actionData));
    };
    ExternalModuleController.prototype.playSound = function (soundKey) {
        this.soundManager.play(soundKey, SoundManager_1.AudioTrackName.EFFECT);
    };
    ExternalModuleController.prototype.onOpen = function () {
        GlobalDispatcher_1.GlobalDispatcher.dispatchIntoAllStates(ExternalModuleController.OPEN_EXTERNAL_MODULE);
        return null;
    };
    ExternalModuleController.prototype.onClose = function () {
        GlobalDispatcher_1.GlobalDispatcher.dispatchIntoAllStates(ExternalModuleController.CLOSE_EXTERNAL_MODULE);
        return null;
    };
    ExternalModuleController.prototype.init = function (stateData) {
        this.initializeView(true);
    };
    ExternalModuleController.prototype.initializeView = function (finishState) {
        if (finishState === void 0) { finishState = false; }
        if (this.view != undefined) {
            this.view.initialize(this.config);
            if ((this.view).code) {
                try {
                    this.executeExternalcode(this.view.code);
                    var createExternalMoudule = window.createExternalMoudule;
                    if (createExternalMoudule) {
                        this.externalModule[this.config.moduleName] = createExternalMoudule(this.config.moduleName, this.moduleConfig);
                        delete window.createExternalMoudule;
                    }
                    this.initialized = true;
                }
                catch (e) {
                    if (finishState) {
                        this.finishStateAction();
                    }
                    console.error("External module:" + this.config.moduleName + " parse error.");
                }
            }
        }
        if (finishState) {
            this.finishStateAction();
        }
    };
    ExternalModuleController.prototype.convertAssetNames = function (loader, assetNames) {
        if (!assetNames) {
            return null;
        }
        var rtn = {};
        assetNames.forEach(function (element) {
            // sprite resource key will be ${element}_image, .png has no _image postfix;
            var url = loader.resources[element + "_image"] ? loader.resources[element + "_image"].url : loader.resources[element].url;
            var data = loader.resources[element + "_image"] ? loader.resources[element].data : null;
            rtn[element] = {
                url: url,
                data: data
            };
        });
        return rtn;
    };
    ExternalModuleController.prototype.executeExternalcode = function (code) {
        var exe = new Function(code);
        exe();
    };
    var _a, _b, _c;
    ExternalModuleController.CLOSE_EXTERNAL_MODULE = 'closeExternalModule';
    ExternalModuleController.OPEN_EXTERNAL_MODULE = 'openExternalModule';
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof ExternalModuleManager_1.ExternalModuleManager !== "undefined" && ExternalModuleManager_1.ExternalModuleManager) === "function" && _a || Object)
    ], ExternalModuleController.prototype, "externalModule", void 0);
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_b = typeof SoundManager_1.SoundManager !== "undefined" && SoundManager_1.SoundManager) === "function" && _b || Object)
    ], ExternalModuleController.prototype, "soundManager", void 0);
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_c = typeof DataHookService_1.DataHookService !== "undefined" && DataHookService_1.DataHookService) === "function" && _c || Object)
    ], ExternalModuleController.prototype, "dataHook", void 0);
    return ExternalModuleController;
}(CompController_1.CompController));
exports.ExternalModuleController = ExternalModuleController;


/***/ }),
/* 782 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var CoreWebElement_1 = __webpack_require__(68);
var WebElementFactory_1 = __webpack_require__(45);
/**
 * Line element for web page
 */
var WebLineElement = /** @class */ (function (_super) {
    __extends(WebLineElement, _super);
    function WebLineElement() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    WebLineElement.prototype.createElement = function (lineConfig) {
        if (lineConfig.image) {
            lineConfig.image = WebElementFactory_1.WebElementFactory.createInstance(lineConfig.image);
        }
        return lineConfig;
    };
    WebLineElement.elementType = 'WEB_LINE_ELEMENT';
    return WebLineElement;
}(CoreWebElement_1.CoreWebElement));
exports.WebLineElement = WebLineElement;


/***/ }),
/* 783 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var WebElementFactory_1 = __webpack_require__(45);
var CoreWebElement_1 = __webpack_require__(68);
/**
 * Payout element for symbol
 */
var WebPayoutElement = /** @class */ (function (_super) {
    __extends(WebPayoutElement, _super);
    function WebPayoutElement() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    WebPayoutElement.prototype.createElement = function (config) {
        if (config.arrowSymbol) {
            config.arrowSymbol = WebElementFactory_1.WebElementFactory.createInstance(config.arrowSymbol);
        }
        return config;
    };
    WebPayoutElement.elementType = 'WEB_PAYOUT_ELEMENT';
    return WebPayoutElement;
}(CoreWebElement_1.CoreWebElement));
exports.WebPayoutElement = WebPayoutElement;


/***/ }),
/* 784 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var WebElementFactory_1 = __webpack_require__(45);
var CoreWebElement_1 = __webpack_require__(68);
/**
 * block for web elements
 */
var WebElementBlock = /** @class */ (function (_super) {
    __extends(WebElementBlock, _super);
    function WebElementBlock() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    WebElementBlock.prototype.createElement = function (blockConfig) {
        for (var i = 0; i < blockConfig.config.length; i++) {
            blockConfig.config[i] = WebElementFactory_1.WebElementFactory.createInstance(blockConfig.config[i]);
        }
        return blockConfig;
    };
    WebElementBlock.elementType = 'WEB_ELEMENT_BLOCK';
    return WebElementBlock;
}(CoreWebElement_1.CoreWebElement));
exports.WebElementBlock = WebElementBlock;


/***/ }),
/* 785 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var WebTextElement_1 = __webpack_require__(405);
/**
 * Text content element for web page, which contains multiple lines
 */
var WebTextContentElement = /** @class */ (function (_super) {
    __extends(WebTextContentElement, _super);
    function WebTextContentElement() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    WebTextContentElement.prototype.CreateElement = function (config) {
        return config;
    };
    WebTextContentElement.elementType = 'WEB_TEXT_CONTENT_ELEMENT';
    return WebTextContentElement;
}(WebTextElement_1.WebTextElement));
exports.WebTextContentElement = WebTextContentElement;


/***/ }),
/* 786 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var CoreWebElement_1 = __webpack_require__(68);
/**
 * Line pattern element for web page
 */
var WebLinePatternElement = /** @class */ (function (_super) {
    __extends(WebLinePatternElement, _super);
    function WebLinePatternElement() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    WebLinePatternElement.prototype.createElement = function (linePatternConfig) {
        return linePatternConfig;
    };
    WebLinePatternElement.elementType = 'WEB_LINE_PATTERN_ELEMENT';
    return WebLinePatternElement;
}(CoreWebElement_1.CoreWebElement));
exports.WebLinePatternElement = WebLinePatternElement;


/***/ }),
/* 787 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var CoreWebElement_1 = __webpack_require__(68);
/**
 * general paging element for web page
 */
var WebGeneralPagingElement = /** @class */ (function (_super) {
    __extends(WebGeneralPagingElement, _super);
    function WebGeneralPagingElement() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    WebGeneralPagingElement.prototype.createElement = function (pagingConfig) {
        return pagingConfig;
    };
    WebGeneralPagingElement.elementType = 'WEB_GENERAL_PAGING_ELEMENT';
    return WebGeneralPagingElement;
}(CoreWebElement_1.CoreWebElement));
exports.WebGeneralPagingElement = WebGeneralPagingElement;


/***/ }),
/* 788 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var Helper_1 = __webpack_require__(5);
var DateTime_1 = __webpack_require__(789);
var GlobalDispatcher_1 = __webpack_require__(7);
var SlotEvent_1 = __webpack_require__(32);
var MLUIExternalModuleController_1 = __webpack_require__(164);
var MLUIHistoryPanel_1 = __webpack_require__(893);
var MLUIHistoryConfig_1 = __webpack_require__(260);
var MLUIHistoryInterfaces_1 = __webpack_require__(894);
var MLUIHistoryController = /** @class */ (function (_super) {
    __extends(MLUIHistoryController, _super);
    function MLUIHistoryController(view) {
        var _this = _super.call(this, view) || this;
        _this.isOpened = false;
        _this.config = _this.gameConfig.getConfig(MLUIHistoryConfig_1.MLUIHistoryConfig);
        _this.productLine = _this.config.productLine;
        GlobalDispatcher_1.GlobalDispatcher.addListener(_this, SlotEvent_1.SlotEvent.RECV_HISTORY_SUMMARY, _this.updateHistorySummary.bind(_this));
        GlobalDispatcher_1.GlobalDispatcher.addListener(_this, SlotEvent_1.SlotEvent.RECV_HISTORY_DETAIL, _this.updateHistoryDetail.bind(_this));
        return _this;
    }
    MLUIHistoryController.prototype.init = function (stateData) {
        var loader = PIXI.loader;
        this.moduleConfig = {
            assets: this.convertAssetNames(loader, this.config.assetNames),
            handleClose: this.onClose.bind(this),
            handleOpen: this.onOpen.bind(this),
            language: this.getLocalisationMap(loader),
            sendHistoryDetailQuery: this.sendHistoryDetailQuery.bind(this),
            sendHistorySummaryQuery: this.sendHistorySummaryQuery.bind(this),
            soundKey: this.config.soundKey,
            dataHook: this.sendDataHook.bind(this),
            playSound: this.playSound.bind(this),
            locale: this.translator.language,
            engagements: stateData.engagements,
            style: this.config
        };
        _super.prototype.init.call(this);
        this.view.onOrientationChangeSignal.add(this.onOrientationChanged, this);
        GlobalDispatcher_1.GlobalDispatcher.addListener(this, SlotEvent_1.SlotEvent.RECV_HISTORY_SUMMARY, this.updateHistorySummary.bind(this));
        GlobalDispatcher_1.GlobalDispatcher.addListener(this, SlotEvent_1.SlotEvent.RECV_HISTORY_DETAIL, this.updateHistoryDetail.bind(this));
    };
    MLUIHistoryController.prototype.onOrientationChanged = function (orientation) {
        if (this.externalModule.GenesisHistory) {
            this.externalModule.GenesisHistory.update(orientation);
        }
    };
    MLUIHistoryController.prototype.onClose = function (data) {
        this.isOpened = false;
        GlobalDispatcher_1.GlobalDispatcher.dispatchIntoAllStates(SlotEvent_1.SlotEvent.CLOSE_HISTORY, data);
    };
    MLUIHistoryController.prototype.onOpen = function () {
        this.isOpened = true;
    };
    /**
     * send data hook
     * according to dataHookType send data hook
     */
    MLUIHistoryController.prototype.sendDataHook = function (buttonId, action, actionData, dataHookType) {
        if (action === void 0) { action = Helper_1.Helper.EMPTY; }
        if (actionData === void 0) { actionData = {}; }
        if (dataHookType === void 0) { dataHookType = Helper_1.Helper.EMPTY; }
        _super.prototype.sendDataHook.call(this, buttonId, action, actionData);
    };
    MLUIHistoryController.prototype.sendHistorySummaryQuery = function (query) {
        var dateTimeRange;
        if (query.dayAmount == 1) {
            dateTimeRange = DateTime_1.DateTime.UTCToday(true);
        }
        else {
            dateTimeRange = DateTime_1.DateTime.UTCPastNDays(query.dayAmount, true);
        }
        GlobalDispatcher_1.GlobalDispatcher.dispatchIntoAllStates(query.type, {
            queryType: MLUIHistoryInterfaces_1.DATE_INTERVAL.BETWEEN,
            startTime: dateTimeRange.startTime,
            endTime: dateTimeRange.endTime,
            pageNum: query.pageNum,
            pageSize: query.pageSize
        });
    };
    MLUIHistoryController.prototype.sendHistoryDetailQuery = function (query) {
        GlobalDispatcher_1.GlobalDispatcher.dispatchIntoAllStates(query.type, {
            roundID: query.roundID
        });
    };
    //call back
    MLUIHistoryController.prototype.updateHistorySummary = function (response) {
        if (!this.isOpened) {
            return;
        }
        this.externalModule.GenesisHistory.updateHistorySummary(response.data);
    };
    MLUIHistoryController.prototype.updateHistoryDetail = function (response) {
        if (!this.isOpened) {
            return;
        }
        this.externalModule.GenesisHistory.updateHistoryDetail(response.data);
    };
    var _a;
    MLUIHistoryController = __decorate([
        __param(0, es5_1.Inject),
        __metadata("design:paramtypes", [typeof (_a = typeof MLUIHistoryPanel_1.MLUIHistoryPanel !== "undefined" && MLUIHistoryPanel_1.MLUIHistoryPanel) === "function" && _a || Object])
    ], MLUIHistoryController);
    return MLUIHistoryController;
}(MLUIExternalModuleController_1.MLUIExternalModuleController));
exports.MLUIHistoryController = MLUIHistoryController;


/***/ }),
/* 789 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var date_fns_1 = __webpack_require__(790);
/**
 * A helper class for handle dateTime
 *
 * @export
 * @class DateTime
 */
var DateTime = /** @class */ (function () {
    function DateTime() {
    }
    /**
     * Get the begin and end of today.
     *
     * @static
     * @param {boolean} [inSeconds=false] true = present in seconds, false = present in milliseconds
     * @returns {DateTimeRange}
     * @memberof DateTime
     */
    DateTime.UTCToday = function (inSeconds) {
        if (inSeconds === void 0) { inSeconds = false; }
        var today = new Date().getTime();
        var startTime = date_fns_1.startOfDay(today).getTime();
        var endTime = date_fns_1.endOfDay(today).getTime();
        return {
            startTime: (inSeconds) ? startTime / 1000 : startTime,
            endTime: (inSeconds) ? Math.floor(endTime / 1000) : endTime
        };
    };
    /**
     * Get the begin and end of given n days.
     *
     * @static
     * @param {number} nDays - The delta value
     * @param {boolean} [inSeconds=false] true = present in seconds, false = present in milliseconds
     * @returns {DateTimeRange}
     * @memberof DateTime
     */
    DateTime.UTCPastNDays = function (nDays, inSeconds) {
        if (inSeconds === void 0) { inSeconds = false; }
        var today = new Date().getTime();
        var startTime = date_fns_1.startOfDay(date_fns_1.subDays(today, nDays - 1)).getTime();
        var endTime = date_fns_1.endOfDay(today).getTime();
        return {
            startTime: (inSeconds) ? startTime / 1000 : startTime,
            endTime: (inSeconds) ? Math.floor(endTime / 1000) : endTime
        };
    };
    DateTime.utcTimezoneOffset = new Date().getTimezoneOffset() % 60;
    return DateTime;
}());
exports.DateTime = DateTime;


/***/ }),
/* 790 */,
/* 791 */,
/* 792 */,
/* 793 */,
/* 794 */,
/* 795 */,
/* 796 */,
/* 797 */,
/* 798 */,
/* 799 */,
/* 800 */,
/* 801 */,
/* 802 */,
/* 803 */,
/* 804 */,
/* 805 */,
/* 806 */,
/* 807 */,
/* 808 */,
/* 809 */,
/* 810 */,
/* 811 */,
/* 812 */,
/* 813 */,
/* 814 */,
/* 815 */,
/* 816 */,
/* 817 */,
/* 818 */,
/* 819 */,
/* 820 */,
/* 821 */,
/* 822 */,
/* 823 */,
/* 824 */,
/* 825 */,
/* 826 */,
/* 827 */,
/* 828 */,
/* 829 */,
/* 830 */,
/* 831 */,
/* 832 */,
/* 833 */,
/* 834 */,
/* 835 */,
/* 836 */,
/* 837 */,
/* 838 */,
/* 839 */,
/* 840 */,
/* 841 */,
/* 842 */,
/* 843 */,
/* 844 */,
/* 845 */,
/* 846 */,
/* 847 */,
/* 848 */,
/* 849 */,
/* 850 */,
/* 851 */,
/* 852 */,
/* 853 */,
/* 854 */,
/* 855 */,
/* 856 */,
/* 857 */,
/* 858 */,
/* 859 */,
/* 860 */,
/* 861 */,
/* 862 */,
/* 863 */,
/* 864 */,
/* 865 */,
/* 866 */,
/* 867 */,
/* 868 */,
/* 869 */,
/* 870 */,
/* 871 */,
/* 872 */,
/* 873 */,
/* 874 */,
/* 875 */,
/* 876 */,
/* 877 */,
/* 878 */,
/* 879 */,
/* 880 */,
/* 881 */,
/* 882 */,
/* 883 */,
/* 884 */,
/* 885 */,
/* 886 */,
/* 887 */,
/* 888 */,
/* 889 */,
/* 890 */,
/* 891 */,
/* 892 */,
/* 893 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ExternalModuleView_1 = __webpack_require__(246);
var MLUIHistoryPanel = /** @class */ (function (_super) {
    __extends(MLUIHistoryPanel, _super);
    function MLUIHistoryPanel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return MLUIHistoryPanel;
}(ExternalModuleView_1.ExternalModuleView));
exports.MLUIHistoryPanel = MLUIHistoryPanel;


/***/ }),
/* 894 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var DATE_INTERVAL;
(function (DATE_INTERVAL) {
    DATE_INTERVAL["DAY"] = "DAY";
    DATE_INTERVAL["WEEK"] = "WEEK";
    DATE_INTERVAL["MONTH"] = "MONTH";
    DATE_INTERVAL["BETWEEN"] = "BETWEEN";
})(DATE_INTERVAL = exports.DATE_INTERVAL || (exports.DATE_INTERVAL = {}));


/***/ }),
/* 895 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var ExternalModuleView_1 = __webpack_require__(246);
var SlotGameType_1 = __webpack_require__(92);
var MLUIExternalModuleController_1 = __webpack_require__(164);
var MLUIPaytableConfig_1 = __webpack_require__(261);
var WebElementFactory_1 = __webpack_require__(45);
var PartnerHelper_1 = __webpack_require__(202);
var MLUIPaytableController = /** @class */ (function (_super) {
    __extends(MLUIPaytableController, _super);
    function MLUIPaytableController(view) {
        var _this = _super.call(this, view) || this;
        _this.config = es5_1.Container.get(MLUIPaytableConfig_1.MLUIPaytableConfig);
        _this.productLine = _this.config.productLine;
        return _this;
    }
    MLUIPaytableController.prototype.getPortraitHelpScreenContainerConfig = function () {
        return this.config.portraitLayoutConfig.containerConfig;
    };
    MLUIPaytableController.prototype.init = function (data) {
        var loader = PIXI.loader;
        this.moduleConfig = {
            assets: this.convertAssetNames(loader, this.config.assetNames),
            handleClose: this.onClose.bind(this),
            handleOpen: this.onOpen.bind(this),
            language: this.getLocalisationMap(loader),
            soundKey: this.config.soundKey,
            dataHook: this.sendDataHook.bind(this),
            playSound: this.playSound.bind(this),
            style: this.getExternalModuleConfig(data)
        };
        _super.prototype.init.call(this);
        this.view.onOrientationChangeSignal.add(this.onOrientationChanged, this);
    };
    MLUIPaytableController.prototype.onOrientationChanged = function (orientation) {
        if (this.externalModule.GenesisPayTable) {
            this.externalModule.GenesisPayTable.update(orientation);
        }
    };
    MLUIPaytableController.prototype.getExternalModuleConfig = function (data) {
        var portraitContainerConfig = this.getPortraitHelpScreenContainerConfig();
        var landscapeContainerConfig = this.getLandscapeContainerConfig();
        portraitContainerConfig.paragraphs = this.getPortraitParagraphsConfig(portraitContainerConfig.paragraphs, data);
        landscapeContainerConfig.paragraphs = this.getLandscapeParagraphsConfig(landscapeContainerConfig.paragraphs, data);
        return this.config;
    };
    MLUIPaytableController.prototype.getPortraitParagraphsConfig = function (paragraphs, data) {
        var gameTypeConfig = [];
        if (data.gametype == SlotGameType_1.SlotGameType.ALLPAYS) {
            gameTypeConfig = this.config.getPortraitAllPaysElements();
        }
        else {
            gameTypeConfig = this.config.getPortraitLineGameElements();
        }
        if (this.partnerHelper.partner !== 'GPK') {
            return paragraphs.concat(gameTypeConfig
                .concat(this.config.getPortraitCopyrightElements())
                .concat(this.config.getPortraitVersionElements()));
        }
        else {
            return paragraphs.concat(gameTypeConfig
                .concat(this.config.getPortraitVersionElements()));
        }
    };
    MLUIPaytableController.prototype.getLandscapeParagraphsConfig = function (paragraphs, data) {
        // check paragraphs use pagging element
        var pagingElement = paragraphs.find(function (e) { return e.type === WebElementFactory_1.WebFactoryElementType.WEB_GENERAL_PAGING_ELEMENT; });
        if (pagingElement) {
            if (data.gametype == SlotGameType_1.SlotGameType.ALLPAYS) {
                pagingElement.pages = pagingElement.pages.concat(this.config.getLandscapeAllPaysElements());
            }
            else {
                pagingElement.pages = pagingElement.pages.concat(this.config.getLandscapeLineGameElements());
            }
            if (this.partnerHelper.partner !== 'GPK') {
                pagingElement.pages = pagingElement.pages.concat(this.config.getLandscapeCopyrightElements());
            }
            var length = pagingElement.pages.length;
            pagingElement.pages[length - 1].config.push(this.config.getLandscapeVersionElements());
        }
        return paragraphs;
    };
    MLUIPaytableController.prototype.onClose = function () {
        //
    };
    MLUIPaytableController.prototype.onOpen = function () {
        //
    };
    var _a, _b;
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof PartnerHelper_1.PartnerHelper !== "undefined" && PartnerHelper_1.PartnerHelper) === "function" && _a || Object)
    ], MLUIPaytableController.prototype, "partnerHelper", void 0);
    MLUIPaytableController = __decorate([
        __param(0, es5_1.Inject),
        __metadata("design:paramtypes", [typeof (_b = typeof ExternalModuleView_1.ExternalModuleView !== "undefined" && ExternalModuleView_1.ExternalModuleView) === "function" && _b || Object])
    ], MLUIPaytableController);
    return MLUIPaytableController;
}(MLUIExternalModuleController_1.MLUIExternalModuleController));
exports.MLUIPaytableController = MLUIPaytableController;


/***/ }),
/* 896 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var MLUISettingsPanel_1 = __webpack_require__(897);
var MLUISettingsConfig_1 = __webpack_require__(898);
var MLUIFullScreenController_1 = __webpack_require__(899);
var MLUISettingsController = /** @class */ (function (_super) {
    __extends(MLUISettingsController, _super);
    function MLUISettingsController(view) {
        return _super.call(this, view) || this;
    }
    MLUISettingsController.prototype.init = function () {
        var config = this.gameConfig.getConfig(MLUISettingsConfig_1.MLUISettingsConfig);
        this.view.initialize(config);
        this.finishStateAction();
    };
    MLUISettingsController.prototype.showPopup = function () {
        this.view.showPopup();
    };
    MLUISettingsController.prototype.onHidePopup = function () {
        //
    };
    var _a;
    MLUISettingsController = __decorate([
        __param(0, es5_1.Inject),
        __metadata("design:paramtypes", [typeof (_a = typeof MLUISettingsPanel_1.MLUISettingsPanel !== "undefined" && MLUISettingsPanel_1.MLUISettingsPanel) === "function" && _a || Object])
    ], MLUISettingsController);
    return MLUISettingsController;
}(MLUIFullScreenController_1.MLUIFullScreenController));
exports.MLUISettingsController = MLUISettingsController;


/***/ }),
/* 897 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var pixi_js_1 = __webpack_require__(4);
var es5_1 = __webpack_require__(0);
var MLUIFullScreenPanel_1 = __webpack_require__(163);
var SoundManager_1 = __webpack_require__(13);
var Button_1 = __webpack_require__(19);
var ToggleTextButton_1 = __webpack_require__(442);
var WebTextField_1 = __webpack_require__(35);
var MLUISettingsPanel = /** @class */ (function (_super) {
    __extends(MLUISettingsPanel, _super);
    function MLUISettingsPanel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MLUISettingsPanel.prototype.createElements = function (config) {
        this.config = config;
        _super.prototype.createElements.call(this);
        this.addTitle(config.title);
        this.addSoundTextToggle(config.soundToggleData);
        this.addMusicTextToggle(config.musicToggleData);
        this.addCloseButton(config.closeButton);
        this.hidePopup();
    };
    MLUISettingsPanel.prototype.addTitle = function (data) {
        this.title = new WebTextField_1.WebTextField(data);
        this.addChild(this.title);
    };
    MLUISettingsPanel.prototype.addSoundTextToggle = function (data) {
        this.soundToggle = new ToggleTextButton_1.TextToggleButton(data);
        this.soundToggle.elementSignal.add(this.onSoundToggle, this);
        this.addChild(this.soundToggle);
    };
    MLUISettingsPanel.prototype.addMusicTextToggle = function (data) {
        this.musicToggle = new ToggleTextButton_1.TextToggleButton(data);
        this.musicToggle.elementSignal.add(this.onMusicToggle, this);
        this.addChild(this.musicToggle);
    };
    MLUISettingsPanel.prototype.addCloseButton = function (data) {
        this.closeButton = new Button_1.Button(data);
        this.setInitialActionData();
        this.closeButton.elementSignal.add(this.hidePopup.bind(this));
        this.closeButton.anchor = new pixi_js_1.Point(0.5, 0.5);
        this.addChild(this.closeButton);
    };
    MLUISettingsPanel.prototype.onSoundToggle = function (data) {
        var clickData = this.closeButton.clickData;
        clickData.data.sound = data.selected;
        this.closeButton.clickData = clickData;
        data.selected ? this.soundManager.unmuteTrack(SoundManager_1.AudioTrackName.EFFECT) : this.soundManager.muteTrack(SoundManager_1.AudioTrackName.EFFECT);
    };
    MLUISettingsPanel.prototype.onMusicToggle = function (data) {
        var clickData = this.closeButton.clickData;
        clickData.data.music = data.selected;
        this.closeButton.clickData = clickData;
        data.selected ? this.soundManager.unmuteTrack(SoundManager_1.AudioTrackName.MUSIC) : this.soundManager.muteTrack(SoundManager_1.AudioTrackName.MUSIC);
    };
    MLUISettingsPanel.prototype.setInitialActionData = function () {
        this.closeButton.clickData = {
            data: {
                sound: true,
                music: true
            }
        };
    };
    var _a;
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof SoundManager_1.SoundManager !== "undefined" && SoundManager_1.SoundManager) === "function" && _a || Object)
    ], MLUISettingsPanel.prototype, "soundManager", void 0);
    return MLUISettingsPanel;
}(MLUIFullScreenPanel_1.MLUIFullScreenPanel));
exports.MLUISettingsPanel = MLUISettingsPanel;


/***/ }),
/* 898 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var TsMap_1 = __webpack_require__(2);
var Helper_1 = __webpack_require__(5);
var Viewport_1 = __webpack_require__(6);
var SlotActions_1 = __webpack_require__(44);
var IMLUIConfig_1 = __webpack_require__(59);
var MLUIButtonId_1 = __webpack_require__(38);
var MLUISettingsConfig = /** @class */ (function (_super) {
    __extends(MLUISettingsConfig, _super);
    function MLUISettingsConfig() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.name = 'settingsPanel';
        _this.titleStyle = {
            fontFamily: Helper_1.Helper.DEFAULT_FONTS,
            fontSize: 48,
            fontWeight: 'bold',
            fill: 'white',
            align: 'left',
            padding: 50
        };
        _this.title = {
            name: 'settingsTitle',
            key: 'settings',
            position: {
                x: 81,
                y: 100
            },
            style: _this.titleStyle
        };
        _this.closeButton = {
            isOrientationSupported: true,
            name: 'closeButton',
            position: {
                x: 600,
                y: 132
            },
            action: SlotActions_1.SlotActions.HIDE_SETTINGS,
            id: MLUIButtonId_1.MLUIButtonId.BUTTON_HIDE_SETTINGS,
            productLine: _this.productLine,
            assetName: 'close',
            isLocal: true
        };
        _this.soundToggleData = {
            isOrientationSupported: true,
            name: 'soundToggle',
            position: {
                x: 545,
                y: 220
            },
            id: SlotActions_1.SlotActions.SOUND_TOGGLE,
            productLine: _this.productLine,
            action: MLUIButtonId_1.MLUIButtonId.TOGGLE_SOUND,
            assetName: 'toggle_switch',
            text: {
                name: 'sound',
                key: 'sound',
                style: {
                    fontFamily: Helper_1.Helper.DEFAULT_FONTS,
                    fontWeight: 'bold',
                    fontSize: 36,
                    align: 'left',
                    fill: 'white'
                },
                position: { x: -460, y: 15 }
            },
            selected: true
        };
        _this.musicToggleData = {
            isOrientationSupported: true,
            name: 'musicToggle',
            position: {
                x: 545,
                y: 300
            },
            id: SlotActions_1.SlotActions.MUSIC_TOGGLE,
            productLine: _this.productLine,
            action: MLUIButtonId_1.MLUIButtonId.TOGGLE_MUSIC,
            assetName: 'toggle_switch',
            text: {
                name: 'music',
                key: 'music',
                style: {
                    fontFamily: Helper_1.Helper.DEFAULT_FONTS,
                    fontWeight: 'bold',
                    fontSize: 36,
                    align: 'left',
                    fill: 'white'
                },
                position: { x: -460, y: 15 }
            },
            selected: true
        };
        _this.coreElementOrientationConfig = new TsMap_1.TsMap([
            [
                Viewport_1.Orientation.PORTRAIT, new TsMap_1.TsMap([
                    [
                        _this.closeButton.name, {
                            position: _this.closeButton.position
                        }
                    ],
                    [
                        _this.musicToggleData.name, {
                            position: _this.musicToggleData.position
                        }
                    ],
                    [
                        _this.soundToggleData.name, {
                            position: _this.soundToggleData.position
                        }
                    ]
                ])
            ],
            [
                Viewport_1.Orientation.LANDSCAPE, new TsMap_1.TsMap([
                    [
                        _this.closeButton.name, {
                            position: { x: 1120, y: 132 }
                        }
                    ],
                    [
                        _this.musicToggleData.name, {
                            position: { x: 820, y: 300 }
                        }
                    ],
                    [
                        _this.soundToggleData.name, {
                            position: { x: 820, y: 220 }
                        }
                    ]
                ])
            ]
        ]);
        return _this;
    }
    return MLUISettingsConfig;
}(IMLUIConfig_1.MLUIConfig));
exports.MLUISettingsConfig = MLUISettingsConfig;


/***/ }),
/* 899 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var SlotEvent_1 = __webpack_require__(32);
var SlotStates_1 = __webpack_require__(31);
var GlobalDispatcher_1 = __webpack_require__(7);
var UIPanelController_1 = __webpack_require__(58);
var MLUIFullScreenPanel_1 = __webpack_require__(163);
var MLUIFullScreenController = /** @class */ (function (_super) {
    __extends(MLUIFullScreenController, _super);
    function MLUIFullScreenController(view) {
        return _super.call(this, view) || this;
    }
    MLUIFullScreenController.prototype.addEventListeners = function () {
        _super.prototype.addEventListeners.call(this);
        this.view.showPopupSignal.add(this.onShowPopup.bind(this));
        this.view.hidePopupSignal.add(this.onHidePopup.bind(this));
    };
    MLUIFullScreenController.prototype.onShowPopup = function () {
        GlobalDispatcher_1.GlobalDispatcher.dispatchIntoAllStates(SlotEvent_1.SlotEvent.SHOW_FULL_SCREEN_UI);
    };
    MLUIFullScreenController.prototype.onHidePopup = function () {
        GlobalDispatcher_1.GlobalDispatcher.dispatchIntoAllStates(SlotEvent_1.SlotEvent.HIDE_FULL_SCREEN_UI);
    };
    var _a, _b;
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof SlotStates_1.SlotStates !== "undefined" && SlotStates_1.SlotStates) === "function" && _a || Object)
    ], MLUIFullScreenController.prototype, "stateNames", void 0);
    MLUIFullScreenController = __decorate([
        __param(0, es5_1.Inject),
        __metadata("design:paramtypes", [typeof (_b = typeof MLUIFullScreenPanel_1.MLUIFullScreenPanel !== "undefined" && MLUIFullScreenPanel_1.MLUIFullScreenPanel) === "function" && _b || Object])
    ], MLUIFullScreenController);
    return MLUIFullScreenController;
}(UIPanelController_1.UIPanelController));
exports.MLUIFullScreenController = MLUIFullScreenController;


/***/ }),
/* 900 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var MiniSignal = __webpack_require__(3);
var es5_1 = __webpack_require__(0);
var UIPanelController_1 = __webpack_require__(58);
var MLUISlotPanelView_1 = __webpack_require__(901);
var MLUISlotPanelConfig_1 = __webpack_require__(444);
var MLUISlotPanelController = /** @class */ (function (_super) {
    __extends(MLUISlotPanelController, _super);
    function MLUISlotPanelController(view) {
        var _this = _super.call(this, view) || this;
        _this.showBetPanelEventSignal = new MiniSignal();
        _this.showSpinSettingsPanelEventSignal = new MiniSignal();
        _this.showMenuPanelEventSignal = new MiniSignal();
        _this.betIncraseSignal = new MiniSignal();
        _this.betDecraseSignal = new MiniSignal();
        return _this;
    }
    MLUISlotPanelController.prototype.init = function () {
        var config = this.gameConfig.getConfig(MLUISlotPanelConfig_1.MLUISlotPanelConfig);
        this.view.initialize(config);
        for (var member in MLUISlotPanelConfig_1.SlotButton) {
            if (MLUISlotPanelConfig_1.SlotButton[member]) {
                var buttonConfig = config[MLUISlotPanelConfig_1.SlotButton[member]];
                this.setButtonActionEventListeners(buttonConfig);
            }
        }
        this.finishStateAction();
    };
    MLUISlotPanelController.prototype.action_showBetOptions = function () {
        this.showBetPanelEventSignal.dispatch();
    };
    MLUISlotPanelController.prototype.action_showAutoPlayPanel = function () {
        this.showSpinSettingsPanelEventSignal.dispatch();
    };
    MLUISlotPanelController.prototype.action_showMenuOptions = function () {
        this.showMenuPanelEventSignal.dispatch();
    };
    MLUISlotPanelController.prototype.action_betIncrease = function () {
        this.view.onBetIncrease();
        this.betIncraseSignal.dispatch();
    };
    MLUISlotPanelController.prototype.action_betDecrease = function () {
        this.view.onBetDecrease();
        this.betDecraseSignal.dispatch();
    };
    MLUISlotPanelController.prototype.baseGameIdle = function () {
        this.view.setBetButtonEnable();
        this.finishStateAction();
    };
    MLUISlotPanelController.prototype.showWinning = function () {
        this.view.setBetButtonEnable();
        this.finishStateAction();
    };
    var _a;
    MLUISlotPanelController = __decorate([
        __param(0, es5_1.Inject),
        __metadata("design:paramtypes", [typeof (_a = typeof MLUISlotPanelView_1.MLUISlotPanelView !== "undefined" && MLUISlotPanelView_1.MLUISlotPanelView) === "function" && _a || Object])
    ], MLUISlotPanelController);
    return MLUISlotPanelController;
}(UIPanelController_1.UIPanelController));
exports.MLUISlotPanelController = MLUISlotPanelController;


/***/ }),
/* 901 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var pixi_js_1 = __webpack_require__(4);
var es5_1 = __webpack_require__(0);
var Button_1 = __webpack_require__(19);
var MLUIPanel_1 = __webpack_require__(94);
var MLUISlotPanelConfig_1 = __webpack_require__(444);
var SlotBankService_1 = __webpack_require__(49);
var MLUISlotPanelView = /** @class */ (function (_super) {
    __extends(MLUISlotPanelView, _super);
    function MLUISlotPanelView() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.buttons = new Array();
        return _this;
    }
    MLUISlotPanelView.prototype.createElements = function (config) {
        var _this = this;
        _super.prototype.createElements.call(this, config);
        for (var member in MLUISlotPanelConfig_1.SlotButton) {
            if (MLUISlotPanelConfig_1.SlotButton[member]) {
                this.renderButton(MLUISlotPanelConfig_1.SlotButton[member]);
            }
        }
        this.buttonIncrement = this.buttons.find(function (button) { return button.name == _this.config.betIncrementButton.name; });
        this.buttonDecrement = this.buttons.find(function (button) { return button.name == _this.config.betDecrementButton.name; });
        this.setConfirmClickData();
    };
    MLUISlotPanelView.prototype.renderButton = function (buttonName) {
        var button = new Button_1.Button(this.config[buttonName], this.localButtonsController);
        button.anchor = new pixi_js_1.Point(0.5, 0.5);
        this.buttons.push(button);
        this.addChild(button);
    };
    MLUISlotPanelView.prototype.onBetIncrease = function () {
        this.bankService.increaseBet();
        this.updateClickData(this.buttonIncrement);
        this.setBetButtonEnable();
    };
    MLUISlotPanelView.prototype.onBetDecrease = function () {
        this.bankService.decreaseBet();
        this.updateClickData(this.buttonDecrement);
        this.setBetButtonEnable();
    };
    MLUISlotPanelView.prototype.setBetButtonEnable = function () {
        if (!this.buttonDecrement.visible || !this.buttonIncrement.visible) {
            this.buttonIncrement.visible = true;
            this.buttonDecrement.visible = true;
        }
        this.currentBet = this.bankService.currentBetIndex;
        if (this.currentBet == 0) {
            this.buttonDecrement.setEnable(false);
            this.buttonIncrement.setEnable(true);
        }
        else if (this.currentBet == this.bankService.betOptions.length - 1) {
            this.buttonIncrement.setEnable(false);
            this.buttonDecrement.setEnable(true);
        }
        else {
            this.buttonDecrement.setEnable(true);
            this.buttonIncrement.setEnable(true);
        }
    };
    MLUISlotPanelView.prototype.setConfirmClickData = function () {
        this.buttonDecrement.clickData = {
            data: {}
        };
        this.buttonIncrement.clickData = {
            data: {}
        };
    };
    MLUISlotPanelView.prototype.updateClickData = function (button) {
        var index = this.bankService.betOptions.indexOf(this.bankService.bet);
        var totalBet = this.bankService.betOptions[index] * this.bankService.lines;
        var clickData = button.clickData;
        clickData.data.totalBet = totalBet;
        button.clickData = clickData;
    };
    var _a;
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof SlotBankService_1.SlotBankService !== "undefined" && SlotBankService_1.SlotBankService) === "function" && _a || Object)
    ], MLUISlotPanelView.prototype, "bankService", void 0);
    return MLUISlotPanelView;
}(MLUIPanel_1.MLUIPanel));
exports.MLUISlotPanelView = MLUISlotPanelView;


/***/ }),
/* 902 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var MLUIBackgroundPanel_1 = __webpack_require__(903);
var MLUIBackgroundConfig_1 = __webpack_require__(904);
var UIPanelController_1 = __webpack_require__(58);
var MLUIBackgroundController = /** @class */ (function (_super) {
    __extends(MLUIBackgroundController, _super);
    function MLUIBackgroundController(view) {
        return _super.call(this, view) || this;
    }
    MLUIBackgroundController.prototype.init = function () {
        var config = this.gameConfig.getConfig(MLUIBackgroundConfig_1.MLUIBackgroundConfig);
        this.view.initialize(config);
        this.finishStateAction();
    };
    MLUIBackgroundController.prototype.startPickFeature = function (data) {
        this.view.visible = false;
        this.finishStateAction();
    };
    MLUIBackgroundController.prototype.endPickFeature = function (data) {
        this.view.visible = true;
        this.finishStateAction();
    };
    MLUIBackgroundController.prototype.transitionToFreeSpins = function (data) {
        this.view.visible = true;
        this.finishStateAction();
    };
    var _a;
    MLUIBackgroundController = __decorate([
        __param(0, es5_1.Inject),
        __metadata("design:paramtypes", [typeof (_a = typeof MLUIBackgroundPanel_1.MLUIBackgroundPanel !== "undefined" && MLUIBackgroundPanel_1.MLUIBackgroundPanel) === "function" && _a || Object])
    ], MLUIBackgroundController);
    return MLUIBackgroundController;
}(UIPanelController_1.UIPanelController));
exports.MLUIBackgroundController = MLUIBackgroundController;


/***/ }),
/* 903 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var pixi_js_1 = __webpack_require__(4);
var MLUIPanel_1 = __webpack_require__(94);
var MLUIBackgroundPanel = /** @class */ (function (_super) {
    __extends(MLUIBackgroundPanel, _super);
    function MLUIBackgroundPanel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MLUIBackgroundPanel.prototype.createElements = function (config) {
        this.config = config;
        _super.prototype.createElements.call(this, this.config);
        this.addBackground();
    };
    MLUIBackgroundPanel.prototype.addBackground = function () {
        try {
            this.background = pixi_js_1.Sprite.fromFrame(this.config.assetName);
            this.background.position.set(this.config.position.x, this.config.position.y);
            this.addChild(this.background);
        }
        catch (error) {
            console.log('add ui background assets if you need it');
        }
    };
    return MLUIBackgroundPanel;
}(MLUIPanel_1.MLUIPanel));
exports.MLUIBackgroundPanel = MLUIBackgroundPanel;


/***/ }),
/* 904 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var MLUIBackgroundConfig = /** @class */ (function () {
    function MLUIBackgroundConfig() {
        this.name = 'uiBackground';
        this.assetName = 'base_buttons_BG.png';
        this.position = {
            x: 10,
            y: 1025
        };
    }
    return MLUIBackgroundConfig;
}());
exports.MLUIBackgroundConfig = MLUIBackgroundConfig;


/***/ }),
/* 905 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var MiniSignal = __webpack_require__(3);
var es5_1 = __webpack_require__(0);
var UIPanelController_1 = __webpack_require__(58);
var MLUITurboPanel_1 = __webpack_require__(906);
var MLUITurboConfig_1 = __webpack_require__(262);
var MLUITurboController = /** @class */ (function (_super) {
    __extends(MLUITurboController, _super);
    function MLUITurboController(view) {
        var _this = _super.call(this, view) || this;
        _this.turboModeSignal = new MiniSignal();
        return _this;
    }
    MLUITurboController.prototype.init = function (data) {
        var config = this.gameConfig.getConfig(MLUITurboConfig_1.MLUITurboConfig);
        this.view.initialize(config);
        this.setButtonActionEventListeners(config.turboButton);
        this.turboModeSignal.dispatch(config.turboButton.speedMode[0]);
        this.finishStateAction();
    };
    /**
     * action callback from local button controller.
     * on turbo button clicked
     * @param turboModeData
     */
    MLUITurboController.prototype.action_turboModeOption = function (turboModeData) {
        this.turboModeSignal.dispatch(turboModeData.speed);
    };
    MLUITurboController.prototype.setTurboButtonMode = function (speed) {
        this.view.setTurboButtonMode(speed);
    };
    var _a;
    MLUITurboController = __decorate([
        __param(0, es5_1.Inject),
        __metadata("design:paramtypes", [typeof (_a = typeof MLUITurboPanel_1.MLUITurboPanel !== "undefined" && MLUITurboPanel_1.MLUITurboPanel) === "function" && _a || Object])
    ], MLUITurboController);
    return MLUITurboController;
}(UIPanelController_1.UIPanelController));
exports.MLUITurboController = MLUITurboController;


/***/ }),
/* 906 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var MLUIPanel_1 = __webpack_require__(94);
var TurboButton_1 = __webpack_require__(907);
var MLUITurboPanel = /** @class */ (function (_super) {
    __extends(MLUITurboPanel, _super);
    function MLUITurboPanel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MLUITurboPanel.prototype.createElements = function (config) {
        this.turboButton = new TurboButton_1.TurboButton(config.turboButton, this.localButtonsController);
        this.addChild(this.turboButton);
    };
    MLUITurboPanel.prototype.setTurboButtonMode = function (speed) {
        this.turboButton.changeTexture(speed);
    };
    return MLUITurboPanel;
}(MLUIPanel_1.MLUIPanel));
exports.MLUITurboPanel = MLUITurboPanel;


/***/ }),
/* 907 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var TsMap_1 = __webpack_require__(2);
var Actions_1 = __webpack_require__(22);
var Button_1 = __webpack_require__(19);
var TurboButton = /** @class */ (function (_super) {
    __extends(TurboButton, _super);
    function TurboButton() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.TURBO_ON = 'On';
        _this.TURBO_OFF = 'Off';
        return _this;
    }
    TurboButton.prototype.createElements = function (buttonConfig) {
        _super.prototype.createElements.call(this, buttonConfig);
        this.speedMode = buttonConfig.speedMode;
        this.speedTextureMap = new TsMap_1.TsMap();
        for (var i = 0; i < this.speedMode.length; i++) {
            this.speedTextureMap.set(this.speedMode[i], buttonConfig.speedTextures[i]);
        }
        this.currentSpeedIndex = 0;
    };
    TurboButton.prototype.onClick = function (event) {
        this.playSoundEffect();
        var action = Actions_1.Actions.CLICK_ACTION_PREFIX + this.action;
        this.currentSpeedIndex += 1;
        if (this.currentSpeedIndex >= this.config.speedMode.length) {
            this.currentSpeedIndex = 0;
            this.clickData.speedMode = this.TURBO_OFF;
        }
        else {
            this.clickData.speedMode = this.TURBO_ON;
        }
        if (this.action != Actions_1.Actions.EMPTY) {
            this.clickData.speed = this.speedMode[this.currentSpeedIndex];
            this.localButtonsController.handleButtonAction(action, this.clickData);
            this.changeTexture(this.clickData.speed);
        }
        else {
            throw 'need action for button:' + this.id;
        }
        this.hookPlayerAction();
    };
    TurboButton.prototype.updateTexture = function () {
        var speedName = this.speedTextureMap ? this.speedTextureMap.get(this.speedMode[this.currentSpeedIndex]) : '';
        var fullName = this.assetName + speedName;
        this.enabledElement = this.findTexture(fullName + this.enabledFrame);
        this.disabledElement = this.findTexture(fullName + this.disabledFrame, false);
        this.overElement = this.findTexture(fullName + this.overFrame, false);
        this.downElement = this.findTexture(fullName + this.downFrame, false);
    };
    TurboButton.prototype.changeTexture = function (speed) {
        var speedName = this.speedTextureMap.get(speed);
        var fullName = this.assetName + speedName;
        this.enabledElement = this.findTexture(fullName + this.enabledFrame);
        this.disabledElement = this.findTexture(fullName + this.disabledFrame, false);
        this.overElement = this.findTexture(fullName + this.overFrame, false);
        this.downElement = this.findTexture(fullName + this.downFrame, false);
        this.setEnable(true);
        this.currentSpeedIndex = this.speedMode.indexOf(speed);
    };
    TurboButton.prototype.findTexture = function (fullName, isRequired) {
        if (isRequired === void 0) { isRequired = true; }
        if (PIXI.utils.TextureCache[fullName] == undefined) {
            if (isRequired) {
                throw 'button texture doesn\'t exist: ' + fullName;
            }
            else {
                console.log('button texture doesn\'t exist: ' + fullName);
            }
        }
        return PIXI.utils.TextureCache[fullName];
    };
    return TurboButton;
}(Button_1.Button));
exports.TurboButton = TurboButton;


/***/ }),
/* 908 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var MiniSignal = __webpack_require__(3);
var es5_1 = __webpack_require__(0);
var Actions_1 = __webpack_require__(22);
var GameController_1 = __webpack_require__(53);
var MoneyFormatter_1 = __webpack_require__(16);
var UIPanelController_1 = __webpack_require__(58);
var SlotActions_1 = __webpack_require__(44);
var SlotBankService_1 = __webpack_require__(49);
var SlotFreeSpinsController_1 = __webpack_require__(155);
var SlotAutoPlayController = /** @class */ (function (_super) {
    __extends(SlotAutoPlayController, _super);
    function SlotAutoPlayController(view) {
        var _this = _super.call(this, view) || this;
        _this.infiniteSpins = -1;
        _this.autoPlay = false;
        _this.freeSpinsMode = false;
        _this._autoPlayCount = 0;
        _this.loseLimit = Infinity;
        _this.winLimit = Infinity;
        _this.singleWinLimit = Infinity;
        _this.winDifference = 0;
        _this.singleWinDifference = 0;
        _this.onAutoSpinEventSignal = new MiniSignal();
        _this.autoPlayStartSignal = new MiniSignal();
        _this.autoPlayStopSignal = new MiniSignal();
        return _this;
    }
    Object.defineProperty(SlotAutoPlayController.prototype, "autoPlayCount", {
        get: function () {
            return this._autoPlayCount;
        },
        set: function (value) {
            this._autoPlayCount = value;
        },
        enumerable: true,
        configurable: true
    });
    // #region state function
    SlotAutoPlayController.prototype.init = function (data) {
        this.autoPlay = (data.spinType == SlotFreeSpinsController_1.SlotFreeSpinsController.TYPE_FREE_SPINS);
        this.freeSpinsMode = (data.spinType == SlotFreeSpinsController_1.SlotFreeSpinsController.TYPE_FREE_SPINS);
        this.finishStateAction();
    };
    SlotAutoPlayController.prototype.autoSpinStartSpin = function () {
        this.winDifference -= this.bankService.totalBet;
        this.finishStateAction();
    };
    SlotAutoPlayController.prototype.autoSpinSpinStop = function (data) {
        if (this.autoPlay && this.autoPlayCount != this.infiniteSpins) {
            this.autoPlayCount--;
        }
        this.finishStateAction();
    };
    SlotAutoPlayController.prototype.showRetrigger = function (data) {
        this.autoPlayCount = data.totalFreeSpinCount - data.currentFreeSpinCount + 1;
        this.finishStateAction();
    };
    SlotAutoPlayController.prototype.freeSpinsStop = function (data) {
        this.autoPlayCount--;
        this.autoPlay = (this.autoPlayCount > 0 || data.retriggered);
        this.finishStateAction();
    };
    SlotAutoPlayController.prototype.transitionToBaseGame = function (data) {
        this.autoPlay = false;
        this.freeSpinsMode = false;
        this.finishStateAction();
    };
    SlotAutoPlayController.prototype.transitionToFreeSpins = function (data) {
        this.autoPlayCount = data.spins;
        this.freeSpinsMode = true;
        this.finishStateAction();
    };
    SlotAutoPlayController.prototype.transitionToBonusSpins = function (data) {
        this.transitionToFreeSpins(data);
    };
    SlotAutoPlayController.prototype.transitionBonusToBase = function (stateData) {
        this.transitionToBaseGame(stateData);
    };
    SlotAutoPlayController.prototype.transitionToAutoSpin = function (data) {
        this.freeSpinsMode = false;
        this.autoPlayCount = data.spins === 'infinite' ? Number.MAX_SAFE_INTEGER : parseInt(data.spins);
        this.singleWinLimit = data.singleWinLimit ? this.getWinOrLoseLimitValue(data.singleWinLimit.value) : undefined;
        this.winLimit = data.winLimit ? this.getWinOrLoseLimitValue(data.winLimit.value) : undefined;
        this.loseLimit = this.getWinOrLoseLimitValue(data.lossLimit.value);
        this.winDifference = 0;
        this.singleWinDifference = 0;
        this.setAutoPlay(true);
        this.triggerNextTurn();
        this.finishStateAction();
    };
    SlotAutoPlayController.prototype.freeSpinsIdle = function (data) {
        this.checkAndStopAutoPlay(); //TODO : Remove this for spin to start autoplay
        this.triggerNextTurn();
        this.finishStateAction();
    };
    SlotAutoPlayController.prototype.autoSpinShowWinning = function () {
        this.triggerNextTurn();
        this.finishStateAction();
    };
    SlotAutoPlayController.prototype.freeSpinsShowWinning = function () {
        this.triggerNextTurn();
        this.finishStateAction();
    };
    SlotAutoPlayController.prototype.autoSpinDashboardIdle = function (data) {
        this.triggerNextTurn();
        this.finishStateAction();
    };
    SlotAutoPlayController.prototype.allReelStopped = function (data) {
        if (data) {
            this.singleWinDifference = data.totalWin;
            this.winDifference += data.totalWin;
        }
        this.checkAndStopAutoPlay(data.balance);
        this.finishStateAction();
    };
    // #endregion state function
    SlotAutoPlayController.prototype.getWinOrLoseLimitValue = function (value) {
        if (value == undefined) {
            return 0;
        }
        else if (value == -1 || value == Infinity) {
            return Infinity;
        }
        else {
            return value;
        }
    };
    SlotAutoPlayController.prototype.onStopAutoSpins = function () {
        this.setAutoPlay(false);
    };
    SlotAutoPlayController.prototype.checkAndStopAutoPlay = function (balance) {
        this.setAutoPlay(this.isAutoPlayCountAllowed() && this.isAutoPlayBalanceAllowed(balance) && this.hitAutoLimit());
    };
    SlotAutoPlayController.prototype.isAutoPlayCountAllowed = function () {
        return this.autoPlayCount > 0;
    };
    SlotAutoPlayController.prototype.isAutoPlayBalanceAllowed = function (balance) {
        if (this.freeSpinsMode) {
            return true;
        }
        balance = (balance == undefined) ? this.bankService.balance : balance;
        return balance >= this.bankService.totalBet;
    };
    /**
     * returm false is hit auto spin win/lose limit
     */
    SlotAutoPlayController.prototype.hitAutoLimit = function () {
        if (this.freeSpinsMode) {
            return true;
        }
        return !(this.isHitAutoWinLimit() || this.isHitAutoLoseLimit() || this.isHitAutoSingleWinLimit());
    };
    /**
     * check is hit auto spin win limit.
     * retutn true if hit win limit
     */
    SlotAutoPlayController.prototype.isHitAutoWinLimit = function () {
        if (Number.isFinite(this.winLimit) && this.winDifference >= this.winLimit) {
            return true;
        }
        return false;
    };
    /**
     * check is hit auto spin single win limit.
     * retutn true if hit single win limit
     */
    SlotAutoPlayController.prototype.isHitAutoSingleWinLimit = function () {
        if (!this.singleWinLimit) {
            return false;
        }
        if (Number.isFinite(this.singleWinLimit) && this.singleWinDifference >= this.singleWinLimit) {
            return true;
        }
        return false;
    };
    /**
     * check is hit auto spin lose limit
     * retutn true if hit lose limit
     */
    SlotAutoPlayController.prototype.isHitAutoLoseLimit = function () {
        if (Number.isFinite(this.loseLimit) && (0 >= this.winDifference && Math.abs(this.winDifference) >= this.loseLimit)) {
            return true;
        }
        return false;
    };
    SlotAutoPlayController.prototype.startPickFeature = function (stateData) {
        this.onStopAutoSpins();
        this.finishStateAction();
    };
    SlotAutoPlayController.prototype.setAutoPlay = function (value) {
        if (this.autoPlay != value) {
            this.autoPlay = value;
        }
        if (!this.autoPlay) {
            this.stopAutoPlay();
        }
    };
    SlotAutoPlayController.prototype.triggerNextTurn = function () {
        if (this.autoPlay) {
            this.onAutoSpinEventSignal.dispatch();
        }
    };
    SlotAutoPlayController.prototype.stopAutoPlay = function () {
        this.gameController.handleButtonAction(Actions_1.Actions.CLICK_ACTION_PREFIX + SlotActions_1.SlotActions.STOP_AUTO_PLAY); //TODO Change to free spin
        this.autoPlayCount = this.winDifference = 0;
        this.autoPlayStopSignal.dispatch();
    };
    SlotAutoPlayController.prototype.actionsOnSetAutoPlay = function () {
        this.onAutoSpinEventSignal.dispatch();
    };
    var _a, _b, _c;
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof GameController_1.GameController !== "undefined" && GameController_1.GameController) === "function" && _a || Object)
    ], SlotAutoPlayController.prototype, "gameController", void 0);
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_b = typeof SlotBankService_1.SlotBankService !== "undefined" && SlotBankService_1.SlotBankService) === "function" && _b || Object)
    ], SlotAutoPlayController.prototype, "bankService", void 0);
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_c = typeof MoneyFormatter_1.MoneyFormatter !== "undefined" && MoneyFormatter_1.MoneyFormatter) === "function" && _c || Object)
    ], SlotAutoPlayController.prototype, "moneyFormatter", void 0);
    return SlotAutoPlayController;
}(UIPanelController_1.UIPanelController));
exports.SlotAutoPlayController = SlotAutoPlayController;


/***/ }),
/* 909 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var MiniSignal = __webpack_require__(3);
var es5_1 = __webpack_require__(0);
var Momentum_1 = __webpack_require__(910);
var Viewport_1 = __webpack_require__(6);
var Sprite_1 = __webpack_require__(48);
var InteractiveElement_1 = __webpack_require__(140);
var pixi_js_1 = __webpack_require__(4);
var CommonAnimation_1 = __webpack_require__(206);
// NOTE:
// In Desktop, PIXI triggers PointerEvent
// In mobile, PIXI triggers TouchEvent
/**
 * A container that is scrollable when content size greater than defined window size.
 * If there are interactive elements inside the container,
 * dev should call e.stopPropagation() in interactive event callback so that ScrollContainer can work properly.
 *
 * TODO: x-axis scrolling handling
 * @export
 * @class ScrollContainer
 * @extends {InteractiveElement}
 */
var ScrollContainer = /** @class */ (function (_super) {
    __extends(ScrollContainer, _super);
    function ScrollContainer() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * Invoked each time when scrolling to the bottom.
         *
         * @type {MiniSignal}
         * @memberof ScrollContainer
         */
        _this.onReachBottomSignal = new MiniSignal();
        _this.isScrolling = false;
        _this.isScrollable = false;
        /**
         * Flag that indicates if user triggers an avaliable scrolling action
         *
         * @private
         * @type {boolean}
         * @memberof ScrollContainer
         */
        _this.isAvaliableMove = false;
        _this.startPos = { x: 0, y: 0 };
        _this.pointerDownPosition = { x: 0, y: 0 };
        _this.isEnableScrollBar = false;
        _this.isShowScrollHint = false;
        /**
         * Presents current scroll bar offset
         *
         * @type {Point}
         * @memberof ScrollContainer
         */
        _this.offset = new pixi_js_1.Point(0, 0);
        return _this;
    }
    ScrollContainer.prototype.initElement = function (config) {
        this.momentum = new Momentum_1.Momentum({
            updateCallback: this.onUpdate.bind(this),
            onStop: this.onScrollStop.bind(this),
            boundX: [0, this.config.width],
            boundY: [-this.config.height, 0],
        });
        this.interactive = true;
        this.leaveBottomThreshold = this.config.leaveBottomThreshold || 0;
        this.minimumScrollThreshold = this.config.minimumScrollThreshold || 0;
        // TODO: enable scroll bar when handle orientation properly
        this.isEnableScrollBar = false; //this.config.scrollBar ? true : false;
        this.contentContainer = new pixi_js_1.Container();
        this.scrollBarContainer = new pixi_js_1.Container();
        this.maskContainer = new pixi_js_1.Container();
        this.maskContainer.addChild(this.contentContainer);
        this.setupMask(this.config.width, this.config.height);
        this.addChild(this.maskContainer);
        this.addChild(this.scrollBarContainer);
        if (this.isEnableScrollBar) {
            this.createScrollBar();
        }
        if (this.config.scrollHintImg) {
            this.setupScrollHint();
        }
        this.addListeners();
    };
    ScrollContainer.prototype.setupScrollHint = function () {
        var config = this.config.scrollHintImg;
        this.scrollHint = new Sprite_1.Sprite(config);
        this.scrollHint.anchor.x = (config.anchor) ? config.anchor.x : 0.5;
        this.scrollHint.x = (config.position) ? config.position.x : (this.config.width / 2);
        this.scrollHint.y = (config.position) ? config.position.y : (this.config.height - this.scrollHint.height - 15);
        this.scrollHint.visible = false;
        if (config.showTween) {
            config.showTween.target = this.scrollHint;
        }
        if (config.hideTween) {
            config.hideTween.target = this.scrollHint;
        }
        this.addChild(this.scrollHint);
    };
    ScrollContainer.prototype.onReachBottom = function () {
        this.hideScrollHint();
        this.onReachBottomSignal.dispatch();
    };
    ScrollContainer.prototype.showScollHint = function () {
        if (!this.scrollHint || this.isShowScrollHint) {
            return;
        }
        this.scrollHint.visible = true;
        var config = this.config.scrollHintImg;
        if (config.showTween) {
            this.tweenScrollHint(config.showTween.tweenConfig);
        }
        this.isShowScrollHint = true;
    };
    ScrollContainer.prototype.hideScrollHint = function () {
        if (!this.scrollHint || !this.isShowScrollHint) {
            return;
        }
        var config = this.config.scrollHintImg;
        if (config.hideTween) {
            this.tweenScrollHint(config.hideTween.tweenConfig);
        }
        else {
            this.scrollHint.visible = false;
        }
        this.isShowScrollHint = false;
    };
    ScrollContainer.prototype.tweenScrollHint = function (config) {
        //@ts-ignore
        CommonAnimation_1.CommonAnimation.startTween(config).start();
    };
    ScrollContainer.prototype.onScrolling = function () {
        if (Math.abs(Math.abs(this.contentContainer.y) - this.getBoundY()) > this.leaveBottomThreshold && this.scrollHint) {
            this.showScollHint();
        }
    };
    ScrollContainer.prototype.addListeners = function () {
        this.maskContainer.on('pointerdown', this.pointerdown, this);
        this.maskContainer.on('pointermove', this.pointermove, this);
        var element = document.getElementsByTagName('canvas')[0];
        element.addEventListener('pointerup', this.pointerup.bind(this), false);
        element.addEventListener('pointerout', this.pointerup.bind(this), false);
        if (!this.isEnableScrollBar) { // scroll bar doen't handle wheel event properly.
            element.addEventListener('wheel', this.wheel.bind(this), false);
        }
    };
    ScrollContainer.prototype.wheel = function (e) {
        if (this.isScrolling) {
            return;
        }
        // reset startPos
        if (this.startPos.x !== this.contentContainer.x) {
            this.startPos.x = this.contentContainer.x;
        }
        if (this.startPos.y !== this.contentContainer.y) {
            this.startPos.y = this.contentContainer.y;
        }
        // wheel up, scroll content down
        // deltaY is 100, but when container move 100px at one time that looks not smooth. so reduce a half.
        this.startPos.y -= (e.deltaY * 0.5);
        if (this.startPos.y > 0) {
            this.startPos.y = 0;
        }
        else if (this.startPos.y < -this.getBoundY()) {
            this.startPos.y = -this.getBoundY();
            this.onReachBottom();
        }
        this.onScrolling();
        this.offset.y = Math.abs(this.startPos.y);
        this.contentContainer.y = this.startPos.y;
        // when the wheel move finish, will reset target's postion of momentum.
        this.momentum.resetTargetPostion(this.contentContainer.x, this.contentContainer.y);
    };
    ScrollContainer.prototype.pointerdown = function (e) {
        this.isScrolling = true;
        this.pointerDownPosition = this.getPositionFromEvent(e);
        this.momentum.start(this.pointerDownPosition);
    };
    ScrollContainer.prototype.onUpdate = function (data) {
        if (this.contentContainer.y === data.y) {
            return;
        }
        this.onScrolling();
        this.contentContainer.y = data.y;
        this.offset.y = Math.abs(data.y);
        if (this.isEnableScrollBar && this.isScrollable) {
            var ratio = Math.abs(data.y) / this.getBoundY();
            var scrollY = ratio * Math.abs(this.config.height - this.scroll.height);
            this.scroll.y = scrollY;
        }
        if (this.isReachBottom()) {
            this.onReachBottom();
        }
    };
    ScrollContainer.prototype.isReachBottom = function () {
        return Math.abs(this.contentContainer.y) === this.getBoundY();
    };
    ScrollContainer.prototype.pointermove = function (e) {
        if (!this.isScrolling) {
            return;
        }
        var point = this.getPositionFromEvent(e);
        if (!this.isTriggerAvaliableMove(point)) {
            return;
        }
        else if (!this.isAvaliableMove) {
            this.isAvaliableMove = true;
            this.momentum.end();
            this.momentum.start(point);
        }
        this.momentum.move(point);
    };
    ScrollContainer.prototype.pointerup = function (e) {
        if (this.isScrolling === false) {
            return;
        }
        var point = this.getPositionFromEvent(e);
        if (!this.isTriggerAvaliableMove(point)) {
            this.onScrollStop();
        }
        this.momentum.end();
    };
    ScrollContainer.prototype.isTriggerAvaliableMove = function (point) {
        return Math.abs(this.pointerDownPosition.y - point.y) >= this.minimumScrollThreshold;
    };
    ScrollContainer.prototype.onScrollStop = function () {
        this.isScrolling = false;
        this.isAvaliableMove = false;
    };
    ScrollContainer.prototype.getPositionFromEvent = function (e) {
        if (e.data && e.data.originalEvent.touches) {
            if (e.data.originalEvent.touches[0] === undefined) {
                return {
                    x: e.clientX,
                    y: e.clientY
                };
            }
            else {
                return {
                    x: e.data.originalEvent.touches[0].clientX,
                    y: e.data.originalEvent.touches[0].clientY
                };
            }
        }
        else if (e.clientX || e.clientY) {
            return {
                x: e.clientX,
                y: e.clientY
            };
        }
        else {
            return {
                x: e.data.originalEvent.clientX,
                y: e.data.originalEvent.clientY
            };
        }
    };
    ScrollContainer.prototype.setupMask = function (width, height) {
        if (width === void 0) { width = 0; }
        if (height === void 0) { height = 0; }
        if (!width && !height) {
            return;
        }
        if (this.maskSprite) {
            this.maskContainer.mask.width = width;
            this.maskContainer.mask.height = height;
            return;
        }
        // mask with gradient
        var customMask = new pixi_js_1.Container();
        var gradientKey = (this.config) ? this.config.gradientMaskAssetKey || '' : '';
        var img = pixi_js_1.Sprite.from(gradientKey);
        img.scale.x = this.config.width / img.width;
        img.y = height - img.height;
        var mask = new pixi_js_1.Graphics();
        mask.beginFill(0xffffff, 1);
        mask.drawRect(0, 0, width, height - img.height);
        mask.endFill();
        customMask.addChild(mask);
        customMask.addChild(img);
        var finalMask = new pixi_js_1.Sprite(this.viewport.renderer.generateTexture(customMask));
        this.maskSprite = finalMask;
        this.maskContainer.addChild(finalMask);
        this.maskContainer.mask = finalMask;
    };
    ScrollContainer.prototype.addContent = function (object) {
        this.contentContainer.addChild(object);
        this.updateContentHeight();
    };
    ScrollContainer.prototype.updateContentHeight = function () {
        if (this.isEnableScrollBar) {
            this.updateScrollItemHeight();
            this.updateScrollBarVisible();
        }
        if (this.scrollHint) {
            this.showScollHint();
        }
        this.momentum.setBoundY([-this.getBoundY(), 0]);
    };
    ScrollContainer.prototype.getBoundY = function () {
        return (this.contentContainer.height > this.config.height) ? Math.abs(this.contentContainer.height - this.config.height) : 0;
    };
    ScrollContainer.prototype.updateScrollItemHeight = function () {
        var scrollSizeRatio = (this.config.height / this.contentContainer.height);
        if (scrollSizeRatio > 1) {
            return;
        }
        var scrollHeight = this.config.height * scrollSizeRatio;
        this.scroll.height = scrollHeight;
    };
    ScrollContainer.prototype.createScrollBar = function () {
        this.createScrollTrack();
        this.createScroll();
        this.updateScrollBarVisible();
    };
    ScrollContainer.prototype.updateScrollBarVisible = function () {
        if (!this.shouldShowScrollBar()) {
            this.hideScrollBar();
        }
        else {
            this.showScrollBar();
        }
    };
    ScrollContainer.prototype.shouldShowScrollBar = function () {
        var scrollSizeRatio = (this.config.height / this.contentContainer.height);
        if (scrollSizeRatio < 1) {
            this.isScrollable = true;
            return true;
        }
        this.isScrollable = false;
        return false;
    };
    ScrollContainer.prototype.createScrollTrack = function () {
        // const trackWidth = this.config.scrollBar.trackWidth || 20;
        // const trackHeight = this.config.height;
        // const color = this.config.scrollBar.trackColor || 0;
        // const alpha = this.config.scrollBar.trackAlpha || 0.3;
        // if ( !trackHeight ) {
        // 	return;
        // }
        // this.track = new Graphics();
        // this.track.beginFill( color, alpha );
        // this.track.drawRoundedRect( this.config.width - trackWidth, 0, trackWidth, this.config.height, Math.floor( trackWidth / 2 ) );
        // this.track.endFill();
        // this.scrollBarContainer.addChild( this.track );
    };
    ScrollContainer.prototype.createScroll = function () {
        // const scrollWidth = this.config.scrollBar.scrollWidth || 20;
        // const color = this.config.scrollBar.scrollColor || 0;
        // this.scroll = new Graphics();
        // this.scroll.beginFill( color, 1 );
        // this.scroll.drawRoundedRect( this.config.width - scrollWidth, 0, scrollWidth, this.config.height, Math.floor( scrollWidth / 2 ) );
        // this.scroll.endFill();
        // this.scrollBarContainer.addChild( this.scroll );
    };
    ScrollContainer.prototype.showScrollBar = function () {
        this.scrollBarContainer.visible = true;
    };
    ScrollContainer.prototype.hideScrollBar = function () {
        this.scrollBarContainer.visible = false;
    };
    ScrollContainer.prototype.updateAttributes = function (config) {
        _super.prototype.updateAttributes.call(this, config);
        this.setupMask(config.width, config.height);
        this.config.width = config.width;
        this.config.height = config.height;
        if (this.scrollHint) {
            this.scrollHint.updateAttributes(config.scrollHintImg);
        }
        this.momentum.setBoundY([-this.getBoundY(), 0]);
    };
    var _a;
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof Viewport_1.Viewport !== "undefined" && Viewport_1.Viewport) === "function" && _a || Object)
    ], ScrollContainer.prototype, "viewport", void 0);
    return ScrollContainer;
}(InteractiveElement_1.InteractiveElement));
exports.ScrollContainer = ScrollContainer;


/***/ }),
/* 910 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Momentum = /** @class */ (function () {
    function Momentum(config) {
        if (config === void 0) { config = {}; }
        this.stopThresholdDefault = 0.3;
        this.boundXmin = 0;
        this.boundXmax = 0;
        this.boundYmin = 0;
        this.boundYmax = 0;
        this.targetX = 0;
        this.targetY = 0;
        this.multiplier = 1;
        this.friction = 1;
        this.pointerActive = false;
        this.paused = false;
        this.decelerating = false;
        this.onMoving = false;
        this._ticking = false;
        this.trackingPoints = [];
        this.config = config;
        this.stopThreshold = this.stopThresholdDefault * this.multiplier;
        this.friction = this.config.friction || 0.97;
        if (config.boundX) {
            this.boundXmin = config.boundX[0];
            this.boundXmax = config.boundX[1];
        }
        if (config.boundY) {
            this.boundYmin = config.boundY[0];
            this.boundYmax = config.boundY[1];
        }
    }
    Object.defineProperty(Momentum.prototype, "ticking", {
        get: function () {
            return this._ticking;
        },
        set: function (value) {
            this._ticking = value;
        },
        enumerable: true,
        configurable: true
    });
    Momentum.prototype.setBoundX = function (bound) {
        this.boundXmin = bound[0];
        this.boundXmax = bound[1];
    };
    Momentum.prototype.setBoundY = function (bound) {
        this.boundYmin = bound[0];
        this.boundYmax = bound[1];
    };
    Momentum.prototype.start = function (point) {
        if (this.pointerActive || this.paused) {
            return;
        }
        this.pointerActive = true;
        this.decelerating = false;
        this.pointerLastX = this.pointerCurrentX = point.x;
        this.pointerLastY = this.pointerCurrentY = point.y;
        this.trackingPoints = [];
        this.addTrackingPoint(this.pointerLastX, this.pointerLastY);
    };
    Momentum.prototype.move = function (point) {
        if (!this.pointerActive) {
            return;
        }
        this.onMoving = true;
        this.pointerCurrentX = point.x;
        this.pointerCurrentY = point.y;
        this.addTrackingPoint(this.pointerLastX, this.pointerLastY);
        this.requestTick();
    };
    Momentum.prototype.requestTick = function () {
        if (!this.onMoving) {
            return;
        }
        if (!this.ticking) {
            requestAnimationFrame(this.updateAndRender.bind(this));
            //this.updateAndRender();
        }
    };
    Momentum.prototype.end = function () {
        if (this.pointerActive) {
            this.stopTracking();
        }
    };
    Momentum.prototype.stopTracking = function () {
        this.pointerActive = false;
        this.onMoving = false;
        this.addTrackingPoint(this.pointerLastX, this.pointerLastY);
        this.startDecelAnim();
    };
    Momentum.prototype.startDecelAnim = function () {
        var firstPoint = this.trackingPoints[0];
        var lastPoint = this.trackingPoints[this.trackingPoints.length - 1];
        var xOffset = lastPoint.x - firstPoint.x;
        var yOffset = lastPoint.y - firstPoint.y;
        var timeOffset = lastPoint.time - firstPoint.time;
        var D = (timeOffset / 15) / this.multiplier;
        this.decVelX = (xOffset / D) || 0; // prevent NaN
        this.decVelY = (yOffset / D) || 0;
        var diff = this.checkBounds();
        if ((Math.abs(this.decVelX) > 1 || Math.abs(this.decVelY) > 1) || !diff.inBounds) {
            this.decelerating = true;
            requestAnimationFrame(this.stepDecelAnim.bind(this));
        }
    };
    Momentum.prototype.stepDecelAnim = function () {
        if (!this.decelerating) {
            return;
        }
        this.decVelX *= this.friction;
        this.decVelY *= this.friction;
        this.targetX += this.decVelX;
        this.targetY += this.decVelY;
        var diff = this.checkBounds();
        if ((Math.abs(this.decVelX) > this.stopThreshold || Math.abs(this.decVelY) > this.stopThreshold) || !diff.inBounds) {
            if (diff.x !== 0) {
                if (diff.x > 0) {
                    this.targetX = this.boundXmin;
                }
                else {
                    this.targetX = this.boundXmax;
                }
                this.decVelX = 0;
            }
            if (diff.y !== 0) {
                if (diff.y > 0) {
                    this.targetY = this.boundYmin;
                }
                else {
                    this.targetY = this.boundYmax;
                }
                this.decVelY = 0;
            }
            this.config.updateCallback({
                x: this.targetX,
                y: this.targetY,
            });
            requestAnimationFrame(this.stepDecelAnim.bind(this));
        }
        else {
            this.decelerating = false;
            if (this.config.onStop) {
                this.config.onStop();
            }
        }
    };
    Momentum.prototype.updateAndRender = function () {
        var pointerChangeX = this.pointerCurrentX - this.pointerLastX;
        var pointerChangeY = this.pointerCurrentY - this.pointerLastY;
        this.targetX += pointerChangeX * this.multiplier;
        this.targetY += pointerChangeY * this.multiplier;
        this.checkBounds(true);
        this.config.updateCallback({
            x: this.targetX,
            y: this.targetY,
        });
        this.pointerLastX = this.pointerCurrentX;
        this.pointerLastY = this.pointerCurrentY;
        this.ticking = false;
    };
    Momentum.prototype.checkBounds = function (shouldRestrictToBound) {
        if (shouldRestrictToBound === void 0) { shouldRestrictToBound = false; }
        var xDiff = 0;
        var yDiff = 0;
        if (this.boundXmin !== undefined && this.targetX < this.boundXmin) {
            xDiff = this.boundXmin - this.targetX;
        }
        else if (this.boundXmax !== undefined && this.targetX > this.boundXmax) {
            xDiff = this.boundXmax - this.targetX;
        }
        if (this.boundYmin !== undefined && this.targetY < this.boundYmin) {
            yDiff = this.boundYmin - this.targetY;
        }
        else if (this.boundYmax !== undefined && this.targetY > this.boundYmax) {
            yDiff = this.boundYmax - this.targetY;
        }
        if (shouldRestrictToBound) {
            if (xDiff !== 0) {
                this.targetX = (xDiff > 0) ? this.boundXmin : this.boundXmax;
            }
            if (yDiff !== 0) {
                this.targetY = (yDiff > 0) ? this.boundYmin : this.boundYmax;
            }
        }
        return {
            x: xDiff,
            y: yDiff,
            inBounds: (xDiff === 0 && yDiff === 0)
        };
    };
    Momentum.prototype.addTrackingPoint = function (x, y) {
        var time = Date.now();
        while (this.trackingPoints.length > 0) {
            if (time - this.trackingPoints[0].time <= 100) {
                break;
            }
            this.trackingPoints.shift();
        }
        this.trackingPoints.push({ x: x, y: y, time: time });
    };
    Momentum.prototype.resetTargetPostion = function (x, y) {
        this.targetX = x;
        this.targetY = y;
    };
    return Momentum;
}());
exports.Momentum = Momentum;


/***/ }),
/* 911 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var MiniSignal = __webpack_require__(3);
var ToggleButton_1 = __webpack_require__(443);
var ToggleTextButton_1 = __webpack_require__(442);
var MultiButton_1 = __webpack_require__(912);
/**
 * A Container Class that holds and displays multiple Toggle buttons.
*/
var ToggleMultiButton = /** @class */ (function (_super) {
    __extends(ToggleMultiButton, _super);
    function ToggleMultiButton() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.onToggle = new MiniSignal();
        return _this;
    }
    Object.defineProperty(ToggleMultiButton.prototype, "currentIndex", {
        get: function () {
            return this._currentIndex;
        },
        set: function (value) {
            this._currentIndex = value;
        },
        enumerable: true,
        configurable: true
    });
    ToggleMultiButton.prototype.init = function (config) {
        _super.prototype.init.call(this, config);
        if (config.toggleAllButton) {
            this.setupToggleAllButton(config.toggleAllButton);
        }
        if (this.defaultIndex !== undefined) {
            this.selectButton(this.buttons[this.defaultIndex], true);
        }
    };
    ToggleMultiButton.prototype.setupToggleAllButton = function (buttonData) {
        this.toggleAllButton = new ToggleButton_1.ToggleButton(buttonData, this.localButtonController);
        this.toggleAllButton.elementSignal.add(this.onClickToggleAllButton.bind(this));
        this.toggleAllButton.name = ToggleMultiButton.TOGGLE_ALL_SWITCH;
        this.addChild(this.toggleAllButton);
    };
    ToggleMultiButton.prototype.onClickToggleAllButton = function () {
        this.onToggle.dispatch(this.toggleAllButton.selected);
        if (this.toggleAllButton.selected) {
            this.enableAllButtons(this.config.defaultIndexWhenOn);
        }
        else {
            this.disableAllButtons();
        }
    };
    ToggleMultiButton.prototype.createSingleButton = function (buttonData, index) {
        var button;
        if (this.isTextButtonConfig(buttonData)) {
            button = new ToggleTextButton_1.TextToggleButton(buttonData, this.localButtonController);
        }
        else {
            button = new ToggleButton_1.ToggleButton(buttonData, this.localButtonController);
        }
        button.clickData = {
            index: index
        };
        button.selected = (index == this.defaultIndex && this.config.autoPickDefaultButton);
        return button;
    };
    ToggleMultiButton.prototype.onSelectButton = function (data) {
        var _this = this;
        var selectedButton = data.target.parent;
        this.buttons.forEach(function (button) {
            _this.selectButton(button, selectedButton == button);
        });
        this.selectedSignal.dispatch(selectedButton.getAction());
    };
    ToggleMultiButton.prototype.selectButton = function (button, select) {
        button.selected = select;
        if (select) {
            this.currentIndex = button.clickData.index;
        }
    };
    ToggleMultiButton.prototype.updateAttributes = function (config) {
        var _this = this;
        _super.prototype.updateAttributes.call(this, config);
        if (!config) {
            return;
        }
        this.children.forEach(function (child, index) {
            if (child.name === ToggleMultiButton.TOGGLE_ALL_SWITCH) {
                if (config.toggleAllButton) {
                    _this.toggleAllButton.updateAttributes(config.toggleAllButton);
                }
            }
            else if (config.buttonsOrientationConfig) {
                var buttonConfig = config.buttonsOrientationConfig;
                child.scale.x = (buttonConfig.scale) ? buttonConfig.scale.x : 1;
                child.scale.y = (buttonConfig.scale) ? buttonConfig.scale.y : 1;
                child.position.x = (child.width + buttonConfig.offset) * index;
            }
        });
    };
    ToggleMultiButton.prototype.enableAllButtons = function (index) {
        var _this = this;
        _super.prototype.enableAllButtons.call(this);
        if (this.toggleAllButton) {
            this.toggleAllButton.selected = true;
        }
        this.buttons.forEach(function (button, buttonIndex) {
            _this.selectButton(button, buttonIndex == index);
        });
    };
    ToggleMultiButton.prototype.disableAllButtons = function () {
        _super.prototype.disableAllButtons.call(this);
        if (this.toggleAllButton) {
            this.toggleAllButton.selected = false;
        }
    };
    ToggleMultiButton.prototype.resetSelection = function (overrideIndex) {
        var _this = this;
        if (overrideIndex != undefined) {
            this.currentIndex = overrideIndex;
        }
        else {
            this.currentIndex = this.defaultIndex ? this.defaultIndex : undefined;
        }
        this.buttons.forEach(function (button, index) {
            var selectButton = _this.currentIndex != undefined && overrideIndex == index || (_this.defaultIndex == index && overrideIndex == undefined);
            _this.selectButton(button, selectButton);
        });
    };
    ToggleMultiButton.TOGGLE_ALL_SWITCH = 'TOGGLE_ALL_SWITCH';
    return ToggleMultiButton;
}(MultiButton_1.MultiButton));
exports.ToggleMultiButton = ToggleMultiButton;


/***/ }),
/* 912 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Viewport_1 = __webpack_require__(6);
var Button_1 = __webpack_require__(19);
var TextButton_1 = __webpack_require__(154);
var Actions_1 = __webpack_require__(22);
var MiniSignal = __webpack_require__(3);
var CoreElement_1 = __webpack_require__(56);
/**
 * A Container Class that holds and displays multiple buttons.
*/
var MultiButton = /** @class */ (function (_super) {
    __extends(MultiButton, _super);
    /**
     * @param data IButtonContainerConfig object
     */
    function MultiButton(data, localButtonsController) {
        var _this = _super.call(this, data) || this;
        _this.selectedSignal = new MiniSignal();
        _this.localButtonController = localButtonsController;
        _this.init(data);
        return _this;
    }
    Object.defineProperty(MultiButton.prototype, "defaultIndex", {
        get: function () {
            return this._defaultIndex;
        },
        set: function (value) {
            this._defaultIndex = value;
        },
        enumerable: true,
        configurable: true
    });
    MultiButton.prototype.init = function (data) {
        if (data.defaultIndex !== undefined) {
            this.defaultIndex = data.defaultIndex;
        }
        this.setupButtons(data);
    };
    MultiButton.prototype.isTextButtonConfig = function (buttonData) {
        return buttonData.text != undefined;
    };
    MultiButton.prototype.createSingleButton = function (buttonData, index) {
        if (index === void 0) { index = 0; }
        var button;
        if (this.isTextButtonConfig(buttonData)) {
            button = new TextButton_1.TextButton(buttonData, this.localButtonController);
        }
        else {
            button = new Button_1.Button(buttonData, this.localButtonController);
        }
        return button;
    };
    MultiButton.prototype.setupButtons = function (data) {
        var _this = this;
        this.buttons = new Array();
        data.buttons.forEach(function (buttonData, index) {
            var button = _this.createSingleButton(buttonData, index);
            var newX = 0;
            var newY = 0;
            if (data.offsetOrientation == Viewport_1.Orientation.LANDSCAPE) {
                newX = ((button.width + data.offset) * index);
            }
            else if (data.offsetOrientation == Viewport_1.Orientation.PORTRAIT) {
                newY = ((button.height + data.offset) * index);
            }
            if (buttonData.isLocal) {
                button.elementSignal.add(_this.onSelectButton.bind(_this));
            }
            button.position.set(newX, newY);
            _this.addChild(button);
            _this.buttons.push(button);
        });
    };
    MultiButton.prototype.onSelectButton = function (data) {
        var index = parseInt(data.replace(Actions_1.Actions.CLICK_ACTION_PREFIX, ''));
        this.selectedSignal.dispatch(index);
    };
    /**
     * Enables all buttons in container
     */
    MultiButton.prototype.enableAllButtons = function () {
        for (var _i = 0, _a = this.buttons; _i < _a.length; _i++) {
            var button = _a[_i];
            button.setEnable(true);
        }
    };
    /**
     * Disables all buttons in container
     */
    MultiButton.prototype.disableAllButtons = function () {
        for (var _i = 0, _a = this.buttons; _i < _a.length; _i++) {
            var button = _a[_i];
            button.setEnable(false);
        }
    };
    return MultiButton;
}(CoreElement_1.CoreElement));
exports.MultiButton = MultiButton;
var BUTTON_LABEL_POSITION;
(function (BUTTON_LABEL_POSITION) {
    BUTTON_LABEL_POSITION[BUTTON_LABEL_POSITION["TOP"] = 0] = "TOP";
    BUTTON_LABEL_POSITION[BUTTON_LABEL_POSITION["BOTTOM"] = 1] = "BOTTOM";
})(BUTTON_LABEL_POSITION = exports.BUTTON_LABEL_POSITION || (exports.BUTTON_LABEL_POSITION = {}));


/***/ }),
/* 913 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var TsMap_1 = __webpack_require__(2);
var Actions_1 = __webpack_require__(22);
var Viewport_1 = __webpack_require__(6);
var Sprite_1 = __webpack_require__(48);
var Button_1 = __webpack_require__(19);
var SlotActions_1 = __webpack_require__(44);
var MLUIButtonId_1 = __webpack_require__(38);
var IMLUIConfig_1 = __webpack_require__(59);
var MLUIFontStyles_1 = __webpack_require__(244);
var SliderConfig = __webpack_require__(914);
var AutoplayRounds_1 = __webpack_require__(445);
var MLUISpinSettingsConfig = /** @class */ (function (_super) {
    __extends(MLUISpinSettingsConfig, _super);
    function MLUISpinSettingsConfig() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.name = 'MLUISpinSettings';
        _this.background = {
            name: 'background',
            anchor: { x: 0.5, y: 0.5 },
            isOrientationSupported: true,
            leftWidth: 10,
            topHeight: 10,
            rightWidth: 10,
            bottomHeight: 10,
            windowSize: { x: 670, y: 860 },
            position: { x: 25, y: 55 }
        };
        _this.mainTitle = {
            name: 'mainTitle',
            key: 'autoPlayTitle',
            isOrientationSupported: true,
            style: MLUIFontStyles_1.RegularTitleStyle,
            position: { x: 80, y: 95 }
        };
        _this.scrollContainer = {
            name: 'scrollContainer',
            isOrientationSupported: true,
            position: { x: 81, y: 130 },
            width: 557,
            height: 930,
            minimumScrollThreshold: 10
        };
        _this.autoplayRoundsTitle = {
            name: 'autoplayRoundsTitle',
            key: 'autoPlayTitle',
            isOrientationSupported: true,
            autoscale: { x: 190, y: 50 },
            style: MLUIFontStyles_1.RegularSubTitleStyle,
            position: { x: 0, y: 250 }
        };
        _this.toggleSwitchButton = {
            elementType: Button_1.Button.elementType,
            elementConfig: {
                name: 'toggleSwitchButton',
                position: {
                    x: 81,
                    y: 85
                },
                action: Actions_1.Actions.EMPTY,
                id: 'toggleSwitchButton',
                productLine: _this.productLine,
                assetName: 'toggle_switch',
                isLocal: true
            }
        };
        _this.confirmSprite = {
            elementType: Sprite_1.Sprite.elementType,
            elementConfig: {
                name: 'confirmSprite',
                assetName: 'icon_confirm.png',
                position: { x: 320, y: 775 },
                isOrientationSupported: true
            }
        };
        _this.closeButton = {
            elementType: Button_1.Button.elementType,
            elementConfig: {
                name: 'closeButton',
                isOrientationSupported: true,
                action: SlotActions_1.SlotActions.HIDE_AUTO_PLAY_PANEL,
                id: MLUIButtonId_1.MLUIButtonId.BUTTON_AUTO_PLAY_BACK,
                productLine: _this.productLine,
                assetName: 'icon_cancel',
                isLocal: true,
                position: { x: 550, y: 75 },
                scale: { x: 1.5, y: 1.5 }
            }
        };
        _this.confirmButton = {
            elementType: Button_1.Button.elementType,
            elementConfig: {
                name: 'confirmButton',
                isOrientationSupported: true,
                action: SlotActions_1.SlotActions.AUTO_SPIN,
                id: MLUIButtonId_1.MLUIButtonId.BUTTON_SPIN_OPTION_CONFIRM,
                productLine: _this.productLine,
                assetName: 'genericButton1',
                isLocal: true,
                position: { x: 264, y: 750 }
            }
        };
        _this.stopButton = {
            elementType: Button_1.Button.elementType,
            elementConfig: {
                name: 'stopButton',
                id: MLUIButtonId_1.MLUIButtonId.BUTTON_STOP_AUTO_PLAY,
                action: SlotActions_1.SlotActions.STOP_AUTO_PLAY,
                productLine: _this.productLine,
                assetName: 'stop',
                anchor: { x: 0.5, y: 0.5 },
                position: { x: 513, y: 1115 },
                isLocal: true
            }
        };
        _this.turboConfig = null;
        _this.autoplayConfig = null;
        _this.lostLimitConfig = SliderConfig.lossLimit;
        _this.singleWinLimitConfig = SliderConfig.singleWinLimit;
        _this.winLimitConfig = SliderConfig.winLimit;
        _this.coreElementOrientationConfig = new TsMap_1.TsMap([
            [
                Viewport_1.Orientation.PORTRAIT, new TsMap_1.TsMap([
                    [
                        _this.background.name, {
                            windowSize: _this.background.windowSize,
                            position: _this.background.position,
                        }
                    ],
                    [
                        _this.mainTitle.name, {
                            position: _this.mainTitle.position
                        }
                    ],
                    [
                        _this.scrollContainer.name, {
                            position: _this.scrollContainer.position,
                            width: _this.scrollContainer.width,
                            height: _this.scrollContainer.height
                        }
                    ],
                    [
                        _this.autoplayRoundsTitle.name, {
                            position: _this.autoplayRoundsTitle.position
                        }
                    ],
                    [
                        AutoplayRounds_1.BasicAutoplayConfig.name, {
                            position: { x: -13, y: 70 },
                            buttonsOrientationConfig: {
                                offset: -20,
                                scale: { x: 0.7, y: 0.9 },
                            }
                        }
                    ],
                    [
                        _this.lostLimitConfig.name, {
                            position: { x: 40, y: 250 },
                            titleTextField: {
                                elementConfig: {
                                    position: { x: -24, y: -65 }
                                }
                            },
                            minTextField: {
                                elementConfig: {
                                    position: { x: -43, y: -5 }
                                }
                            },
                            maxTextField: {
                                elementConfig: {
                                    position: { x: 477, y: -5 }
                                }
                            },
                            valueTextField: {
                                elementConfig: {
                                    position: { x: 495, y: -65 },
                                    anchor: { x: 1, y: 0 }
                                }
                            },
                            width: 484
                        }
                    ],
                    [
                        _this.singleWinLimitConfig.name, {
                            position: { x: 40, y: 400 },
                            titleTextField: {
                                elementConfig: {
                                    position: { x: -24, y: -65 }
                                }
                            },
                            minTextField: {
                                elementConfig: {
                                    position: { x: -43, y: -5 }
                                }
                            },
                            maxTextField: {
                                elementConfig: {
                                    position: { x: 477, y: -5 }
                                }
                            },
                            valueTextField: {
                                elementConfig: {
                                    position: { x: 495, y: -65 },
                                    anchor: { x: 1, y: 0 }
                                }
                            },
                            width: 484
                        }
                    ],
                    [
                        _this.winLimitConfig.name, {
                            position: { x: 40, y: 550 },
                            titleTextField: {
                                elementConfig: {
                                    position: { x: -24, y: -65 }
                                }
                            },
                            minTextField: {
                                elementConfig: {
                                    position: { x: -43, y: -5 }
                                }
                            },
                            maxTextField: {
                                elementConfig: {
                                    position: { x: 477, y: -5 }
                                }
                            },
                            valueTextField: {
                                elementConfig: {
                                    position: { x: 495, y: -65 },
                                    anchor: { x: 1, y: 0 }
                                }
                            },
                            width: 484
                        }
                    ],
                    [
                        _this.closeButton.elementConfig.name, {
                            position: _this.closeButton.elementConfig.position
                        }
                    ],
                    [
                        _this.confirmButton.elementConfig.name, {
                            position: _this.confirmButton.elementConfig.position
                        }
                    ],
                    [
                        _this.stopButton.elementConfig.name, {
                            position: _this.stopButton.elementConfig.position,
                            anchor: { x: 0.5, y: 0.5 },
                            circleHitArea: { radius: 50 }
                        }
                    ],
                    [
                        _this.confirmSprite.elementConfig.name, {
                            position: _this.confirmSprite.elementConfig.position
                        }
                    ]
                ])
            ],
            [
                Viewport_1.Orientation.LANDSCAPE, new TsMap_1.TsMap([
                    [
                        _this.background.name, {
                            windowSize: { x: 950, y: 600 },
                            position: { x: 150, y: 65 }
                        }
                    ],
                    [
                        _this.mainTitle.name, {
                            position: { x: 200, y: 100 }
                        }
                    ],
                    [
                        _this.scrollContainer.name, {
                            position: { x: 50, y: 95 },
                            width: 1220,
                            height: 445
                        }
                    ],
                    [
                        _this.autoplayRoundsTitle.name, {
                            position: { x: 90, y: 200 }
                        }
                    ],
                    [
                        AutoplayRounds_1.BasicAutoplayConfig.name, {
                            position: { x: 180, y: 115 },
                            buttonsOrientationConfig: {
                                offset: -40,
                                scale: { x: 1, y: 1 },
                            },
                        }
                    ],
                    [
                        _this.lostLimitConfig.name, {
                            position: { x: 200, y: 395 },
                            titleTextField: {
                                elementConfig: {
                                    position: { x: -15, y: -100 }
                                }
                            },
                            valueTextField: {
                                elementConfig: {
                                    position: { x: -15, y: -52 },
                                    anchor: { x: 0, y: 0 }
                                }
                            },
                            width: 200
                        }
                    ],
                    [
                        _this.singleWinLimitConfig.name, {
                            position: { x: 470, y: 395 },
                            titleTextField: {
                                elementConfig: {
                                    position: { x: -15, y: -100 }
                                }
                            },
                            valueTextField: {
                                elementConfig: {
                                    position: { x: -15, y: -52 },
                                    anchor: { x: 0, y: 0 }
                                }
                            },
                            width: 200
                        }
                    ],
                    [
                        _this.winLimitConfig.name, {
                            position: { x: 750, y: 395 },
                            titleTextField: {
                                elementConfig: {
                                    position: { x: -15, y: -100 }
                                }
                            },
                            valueTextField: {
                                elementConfig: {
                                    position: { x: -15, y: -52 },
                                    anchor: { x: 0, y: 0 }
                                }
                            },
                            width: 200
                        }
                    ],
                    [
                        _this.closeButton.elementConfig.name, {
                            position: { x: 980, y: 80 },
                        }
                    ],
                    [
                        _this.confirmButton.elementConfig.name, {
                            position: { x: 529, y: 530 },
                        }
                    ],
                    [
                        _this.stopButton.elementConfig.name, {
                            position: { x: 1108, y: 596 },
                            anchor: { x: 0.5, y: 0.5 },
                            circleHitArea: { radius: 50 }
                        }
                    ],
                    [
                        _this.confirmSprite.elementConfig.name, {
                            position: { x: 585, y: 555 },
                        }
                    ]
                ])
            ]
        ]);
        return _this;
    }
    return MLUISpinSettingsConfig;
}(IMLUIConfig_1.MLUIConfig));
exports.MLUISpinSettingsConfig = MLUISpinSettingsConfig;


/***/ }),
/* 914 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var Helper_1 = __webpack_require__(5);
var WebTextField_1 = __webpack_require__(35);
var Slider_1 = __webpack_require__(447);
var IMLUIConfig_1 = __webpack_require__(59);
var MLUIButtonId_1 = __webpack_require__(38);
var mainConfig = new IMLUIConfig_1.MLUIConfig();
var labelStyle = {
    fontFamily: Helper_1.Helper.DEFAULT_FONTS,
    fontSize: 24,
    align: 'left',
    fill: 'white',
};
var sliderData = {
    name: 'slider',
    trackAssetName: 'track',
    interactiveButtonConfig: {
        name: 'sliderButton',
        isOrientationSupported: true,
        scale: { x: 0.75, y: 0.75 },
        action: 'sliderButton',
        id: 'slider',
        productLine: mainConfig.productLine,
        assetName: 'button',
        isLocal: true
    },
    valueTextField: {
        elementType: WebTextField_1.WebTextField.elementType,
        elementConfig: {
            name: 'valueLimitTitle',
            visible: true,
            key: '',
            style: labelStyle
        }
    },
    sliderStepData: {
        defaultIndex: 6,
        items: [1, 2, 5, 10, 20, 40, -1]
    },
    width: 443,
    format: Slider_1.SliderFormat.CURRENCY_VALUE_ONLY
};
exports.lossLimit = __assign({}, sliderData, { name: 'lossLimit', isOrientationSupported: true, id: MLUIButtonId_1.MLUIButtonId.SLIDER_LOSE, titleTextField: {
        elementType: WebTextField_1.WebTextField.elementType,
        elementConfig: {
            name: 'lossLimit',
            key: 'lossLimit',
            style: labelStyle
        }
    } });
exports.singleWinLimit = __assign({}, sliderData, { name: 'singleWinLimit', isOrientationSupported: true, id: MLUIButtonId_1.MLUIButtonId.SLIDER_SINGLE_WIN, titleTextField: {
        elementType: WebTextField_1.WebTextField.elementType,
        elementConfig: {
            name: 'singleWinLimit',
            key: 'singleWinLimit',
            style: labelStyle
        }
    } });
exports.winLimit = __assign({}, sliderData, { name: 'winLimit', isOrientationSupported: true, id: MLUIButtonId_1.MLUIButtonId.SLIDER_WIN, titleTextField: {
        elementType: WebTextField_1.WebTextField.elementType,
        elementConfig: {
            name: 'winLimit',
            key: 'winLimit',
            style: labelStyle
        }
    } });


/***/ }),
/* 915 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var GlobalDispatcher_1 = __webpack_require__(7);
var UIInformationHeaderController_1 = __webpack_require__(916);
var SlotEvent_1 = __webpack_require__(32);
var SlotStates_1 = __webpack_require__(31);
var SlotInformationHeaderView_1 = __webpack_require__(264);
var SlotInformationHeaderController = /** @class */ (function (_super) {
    __extends(SlotInformationHeaderController, _super);
    function SlotInformationHeaderController(view) {
        return _super.call(this, view) || this;
    }
    SlotInformationHeaderController.prototype.getViewConfig = function (stateData, config) {
        var viewConfig = {};
        if (stateData.gameViewConfig) {
            if (!config.isRealMode) {
                stateData.gameViewConfig.show_title = true;
            }
            viewConfig = stateData.gameViewConfig;
        }
        else if (!config.isRealMode) {
            viewConfig = {
                show_title: true
            };
        }
        return viewConfig;
    };
    SlotInformationHeaderController.prototype.initialize = function (config) {
        _super.prototype.initialize.call(this, config);
        GlobalDispatcher_1.GlobalDispatcher.addListener(this, SlotEvent_1.SlotEvent.SHOW_FULL_SCREEN_UI, this.onFullScreenUIShow.bind(this));
        GlobalDispatcher_1.GlobalDispatcher.addListener(this, SlotEvent_1.SlotEvent.HIDE_FULL_SCREEN_UI, this.onFullScreenUIHide.bind(this));
    };
    SlotInformationHeaderController.prototype.onClickBackground = function () {
        GlobalDispatcher_1.GlobalDispatcher.dispatchIntoExpectedStates(SlotEvent_1.SlotEvent.SHOW_DEMO_SCREEN_UI, [
            this.stateNames.baseGameIdle,
            this.stateNames.allLineWin,
            this.stateNames.showWinning,
            this.stateNames.showWinningLoop
        ]);
    };
    SlotInformationHeaderController.prototype.baseGameIdle = function () {
        this.view.setInteractive(true);
        this.finishStateAction();
    };
    SlotInformationHeaderController.prototype.prefeatureWinning = function () {
        this.view.setInteractive(false);
        this.finishStateAction();
    };
    SlotInformationHeaderController.prototype.onFullScreenUIShow = function () {
        this.view.fullScreenUIShow();
    };
    SlotInformationHeaderController.prototype.onFullScreenUIHide = function () {
        this.view.fullScreenUIHide();
    };
    var _a, _b;
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof SlotStates_1.SlotStates !== "undefined" && SlotStates_1.SlotStates) === "function" && _a || Object)
    ], SlotInformationHeaderController.prototype, "stateNames", void 0);
    SlotInformationHeaderController = __decorate([
        __param(0, es5_1.Inject),
        __metadata("design:paramtypes", [typeof (_b = typeof SlotInformationHeaderView_1.SlotInformationHeaderView !== "undefined" && SlotInformationHeaderView_1.SlotInformationHeaderView) === "function" && _b || Object])
    ], SlotInformationHeaderController);
    return SlotInformationHeaderController;
}(UIInformationHeaderController_1.UIInformationHeaderController));
exports.SlotInformationHeaderController = SlotInformationHeaderController;


/***/ }),
/* 916 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var UrlParameters_1 = __webpack_require__(14);
var UIPanelController_1 = __webpack_require__(58);
var UIInformationHeaderView_1 = __webpack_require__(448);
var UIInformationHeaderConfig_1 = __webpack_require__(917);
var UIInformationHeaderController = /** @class */ (function (_super) {
    __extends(UIInformationHeaderController, _super);
    function UIInformationHeaderController(view) {
        return _super.call(this, view) || this;
    }
    UIInformationHeaderController.prototype.init = function (stateData) {
        var config = this.gameConfig.getConfig(UIInformationHeaderConfig_1.UIInformationHeaderConfig);
        config.isRealMode = UrlParameters_1.UrlParameters.isRealMode();
        config.viewConfig = this.getViewConfig(stateData, config);
        if (Object.keys(config.viewConfig).length <= 0 || (config.viewConfig.show_title === false && config.viewConfig.show_time === false)) {
            return;
        }
        this.initialize(config);
        this.finishStateAction();
    };
    UIInformationHeaderController.prototype.getViewConfig = function (stateData, config) {
        return {};
    };
    UIInformationHeaderController.prototype.initialize = function (config) {
        this.view.initialize(config);
        this.view.clickBackgroundSignal.add(this.onClickBackground.bind(this));
    };
    UIInformationHeaderController.prototype.onClickBackground = function () {
        //
    };
    var _a;
    UIInformationHeaderController = __decorate([
        __param(0, es5_1.Inject),
        __metadata("design:paramtypes", [typeof (_a = typeof UIInformationHeaderView_1.UIInformationHeaderView !== "undefined" && UIInformationHeaderView_1.UIInformationHeaderView) === "function" && _a || Object])
    ], UIInformationHeaderController);
    return UIInformationHeaderController;
}(UIPanelController_1.UIPanelController));
exports.UIInformationHeaderController = UIInformationHeaderController;


/***/ }),
/* 917 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var UIInformationHeaderConfig = /** @class */ (function () {
    function UIInformationHeaderConfig() {
        this.name = 'informationHeader';
        this.assetPath = "1ae629c8909f7093a8f96c4e6e226e4c" + '_' + 'assets/uiInformation/';
        this.background = {
            portraitRatio: {
                height: 0.025
            },
            landscapeRatio: {
                height: 0.04
            },
            backgroundColor: '#000000',
            opacity: '0.5'
        };
        this.clockConfig = {
            name: 'clock',
            text: {
                baseFontSize: 14,
                portraitRatio: {
                    left: 0.9
                },
                landscapeRatio: {
                    left: 0.95
                },
                originalValue: '1',
                grayValue: '0.5'
            }
        };
        this.titleConfig = {
            name: 'title',
            gameName: 'gameName',
            logo: {
                landscapeHeight: 0.05,
                portraitWidth: 0.12,
                originalAssetName: 'logo.png',
                grayAssetName: 'logo_gray.png',
                portraitRatio: {
                    left: 0.005,
                    top: 0.002
                },
                landscapeRatio: {
                    left: 0.005,
                    top: 0.006
                }
            },
            text: {
                baseFontSize: 14,
                originalValue: '1',
                grayValue: '0.5'
            }
        };
        this.viewConfig = {};
    }
    return UIInformationHeaderConfig;
}());
exports.UIInformationHeaderConfig = UIInformationHeaderConfig;


/***/ }),
/* 918 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Viewport_1 = __webpack_require__(6);
var MoneyFormatter_1 = __webpack_require__(16);
var UIBankPanelView_1 = __webpack_require__(208);
var Sprite_1 = __webpack_require__(48);
var MLUIBankPanel = /** @class */ (function (_super) {
    __extends(MLUIBankPanel, _super);
    function MLUIBankPanel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(MLUIBankPanel.prototype, "totalBet", {
        set: function (value) {
            this.currentBet = value;
            this.setTotalBetLabel(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MLUIBankPanel.prototype, "balance", {
        set: function (value) {
            this.currentBalance = value;
            this.setBalanceLabel(value);
        },
        enumerable: true,
        configurable: true
    });
    MLUIBankPanel.prototype.createElements = function (config) {
        this.createBankBackgroundBar(this.config.bankBackgroundBar);
        _super.prototype.createElements.call(this, config);
    };
    MLUIBankPanel.prototype.createBankBackgroundBar = function (config) {
        this.bankBackgroundBar = new Sprite_1.Sprite(config);
        this.addChild(this.bankBackgroundBar);
    };
    MLUIBankPanel.prototype.coreElementLayout = function (orientation) {
        _super.prototype.coreElementLayout.call(this, orientation);
        this.currentPadding = (orientation == Viewport_1.Orientation.LANDSCAPE) ? this.config.spacing.landscapePadding : this.config.spacing.padding;
        if (this.currentBalance != undefined) {
            this.setBalanceLabel(this.currentBalance);
        }
        if (this.currentBet != undefined) {
            this.setTotalBetLabel(this.currentBet);
        }
    };
    MLUIBankPanel.prototype.setBalanceLabel = function (value) {
        if (this.balanceLabel != undefined) {
            this.balanceLabel.text = this.moneyFormatter.formatMoney(value, MoneyFormatter_1.NumberDisplayMode.VALUE_WITH_CURRENCY);
            //align right
            this.balanceLabel.x = this.currentPadding - this.balanceLabel.width;
            if (this.balanceIcon != undefined) {
                this.balanceIcon.x = this.balanceLabel.x - this.config.spacing.iconSpacing - this.balanceIcon.width;
            }
        }
    };
    MLUIBankPanel.prototype.setTotalBetLabel = function (value) {
        if (this.totalBetLabel != undefined) {
            this.totalBetLabel.text = this.moneyFormatter.formatMoney(value, MoneyFormatter_1.NumberDisplayMode.VALUE_WITH_CURRENCY, false, 2);
            this.totalBetLabel.x = this.betIcon.x + this.config.spacing.iconSpacing + this.betIcon.width;
        }
    };
    return MLUIBankPanel;
}(UIBankPanelView_1.UIBankPanelView));
exports.MLUIBankPanel = MLUIBankPanel;


/***/ }),
/* 919 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var TsMap_1 = __webpack_require__(2);
var Viewport_1 = __webpack_require__(6);
var Sprite_1 = __webpack_require__(48);
var UIBankConfig_1 = __webpack_require__(207);
var BitmapTextField_1 = __webpack_require__(109);
var MLUIBankConfig = /** @class */ (function (_super) {
    __extends(MLUIBankConfig, _super);
    function MLUIBankConfig() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.name = 'bankPanel';
        _this.totalBetIcon = {
            elementType: Sprite_1.Sprite.elementType,
            elementConfig: {
                name: 'totalBetIcon',
                isOrientationSupported: true,
                position: { x: 25, y: 1231 },
                assetName: 'bet.png'
            }
        };
        _this.bankBackgroundBar = {
            name: 'bankBackgroundBar',
            assetName: 'bankBackground.png',
            isOrientationSupported: true,
            position: { x: 0, y: 1220 },
            scale: { x: 3, y: 1 }
        };
        _this.totalBetValue = {
            elementType: BitmapTextField_1.BitmapTextField.elementType,
            elementConfig: {
                name: 'totalBetValue',
                key: 'totalBetValue',
                text: '',
                isOrientationSupported: true,
                position: { x: 70, y: 1235 },
                autoscale: { x: 238, y: 28, },
                style: {
                    align: 'left',
                    font: {
                        name: 'BankFont',
                        size: 24
                    }
                }
            }
        };
        _this.balanceIcon = {
            elementType: Sprite_1.Sprite.elementType,
            elementConfig: {
                name: 'balanceIcon',
                isOrientationSupported: true,
                position: { x: 25, y: 1231 },
                assetName: 'balance.png'
            }
        };
        _this.balanceValue = {
            elementType: BitmapTextField_1.BitmapTextField.elementType,
            elementConfig: {
                name: 'balanceValue',
                key: 'balanceValue',
                isOrientationSupported: true,
                text: '',
                position: { x: 665, y: 1235 },
                autoscale: { x: 238, y: 28, },
                style: {
                    align: 'left',
                    font: {
                        name: 'BankFont',
                        size: 24
                    }
                }
            }
        };
        _this.spacing = {
            iconSpacing: 10,
            padding: 720 - 25,
            landscapePadding: 1280 - 235,
        };
        _this.coreElementOrientationConfig = new TsMap_1.TsMap([
            [
                Viewport_1.Orientation.PORTRAIT, new TsMap_1.TsMap([
                    [
                        _this.totalBetValue.elementConfig.name, {
                            position: { x: 70, y: 1235 }
                        }
                    ],
                    [
                        _this.totalBetIcon.elementConfig.name, {
                            position: { x: 25, y: 1231 }
                        }
                    ],
                    [
                        _this.balanceValue.elementConfig.name, {
                            position: { x: 430, y: 1235 }
                        }
                    ],
                    [
                        _this.balanceIcon.elementConfig.name, {
                            position: { x: 385, y: 1231 }
                        }
                    ],
                    [
                        _this.bankBackgroundBar.name, {
                            position: _this.bankBackgroundBar.position,
                            scale: { x: 36, y: 1 }
                        }
                    ],
                ])
            ],
            [
                Viewport_1.Orientation.LANDSCAPE, new TsMap_1.TsMap([
                    [
                        _this.totalBetValue.elementConfig.name, {
                            position: { x: 258, y: 674 }
                        }
                    ],
                    [
                        _this.totalBetIcon.elementConfig.name, {
                            position: { x: 240, y: 674 }
                        }
                    ],
                    [
                        _this.balanceValue.elementConfig.name, {
                            position: { x: 978, y: 674 }
                        }
                    ],
                    [
                        _this.balanceIcon.elementConfig.name, {
                            position: { x: 960, y: 674 }
                        }
                    ],
                    [
                        _this.bankBackgroundBar.name, {
                            position: { x: 0, y: 660 },
                            scale: { x: 7, y: 1 }
                        }
                    ],
                ])
            ]
        ]);
        return _this;
    }
    return MLUIBankConfig;
}(UIBankConfig_1.UIBankConfig));
exports.MLUIBankConfig = MLUIBankConfig;


/***/ }),
/* 920 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var SoundManager_1 = __webpack_require__(13);
var GlobalDispatcher_1 = __webpack_require__(7);
var SlotSoundConfig_1 = __webpack_require__(36);
var SlotBackgroundController_1 = __webpack_require__(397);
var DHBBackgroundView_1 = __webpack_require__(921);
var DHBSlotDialogController_1 = __webpack_require__(449);
var DHBSlotFreeSpinsController_1 = __webpack_require__(450);
var DHBBackgroundController = /** @class */ (function (_super) {
    __extends(DHBBackgroundController, _super);
    function DHBBackgroundController(view) {
        var _this = _super.call(this, view) || this;
        _this.currentAudioGameState = AudioGameState.BASEGAME;
        return _this;
    }
    DHBBackgroundController.prototype.addEventListeners = function () {
        GlobalDispatcher_1.GlobalDispatcher.addListener(this, DHBSlotDialogController_1.DHBSlotDialogController.OUTRO_DIALOG_CLOSED, this.onDialogClosed);
        GlobalDispatcher_1.GlobalDispatcher.addListener(this, DHBSlotFreeSpinsController_1.DHBSlotFreeSpinsController.PICKGAME_OUTRO_COMPLETE, this.pickFeatureComplete);
    };
    DHBBackgroundController.prototype.transitionToBaseGame = function (_data) {
        this.delayBackgroundTransitionData = _data;
        this.finishStateAction();
    };
    DHBBackgroundController.prototype.onDialogClosed = function () {
        this.view.transitionToBaseGame(this.delayBackgroundTransitionData);
        this.currentAudioGameState = AudioGameState.BASEGAME;
        _super.prototype.transitionToBaseGame.call(this, this.delayBackgroundTransitionData);
    };
    DHBBackgroundController.prototype.transitionToFreeSpins = function (_data) {
        this.view.transitionToFreeSpins(_data);
        this.currentAudioGameState = AudioGameState.FREEGAME;
        _super.prototype.transitionToFreeSpins.call(this, _data);
    };
    DHBBackgroundController.prototype.startPickFeature = function (_data) {
        var _this = this;
        this.soundManager.play('featureTriggerAudio', SoundManager_1.AudioTrackName.MUSIC, false, function () {
            _this.soundManager.play('pickgameLoop', SoundManager_1.AudioTrackName.MUSIC, true);
        });
        this.finishStateAction();
    };
    DHBBackgroundController.prototype.pickFeatureComplete = function () {
        var _this = this;
        if (this.currentAudioGameState == AudioGameState.BASEGAME) {
            this.soundManager.play(SlotSoundConfig_1.SlotSoundConfig.backgroundLoop, SoundManager_1.AudioTrackName.MUSIC, true);
        }
        else {
            this.soundManager.play(SlotSoundConfig_1.SlotSoundConfig.bonusIntro, SoundManager_1.AudioTrackName.MUSIC, false, function () {
                _this.soundManager.play(SlotSoundConfig_1.SlotSoundConfig.bonusLoop, SoundManager_1.AudioTrackName.MUSIC, true);
            });
        }
    };
    var _a;
    DHBBackgroundController = __decorate([
        __param(0, es5_1.Inject),
        __metadata("design:paramtypes", [typeof (_a = typeof DHBBackgroundView_1.DHBBackgroundView !== "undefined" && DHBBackgroundView_1.DHBBackgroundView) === "function" && _a || Object])
    ], DHBBackgroundController);
    return DHBBackgroundController;
}(SlotBackgroundController_1.SlotBackgroundController));
exports.DHBBackgroundController = DHBBackgroundController;
var AudioGameState;
(function (AudioGameState) {
    AudioGameState[AudioGameState["BASEGAME"] = 0] = "BASEGAME";
    AudioGameState[AudioGameState["FREEGAME"] = 1] = "FREEGAME";
})(AudioGameState || (AudioGameState = {}));


/***/ }),
/* 921 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Viewport_1 = __webpack_require__(6);
var SlotBackgroundView_1 = __webpack_require__(400);
var DHBBackgroundView = /** @class */ (function (_super) {
    __extends(DHBBackgroundView, _super);
    function DHBBackgroundView() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.isFreeSpin = false;
        return _this;
    }
    DHBBackgroundView.prototype.transitionToBaseGame = function (_data) {
        this.isFreeSpin = false;
        if (this.viewport.orientation === Viewport_1.Orientation.PORTRAIT) {
            this.playAnimation('portraitLayout_Transition_base');
        }
        else if (this.viewport.orientation === Viewport_1.Orientation.LANDSCAPE) {
            this.playAnimation('landscapeLayout_Transition_base');
        }
    };
    DHBBackgroundView.prototype.transitionToFreeSpins = function (_data) {
        this.isFreeSpin = true;
        if (this.viewport.orientation === Viewport_1.Orientation.PORTRAIT) {
            this.playAnimation('portraitLayout_Transition_free');
        }
        else if (this.viewport.orientation === Viewport_1.Orientation.LANDSCAPE) {
            this.playAnimation('landscapeLayout_Transition_free');
        }
    };
    DHBBackgroundView.prototype.portraitLayout = function () {
        _super.prototype.portraitLayout.call(this);
        this.playAnimation('portraitLayout');
        if (this.isFreeSpin) {
            this.playAnimation('portraitLayout_free');
        }
        else {
            this.playAnimation('portraitLayout_base');
        }
    };
    DHBBackgroundView.prototype.landscapeLayout = function () {
        _super.prototype.landscapeLayout.call(this);
        this.playAnimation('landscapeLayout');
        if (this.isFreeSpin) {
            this.playAnimation('landscapeLayout_free');
        }
        else {
            this.playAnimation('landscapeLayout_base');
        }
    };
    DHBBackgroundView.prototype.getAssetsList = function () {
        var assetsList = _super.prototype.getAssetsList.call(this);
        assetsList.push.apply(assetsList, [
            {
                assetKey: 'baseBackground',
                assetURL: 'assets/background/DHBG_Bg.json'
            },
            {
                assetKey: 'backgroundPetals',
                assetURL: 'assets/background/DHBG_BG_Animation.json'
            },
            {
                assetKey: 'logo',
                assetURL: 'assets/background/{locale}/Logo.png'
            },
            {
                assetKey: 'backgroundReels',
                assetURL: 'assets/background/DHBG_Reel.json'
            },
            {
                assetKey: 'backgroundMarquee',
                assetURL: 'assets/background/DHBG_Marquee.json'
            },
            {
                assetKey: 'pickgameLoop',
                assetURL: 'assets/sound/game/pick/Pick_Feature_Loop.mp3'
            }
        ]);
        return assetsList;
    };
    return DHBBackgroundView;
}(SlotBackgroundView_1.SlotBackgroundView));
exports.DHBBackgroundView = DHBBackgroundView;


/***/ }),
/* 922 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var MiniSignal = __webpack_require__(3);
var pixi_js_1 = __webpack_require__(4);
var es5_1 = __webpack_require__(0);
var SimpleTween_1 = __webpack_require__(27);
var SimpleTimer_1 = __webpack_require__(15);
var CoreUIElementFactory_1 = __webpack_require__(28);
var BitmapTextField_1 = __webpack_require__(109);
var MoneyFormatter_1 = __webpack_require__(16);
var SlotDialogView_1 = __webpack_require__(232);
var DHBSlotDialogView = /** @class */ (function (_super) {
    __extends(DHBSlotDialogView, _super);
    function DHBSlotDialogView() {
        var _this = _super.call(this) || this;
        _this.completeAnimations = ['DragonSpinsFeature', 'FortuneSpinsFeature', 'LuckySpinFeature', 'animation'];
        _this.startLabelCountUpSignal = new MiniSignal();
        return _this;
    }
    DHBSlotDialogView.prototype.createElements = function (config) {
        this.config = config;
        this.background = new pixi_js_1.Graphics();
        this.background.beginFill(0, 0.8);
        this.background.drawRect(0, 0, this.viewport.width, this.viewport.height);
        this.addChild(this.background);
        this.introAnimation = CoreUIElementFactory_1.CoreUIElementFactory.createInstance(this.config.introAnimation);
        this.introAnimation.completeSignal.add(this.animationComplete, this);
        this.introAnimation.alpha = 0;
        this.outroAnimation = CoreUIElementFactory_1.CoreUIElementFactory.createInstance(this.config.outroAnimation);
        this.outroAnimation.completeSignal.add(this.animationComplete, this);
        this.outroAnimation.alpha = 1;
        this.introAnimation.setEmptyAnimation(0);
        this.addChild(this.introAnimation);
        this.outroAnimation.setEmptyAnimation(0);
        this.addChild(this.outroAnimation);
        this.winValueLabel = new BitmapTextField_1.BitmapTextField(this.config.winValueLabel);
        this.winValueLabel.text = '0.00';
        this.winValueLabel.visible = false;
        this.addChild(this.winValueLabel);
        this.visible = false;
    };
    DHBSlotDialogView.prototype.beginCountUp = function () {
        this.winValueLabel.text = '0.00';
    };
    DHBSlotDialogView.prototype.updateCountUp = function (value) {
        if (value > this.moneyFormatter.unformatMoney(this.winValueLabel.text)) {
            this.winValueLabel.text = this.moneyFormatter.formatMoney(value, MoneyFormatter_1.NumberDisplayMode.VALUE_ONLY);
        }
    };
    DHBSlotDialogView.prototype.completeCountUp = function (completeValue) {
        this.winValueLabel.text = this.moneyFormatter.formatMoney(completeValue, MoneyFormatter_1.NumberDisplayMode.VALUE_ONLY);
    };
    DHBSlotDialogView.prototype.playIntroAnimation = function (name) {
        var _this = this;
        this.visible = true;
        this.winValueLabel.visible = false;
        this.mainContainer.alpha = 1;
        this.setInteractive(true);
        new SimpleTimer_1.SimpleTimer(1000, function () {
            _this.introAnimation.alpha = 1;
            _this.introAnimation.play(0, name, false);
        });
    };
    DHBSlotDialogView.prototype.playOutroAnimation = function (name, winAmount) {
        var _this = this;
        this.visible = true;
        this.mainContainer.alpha = 1;
        this.setInteractive(true);
        new SimpleTimer_1.SimpleTimer(1000, function () {
            _this.outroAnimation.alpha = 1;
            _this.outroAnimation.play(0, name, false);
        });
    };
    DHBSlotDialogView.prototype.animationComplete = function (animation, track) {
        var _this = this;
        if (track.animation.name == 'animation') {
            this.winValueLabel.visible = true;
            this.startLabelCountUpSignal.dispatch();
            new SimpleTween_1.SimpleTween(this.mainContainer)
                .delay(4000)
                .to({ alpha: 0 }, 1000)
                .onComplete(function () {
                animation.setEmptyAnimation(0);
                animation.alpha = 0;
                _this.visible = false;
                _this.setInteractive(false);
                _this.dialogClosedSignal.dispatch();
            })
                .start();
        }
        else if (this.completeAnimations.indexOf(track.animation.name) >= 0) {
            new SimpleTween_1.SimpleTween(this.mainContainer)
                .to({ alpha: 0 }, 1000)
                .onComplete(function () {
                animation.setEmptyAnimation(0);
                animation.alpha = 0;
                _this.visible = false;
                _this.setInteractive(false);
                _this.dialogClosedSignal.dispatch();
            })
                .start();
        }
    };
    DHBSlotDialogView.prototype.portraitLayout = function () {
        _super.prototype.portraitLayout.call(this);
        this.background.position.set(10, 359);
        this.background.width = 704;
        this.background.height = 509;
    };
    DHBSlotDialogView.prototype.landscapeLayout = function () {
        _super.prototype.landscapeLayout.call(this);
        this.background.position.set(265, 25);
        this.background.width = 750;
        this.background.height = 540;
    };
    DHBSlotDialogView.prototype.getAssetsList = function () {
        var asset = [
            {
                assetKey: 'spinsFeature',
                assetURL: 'assets/dialog/{locale}/SpinsFeature.json'
            },
            {
                assetKey: 'featureComplete',
                assetURL: 'assets/dialog/{locale}/Feature Complete.json'
            }
        ];
        return asset;
    };
    var _a;
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof MoneyFormatter_1.MoneyFormatter !== "undefined" && MoneyFormatter_1.MoneyFormatter) === "function" && _a || Object)
    ], DHBSlotDialogView.prototype, "moneyFormatter", void 0);
    return DHBSlotDialogView;
}(SlotDialogView_1.SlotDialogView));
exports.DHBSlotDialogView = DHBSlotDialogView;


/***/ }),
/* 923 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var HeartTicker_1 = __webpack_require__(87);
var MiniSignal = __webpack_require__(3);
var DHBDialogLabelTickConsumer = /** @class */ (function () {
    function DHBDialogLabelTickConsumer() {
        this.updateCountSignal = new MiniSignal();
        this.completeCountSignal = new MiniSignal();
        this.timeManager.register(this);
    }
    DHBDialogLabelTickConsumer.prototype.isAlive = function () {
        return true;
    };
    DHBDialogLabelTickConsumer.prototype.tick = function (deltaTimeMs) {
        if (this.isCounting) {
            this.updateCountUp(deltaTimeMs);
        }
    };
    DHBDialogLabelTickConsumer.prototype.beginCountUp = function (winAmount) {
        this.countUpCreditsFrom = 0;
        this.countUpCreditsTo = winAmount;
        this.countUpCreditsTimeElapsed = 0;
        this.countUpCreditsTimeTotal = 3000;
        this.isCounting = true;
    };
    DHBDialogLabelTickConsumer.prototype.updateCountUp = function (value) {
        if (!this.isCounting) {
            return;
        }
        this.countUpCreditsTimeElapsed += value;
        if (this.countUpCreditsTimeElapsed > this.countUpCreditsTimeTotal) {
            this.completeCountUp();
        }
        this.updateCountSignal.dispatch(this.getCurrentWin());
    };
    DHBDialogLabelTickConsumer.prototype.getCurrentWin = function () {
        var totalWon = this.countUpCreditsTo - this.countUpCreditsFrom;
        var value = Math.fround(totalWon * this.getProgressRatio());
        var size = Math.pow(10, 2);
        var win = Math.round(value * size) / size;
        if (win > totalWon) {
            win = totalWon;
        }
        return win;
    };
    DHBDialogLabelTickConsumer.prototype.getProgressRatio = function () {
        return Math.min(1, (this.countUpCreditsTimeElapsed / this.countUpCreditsTimeTotal));
    };
    DHBDialogLabelTickConsumer.prototype.completeCountUp = function () {
        this.isCounting = false;
        this.countUpCreditsTimeElapsed = this.countUpCreditsTimeTotal;
        this.completeCountSignal.dispatch(this.countUpCreditsTo - this.countUpCreditsFrom);
    };
    var _a;
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof HeartTicker_1.HeartTicker !== "undefined" && HeartTicker_1.HeartTicker) === "function" && _a || Object)
    ], DHBDialogLabelTickConsumer.prototype, "timeManager", void 0);
    return DHBDialogLabelTickConsumer;
}());
exports.DHBDialogLabelTickConsumer = DHBDialogLabelTickConsumer;


/***/ }),
/* 924 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var MiniSignal = __webpack_require__(3);
var pixi_js_1 = __webpack_require__(4);
var Helper_1 = __webpack_require__(5);
var SimpleTween_1 = __webpack_require__(27);
var SimpleTimer_1 = __webpack_require__(15);
var Viewport_1 = __webpack_require__(6);
var Sprite_1 = __webpack_require__(48);
var BitmapTextField_1 = __webpack_require__(109);
var CoreUIElementFactory_1 = __webpack_require__(28);
var SlotFreeSpinsView_1 = __webpack_require__(382);
var DHBSlotFreeSpinsView = /** @class */ (function (_super) {
    __extends(DHBSlotFreeSpinsView, _super);
    function DHBSlotFreeSpinsView() {
        var _this = _super.call(this) || this;
        _this.outroStartSignal = new MiniSignal();
        return _this;
    }
    DHBSlotFreeSpinsView.prototype.createElements = function (config) {
        this.visible = false;
        this.background = this.getFillBg();
        this.mainContainer.addChildAt(this.background, 0);
        this.prize = CoreUIElementFactory_1.CoreUIElementFactory.createInstance(this.config.prize);
        this.mainContainer.addChild(this.prize);
        this.pickContainer = new pixi_js_1.Container();
        this.pickContainer.name = 'pickContainer';
        this.pickBackground = new pixi_js_1.Graphics();
        this.pickBackground.beginFill(0, 0.8);
        this.pickBackground.drawRect(-125, -100, 755, 545);
        this.pickBackground.endFill();
        this.pickBackground.clone();
        this.pickContainer.addChild(this.pickBackground);
        this.mainContainer.addChild(this.pickContainer);
        this.config = config;
        if (this.config.pickAsset != Helper_1.Helper.EMPTY) {
            this.pickCoinAnimations = new Array();
            this.pickCoins = new Array();
            var xNum = 0;
            var yNum = 0;
            for (var index = 0; index < 12; index++) {
                var coinName = (index + 1).toString();
                var spriteConfig = {
                    elementType: Sprite_1.Sprite.elementType,
                    elementConfig: {
                        name: coinName,
                        assetName: 'pickCoin'
                    }
                };
                var sprite = CoreUIElementFactory_1.CoreUIElementFactory.createInstance(spriteConfig);
                var animation = CoreUIElementFactory_1.CoreUIElementFactory.createInstance(this.config.pickCoinAnimation);
                sprite.on('pointertap', this.onPickSelect, this);
                sprite.interactive = true;
                var posX = 170 * xNum;
                var posY = 170 * yNum;
                sprite.position.set(posX - sprite.width / 2 - 1, posY - sprite.height / 2 - 5);
                animation.position.set(posX, posY);
                animation.displayObject.name = coinName;
                this.pickContainer.addChild(animation);
                this.pickContainer.addChild(sprite);
                this.pickCoinAnimations.push(animation);
                this.pickCoins.push(sprite);
                xNum++;
                if (xNum % 4 == 0) {
                    yNum++;
                    xNum = 0;
                }
            }
            this.pickContainer.alpha = 0;
            this.prize.alpha = 0;
            this.triggered = CoreUIElementFactory_1.CoreUIElementFactory.createInstance(this.config.triggered);
            this.triggered.setEmptyAnimation(0);
            this.triggered.alpha = 0;
            this.addChild(this.triggered);
            this.winBonus = CoreUIElementFactory_1.CoreUIElementFactory.createInstance(this.config.winBonus);
            this.winBonus.setEmptyAnimation(0);
            this.winBonus.alpha = 0;
            this.addChild(this.winBonus);
        }
        this.winValueLabel = new BitmapTextField_1.BitmapTextField(this.config.winValueLabel);
        this.winValueLabel.text = '0.00';
        this.winValueLabel.visible = false;
        this.addChild(this.winValueLabel);
        this.enableSelection(false);
    };
    DHBSlotFreeSpinsView.prototype.playIntro = function () {
        var _this = this;
        this.visible = true;
        this.pickCoinAnimations.forEach(function (animation) {
            animation.setEmptyAnimation(0);
            animation.setEmptyAnimation(1);
        });
        this.pickCoins.forEach(function (coin) {
            coin.visible = true;
            coin.interactive = true;
            coin.texture = pixi_js_1.Texture.from('pickCoin');
        });
        this.pickContainer.alpha = 0;
        this.prize.alpha = 0;
        new SimpleTimer_1.SimpleTimer(300, function () {
            _this.triggered.alpha = 1;
            _this.triggered.play(0, 'animation', false);
            _this.triggered.appendEmptyAnimation(0);
            _this.triggered.displayObject.state.tracks[0].listener = {
                complete: function () {
                    new SimpleTween_1.SimpleTween(_this.pickContainer)
                        .to({ alpha: 1 }, 1000)
                        .start();
                    new SimpleTween_1.SimpleTween(_this.prize)
                        .to({ alpha: 1 }, 1000)
                        .start();
                    new SimpleTween_1.SimpleTween(_this.triggered)
                        .to({ alpha: 0 }, 1000)
                        .onComplete(function () {
                        _this.beforePickSignal.dispatch();
                    })
                        .start();
                }
            };
        });
    };
    DHBSlotFreeSpinsView.prototype.playOutro = function (choice, winAmount) {
        var _this = this;
        this.outroStartSignal.dispatch(choice);
        this.winBonus.alpha = 1;
        this.winBonus.play(0, choice, false);
        this.winValueLabel.visible = true;
        this.winValueLabel.text = winAmount;
        this.winBonus.displayObject.state.tracks[0].listener = {
            complete: function () {
                new SimpleTimer_1.SimpleTimer(2000, function () {
                    new SimpleTween_1.SimpleTween(_this.winBonus)
                        .to({ alpha: 0 }, 1000)
                        .onComplete(function () {
                        _this.winBonus.setEmptyAnimation(0);
                        _this.winValueLabel.visible = false;
                        _this.onOutroComplete();
                    })
                        .start();
                });
            }
        };
    };
    DHBSlotFreeSpinsView.prototype.onOutroComplete = function () {
        this.visible = false;
        this.outroSignal.dispatch();
    };
    DHBSlotFreeSpinsView.prototype.restorePicks = function (choices) {
        for (var index = 0; index < choices.length; index++) {
            var element = choices[index];
            if (element != '*') {
                this.pickCoins[index].texture = pixi_js_1.Texture.from(element);
                this.pickCoins[index].interactive = false;
            }
        }
    };
    DHBSlotFreeSpinsView.prototype.setPickResult = function (index, choice, isComplete, winAmount) {
        var _this = this;
        if (isComplete === void 0) { isComplete = false; }
        this.picks[index] = choice;
        this.pickCoins[index].visible = false;
        this.pickCoinAnimations[index].play(1, 'Feature_Coin_' + choice, false);
        this.pickCoinAnimations[index].displayObject.state.tracks[1].listener = {
            complete: function () {
                _this.pickCoins[index].texture = pixi_js_1.Texture.from(choice);
                _this.pickCoins[index].visible = true;
                if (isComplete) {
                    for (var i = 0; i < _this.picks.length; i++) {
                        var element = _this.picks[i];
                        if (element == choice) {
                            _this.pickCoinAnimations[i].play(1, 'Symbol_Highlight', false);
                            _this.pickCoinAnimations[i].appendEmptyAnimation(1);
                        }
                    }
                    _this.prize.play(1, choice, false);
                    _this.prize.appendEmptyAnimation(1);
                    new SimpleTimer_1.SimpleTimer(3000, function () {
                        _this.playOutro(choice, winAmount);
                    });
                }
            }
        };
    };
    DHBSlotFreeSpinsView.prototype.onPickSelect = function (e) {
        this.enableSelection(false);
        var target = e.target;
        var animation = this.pickCoinAnimations.find(function (e) { return e.displayObject.name == target.name; });
        if (animation) {
            animation.play(0, 'Background_Highlight', true);
            this.pickSignal.dispatch(target.name);
            var index = +target.name - 1;
            this.pickCoins[index].interactive = false;
        }
        else {
            this.enableSelection(true);
        }
    };
    DHBSlotFreeSpinsView.prototype.getFillBg = function () {
        var leftTopPoint = this.viewport.getAlignedPoint(Viewport_1.ViewportAlign.LEFT_TOP);
        var g = new pixi_js_1.Graphics();
        g.beginFill(0, 0.2);
        g.drawRect(leftTopPoint.x, leftTopPoint.y, this.viewport.width, this.viewport.height);
        g.endFill();
        return g.clone();
    };
    DHBSlotFreeSpinsView.prototype.layoutElements = function () {
        _super.prototype.layoutElements.call(this);
        this.background.width = this.viewport.width;
        this.background.height = this.viewport.height;
    };
    DHBSlotFreeSpinsView.prototype.portraitLayout = function () {
        _super.prototype.portraitLayout.call(this);
        this.prize.play(0, 'Portrait_Idle_0');
        this.pickContainer.position.set(130, 450);
        this.pickContainer.scale.set(0.94, 0.94);
    };
    DHBSlotFreeSpinsView.prototype.landscapeLayout = function () {
        _super.prototype.landscapeLayout.call(this);
        this.prize.play(0, 'Landscape_Idle_0');
        this.pickContainer.position.set(390, 125);
        this.pickContainer.scale.set(1, 1);
    };
    DHBSlotFreeSpinsView.prototype.getAssetsList = function () {
        return [
            {
                assetKey: 'featureCoin',
                assetURL: 'assets/freeSpins/Feature_Coin.json'
            },
            {
                assetKey: 'featureTriggered',
                assetURL: 'assets/freeSpins/{locale}/Feature_Triggered.json'
            },
            {
                assetKey: 'featureWinBonus',
                assetURL: 'assets/freeSpins/{locale}/Feature_Win_bonus.json'
            },
            {
                assetKey: 'pickCoin',
                assetURL: 'assets/freeSpins/background/Pick_Coin.png'
            },
            {
                assetKey: 'pickFeaturePrize',
                assetURL: 'assets/freeSpins/background/DHBG_Feature_Prize.json'
            },
            {
                assetKey: 'GRAND',
                assetURL: 'assets/freeSpins/background/GRAND.png'
            },
            {
                assetKey: 'MAJOR',
                assetURL: 'assets/freeSpins/background/MAJOR.png'
            },
            {
                assetKey: 'MINOR',
                assetURL: 'assets/freeSpins/background/MINOR.png'
            },
            {
                assetKey: 'MINI',
                assetURL: 'assets/freeSpins/background/MINI.png'
            },
            {
                assetKey: 'pickgameSelect',
                assetURL: 'assets/sound/game/pick/Pick_Select.mp3'
            },
            {
                assetKey: 'pickgameHitTriple',
                assetURL: 'assets/sound/game/pick/Pick_Hit_Triple.mp3'
            },
            {
                assetKey: 'pickgameWinGRAND',
                assetURL: 'assets/sound/game/pick/Pick_Win_Grand.mp3'
            },
            {
                assetKey: 'pickgameWinMAJOR',
                assetURL: 'assets/sound/game/pick/Pick_Win_Major.mp3'
            },
            {
                assetKey: 'pickgameWinMINI',
                assetURL: 'assets/sound/game/pick/Pick_Win_Mini.mp3'
            },
            {
                assetKey: 'pickgameWinMINOR',
                assetURL: 'assets/sound/game/pick/Pick_Win_Minor.mp3'
            },
        ];
    };
    return DHBSlotFreeSpinsView;
}(SlotFreeSpinsView_1.SlotFreeSpinsView));
exports.DHBSlotFreeSpinsView = DHBSlotFreeSpinsView;


/***/ }),
/* 925 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var SlotBackgroundConfig_1 = __webpack_require__(240);
var Sprite_1 = __webpack_require__(48);
var SpineAnimation_1 = __webpack_require__(63);
var BackgroundMapConfig = __webpack_require__(926);
var TsMap_1 = __webpack_require__(2);
var Viewport_1 = __webpack_require__(6);
var DHBBackgroundConfig = /** @class */ (function (_super) {
    __extends(DHBBackgroundConfig, _super);
    function DHBBackgroundConfig() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.animations = [
            {
                elementType: SpineAnimation_1.SpineAnimation.elementType,
                elementConfig: {
                    name: 'baseBackground',
                    animationName: 'baseBackground',
                    stateAnimationMap: BackgroundMapConfig.map,
                }
            },
            {
                elementType: SpineAnimation_1.SpineAnimation.elementType,
                elementConfig: {
                    name: 'backgroundPetals',
                    animationName: 'backgroundPetals',
                    stateAnimationMap: BackgroundMapConfig.petalsMap,
                }
            },
            {
                elementType: SpineAnimation_1.SpineAnimation.elementType,
                elementConfig: {
                    name: 'backgroundReels',
                    animationName: 'backgroundReels',
                    stateAnimationMap: BackgroundMapConfig.reelsMap,
                }
            },
            {
                elementType: SpineAnimation_1.SpineAnimation.elementType,
                elementConfig: {
                    name: 'backgroundMarquee',
                    animationName: 'backgroundMarquee',
                    stateAnimationMap: BackgroundMapConfig.marqueeMap,
                }
            }
        ];
        _this.staticImages = [
            {
                elementType: Sprite_1.Sprite.elementType,
                elementConfig: {
                    name: 'logo',
                    assetName: 'logo',
                    isOrientationSupported: true
                }
            }
        ];
        _this.coreElementOrientationConfig = new TsMap_1.TsMap([
            [
                Viewport_1.Orientation.PORTRAIT, new TsMap_1.TsMap([
                    [
                        'logo', {
                            position: { x: 0, y: 70 },
                            scale: { x: 1.45, y: 1.45 }
                        }
                    ]
                ])
            ],
            [
                Viewport_1.Orientation.LANDSCAPE, new TsMap_1.TsMap([
                    [
                        'logo', {
                            position: { x: -10, y: 30 },
                            scale: { x: 0.5, y: 0.5 }
                        }
                    ],
                ])
            ]
        ]);
        return _this;
    }
    return DHBBackgroundConfig;
}(SlotBackgroundConfig_1.SlotBackgroundConfig));
exports.DHBBackgroundConfig = DHBBackgroundConfig;


/***/ }),
/* 926 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var TsMap_1 = __webpack_require__(2);
exports.petalsMap = new TsMap_1.TsMap([
    ['landscapeLayout',
        {
            0: [{ name: 'Landscape', loop: true }]
        }
    ],
    ['portraitLayout',
        {
            0: [{ name: 'Portrait', loop: true }]
        }
    ]
]);
exports.map = new TsMap_1.TsMap([
    ['landscapeLayout_base',
        {
            0: [{ name: 'Landscape_Idle_0', loop: false }],
            1: [],
        }
    ],
    ['landscapeLayout_Transition_base',
        {
            1: [{ name: 'Landscape_TransitionToFree_1', loop: false, stop: true }],
            0: [{ name: 'Landscape_Idle_0', loop: false }],
        }
    ],
    ['landscapeLayout_free',
        {
            0: [{ name: 'Landscape_Free_Idle_0', loop: false }],
            1: [],
        }
    ],
    ['landscapeLayout_Transition_free',
        {
            1: [{ name: 'Landscape_Transition_1', loop: false, stop: true }],
            0: [{ name: 'Landscape_Free_Idle_0', loop: false }],
        }
    ],
    ['portraitLayout_base',
        {
            0: [{ name: 'Portrait_Idle_0', loop: false }],
            1: [],
        }
    ],
    ['portraitLayout_Transition_base',
        {
            1: [{ name: 'Portrait_TransitionToFree_1', loop: false, stop: true }],
            0: [{ name: 'Portrait_Idle_0', loop: false }]
        }
    ],
    ['portraitLayout_free',
        {
            0: [{ name: 'Portrait_Free_Idle_0', loop: false }],
            1: [],
        }
    ],
    ['portraitLayout_Transition_free',
        {
            1: [{ name: 'Portrait_Transition_1', loop: false, stop: true }],
            0: [{ name: 'Portrait_Free_Idle_0', loop: false }]
        }
    ],
]);
exports.reelsMap = new TsMap_1.TsMap([
    ['landscapeLayout',
        {
            0: [{ name: 'Landscape_Idle_0', loop: true }]
        }
    ],
    ['portraitLayout',
        {
            0: [{ name: 'Portrait_Idle_0', loop: true }]
        }
    ]
]);
exports.marqueeMap = new TsMap_1.TsMap([
    ['landscapeLayout',
        {
            0: [{ name: 'Landscape_Idol_0', loop: true }]
        }
    ],
    ['portraitLayout',
        {
            0: [{ name: 'Portrait_Idol_0', loop: true }]
        }
    ]
]);


/***/ }),
/* 927 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var SoundManager_1 = __webpack_require__(13);
var GlobalDispatcher_1 = __webpack_require__(7);
var SlotEvent_1 = __webpack_require__(32);
var Spin_1 = __webpack_require__(383);
var ReelsEnums_1 = __webpack_require__(37);
var Spinning_1 = __webpack_require__(386);
var SlotSoundConfig_1 = __webpack_require__(36);
var ReelController_1 = __webpack_require__(156);
var DHBSpinDown_1 = __webpack_require__(928);
var DHBReelControllerView_1 = __webpack_require__(929);
var DHBWildLock_1 = __webpack_require__(931);
var DHBReelController = /** @class */ (function (_super) {
    __extends(DHBReelController, _super);
    function DHBReelController(view) {
        var _this = _super.call(this, view) || this;
        _this.respinReels = new Array();
        _this.isRespinAnticipation = false;
        _this.wildLockReset = false;
        return _this;
    }
    DHBReelController.prototype.addEventListeners = function () {
        _super.prototype.addEventListeners.call(this);
        GlobalDispatcher_1.GlobalDispatcher.addListener(this, 'REEL_STOP_ACTION', this.onReelStopAction.bind(this));
        this.view.tutorialOutroCompleteSignal.add(this.animationComplete, this);
    };
    DHBReelController.prototype.getReelActionHandlerConfig = function () {
        var action = {
            model: es5_1.Container.get(DHBWildLock_1.DHBWildLock),
            config: {
                symbolName: 'symbol_WILD',
                overlayLayerIndex: 1
            }
        };
        return {
            startSpin: {
                model: es5_1.Container.get(Spin_1.Spin),
                config: {
                    symbolDefinition: this.componentConfig.symbolDefinition,
                    duration: this.componentConfig.reelDefinition.reelTween.duration
                }
            },
            spinning: { model: es5_1.Container.get(Spinning_1.Spinning) },
            allReelStopped: null,
            spinStop: {
                model: es5_1.Container.get(DHBSpinDown_1.DHBSpinDown),
                config: {
                    anticipationData: this.componentConfig.anticipationData,
                    dropSymbols: this.componentConfig.reelDefinition.dropSymbols,
                    symbolDefinition: this.componentConfig.symbolDefinition,
                    stopReelNormalDelay: this.stopReelDelay.get(this.reelModel.currentReelSetIndex)
                }
            },
            featureAction: action,
            customActionMap: null
        };
    };
    DHBReelController.prototype.startSpin = function () {
        var _this = this;
        this.soundManager.play(SlotSoundConfig_1.SlotSoundConfig.reelSpin, SoundManager_1.AudioTrackName.EFFECT);
        this._activeReelsID = null;
        this.resetReels();
        this.reelModel.reset();
        this.view.showOverlay(0);
        if (this.wildLockReset) {
            this.view.resetOverlay(0);
            this.wildLockReset = false;
        }
        this.reelActionHandler.startSpin({
            reels: this.activeReelsID,
            spinDirection: this.spinDirection
        }).then(function () {
            _this.finishStateAction();
        });
    };
    DHBReelController.prototype.onReelStopAction = function (data) {
        if (this.respinReels.length > 0
            && this.respinReels.includes(data.data.reel)
            && this.respinReels.indexOf(data.data.reel) < this.respinReels.length - 1) {
            this.freeRespinAnticipation(this.respinReels[this.respinReels.indexOf(data.data.reel) + 1]);
        }
    };
    DHBReelController.prototype.freeRespinReels = function (data) {
        var _this = this;
        this.respinReels = data.reels_to_spin;
        this.resetReels();
        this.view.setSymbolsStateForAll(ReelsEnums_1.SymbolState.LOSE);
        this.reelModel.reset();
        this.activeReelsID = data.reels_to_spin;
        this.freeRespinAnticipation(this.respinReels[0]);
        this.reelActionHandler.startSpin({
            reels: data.reels_to_spin,
            spinDirection: this.spinDirection
        }).then(function () {
            GlobalDispatcher_1.GlobalDispatcher.dispatchIntoExpectedState(SlotEvent_1.SlotEvent.RESPIN_REELS, _this.stateNames.freeRespinReels);
            _this.finishStateAction();
        });
    };
    DHBReelController.prototype.freeRespinFinish = function (data) {
        this.respinReels = [];
        if (this.isRespinAnticipation) {
            this.isRespinAnticipation = false;
            GlobalDispatcher_1.GlobalDispatcher.dispatchIntoExpectedStates(DHBReelController.ANTICIPATE_END_NOTIFICATION, [
                this.stateNames.freeRespinFinish,
                this.stateNames.freeRespinsStop
            ], this.respinReels[this.respinReels.length - 1]);
            if (this.reelModel.isShaking) {
                this.view.stopShaking();
                this.reelModel.isShaking = false;
            }
            this.view.stopAnticipate();
        }
        this.finishStateAction();
    };
    DHBReelController.prototype.freeRespinAnticipation = function (reelid) {
        this.isRespinAnticipation = true;
        GlobalDispatcher_1.GlobalDispatcher.dispatchIntoExpectedStates(DHBReelController.ANTICIPATE_REEL_NOTIFICATION, [
            this.stateNames.freeRespinReels,
            this.stateNames.freeRespinning,
            this.stateNames.freeRespinsStop
        ], reelid - 1);
        this.view.anticipateReel(reelid);
        if (!this.reelModel.isShaking) {
            for (var i = 0; i <= reelid - 1; i++) {
                this.reelModel.isShaking = this.view.playShaking(i);
            }
        }
        else {
            this.view.playShaking(reelid - 1);
        }
    };
    DHBReelController.prototype.pickFeatureWin = function () {
        this.view.visible = true;
        this.finishStateAction();
    };
    DHBReelController.prototype.gameStartTutorial = function (data) {
        this.view.allSymoblHide();
        this.soundManager.play('IntroAmbiance', SoundManager_1.AudioTrackName.EFFECT);
        this.finishStateAction();
    };
    DHBReelController.prototype.tutorialOutro = function (data) {
        this.soundManager.play('tutorialOutroSymbolShow', SoundManager_1.AudioTrackName.EFFECT);
        this.view.tutorialOutroSymbolShow();
    };
    DHBReelController.prototype.wildLockTriggered = function (data) {
        var _this = this;
        this.view.showOverlay(0);
        if (data.reset) {
            // reset overlay on start spin
            this.wildLockReset = true;
            this.finishStateAction();
        }
        else {
            this.reelActionHandler.featureAction(data).then(function () {
                _this.finishStateAction();
            });
        }
    };
    DHBReelController.prototype.freeSpinsAllLineWin = function (data) {
        this.view.hideOverlay(0);
        this.finishStateAction();
    };
    DHBReelController.prototype.animationComplete = function (e, data) {
        this.finishStateAction();
    };
    var _a;
    DHBReelController = __decorate([
        __param(0, es5_1.Inject),
        __metadata("design:paramtypes", [typeof (_a = typeof DHBReelControllerView_1.DHBReelControllerView !== "undefined" && DHBReelControllerView_1.DHBReelControllerView) === "function" && _a || Object])
    ], DHBReelController);
    return DHBReelController;
}(ReelController_1.ReelController));
exports.DHBReelController = DHBReelController;


/***/ }),
/* 928 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var SoundManager_1 = __webpack_require__(13);
var GlobalDispatcher_1 = __webpack_require__(7);
var SpinDown_1 = __webpack_require__(387);
var SlotSoundConfig_1 = __webpack_require__(36);
var DHBSpinDown = /** @class */ (function (_super) {
    __extends(DHBSpinDown, _super);
    function DHBSpinDown() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DHBSpinDown.prototype.triggerAnticipateReel = function (currentReelId, nextReelId) {
        _super.prototype.triggerAnticipateReel.call(this, currentReelId, nextReelId);
        this.view.setSymbolsScaleFromCurrentView(currentReelId, false);
        this.view.setSymbolsScaleFromCurrentView(nextReelId, true);
    };
    DHBSpinDown.prototype.stopAnticipate = function (reelId) {
        _super.prototype.stopAnticipate.call(this, reelId);
        this.view.setSymbolsScaleFromCurrentView(reelId, false);
    };
    DHBSpinDown.prototype.reelStoppedAction = function (reelId) {
        GlobalDispatcher_1.GlobalDispatcher.dispatchIntoAllStates('REEL_STOP_ACTION', { reel: reelId });
        _super.prototype.reelStoppedAction.call(this, reelId);
    };
    DHBSpinDown.prototype.showDropAnimation = function (reelId) {
        var reel = this.reelModel.currentSymbolsOutcome[reelId];
        for (var j = 0; j < reel.length; j++) {
            if (this.config.dropSymbols.includes(reel[j])) {
                this.view.symbolDropAnimation(reelId, j);
                // play scatter drop audio if symbol IS SCATTER
                if (reel[j] == 'SCATTER') {
                    this.soundManager.play(SlotSoundConfig_1.SlotSoundConfig.scatter + "0" + (reelId + 1), SoundManager_1.AudioTrackName.EFFECT);
                }
            }
        }
    };
    DHBSpinDown.prototype.getNextReelId = function (reelId) {
        // should not return reelId + 1
        return this.pendingForStopReels[this.pendingForStopReels.indexOf(reelId) + 1];
    };
    return DHBSpinDown;
}(SpinDown_1.SpinDown));
exports.DHBSpinDown = DHBSpinDown;


/***/ }),
/* 929 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var MiniSignal = __webpack_require__(3);
var es5_1 = __webpack_require__(0);
var TsMap_1 = __webpack_require__(2);
var SimpleTimer_1 = __webpack_require__(15);
var SlotSoundConfig_1 = __webpack_require__(36);
var DHBReelStripView_1 = __webpack_require__(930);
var ReelsEnums_1 = __webpack_require__(37);
var ReelControllerView_1 = __webpack_require__(229);
var ReelStripOverlay_1 = __webpack_require__(389);
var DHBReelControllerView = /** @class */ (function (_super) {
    __extends(DHBReelControllerView, _super);
    function DHBReelControllerView() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.tutorialOutroCompleteSignal = new MiniSignal();
        _this.isAnticipation = false;
        _this.anticipationReelId = 0;
        _this.reelViewStripMap = new TsMap_1.TsMap();
        return _this;
    }
    Object.defineProperty(DHBReelControllerView.prototype, "currentReelView", {
        get: function () {
            return this.reelViewStripMap.get(this.currentReelSetIndex);
        },
        enumerable: true,
        configurable: true
    });
    DHBReelControllerView.prototype.createReelStripView = function () {
        return es5_1.Container.get(DHBReelStripView_1.DHBReelStripView);
    };
    DHBReelControllerView.prototype.appendBasicOverlay = function () {
        this.appendOverlay({
            name: 'WILD',
            overlayType: ReelStripOverlay_1.OverlayType.SYMBOL,
            symbolConfig: this.reelConfig.symbolDefinition,
            size: 12,
        });
        this.appendOverlay({
            overlayType: ReelStripOverlay_1.OverlayType.SYMBOL,
            rangeSymbols: this.reelConfig.reelDefinition.rangeSymbols,
            symbolConfig: this.reelConfig.symbolDefinition
        });
        this.baseOverlayIndex = this.overlaySize - 1;
    };
    DHBReelControllerView.prototype.showWinLine = function (winItemsData) {
        var _this = this;
        this.deleteAllAnimations();
        var isWildMultiplier = false;
        winItemsData.winTable.forEach(function (reel, reelIndex) {
            if (reel === null || reel.length === 0) {
                return;
            }
            reel.forEach(function (value, symbolIndex) {
                if (!value) { // skip lose symbol
                    return;
                }
                // if the symbol type is wild and wild_multiplier feature, we need change wild animation.
                isWildMultiplier = false;
                var symbolId = symbolIndex + _this.reelModel.countTopExtraSymbol;
                if (winItemsData.wildMultiplier != undefined && winItemsData.wildMultiplier.length > 0) {
                    winItemsData.wildMultiplier.forEach(function (feature) {
                        var wildId = feature.symbol_index + _this.reelModel.countTopExtraSymbol;
                        if (feature.reel_index == reelIndex && wildId == symbolId) { // is wild Symbol
                            isWildMultiplier = true;
                        }
                    });
                }
                if (!isWildMultiplier) {
                    var displaylayers = _this.getWinDisplayLayers();
                    var objectArray_1 = [];
                    displaylayers.forEach(function (layer) {
                        var object = _this.getSymbolObject(layer, { reelIndex: reelIndex, symbolIndex: symbolIndex });
                        if (object) {
                            objectArray_1.push({ layer: layer, object: object });
                        }
                    });
                    if (objectArray_1.length > 0) {
                        objectArray_1.forEach(function (item) {
                            var position = _this.getActualPosition(item.layer, { reelIndex: reelIndex, symbolIndex: symbolIndex });
                            _this.playOverlayAnimation(ReelsEnums_1.SymbolAnimationPostfix.WIN, item.layer, position);
                        });
                    }
                    else {
                        var position = _this.getActualPosition(_this.baseOverlayIndex, { reelIndex: reelIndex, symbolIndex: symbolIndex });
                        _this.playOverlayAnimation(ReelsEnums_1.SymbolAnimationPostfix.WIN, _this.baseOverlayIndex, position);
                    }
                    // this.completedAnimationCounter++;
                }
            });
        });
        if (this.completedAnimationCounter == 0) { // when we do not symbols animation
            this.debugAnimationTimer = new SimpleTimer_1.SimpleTimer(1500, this.dispatchAllSymbolsAnimationComplete.bind(this));
        }
    };
    DHBReelControllerView.prototype.playWildMultiplierAnimation = function (reelIndex, symbolIndex, multiplier) {
        var wildType;
        switch (multiplier) {
            case 2:
                wildType = ReelsEnums_1.SymbolAnimationPostfix.WILD_X2;
                break;
            case 3:
                wildType = ReelsEnums_1.SymbolAnimationPostfix.WILD_X3;
                break;
            case 4:
                wildType = ReelsEnums_1.SymbolAnimationPostfix.WILD_X4;
                break;
        }
        if (wildType != undefined) {
            this.currentReelView[reelIndex].hideSymbol(symbolIndex);
            this.playOverlayAnimation(wildType, this.baseOverlayIndex, {
                reelIndex: reelIndex,
                symbolIndex: symbolIndex
            });
            // this.completedAnimationCounter++;
        }
    };
    DHBReelControllerView.prototype.hideOverlay = function (layer) {
        this.reelOverlayMap.get(layer).visible = false;
    };
    DHBReelControllerView.prototype.showOverlay = function (layer) {
        this.reelOverlayMap.get(layer).visible = true;
    };
    DHBReelControllerView.prototype.allSymoblHide = function () {
        var _this = this;
        this.currentReelSet.forEach(function (reel, reelIndex) {
            for (var symbolIndex = 0; symbolIndex < reel.symbolsOnReel; symbolIndex++) {
                _this.hideSymbolFromCurrentView(reelIndex, symbolIndex);
            }
        });
    };
    DHBReelControllerView.prototype.tutorialOutroSymbolShow = function () {
        var _this = this;
        var count = 0;
        var ms = 0;
        var _loop_1 = function (i) {
            var pos = 4;
            var _loop_2 = function (j) {
                if (i % 2 == 0) {
                    new SimpleTimer_1.SimpleTimer(ms, function () {
                        _this.showSymbolFromCurrentView(j, i);
                    });
                }
                else {
                    var index_1 = pos - j;
                    new SimpleTimer_1.SimpleTimer(ms, function () {
                        _this.showSymbolFromCurrentView(index_1, i);
                    });
                }
                count++;
                ms = 140 * count;
            };
            for (var j = 0; j < 5; j++) {
                _loop_2(j);
            }
        };
        for (var i = 0; i < 4; i++) {
            _loop_1(i);
        }
        new SimpleTimer_1.SimpleTimer(ms, function () {
            _this.tutorialOutroCompleteSignal.dispatch();
        });
    };
    DHBReelControllerView.prototype.setSymbolsScaleFromCurrentView = function (reelIndex, isAnticipation) {
        if (!isAnticipation) {
            this.currentReelView[reelIndex].setAllSymbolsScale({ x: 1, y: 1 });
            this.isAnticipation = false;
        }
        else {
            this.isAnticipation = true;
            this.anticipationReelId = reelIndex;
        }
    };
    DHBReelControllerView.prototype.tweenSymbolsUpdate = function (reelIndex, symbolIndex, y) {
        this.currentReelView[reelIndex].tweenSymbolsUpdate(symbolIndex, y);
        if (this.isAnticipation && this.anticipationReelId == reelIndex) {
            var size = { x: 1, y: 1 };
            switch (symbolIndex) {
                case 1:
                    size = { x: 1.1, y: 1.1 };
                    break;
                case 2:
                    size = { x: 1.4, y: 1.4 };
                    break;
                case 3:
                    size = { x: 1.5, y: 1.5 };
                    break;
                case 4:
                    size = { x: 1.1, y: 1.1 };
                    break;
                default:
                    break;
            }
            this.currentReelView[reelIndex].setSymbolsScale(symbolIndex, size);
        }
    };
    DHBReelControllerView.prototype.getAssetsList = function () {
        var assetsList = new Array();
        for (var i = 1; i <= 5; i++) {
            assetsList.push({
                assetKey: 'Scatter0' + i,
                assetURL: 'assets/sound/game/Scatter0' + i + '.mp3'
            });
            assetsList.push({
                assetKey: 'ReelStop0' + i,
                assetURL: 'assets/sound/game/ReelStop0' + i + '.mp3'
            });
        }
        assetsList.push.apply(assetsList, [
            {
                assetKey: 'IntroAmbiance',
                assetURL: 'assets/sound/game/IntroAmbiance.mp3'
            },
            {
                assetKey: 'WildLockAudio',
                assetURL: 'assets/sound/game/WildLock.mp3'
            },
            {
                assetKey: 'tutorialOutroSymbolShow',
                assetURL: 'assets/sound/game/tutorialOutroSymbolShow.mp3'
            },
            {
                assetKey: SlotSoundConfig_1.SlotSoundConfig.reelSpin,
                assetURL: 'assets/sound/game/' + SlotSoundConfig_1.SlotSoundConfig.reelSpin + '.mp3'
            },
            {
                assetKey: 'symbols',
                assetURL: 'assets/symbols/symbols.json'
            },
            {
                assetKey: 'symbolsBlur',
                assetURL: 'assets/symbols/symbolsBlur.json'
            },
            {
                assetKey: 'symbolsLose',
                assetURL: 'assets/symbols/symbolsLose.json'
            },
            {
                assetKey: 'symbolAnimationSCA_Drop',
                assetURL: 'assets/symbols/symbolAnimationSCADrop.json'
            },
            {
                assetKey: 'symbolAnimationSCA',
                assetURL: 'assets/symbols/symbolAnimationSCA.json'
            },
            {
                assetKey: 'symbolAnimationW',
                assetURL: 'assets/symbols/symbolAnimationW.json'
            }
        ]);
        return assetsList;
    };
    return DHBReelControllerView;
}(ReelControllerView_1.ReelControllerView));
exports.DHBReelControllerView = DHBReelControllerView;


/***/ }),
/* 930 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ReelStripView_1 = __webpack_require__(388);
var DHBReelStripView = /** @class */ (function (_super) {
    __extends(DHBReelStripView, _super);
    function DHBReelStripView() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DHBReelStripView.prototype.setSymbolsScale = function (symbolId, size) {
        this.symbols[symbolId].setSymbolScale(size);
    };
    DHBReelStripView.prototype.setAllSymbolsScale = function (size) {
        this.symbols.forEach(function (symbol) {
            symbol.setSymbolScale(size);
        });
    };
    return DHBReelStripView;
}(ReelStripView_1.ReelStripView));
exports.DHBReelStripView = DHBReelStripView;


/***/ }),
/* 931 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var SoundManager_1 = __webpack_require__(13);
var WildLock_1 = __webpack_require__(932);
var DHBWildLock = /** @class */ (function (_super) {
    __extends(DHBWildLock, _super);
    function DHBWildLock() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DHBWildLock.prototype.run = function (data) {
        var _this = this;
        this.currentData = data;
        this.totalLockCount = 0;
        this.currentLockededCount = 0;
        return new Promise(function (resolve) {
            _this.resolveForStop = resolve;
            data.wild_config.forEach(function (reel, index) {
                reel.forEach(function (symbol) {
                    if (symbol != '*') {
                        var reelId = index;
                        var symbolId = +symbol;
                        _this.totalLockCount++;
                        _this.showLockAnimationAt(reelId, symbolId, 0);
                    }
                });
            });
        });
    };
    DHBWildLock.prototype.showLockAnimationAt = function (reelId, symbolId, layer) {
        var symbolPosition = {
            reelIndex: reelId,
            symbolIndex: symbolId
        };
        var object = this.view.placeOverlayAnimationAt('WILD', layer, symbolPosition);
        object.playAnimation('LOCK');
        this.soundManager.play('WildLockAudio', SoundManager_1.AudioTrackName.EFFECT);
        object.animationCompleteSignal.once(this.onWildLockCompleted.bind(this, symbolPosition.reelIndex, symbolPosition.symbolIndex), this);
    };
    DHBWildLock.prototype.onWildLockCompleted = function (reelId, symbolId) {
        _super.prototype.onWildLockCompleted.call(this, reelId, symbolId);
        var symbolPosition = {
            reelIndex: reelId,
            symbolIndex: symbolId
        };
        var object = this.view.placeOverlayAnimationAt('WILD', 0, symbolPosition);
        object.playLoopAnimation('LOCK');
    };
    return DHBWildLock;
}(WildLock_1.WildLock));
exports.DHBWildLock = DHBWildLock;


/***/ }),
/* 932 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ReelActionModel_1 = __webpack_require__(228);
var WildLock = /** @class */ (function (_super) {
    __extends(WildLock, _super);
    function WildLock() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.key = 'WILDLOCK';
        /**
         * Keeps the final wild locked data
         *
         * @protected
         * @type {IWildLocked}
         * @memberof WildLock
         */
        _this.data = null;
        /**
         * The wild locked data of current round
         *
         * @protected
         * @type {IWildLocked}
         * @memberof WildLock
         */
        _this.currentData = null;
        _this.totalLockCount = 0;
        _this.currentLockededCount = 0;
        return _this;
    }
    WildLock.prototype.run = function (data) {
        var _this = this;
        this.currentData = data;
        this.totalLockCount = 0;
        this.currentLockededCount = 0;
        return new Promise(function (resolve) {
            _this.resolveForStop = resolve;
        });
    };
    WildLock.prototype.updateWildLockData = function (data) {
        //
    };
    WildLock.prototype.onWildLockCompleted = function (reelId, symbolId) {
        this.currentLockededCount++;
        if (this.currentLockededCount === this.totalLockCount) {
            this.onAllWildLockCompleted();
        }
    };
    WildLock.prototype.onAllWildLockCompleted = function () {
        this.updateWildLockData(this.currentData);
        if (this.resolveForStop) {
            this.resolveForStop();
            this.resolveForStop = null;
        }
    };
    WildLock.prototype.reset = function () {
        //
    };
    return WildLock;
}(ReelActionModel_1.ReelActionModel));
exports.WildLock = WildLock;


/***/ }),
/* 933 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ReelConfig_1 = __webpack_require__(78);
var TsMap_1 = __webpack_require__(2);
var Viewport_1 = __webpack_require__(6);
var tween_js_1 = __webpack_require__(47);
var DHBReelConfig = /** @class */ (function (_super) {
    __extends(DHBReelConfig, _super);
    function DHBReelConfig() {
        var _a;
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.anticipationData = {
            anticipationDelay: 1500,
            animations: [],
            //Each Model needs anticipationData
            modelData: [
                {
                    anticipationSymbolCountTrigger: 2,
                    anticipationSymbolCountRequired: 3,
                },
                {
                    anticipationSymbolCountTrigger: 6,
                    anticipationSymbolCountRequired: 3,
                }
            ]
        };
        _this.orientationLayoutData = new TsMap_1.TsMap([
            [Viewport_1.Orientation.PORTRAIT,
                {
                    position: { x: 10, y: 361 },
                    scale: 0.94
                }
            ],
            [Viewport_1.Orientation.LANDSCAPE,
                {
                    position: { x: 266, y: 28 },
                    scale: 1
                }
            ]
        ]);
        _this.defaultReelPosition = [
            { position: { x: 0, y: 0 } },
            { position: { x: 150, y: 0 } },
            { position: { x: 300, y: 0 } },
            { position: { x: 450, y: 0 } },
            { position: { x: 600, y: 0 } }
        ];
        _this.portraitMask = {
            x: 0,
            y: 358,
            width: 714,
            height: 508
        };
        _this.landscapeMask = {
            x: 265,
            y: 30,
            width: 753,
            height: 537
        };
        _this.orientationMaskData = new TsMap_1.TsMap([
            [ReelConfig_1.ReelSet.BASE, new TsMap_1.TsMap([
                    [Viewport_1.Orientation.PORTRAIT, _this.portraitMask],
                    [Viewport_1.Orientation.LANDSCAPE, _this.landscapeMask],
                ])],
            [ReelConfig_1.ReelSet.FEATURE, new TsMap_1.TsMap([
                    [Viewport_1.Orientation.PORTRAIT, _this.portraitMask],
                    [Viewport_1.Orientation.LANDSCAPE, _this.landscapeMask],
                ])],
        ]);
        _this.symbolDefinition = {
            generalSymbol: {
                width: 150,
                height: 135
            },
            specialSymbol: {}
        };
        _this.reelDefinition = {
            width: 150,
            symbol: {
                width: 150,
                height: 135
            },
            rangeSymbols: ['A', 'K', 'Q', 'J', 'T', 'PIC1', 'PIC2', 'PIC3', 'PIC4', 'PIC5', 'WILD', 'SCATTER'],
            dropSymbols: ['WILD', 'SCATTER'],
            symbolsOnReel: 4,
            reelTween: { duration: 50, ease: tween_js_1.Easing.Linear.None },
            stopTween: { duration: 400, ease: tween_js_1.Easing.Back.Out },
            startReelDelay: 0,
            stopReelNormalDelay: 200,
            countBottomExtraSymbol: 1,
            countTopExtraSymbol: 1
        };
        _this.reelSet = (_a = {},
            _a[ReelConfig_1.ReelSet.BASE] = [
                {
                    width: 150,
                    startReelDelay: 0,
                    stopReelNormalDelay: 200
                },
                {
                    startReelDelay: 100
                },
                {
                    startReelDelay: 200
                },
                {
                    startReelDelay: 300
                },
                {
                    startReelDelay: 400
                }
            ],
            _a[ReelConfig_1.ReelSet.FEATURE] = [
                {
                    width: 150,
                    startReelDelay: 0,
                    stopReelNormalDelay: 200
                },
                {
                    startReelDelay: 100
                },
                {
                    startReelDelay: 200
                },
                {
                    startReelDelay: 300
                },
                {
                    startReelDelay: 400
                }
            ],
            _a);
        return _this;
    }
    return DHBReelConfig;
}(ReelConfig_1.ReelConfig));
exports.DHBReelConfig = DHBReelConfig;


/***/ }),
/* 934 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var MLUIForcingSpinConfig_1 = __webpack_require__(935);
var TsMap_1 = __webpack_require__(2);
var DHBForcingSpinConfig = /** @class */ (function (_super) {
    __extends(DHBForcingSpinConfig, _super);
    function DHBForcingSpinConfig() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.selectorData = new TsMap_1.TsMap([
            [
                'Pic1', [
                    ['PIC1', 'PIC1', 'PIC1', 'PIC1'],
                    ['PIC1', 'PIC1', 'PIC1', 'PIC1'],
                    ['PIC1', 'PIC1', 'PIC1', 'PIC1'],
                    ['PIC1', 'PIC1', 'PIC1', 'PIC1'],
                    ['PIC1', 'PIC1', 'PIC1', 'PIC1']
                ]
            ],
            [
                'Pic2', [
                    ['PIC2', 'PIC2', 'PIC2', 'PIC2'],
                    ['PIC2', 'PIC2', 'PIC2', 'PIC2'],
                    ['PIC2', 'PIC2', 'PIC2', 'PIC2'],
                    ['PIC2', 'A', 'A', 'PIC2'],
                    ['PIC2', 'A', 'A', 'PIC2']
                ]
            ],
            [
                'Pic3', [
                    ['PIC3', 'PIC3', 'PIC3', 'PIC3'],
                    ['PIC3', 'PIC3', 'PIC3', 'PIC3'],
                    ['PIC3', 'PIC3', 'Q', 'PIC3'],
                    ['PIC3', 'PIC3', 'K', 'PIC3'],
                    ['PIC3', 'PIC3', 'A', 'PIC3']
                ]
            ],
            [
                'Pic4', [
                    ['PIC4', 'PIC4', 'PIC4', 'PIC4'],
                    ['PIC4', 'PIC4', 'PIC4', 'PIC4'],
                    ['PIC4', 'PIC4', 'Q', 'PIC4'],
                    ['PIC4', 'PIC4', 'K', 'PIC4'],
                    ['PIC4', 'PIC4', 'A', 'PIC4']
                ]
            ],
            [
                'Pic5', [
                    ['PIC5', 'PIC5', 'PIC5', 'PIC5'],
                    ['PIC5', 'PIC5', 'PIC5', 'PIC5'],
                    ['PIC5', 'PIC5', 'Q', 'PIC5'],
                    ['PIC5', 'PIC5', 'K', 'PIC5'],
                    ['PIC5', 'PIC5', 'A', 'PIC5']
                ]
            ],
            [
                'Ace', [
                    ['A', 'J', 'J', 'A'],
                    ['A', 'Q', 'Q', 'A'],
                    ['WILD', 'K', 'K', 'A'],
                    ['A', 'Q', 'Q', 'A'],
                    ['A', 'J', 'J', 'A']
                ]
            ],
            [
                'King', [
                    ['K', 'J', 'A', 'K'],
                    ['K', 'Q', 'J', 'K'],
                    ['K', 'K', 'Q', 'K'],
                    ['K', 'A', 'A', 'K'],
                    ['K', 'J', 'Q', 'K']
                ]
            ],
            [
                'Queen', [
                    ['Q', 'A', 'A', 'Q'],
                    ['Q', 'J', 'J', 'Q'],
                    ['Q', 'Q', 'Q', 'Q'],
                    ['Q', 'K', 'K', 'Q'],
                    ['Q', 'A', 'A', 'Q']
                ]
            ],
            [
                'Jack', [
                    ['J', 'A', 'A', 'J'],
                    ['J', 'Q', 'Q', 'J'],
                    ['J', 'A', 'A', 'J'],
                    ['J', 'K', 'K', 'J'],
                    ['J', 'A', 'A', 'J']
                ]
            ],
            [
                'WILD', [
                    ['A', 'A', 'A', 'A'],
                    ['A', 'J', 'J', 'J'],
                    ['WILD', 'Q', 'Q', 'Q'],
                    ['WILD', 'K', 'K', 'K'],
                    ['WILD', 'A', 'A', 'A']
                ]
            ],
            [
                'ALLWILD', [
                    ['WILD', 'A', 'A', 'A'],
                    ['WILD', 'J', 'J', 'J'],
                    ['WILD', 'Q', 'Q', 'Q'],
                    ['WILD', 'K', 'K', 'K'],
                    ['WILD', 'A', 'A', 'A']
                ]
            ],
            [
                '2SCATTERWIN', [
                    ['A', 'SCATTER', 'Q', 'A'],
                    ['A', 'SCATTER', 'J', 'J'],
                    ['WILD', 'A', 'Q', 'J'],
                    ['WILD', 'K', 'K', 'J'],
                    ['WILD', 'A', 'A', 'J']
                ]
            ],
            [
                '2SCATTER', [
                    ['SCATTER', 'A', 'Q', 'A'],
                    ['SCATTER', 'K', 'J', 'J'],
                    ['WILD', 'A', 'Q', 'J'],
                    ['WILD', 'K', 'K', 'J'],
                    ['WILD', 'A', 'A', 'J']
                ]
            ],
            [
                '3SCATTER', [
                    ['SCATTER', 'A', 'A', 'A'],
                    ['SCATTER', 'J', 'J', 'J'],
                    ['WILD', 'Q', 'Q', 'J'],
                    ['WILD', 'K', 'K', 'J'],
                    ['SCATTER', 'A', 'A', 'J']
                ]
            ],
            [
                '3SCAwin', [
                    ['SCATTER', 'A', 'K', 'K'],
                    ['WILD', 'K', 'J', 'J'],
                    ['SCATTER', 'A', 'Q', 'J'],
                    ['WILD', 'K', 'K', 'J'],
                    ['SCATTER', 'K', 'K', 'J']
                ]
            ],
            [
                '4SCATTER', [
                    ['SCATTER', 'A', 'A', 'A'],
                    ['SCATTER', 'J', 'J', 'J'],
                    ['WILD', 'Q', 'Q', 'J'],
                    ['SCATTER', 'K', 'K', 'J'],
                    ['SCATTER', 'A', 'A', 'J']
                ]
            ],
            [
                '5SCATTER', [
                    ['SCATTER', 'A', 'A', 'A'],
                    ['SCATTER', 'J', 'J', 'J'],
                    ['SCATTER', 'Q', 'Q', 'J'],
                    ['SCATTER', 'K', 'K', 'J'],
                    ['SCATTER', 'A', 'A', 'J']
                ]
            ]
        ]);
        return _this;
    }
    return DHBForcingSpinConfig;
}(MLUIForcingSpinConfig_1.MLUIForcingSpinConfig));
exports.DHBForcingSpinConfig = DHBForcingSpinConfig;


/***/ }),
/* 935 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Helper_1 = __webpack_require__(5);
var ForcingSpinConfig_1 = __webpack_require__(225);
var MLUIForcingSpinConfig = /** @class */ (function (_super) {
    __extends(MLUIForcingSpinConfig, _super);
    function MLUIForcingSpinConfig() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MLUIForcingSpinConfig.prototype.getSelectorButtonConfig = function () {
        return Helper_1.Helper.mergeTwoObjects(_super.prototype.getSelectorButtonConfig.call(this), {
            scaleX: 0.8,
            scaleY: 1,
        });
    };
    return MLUIForcingSpinConfig;
}(ForcingSpinConfig_1.ForcingSpinConfig));
exports.MLUIForcingSpinConfig = MLUIForcingSpinConfig;


/***/ }),
/* 936 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var SoundManager_1 = __webpack_require__(13);
var SlotSoundConfig_1 = __webpack_require__(36);
var BigWinController_1 = __webpack_require__(93);
var DHBBigWinView_1 = __webpack_require__(937);
var DHBBigWinController = /** @class */ (function (_super) {
    __extends(DHBBigWinController, _super);
    function DHBBigWinController(view) {
        return _super.call(this, view) || this;
    }
    DHBBigWinController.prototype.cancelCountUp = function (forceStop) {
        if (forceStop === void 0) { forceStop = false; }
        this.soundManager.stop('RollupBeep');
        this.soundManager.stop(SlotSoundConfig_1.SlotSoundConfig.win + "0" + (BigWinController_1.BigWinController.getBigWinTierIndex(this.finalBigWinTier) + 1));
        _super.prototype.cancelCountUp.call(this, forceStop);
    };
    DHBBigWinController.prototype.completeCountUp = function () {
        this.soundManager.stop('RollupBeep');
        this.soundManager.stop(SlotSoundConfig_1.SlotSoundConfig.win + "0" + (BigWinController_1.BigWinController.getBigWinTierIndex(this.finalBigWinTier) + 1));
        this.soundManager.play(SlotSoundConfig_1.SlotSoundConfig.win + "0" + (BigWinController_1.BigWinController.getBigWinTierIndex(this.finalBigWinTier) + 1) + "End");
        _super.prototype.completeCountUp.call(this);
    };
    DHBBigWinController.prototype.beginCountUp = function () {
        this.soundManager.play('RollupBeep', SoundManager_1.AudioTrackName.EFFECT, true);
        _super.prototype.beginCountUp.call(this);
    };
    DHBBigWinController.prototype.allLineWin = function (data) {
        if (data.wildWin) {
            this.soundManager.play('WildWinAudio');
            this.soundManager.play('WildWinLaugh');
        }
        _super.prototype.allLineWin.call(this, data);
    };
    DHBBigWinController.prototype.freeSpinsAllLineWin = function (data) {
        if (data.wildWin) {
            this.soundManager.play('WildWinAudio');
            this.soundManager.play('WildWinLaugh');
        }
        _super.prototype.freeSpinsAllLineWin.call(this, data);
    };
    var _a;
    DHBBigWinController = __decorate([
        __param(0, es5_1.Inject),
        __metadata("design:paramtypes", [typeof (_a = typeof DHBBigWinView_1.DHBBigWinView !== "undefined" && DHBBigWinView_1.DHBBigWinView) === "function" && _a || Object])
    ], DHBBigWinController);
    return DHBBigWinController;
}(BigWinController_1.BigWinController));
exports.DHBBigWinController = DHBBigWinController;


/***/ }),
/* 937 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var TweenBitmapTextField_1 = __webpack_require__(234);
var BigWinView_1 = __webpack_require__(391);
var DHBBigWinView = /** @class */ (function (_super) {
    __extends(DHBBigWinView, _super);
    function DHBBigWinView() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DHBBigWinView.prototype.animateBigWinIn = function () {
        this.bigWinValueLabel.alpha = 1;
        this.bigWinValueLabel.startTween(this.valueTweenConfig);
    };
    DHBBigWinView.prototype.setupBigWinLabel = function (config) {
        this.bigWinValueLabel = new TweenBitmapTextField_1.TweenBitmapTextField(config.bigWinValueLabel);
        this.bigWinValueLabel.text = '0.00';
        this.bigWinValueLabel.alpha = 0;
        var slotIndex = this.bigWinAnimation.displayObject.skeleton.findSlotIndex('text');
        var slotContainer = this.bigWinAnimation.displayObject.slotContainers[slotIndex];
        slotContainer.addChild(this.bigWinValueLabel);
    };
    DHBBigWinView.prototype.playBigWinAnimation = function (finalBigWinTier) {
        if (this.hasUniqueAnimation(finalBigWinTier)) {
            this.bigWinAnimation.play(0, finalBigWinTier, false);
        }
        else {
            this.bigWinAnimation.play(0, 'Number', false);
        }
    };
    DHBBigWinView.prototype.portraitLayout = function () {
        // this.coreElementLayout( Orientation.PORTRAIT );
        _super.prototype.portraitLayout.call(this);
        this.valueTweenConfig = this.config.portraitValueLabelTweenInConfig;
    };
    /**
     * Method where we set position, scale, visibility, textures ext. for landscape mode
     */
    DHBBigWinView.prototype.landscapeLayout = function () {
        // this.coreElementLayout( Orientation.LANDSCAPE );
        _super.prototype.landscapeLayout.call(this);
        this.valueTweenConfig = this.config.landscapeValueLabelTweenInConfig;
    };
    DHBBigWinView.prototype.getAssetsList = function () {
        var assetsList = _super.prototype.getAssetsList.call(this);
        assetsList.push.apply(assetsList, [
            {
                assetKey: 'Win05',
                assetURL: 'assets/sound/game/Win05.mp3'
            },
            {
                assetKey: 'Win06',
                assetURL: 'assets/sound/game/Win06.mp3'
            },
            {
                assetKey: 'Win07',
                assetURL: 'assets/sound/game/Win07.mp3'
            },
            {
                assetKey: 'Win05End',
                assetURL: 'assets/sound/game/Win05End.mp3'
            },
            {
                assetKey: 'Win06End',
                assetURL: 'assets/sound/game/Win06End.mp3'
            },
            {
                assetKey: 'Win07End',
                assetURL: 'assets/sound/game/Win07End.mp3'
            },
            {
                assetKey: 'RollupBeep',
                assetURL: 'assets/sound/game/RollupBeep.mp3'
            },
            {
                assetKey: 'WildWinAudio',
                assetURL: 'assets/sound/game/WildWin.mp3'
            },
            {
                assetKey: 'WildWinLaugh',
                assetURL: 'assets/sound/game/WildWinLaugh.mp3'
            },
            {
                assetKey: 'redEnvelope',
                assetURL: 'assets/coinShower/redEnvelope.json'
            },
            {
                assetKey: 'redEnvelopeParticles',
                assetURL: 'assets/coinShower/redEnvelopeParticles.json'
            },
        ]);
        return assetsList;
    };
    return DHBBigWinView;
}(BigWinView_1.BigWinView));
exports.DHBBigWinView = DHBBigWinView;


/***/ }),
/* 938 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var TsMap_1 = __webpack_require__(2);
var Viewport_1 = __webpack_require__(6);
var BigWinConfig_1 = __webpack_require__(235);
var IBigWinConfig_1 = __webpack_require__(67);
var DHBBigWinConfig = /** @class */ (function (_super) {
    __extends(DHBBigWinConfig, _super);
    function DHBBigWinConfig() {
        var _this = _super.call(this) || this;
        _this.portraitValueLabelTweenInConfig = {
            duration: 500,
            tweenStarting: { y: 0, alpha: 0 },
            tweenDestination: { y: 20, alpha: 1 }
        };
        _this.landscapeValueLabelTweenInConfig = {
            duration: 500,
            tweenStarting: { y: 0, alpha: 0 },
            tweenDestination: { y: 20, alpha: 1 }
        };
        _this.winTierSettings = [
            {
                tier: IBigWinConfig_1.BigWinTierType.Numbers,
                winSpan: {
                    start: 0,
                    end: 10
                },
                countTime: 1000,
                stayTime: 1500,
                timeTable: [
                    {
                        tier: IBigWinConfig_1.BigWinTierType.Numbers,
                        timeSpan: {
                            start: 0,
                            end: 1000
                        }
                    }
                ]
            },
            {
                tier: IBigWinConfig_1.BigWinTierType.Coins,
                winSpan: {
                    start: 10,
                    end: 20
                },
                countTime: 3000,
                stayTime: 1500,
                timeTable: [
                    {
                        tier: IBigWinConfig_1.BigWinTierType.Numbers,
                        timeSpan: {
                            start: 0,
                            end: 1000
                        }
                    }, {
                        tier: IBigWinConfig_1.BigWinTierType.Coins,
                        timeSpan: {
                            start: 0,
                            end: 3000
                        }
                    }
                ]
            },
            {
                tier: IBigWinConfig_1.BigWinTierType.BigWin,
                winSpan: {
                    start: 20,
                    end: 40
                },
                countTime: 9000,
                stayTime: 1500,
                timeTable: [
                    {
                        tier: IBigWinConfig_1.BigWinTierType.Numbers,
                        timeSpan: {
                            start: 0,
                            end: 1000
                        }
                    }, {
                        tier: IBigWinConfig_1.BigWinTierType.Coins,
                        timeSpan: {
                            start: 1000,
                            end: 2000
                        }
                    }, {
                        tier: IBigWinConfig_1.BigWinTierType.BigWin,
                        timeSpan: {
                            start: 2000,
                            end: 9000
                        }
                    }
                ]
            },
            {
                tier: IBigWinConfig_1.BigWinTierType.ExtremeBigWin,
                winSpan: {
                    start: 40,
                    end: 100
                },
                countTime: 9000,
                stayTime: 1500,
                timeTable: [
                    {
                        tier: IBigWinConfig_1.BigWinTierType.Numbers,
                        timeSpan: {
                            start: 0,
                            end: 1000
                        }
                    }, {
                        tier: IBigWinConfig_1.BigWinTierType.Coins,
                        timeSpan: {
                            start: 1000,
                            end: 2000
                        }
                    }, {
                        tier: IBigWinConfig_1.BigWinTierType.ExtremeBigWin,
                        timeSpan: {
                            start: 2000,
                            end: 9000
                        }
                    }
                ]
            },
            {
                tier: IBigWinConfig_1.BigWinTierType.UltraExtremeBigWin,
                winSpan: {
                    start: 100,
                    end: 99999
                },
                countTime: 9000,
                stayTime: 1500,
                timeTable: [
                    {
                        tier: IBigWinConfig_1.BigWinTierType.Numbers,
                        timeSpan: {
                            start: 0,
                            end: 1000
                        }
                    }, {
                        tier: IBigWinConfig_1.BigWinTierType.Coins,
                        timeSpan: {
                            start: 1000,
                            end: 2000
                        }
                    }, {
                        tier: IBigWinConfig_1.BigWinTierType.UltraExtremeBigWin,
                        timeSpan: {
                            start: 2000,
                            end: 9000
                        }
                    }
                ]
            }
        ];
        _this.bigWinAnimation = {
            name: 'bigwinSpineAnimation',
            animationName: 'bigwinSpineAnimation',
            isOrientationSupported: true,
            position: { x: 365, y: 650 }
        };
        _this.coreElementOrientationConfig = new TsMap_1.TsMap([
            [
                Viewport_1.Orientation.PORTRAIT, new TsMap_1.TsMap([
                    [
                        _this.bigWinAnimation.name, {
                            position: _this.bigWinAnimation.position,
                            scale: { x: 1, y: 1 }
                        }
                    ]
                ])
            ],
            [
                Viewport_1.Orientation.LANDSCAPE, new TsMap_1.TsMap([
                    [
                        _this.bigWinAnimation.name, {
                            position: { x: 645, y: 370 },
                            scale: { x: 0.8, y: 0.8 }
                        }
                    ]
                ])
            ]
        ]);
        var position = { x: -10, y: 0 };
        var scale = { x: 1, y: -1 };
        var autoScale = { x: 500, y: 100 };
        _this.bigWinValueLabel.position = position;
        _this.bigWinValueLabel.scale = scale;
        _this.bigWinValueLabel.autoscale = autoScale;
        return _this;
    }
    return DHBBigWinConfig;
}(BigWinConfig_1.BigWinConfig));
exports.DHBBigWinConfig = DHBBigWinConfig;


/***/ }),
/* 939 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var SimpleTimer_1 = __webpack_require__(15);
var ScrollMarquee_1 = __webpack_require__(119);
var SlotMarqueeController_1 = __webpack_require__(940);
var DHBSlotMarqueeView_1 = __webpack_require__(942);
var DHBSlotMarqueeController = /** @class */ (function (_super) {
    __extends(DHBSlotMarqueeController, _super);
    function DHBSlotMarqueeController(view) {
        return _super.call(this, view) || this;
    }
    DHBSlotMarqueeController.prototype.onBigWinCountComplete = function (e) {
        // set marquee on allLineWin / freeSpinsAllLineWin
    };
    DHBSlotMarqueeController.prototype.allLineWin = function (data) {
        this.setMarquee(this.getTotalWinInfo(data.totalWin, this.config.marqueeLabelTotalWinKey), ScrollMarquee_1.MarqueeDisplayMode.FIXED);
        this.finishStateAction();
    };
    DHBSlotMarqueeController.prototype.freeSpinsAllLineWin = function (data) {
        this.setMarquee(this.getTotalWinInfo(data.totalWin, this.config.marqueeLabelTotalWinKey), ScrollMarquee_1.MarqueeDisplayMode.FIXED);
        this.finishStateAction();
    };
    DHBSlotMarqueeController.prototype.freeSpinsStart = function (data) {
        //total freeSpinsWinAmount include pick game's winnings.
        this.setMarquee(this.getTotalFeatureWinInfo(data.currentFeatureWin, this.config.marqueeLabelFeatureTotalWinKey), ScrollMarquee_1.MarqueeDisplayMode.FIXED);
        this.finishStateAction();
    };
    DHBSlotMarqueeController.prototype.showRetrigger = function (stateData) {
        var _this = this;
        new SimpleTimer_1.SimpleTimer(1500, function () {
            _this.finishStateAction();
        });
    };
    var _a;
    DHBSlotMarqueeController = __decorate([
        __param(0, es5_1.Inject),
        __metadata("design:paramtypes", [typeof (_a = typeof DHBSlotMarqueeView_1.DHBSlotMarqueeView !== "undefined" && DHBSlotMarqueeView_1.DHBSlotMarqueeView) === "function" && _a || Object])
    ], DHBSlotMarqueeController);
    return DHBSlotMarqueeController;
}(SlotMarqueeController_1.SlotMarqueeController));
exports.DHBSlotMarqueeController = DHBSlotMarqueeController;


/***/ }),
/* 940 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var Helper_1 = __webpack_require__(5);
var Translator_1 = __webpack_require__(25);
var SlotMarqueeView_1 = __webpack_require__(233);
var GlobalDispatcher_1 = __webpack_require__(7);
var MarqueeController_1 = __webpack_require__(941);
var MoneyFormatter_1 = __webpack_require__(16);
var ScrollMarquee_1 = __webpack_require__(119);
var SlotMarqueeConfig_1 = __webpack_require__(159);
var BigWinController_1 = __webpack_require__(93);
var SlotStates_1 = __webpack_require__(31);
var SlotMarqueeController = /** @class */ (function (_super) {
    __extends(SlotMarqueeController, _super);
    function SlotMarqueeController(view) {
        var _this = _super.call(this, view) || this;
        _this.currentMassageIndex = 0;
        return _this;
    }
    Object.defineProperty(SlotMarqueeController.prototype, "marqueeState", {
        get: function () {
            return this._marqueeState;
        },
        set: function (value) {
            this._marqueeState = value;
        },
        enumerable: true,
        configurable: true
    });
    SlotMarqueeController.prototype.init = function () {
        _super.prototype.init.call(this);
        this.config = this.gameConfig.getConfig(SlotMarqueeConfig_1.SlotMarqueeConfig);
        this.view.onMarqueeTweenCompleteSignal.add(this.onMarqueeTweenComplete, this);
    };
    SlotMarqueeController.prototype.addEventListeners = function () {
        GlobalDispatcher_1.GlobalDispatcher.addListener(this, BigWinController_1.BigWinController.BIG_WIN_COUNT_COMPLETE_EVENT, this.onBigWinCountComplete);
        GlobalDispatcher_1.GlobalDispatcher.addListener(this, BigWinController_1.BigWinController.BIG_WIN_CANCEL_COUNT__EVENT, this.onBigWinCountComplete);
    };
    SlotMarqueeController.prototype.transitionToFreeSpins = function (_data) {
        this.view.visible = true;
        this.view.transitionToFreeSpins();
        this.finishStateAction();
    };
    SlotMarqueeController.prototype.transitionToBaseGame = function (_data) {
        this.view.visible = true;
        this.view.transitionToBaseGame();
        this.finishStateAction();
    };
    SlotMarqueeController.prototype.onBigWinCountComplete = function (e) {
        var win;
        if (e.data.stateName == this.stateNames.freeSpinsAllLineWin) {
            win = e.data.stateData.featureState.feature_state.total_free_spin_win_amount;
            this.setMarquee(this.getTotalFeatureWinInfo(win, this.config.marqueeLabelFeatureTotalWinKey), ScrollMarquee_1.MarqueeDisplayMode.FIXED);
        }
        else {
            win = e.data.stateData.totalWin;
            this.setMarquee(this.getTotalWinInfo(win, this.config.marqueeLabelTotalWinKey), ScrollMarquee_1.MarqueeDisplayMode.FIXED);
        }
    };
    SlotMarqueeController.prototype.prefeatureWinning = function (data) {
        if (data.totalWin > 0) {
            this.setMarquee(this.getTotalWinInfo(data.totalWin, this.config.marqueeLabelTotalWinKey), ScrollMarquee_1.MarqueeDisplayMode.FIXED);
        }
        else {
            this.setMarquee(this.getPrefeatureNoWinInfo(this.config.marqueeLabelPrefeatureNoWinKey), ScrollMarquee_1.MarqueeDisplayMode.FIXED);
        }
        this.finishStateAction();
    };
    SlotMarqueeController.prototype.getTotalWinInfo = function (win, translatorKey) {
        return this.translator.t(translatorKey).replace('{totalWin}', this.moneyFormatter.formatMoney(win, MoneyFormatter_1.NumberDisplayMode.VALUE_ONLY));
    };
    SlotMarqueeController.prototype.getPrefeatureNoWinInfo = function (translatorKey) {
        var currentString = this.translator.t(translatorKey);
        return currentString;
    };
    SlotMarqueeController.prototype.getTotalFeatureWinInfo = function (win, translatorKey) {
        return this.translator.t(translatorKey).replace('{featureWin}', this.moneyFormatter.formatMoney(win, MoneyFormatter_1.NumberDisplayMode.VALUE_ONLY));
    };
    SlotMarqueeController.prototype.checkState = function (state) {
        if (this.config != undefined && this.config.stateToTextMap != undefined && this.config.stateToTextMap.has(state.stateName)) {
            this.currentMassageIndex = 0;
            this.marqueeState = this.currentStateName;
            var stateToTextMap = this.config.stateToTextMap.get(this.currentStateName);
            var currentString = this.translator.t(stateToTextMap[this.currentMassageIndex]);
            if (stateToTextMap.length <= 1) {
                this.setMarquee(currentString, ScrollMarquee_1.MarqueeDisplayMode.FIXED);
            }
            else {
                this.setMarquee(currentString, ScrollMarquee_1.MarqueeDisplayMode.ONCE);
            }
        }
    };
    SlotMarqueeController.prototype.onMarqueeTweenComplete = function () {
        this.setMarquee(this.getStateText(), ScrollMarquee_1.MarqueeDisplayMode.ONCE);
    };
    SlotMarqueeController.prototype.getStateText = function () {
        var stateToTextMap = this.config.stateToTextMap.get(this.marqueeState);
        if (stateToTextMap == undefined || stateToTextMap.length <= 0) {
            return Helper_1.Helper.EMPTY;
        }
        if (this.currentMassageIndex >= 0) {
            if ((this.currentMassageIndex + 1) < stateToTextMap.length) {
                this.currentMassageIndex++;
            }
            else {
                this.currentMassageIndex = 0;
            }
        }
        var currentString = this.translator.t(stateToTextMap[this.currentMassageIndex]);
        return currentString;
    };
    SlotMarqueeController.prototype.setState = function (state) {
        var isHasStateMethod = _super.prototype.setState.call(this, state);
        this.checkState(state);
        return isHasStateMethod;
    };
    SlotMarqueeController.prototype.setMarquee = function (currentString, mode) {
        if (currentString != Helper_1.Helper.EMPTY) {
            this.view.setMarqueeLabel(currentString, mode);
        }
    };
    var _a, _b, _c, _d;
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof SlotStates_1.SlotStates !== "undefined" && SlotStates_1.SlotStates) === "function" && _a || Object)
    ], SlotMarqueeController.prototype, "stateNames", void 0);
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_b = typeof Translator_1.Translator !== "undefined" && Translator_1.Translator) === "function" && _b || Object)
    ], SlotMarqueeController.prototype, "translator", void 0);
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_c = typeof MoneyFormatter_1.MoneyFormatter !== "undefined" && MoneyFormatter_1.MoneyFormatter) === "function" && _c || Object)
    ], SlotMarqueeController.prototype, "moneyFormatter", void 0);
    SlotMarqueeController = __decorate([
        __param(0, es5_1.Inject),
        __metadata("design:paramtypes", [typeof (_d = typeof SlotMarqueeView_1.SlotMarqueeView !== "undefined" && SlotMarqueeView_1.SlotMarqueeView) === "function" && _d || Object])
    ], SlotMarqueeController);
    return SlotMarqueeController;
}(MarqueeController_1.MarqueeController));
exports.SlotMarqueeController = SlotMarqueeController;


/***/ }),
/* 941 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var MarqueeView_1 = __webpack_require__(221);
var CompController_1 = __webpack_require__(43);
var MarqueeConfig_1 = __webpack_require__(222);
var MarqueeController = /** @class */ (function (_super) {
    __extends(MarqueeController, _super);
    function MarqueeController(view) {
        return _super.call(this, view) || this;
    }
    MarqueeController.prototype.init = function () {
        if (this.view != undefined) {
            this.view.initialize(this.gameConfig.getConfig(MarqueeConfig_1.MarqueeConfig));
        }
        this.finishStateAction();
    };
    var _a;
    MarqueeController = __decorate([
        __param(0, es5_1.Inject),
        __metadata("design:paramtypes", [typeof (_a = typeof MarqueeView_1.MarqueeView !== "undefined" && MarqueeView_1.MarqueeView) === "function" && _a || Object])
    ], MarqueeController);
    return MarqueeController;
}(CompController_1.CompController));
exports.MarqueeController = MarqueeController;


/***/ }),
/* 942 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var SlotMarqueeView_1 = __webpack_require__(233);
var DHBSlotMarqueeView = /** @class */ (function (_super) {
    __extends(DHBSlotMarqueeView, _super);
    function DHBSlotMarqueeView() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return DHBSlotMarqueeView;
}(SlotMarqueeView_1.SlotMarqueeView));
exports.DHBSlotMarqueeView = DHBSlotMarqueeView;


/***/ }),
/* 943 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var SlotMarqueeConfig_1 = __webpack_require__(159);
var TsMap_1 = __webpack_require__(2);
var Viewport_1 = __webpack_require__(6);
var Helper_1 = __webpack_require__(5);
var ScrollMarquee_1 = __webpack_require__(119);
var pixi_js_1 = __webpack_require__(4);
var DHBSlotMarqueeConfig = /** @class */ (function (_super) {
    __extends(DHBSlotMarqueeConfig, _super);
    function DHBSlotMarqueeConfig() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.portraitMask = new pixi_js_1.Rectangle(16, 0, 685, 40);
        _this.landscapeMask = new pixi_js_1.Rectangle(16, 0, 705, 40);
        _this.stateToTextMap = new TsMap_1.TsMap([
            ['pickFeature', ['Match3symbols']],
            ['baseGameIdle', ['spinToPlay', 'spinToPlay']],
            ['spinning', ['goodLuck']],
            ['freeSpinsIntroPopup', ['goodLuck']],
            ['freeSpinsIdle', ['goodLuck']],
            ['showRetrigger', ['retrigger']]
        ]);
        _this.coreElementOrientationConfig = new TsMap_1.TsMap([
            [
                Viewport_1.Orientation.PORTRAIT, new TsMap_1.TsMap([
                    [
                        _this.scrollMarqueeConfig.name, {
                            name: _this.scrollMarqueeConfig.name,
                            mask: _this.portraitMask,
                            position: { x: 0, y: 952 },
                        }
                    ]
                ])
            ],
            [
                Viewport_1.Orientation.LANDSCAPE, new TsMap_1.TsMap([
                    [
                        _this.scrollMarqueeConfig.name, {
                            name: _this.scrollMarqueeConfig.name,
                            mask: _this.landscapeMask,
                            position: { x: 270, y: 585 },
                        }
                    ]
                ])
            ]
        ]);
        return _this;
    }
    DHBSlotMarqueeConfig.prototype.getScrollMarqueeConfig = function () {
        return Helper_1.Helper.mergeTwoObjects(_super.prototype.getScrollMarqueeConfig.call(this), {
            isOrientationSupported: true,
            marqueeDisplayMode: ScrollMarquee_1.MarqueeDisplayMode.LOOP,
            accelerateSpeed: 1
        });
    };
    return DHBSlotMarqueeConfig;
}(SlotMarqueeConfig_1.SlotMarqueeConfig));
exports.DHBSlotMarqueeConfig = DHBSlotMarqueeConfig;


/***/ }),
/* 944 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var WinDisplayController_1 = __webpack_require__(161);
var es5_1 = __webpack_require__(0);
var LineScoreView_1 = __webpack_require__(945);
var LineScoreConfig_1 = __webpack_require__(265);
var ReelsConfig_1 = __webpack_require__(52);
var SlotStates_1 = __webpack_require__(31);
var LineScoreController = /** @class */ (function (_super) {
    __extends(LineScoreController, _super);
    function LineScoreController(view) {
        return _super.call(this, view) || this;
    }
    LineScoreController.prototype.init = function () {
        var config = this.gameConfig.getConfig(LineScoreConfig_1.LineScoreConfig);
        this.view.setReelsConfig(this.gameConfig.getConfig(ReelsConfig_1.ReelsConfig));
        this.view.initialize(config);
        this.finishStateAction();
    };
    LineScoreController.prototype.onStateChanged = function () {
        if (!this.view.initialized) {
            return;
        }
        var availableStates = [
            this.stateNames.showWinning,
            this.stateNames.showWinningLoop,
            this.stateNames.freeSpinsShowWinning
        ];
        if (availableStates.indexOf(this.currentStateName) === -1) {
            this.view.hide();
        }
        else {
            this.view.show();
        }
    };
    LineScoreController.prototype.setState = function (state) {
        this.currentStateName = state.stateName;
        this.onStateChanged();
        if (typeof this[state.stateName] === 'function') {
            this.isStateActionCompleted = false;
            this.invokeStateMethod(state);
            return true;
        }
        else {
            this.finishStateAction();
            return false;
        }
    };
    var _a, _b;
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof SlotStates_1.SlotStates !== "undefined" && SlotStates_1.SlotStates) === "function" && _a || Object)
    ], LineScoreController.prototype, "stateNames", void 0);
    LineScoreController = __decorate([
        __param(0, es5_1.Inject),
        __metadata("design:paramtypes", [typeof (_b = typeof LineScoreView_1.LineScoreView !== "undefined" && LineScoreView_1.LineScoreView) === "function" && _b || Object])
    ], LineScoreController);
    return LineScoreController;
}(WinDisplayController_1.WinDisplayController));
exports.LineScoreController = LineScoreController;


/***/ }),
/* 945 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Helper_1 = __webpack_require__(5);
var MoneyFormatter_1 = __webpack_require__(16);
var TweenBitmapTextField_1 = __webpack_require__(234);
var WinDisplayView_1 = __webpack_require__(120);
var LineScoreView = /** @class */ (function (_super) {
    __extends(LineScoreView, _super);
    function LineScoreView() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    LineScoreView.prototype.createElements = function (config) {
        _super.prototype.createElements.call(this, config);
        this.lineScoreLabel = new TweenBitmapTextField_1.TweenBitmapTextField(config.lineScoreLabel);
        this.lineScoreLabel.alpha = 1;
        this.addChild(this.lineScoreLabel);
    };
    LineScoreView.prototype.layoutElements = function () {
        _super.prototype.layoutElements.call(this);
        if (this.config.lineScoreLabel.autoscale == undefined) {
            this.lineScoreLabel.setAutoscale(this.viewport.width, this.viewport.height);
        }
    };
    LineScoreView.prototype.showPayline = function (data) {
        if (data.winData == undefined || data.winData.payout == 0) {
            this.lineScoreLabel.text = Helper_1.Helper.EMPTY;
            return;
        }
        this.setLineScoreLabel(this.moneyFormatter.formatMoney(data.winData.payout, MoneyFormatter_1.NumberDisplayMode.VALUE_ONLY));
    };
    LineScoreView.prototype.setLineScoreLabel = function (text) {
        this.lineScoreLabel.text = text;
        this.lineScoreLabel.startTween();
    };
    LineScoreView.prototype.show = function () {
        if (this.lineScoreLabel.text == Helper_1.Helper.EMPTY) {
            return;
        }
        this.visible = true;
    };
    return LineScoreView;
}(WinDisplayView_1.WinDisplayView));
exports.LineScoreView = LineScoreView;


/***/ }),
/* 946 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var SlotFreeSpinsConfig_1 = __webpack_require__(227);
var SpineAnimation_1 = __webpack_require__(63);
var TsMap_1 = __webpack_require__(2);
var Viewport_1 = __webpack_require__(6);
var DHBSlotFreeSpinsConfig = /** @class */ (function (_super) {
    __extends(DHBSlotFreeSpinsConfig, _super);
    function DHBSlotFreeSpinsConfig() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.pickAsset = 'featureCoin';
        _this.pickCoinAnimation = {
            elementType: SpineAnimation_1.SpineAnimation.elementType,
            elementConfig: {
                name: 'featureCoin',
                animationName: 'featureCoin',
            }
        };
        _this.prize = {
            elementType: SpineAnimation_1.SpineAnimation.elementType,
            elementConfig: {
                name: 'pickFeaturePrize',
                animationName: 'pickFeaturePrize',
            }
        };
        _this.triggered = {
            elementType: SpineAnimation_1.SpineAnimation.elementType,
            elementConfig: {
                name: 'featureTriggered',
                animationName: 'featureTriggered',
                isOrientationSupported: true
            }
        };
        _this.winBonus = {
            elementType: SpineAnimation_1.SpineAnimation.elementType,
            elementConfig: {
                name: 'featureWinBonus',
                animationName: 'featureWinBonus',
                isOrientationSupported: true,
            }
        };
        _this.winValueLabel = {
            name: 'pickWinValueLabel',
            key: '',
            isOrientationSupported: true,
            position: { x: 360, y: 620 },
            anchor: { x: 0.5, y: 0.5 },
            autoscale: { x: 350, y: 100 },
            style: {
                font: {
                    name: 'BigWinFont',
                    size: 90,
                },
                align: 'center',
            },
        };
        _this.coreElementOrientationConfig = new TsMap_1.TsMap([
            [
                Viewport_1.Orientation.PORTRAIT, new TsMap_1.TsMap([
                    [
                        _this.triggered.elementConfig.name, {
                            position: { x: 375, y: 650 }
                        }
                    ],
                    [
                        _this.winBonus.elementConfig.name, {
                            position: { x: 365, y: 675 },
                            scale: { x: 0.94, y: 0.94 }
                        }
                    ],
                    [
                        _this.winValueLabel.name, {
                            position: { x: 430, y: 650 }
                        }
                    ]
                ])
            ],
            [
                Viewport_1.Orientation.LANDSCAPE, new TsMap_1.TsMap([
                    [
                        _this.triggered.elementConfig.name, {
                            position: { x: 660, y: 350 }
                        }
                    ],
                    [
                        _this.winBonus.elementConfig.name, {
                            position: { x: 650, y: 370 },
                            scale: { x: 1, y: 1 }
                        }
                    ],
                    [
                        _this.winValueLabel.name, {
                            position: { x: 730, y: 345 }
                        }
                    ]
                ])
            ]
        ]);
        return _this;
    }
    return DHBSlotFreeSpinsConfig;
}(SlotFreeSpinsConfig_1.SlotFreeSpinsConfig));
exports.DHBSlotFreeSpinsConfig = DHBSlotFreeSpinsConfig;


/***/ }),
/* 947 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var WinBoxV2Controller_1 = __webpack_require__(948);
var DHBWinBoxView_1 = __webpack_require__(950);
var DHBWinBoxV2Controller = /** @class */ (function (_super) {
    __extends(DHBWinBoxV2Controller, _super);
    function DHBWinBoxV2Controller(view) {
        var _this = _super.call(this, view) || this;
        _this.isFreeSpin = false;
        return _this;
    }
    DHBWinBoxV2Controller.prototype.addEventListeners = function () {
        _super.prototype.addEventListeners.call(this);
        this.view.tutorialOutroCompleteSignal.add(this.animationComplete, this);
    };
    DHBWinBoxV2Controller.prototype.onShowWinLine = function (e) {
        var state = e.data.winData.currentState;
        this.view.showPayline(e.data, this.isFreeSpin);
    };
    DHBWinBoxV2Controller.prototype.transitionToFreeSpins = function () {
        this.isFreeSpin = true;
        _super.prototype.transitionToFreeSpins.call(this);
    };
    DHBWinBoxV2Controller.prototype.wildLockTriggered = function () {
        this.view.stopAnimating();
        this.finishStateAction();
    };
    DHBWinBoxV2Controller.prototype.tutorialOutro = function (data) {
        this.view.tutorialOutroSymbolShow();
    };
    DHBWinBoxV2Controller.prototype.animationComplete = function (e, data) {
        this.finishStateAction();
    };
    DHBWinBoxV2Controller.prototype.transitionToBaseGame = function () {
        this.isFreeSpin = false;
        _super.prototype.transitionToBaseGame.call(this);
    };
    var _a;
    DHBWinBoxV2Controller = __decorate([
        __param(0, es5_1.Inject),
        __metadata("design:paramtypes", [typeof (_a = typeof DHBWinBoxView_1.DHBWinBoxView !== "undefined" && DHBWinBoxView_1.DHBWinBoxView) === "function" && _a || Object])
    ], DHBWinBoxV2Controller);
    return DHBWinBoxV2Controller;
}(WinBoxV2Controller_1.WinBoxV2Controller));
exports.DHBWinBoxV2Controller = DHBWinBoxV2Controller;


/***/ }),
/* 948 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var ReelConfig_1 = __webpack_require__(78);
var WinDisplayV2Controller_1 = __webpack_require__(949);
var WinBoxConfig_1 = __webpack_require__(266);
var WinBoxView_1 = __webpack_require__(455);
var WinBoxV2Controller = /** @class */ (function (_super) {
    __extends(WinBoxV2Controller, _super);
    function WinBoxV2Controller(view) {
        return _super.call(this, view) || this;
    }
    WinBoxV2Controller.prototype.init = function () {
        var config = this.gameConfig.getConfig(WinBoxConfig_1.WinBoxConfig);
        this.view.setReelsConfig(this.gameConfig.getConfig(ReelConfig_1.ReelConfig));
        this.view.initialize(config);
        this.finishStateAction();
    };
    WinBoxV2Controller.prototype.startSpin = function () {
        this.view.hide();
        this.finishStateAction();
    };
    WinBoxV2Controller.prototype.startPickFeature = function () {
        this.view.hide();
        this.finishStateAction();
    };
    WinBoxV2Controller.prototype.freeSpinsIdle = function () {
        this.view.hide();
        this.finishStateAction();
    };
    WinBoxV2Controller.prototype.transitionToBaseGame = function () {
        this.view.hide();
        this.finishStateAction();
    };
    WinBoxV2Controller.prototype.transitionToFreeSpins = function () {
        this.view.hide();
        this.finishStateAction();
    };
    WinBoxV2Controller.prototype.transitionToBonusSpins = function () {
        this.view.hide();
        this.finishStateAction();
    };
    WinBoxV2Controller.prototype.skip_freeSpinsAllLineWin = function () {
        this.view.hide();
        this.finishStateAction();
    };
    WinBoxV2Controller.prototype.skip_freeSpinsShowWinning = function () {
        this.view.hide();
        this.finishStateAction();
    };
    var _a;
    WinBoxV2Controller = __decorate([
        __param(0, es5_1.Inject),
        __metadata("design:paramtypes", [typeof (_a = typeof WinBoxView_1.WinBoxView !== "undefined" && WinBoxView_1.WinBoxView) === "function" && _a || Object])
    ], WinBoxV2Controller);
    return WinBoxV2Controller;
}(WinDisplayV2Controller_1.WinDisplayV2Controller));
exports.WinBoxV2Controller = WinBoxV2Controller;


/***/ }),
/* 949 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var WinDisplayView_1 = __webpack_require__(120);
var WinDisplayConfig_1 = __webpack_require__(239);
var CompController_1 = __webpack_require__(43);
var GlobalDispatcher_1 = __webpack_require__(7);
var ReelConfig_1 = __webpack_require__(78);
var WinDisplayV2Controller = /** @class */ (function (_super) {
    __extends(WinDisplayV2Controller, _super);
    function WinDisplayV2Controller(view) {
        return _super.call(this, view) || this;
    }
    WinDisplayV2Controller.prototype.init = function () {
        var config = this.gameConfig.getConfig(WinDisplayConfig_1.WinDisplayConfig);
        this.view.setReelsConfig(this.gameConfig.getConfig(ReelConfig_1.ReelConfig));
        this.view.initialize(config);
        this.finishStateAction();
    };
    WinDisplayV2Controller.prototype.addEventListeners = function () {
        GlobalDispatcher_1.GlobalDispatcher.addListener(this, WinDisplayV2Controller.SHOW_WIN_LINE, this.onShowWinLine);
    };
    WinDisplayV2Controller.prototype.baseGameIdle = function () {
        this.view.hide();
        this.finishStateAction();
    };
    WinDisplayV2Controller.prototype.onShowWinLine = function (e) {
        this.view.showPayline(e.data);
    };
    var _a;
    WinDisplayV2Controller.SHOW_WIN_LINE = 'paylinesShowWinLine';
    WinDisplayV2Controller.SHOW_WIN_TABLE = 'showWinTable';
    WinDisplayV2Controller = __decorate([
        __param(0, es5_1.Inject),
        __metadata("design:paramtypes", [typeof (_a = typeof WinDisplayView_1.WinDisplayView !== "undefined" && WinDisplayView_1.WinDisplayView) === "function" && _a || Object])
    ], WinDisplayV2Controller);
    return WinDisplayV2Controller;
}(CompController_1.CompController));
exports.WinDisplayV2Controller = WinDisplayV2Controller;


/***/ }),
/* 950 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var pixi_js_1 = __webpack_require__(4);
var Animation_1 = __webpack_require__(26);
var WinBoxView_1 = __webpack_require__(455);
var SimpleTimer_1 = __webpack_require__(15);
var MiniSignal = __webpack_require__(3);
var DHBWinBoxView = /** @class */ (function (_super) {
    __extends(DHBWinBoxView, _super);
    function DHBWinBoxView() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.tutorialOutroCompleteSignal = new MiniSignal();
        _this.tutorialCount = 0;
        return _this;
    }
    DHBWinBoxView.prototype.createElements = function (config) {
        _super.prototype.createElements.call(this, config);
        this.createMultiplier(1);
    };
    DHBWinBoxView.prototype.createMultiplier = function (number) {
        this.freeSpinAnimations = new Array();
        for (var i = 0; i < number; i++) {
            var animation = void 0;
            animation = Animation_1.Animation.createSpineAnimation(this.config.freeSpinAnimationFiles);
            animation.visible = false;
            this.freeSpinAnimations.push(animation);
            this.animationContainer.addChild(animation);
        }
    };
    DHBWinBoxView.prototype.showPayline = function (data, isFreeSpin) {
        var _this = this;
        if (isFreeSpin === void 0) { isFreeSpin = false; }
        if (!isFreeSpin) {
            return _super.prototype.showPayline.call(this, data);
        }
        // this.visible = true;
        // this.stopAnimating();
        _super.prototype.showPayline.call(this, data);
        if (!data.winData.wildMultiplier || data.winData.wildMultiplier.length === 0) {
            return;
        }
        var reelDefinition = this.reelsConfig.reelDefinition;
        var width = reelDefinition.symbol.width;
        var height = reelDefinition.symbol.height;
        var winBoxIndex = 0;
        data.winData.winTable.forEach(function (reel, i) {
            if (i !== _this.config.freeSpinMultiplierReelId) {
                if (data.winData.winningCombinations[_this.config.freeSpinMultiplierReelId].length < 1 && i == 1) {
                    // don't skip if no winning symbol on reel 2
                }
                else {
                    return;
                }
            }
            var orientationData = _this.getSingleReelLayoutData(0, i);
            reel.forEach(function (value, j) {
                if (!value || (value && _this.isSpecialSymbol(data.winData.symbol))) {
                    return;
                }
                var xStart = orientationData.position.x + (width / 2) + _this.config.boxOffset.x;
                var yStart = orientationData.position.y + (height / 2) + (height * j) + _this.config.boxOffset.y;
                var position = new pixi_js_1.Point(xStart, yStart);
                var animation = _this.freeSpinAnimations[winBoxIndex];
                if (!animation) { // create new animaion and get it again.
                    _this.createMultiplier(1);
                    animation = _this.freeSpinAnimations[winBoxIndex];
                }
                animation.position = position;
                animation.visible = true;
                animation.updateTransform();
                if (_this.isSpineAnimation(animation)) {
                    animation.state.setAnimation(0, _this.config.freeSpinAnimationName, _this.config.loop);
                }
                else {
                    animation.play();
                }
                winBoxIndex++;
            });
        });
    };
    DHBWinBoxView.prototype.tutorialOutroSymbolShow = function () {
        var _this = this;
        this.tutorialCount = 0;
        var count = 0;
        var ms = 0;
        var _loop_1 = function (i) {
            var pos = 4;
            var _loop_2 = function (j) {
                if (i % 2 == 0) {
                    new SimpleTimer_1.SimpleTimer(ms, function () {
                        _this.showSymbolFromCurrentView(j, i);
                    });
                }
                else {
                    var index_1 = pos - j;
                    new SimpleTimer_1.SimpleTimer(ms, function () {
                        _this.showSymbolFromCurrentView(index_1, i);
                    });
                }
                count++;
                ms = 140 * count;
            };
            for (var j = 0; j < 5; j++) {
                _loop_2(j);
            }
        };
        for (var i = 0; i < 4; i++) {
            _loop_1(i);
        }
    };
    DHBWinBoxView.prototype.showSymbolFromCurrentView = function (reelIndex, symbolIndex) {
        var _this = this;
        var reelDefinition = this.reelsConfig.reelDefinition;
        var width = reelDefinition.symbol.width;
        var height = reelDefinition.symbol.height;
        var orientationData = this.getSingleReelLayoutData(0, reelIndex);
        var xStart = orientationData.position.x + (width / 2) + this.config.boxOffset.x;
        var yStart = orientationData.position.y + (height / 2) + (height * symbolIndex) + this.config.boxOffset.y;
        var position = new pixi_js_1.Point(xStart, yStart);
        var animation = this.animations[this.tutorialCount];
        if (!animation) { // create new animaion and get it again.
            this.createBoxes(1);
            animation = this.animations[this.tutorialCount];
        }
        this.animations.push(animation);
        this.animationContainer.addChild(animation);
        animation.position = position;
        animation.visible = true;
        animation.updateTransform();
        animation.state.setAnimation(0, this.config.animationName, false);
        var coinAnimation = Animation_1.Animation.createSpineAnimation('RevealCoins');
        this.animationContainer.addChild(coinAnimation);
        coinAnimation.position = position;
        coinAnimation.visible = true;
        coinAnimation.updateTransform();
        coinAnimation.state.setAnimation(0, 'RevealCoins', false);
        coinAnimation.state.tracks[0].listener = {
            complete: function () {
                _this.destroyCoinAnimation(coinAnimation);
            }
        };
        this.tutorialCount++;
        if (this.tutorialCount == 20) {
            animation.state.tracks[0].listener = {
                complete: function () {
                    _this.tutorialComplete();
                }
            };
        }
    };
    DHBWinBoxView.prototype.destroyCoinAnimation = function (element) {
        new SimpleTimer_1.SimpleTimer(200, function () {
            element.state.tracks[0].listener = {};
            element.state.setEmptyAnimation(0, 0);
            element.parent.removeChild(element);
        });
    };
    DHBWinBoxView.prototype.tutorialComplete = function () {
        this.tutorialOutroCompleteSignal.dispatch();
        this.stopAnimating();
    };
    DHBWinBoxView.prototype.stopAnimating = function () {
        var _this = this;
        _super.prototype.stopAnimating.call(this);
        this.freeSpinAnimations.forEach(function (animation) {
            if (_this.isSpineAnimation(animation)) {
                animation.state.setEmptyAnimation(0, 0);
            }
            else {
                animation.gotoAndStop(0);
            }
            animation.visible = false;
        });
    };
    DHBWinBoxView.prototype.getAssetsList = function () {
        return [
            {
                assetKey: 'Highlight',
                assetURL: 'assets/winDisplay/Highlight.json'
            },
            {
                assetKey: 'Wild_Multiplier',
                assetURL: 'assets/winDisplay/Wild_Multiplier.json'
            },
            {
                assetKey: 'RevealCoins',
                assetURL: 'assets/winDisplay/RevealCoins.json'
            }
        ];
    };
    return DHBWinBoxView;
}(WinBoxView_1.WinBoxView));
exports.DHBWinBoxView = DHBWinBoxView;


/***/ }),
/* 951 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var WinBoxConfig_1 = __webpack_require__(266);
var DHBWinBoxConfig = /** @class */ (function (_super) {
    __extends(DHBWinBoxConfig, _super);
    function DHBWinBoxConfig() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.animationFiles = 'Highlight';
        _this.animationName = 'Symbol_Highlight';
        _this.freeSpinAnimationFiles = 'Wild_Multiplier';
        _this.freeSpinAnimationName = 'Wild_Multiplier';
        _this.freeSpinMultiplierReelId = 2;
        _this.loop = false;
        _this.boxOffset = {
            x: 0,
            y: 0
        };
        _this.defaultPoolSize = 20; // 2 line
        return _this;
    }
    return DHBWinBoxConfig;
}(WinBoxConfig_1.WinBoxConfig));
exports.DHBWinBoxConfig = DHBWinBoxConfig;


/***/ }),
/* 952 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var SoundManager_1 = __webpack_require__(13);
var GlobalDispatcher_1 = __webpack_require__(7);
var AnimationViewController_1 = __webpack_require__(398);
var ReelController_1 = __webpack_require__(156);
var ReelConfig_1 = __webpack_require__(78);
var DHBAnimationView_1 = __webpack_require__(953);
var DHBAnimationViewController = /** @class */ (function (_super) {
    __extends(DHBAnimationViewController, _super);
    function DHBAnimationViewController(view) {
        var _this = _super.call(this, view) || this;
        _this.isAnticipation = false;
        _this.isRespinTriggered = false;
        return _this;
    }
    DHBAnimationViewController.prototype.init = function () {
        this.view.setReelsConfig(this.gameConfig.getConfig(ReelConfig_1.ReelConfig));
        _super.prototype.init.call(this);
    };
    DHBAnimationViewController.prototype.addEventListeners = function () {
        GlobalDispatcher_1.GlobalDispatcher.addListener(this, ReelController_1.ReelController.ANTICIPATE_REEL_NOTIFICATION, this.onAnticipation);
        GlobalDispatcher_1.GlobalDispatcher.addListener(this, ReelController_1.ReelController.ANTICIPATE_END_NOTIFICATION, this.onAnticipationEnd);
        this.view.animationCompleteSignal.add(this.animationComplete, this);
    };
    DHBAnimationViewController.prototype.gameStartTutorial = function (data) {
        // wait animationComplete finishStateAction
    };
    DHBAnimationViewController.prototype.animationComplete = function (e, data) {
        switch (e) {
            case 'animation':
                // respin trigger animation
                this.finishStateAction();
                break;
            case 'Intro Splash':
                this.finishStateAction();
                break;
            default:
                break;
        }
    };
    DHBAnimationViewController.prototype.onAnticipation = function (event) {
        if (!this.isAnticipation) {
            this.isAnticipation = true;
        }
        if (this.soundManager.isPlaying('reelAnticipationAudio')) {
            this.soundManager.stop('reelAnticipationAudio');
        }
        this.soundManager.play('reelAnticipationAudio', SoundManager_1.AudioTrackName.EFFECT, false);
        this.anticipationReelId = event.data + 1;
        this.view.onAnticipationStart(this.anticipationReelId);
    };
    DHBAnimationViewController.prototype.onAnticipationEnd = function (event) {
        this.isAnticipation = false;
        this.view.onAnticipationEnd();
        this.soundManager.stop('reelAnticipationAudio');
    };
    DHBAnimationViewController.prototype.startSpin = function () {
        this.isRespinTriggered = false;
        this.finishStateAction();
    };
    DHBAnimationViewController.prototype.prefeatureWinning = function (data) {
        if (data.pick != undefined) {
            //pick game triggered with all line win
        }
        else if (data.respin != undefined && !this.isRespinTriggered && data.featureState == undefined) {
            //startFreeRespin
        }
        else if (data.featureState) {
            var featureTriggerAudio = data.featureState.subfeatures.length >= 2 ? 'featureTriggerLargeAudio' : 'featureTriggerAudio';
            this.soundManager.play(featureTriggerAudio);
        }
        this.finishStateAction();
    };
    DHBAnimationViewController.prototype.startFreeRespin = function (data) {
        if (!this.isRespinTriggered) {
            this.isRespinTriggered = true;
            this.view.playFeatureTrigger();
        }
        else {
            this.finishStateAction();
        }
    };
    DHBAnimationViewController.prototype.freeRespinReels = function (data) {
        if (this.isRespinTriggered) {
            this.view.freeRespinReels();
        }
        this.finishStateAction();
    };
    DHBAnimationViewController.prototype.skipState = function (state) {
        if (this.isAnticipation) {
            this.onAnticipationEnd();
        }
        _super.prototype.skipState.call(this, state);
    };
    var _a;
    DHBAnimationViewController = __decorate([
        __param(0, es5_1.Inject),
        __metadata("design:paramtypes", [typeof (_a = typeof DHBAnimationView_1.DHBAnimationView !== "undefined" && DHBAnimationView_1.DHBAnimationView) === "function" && _a || Object])
    ], DHBAnimationViewController);
    return DHBAnimationViewController;
}(AnimationViewController_1.AnimationViewController));
exports.DHBAnimationViewController = DHBAnimationViewController;


/***/ }),
/* 953 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var AnimationView_1 = __webpack_require__(241);
var DHBAnimationView = /** @class */ (function (_super) {
    __extends(DHBAnimationView, _super);
    function DHBAnimationView() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.anticipationReel = 0;
        return _this;
    }
    DHBAnimationView.prototype.setReelsConfig = function (config) {
        this.reelsConfig = config;
    };
    Object.defineProperty(DHBAnimationView.prototype, "layoutData", {
        get: function () {
            var orientationLayout;
            if (this.reelsConfig.orientationLayoutData) {
                orientationLayout = this.reelsConfig.orientationLayoutData.get(this.viewport.properOrientation);
            }
            var layoutData = orientationLayout || this.reelsConfig.defaultLayoutData;
            layoutData.scale = layoutData.scale || 1;
            if (!layoutData) {
                throw new Error('can\'t layout config.');
            }
            return layoutData;
        },
        enumerable: true,
        configurable: true
    });
    DHBAnimationView.prototype.playFeatureTrigger = function () {
        this.animations[2].alpha = 1;
        this.playAnimation('featureTriggered', this, false);
    };
    DHBAnimationView.prototype.freeRespinReels = function () {
        this.animations[2].setEmptyAnimation(0);
        this.animations[2].alpha = 0;
    };
    DHBAnimationView.prototype.onAnticipationStart = function (reelId) {
        this.anticipationReel = reelId;
        this.anticipationPositionUpdate();
        //reel animation
        this.animations[0].visible = true;
        this.playAnimation('ReelAnticipation', this, false);
    };
    DHBAnimationView.prototype.onAnticipationEnd = function () {
        this.animations[0].stop();
        this.animations[0].visible = false;
    };
    DHBAnimationView.prototype.anticipationPositionUpdate = function () {
        var reelWidth = this.reelsConfig.symbolDefinition.generalSymbol.width;
        this.animations[0].position.x = this.layoutData.position.x + (reelWidth / 2 + this.anticipationReel * reelWidth) * this.layoutData.scale;
    };
    DHBAnimationView.prototype.portraitLayout = function () {
        _super.prototype.portraitLayout.call(this);
        this.anticipationPositionUpdate();
    };
    DHBAnimationView.prototype.landscapeLayout = function () {
        _super.prototype.landscapeLayout.call(this);
        this.anticipationPositionUpdate();
    };
    DHBAnimationView.prototype.getAssetsList = function () {
        return [
            {
                assetKey: 'reelAnticipation',
                assetURL: 'assets/animationArea/ReelAnticipation.json'
            },
            {
                assetKey: 'IntroSplash',
                assetURL: 'assets/animationArea/{locale}/IntroSplash.json'
            },
            {
                assetKey: 'reelAnticipationAudio',
                assetURL: 'assets/sound/game/ReelAnticipation.mp3'
            },
            {
                assetKey: 'featureTriggerAudio',
                assetURL: 'assets/sound/game/Feature_Trigger.mp3'
            },
            {
                assetKey: 'featureTriggerLargeAudio',
                assetURL: 'assets/sound/game/Feature_Trigger_Large.mp3'
            }
        ];
    };
    return DHBAnimationView;
}(AnimationView_1.AnimationView));
exports.DHBAnimationView = DHBAnimationView;


/***/ }),
/* 954 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var AnimationViewConfig_1 = __webpack_require__(152);
var SpineAnimation_1 = __webpack_require__(63);
var animationViewMapConfig = __webpack_require__(955);
var TsMap_1 = __webpack_require__(2);
var Viewport_1 = __webpack_require__(6);
var DHBAnimationViewConfig = /** @class */ (function (_super) {
    __extends(DHBAnimationViewConfig, _super);
    function DHBAnimationViewConfig() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.name = 'animationView';
        _this.animations = [
            {
                elementType: SpineAnimation_1.SpineAnimation.elementType,
                elementConfig: {
                    name: 'reelAnticipation',
                    isOrientationSupported: true,
                    animationName: 'reelAnticipation',
                    position: { x: null, y: 305 },
                    stateAnimationMap: animationViewMapConfig.anticipationMap
                }
            },
            {
                elementType: SpineAnimation_1.SpineAnimation.elementType,
                elementConfig: {
                    name: 'IntroSplash',
                    isOrientationSupported: true,
                    animationName: 'IntroSplash',
                    stateAnimationMap: animationViewMapConfig.introMap
                }
            },
            {
                elementType: SpineAnimation_1.SpineAnimation.elementType,
                elementConfig: {
                    name: 'featureTriggered',
                    isOrientationSupported: true,
                    animationName: 'featureTriggered',
                    stateAnimationMap: animationViewMapConfig.respinTriggerMap
                }
            }
        ];
        _this.coreElementOrientationConfig = new TsMap_1.TsMap([
            [
                Viewport_1.Orientation.PORTRAIT, new TsMap_1.TsMap([
                    [
                        'reelAnticipation', {
                            position: { x: null, y: 620 },
                            scale: { x: 0.94, y: 0.94 }
                        }
                    ],
                    [
                        'IntroSplash', {
                            position: { x: 360, y: 685 }
                        }
                    ],
                    [
                        'featureTriggered', {
                            position: { x: 375, y: 600 }
                        }
                    ]
                ])
            ],
            [
                Viewport_1.Orientation.LANDSCAPE, new TsMap_1.TsMap([
                    [
                        'reelAnticipation', {
                            position: { x: null, y: 305 },
                            scale: { x: 1, y: 1 }
                        }
                    ],
                    [
                        'IntroSplash', {
                            position: { x: 650, y: 370 }
                        }
                    ],
                    [
                        'featureTriggered', {
                            position: { x: 660, y: 300 }
                        }
                    ]
                ])
            ]
        ]);
        return _this;
    }
    return DHBAnimationViewConfig;
}(AnimationViewConfig_1.AnimationViewConfig));
exports.DHBAnimationViewConfig = DHBAnimationViewConfig;


/***/ }),
/* 955 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var TsMap_1 = __webpack_require__(2);
exports.anticipationMap = new TsMap_1.TsMap([
    [
        'ReelAnticipation', {
            0: [
                { name: 'ReelAnticipation', loop: true }
            ]
        }
    ],
]);
exports.introMap = new TsMap_1.TsMap([
    [
        'gameStartTutorial', {
            0: [
                { name: 'Intro Splash', loop: false, stop: true },
            ]
        }
    ],
    [
        'tutorialOutro', {
            0: 'hide'
        }
    ],
]);
exports.respinTriggerMap = new TsMap_1.TsMap([
    [
        'featureTriggered', {
            0: [
                { name: 'animation', loop: false, stop: true },
            ]
        }
    ]
]);


/***/ }),
/* 956 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var TsMap_1 = __webpack_require__(2);
var MLUIPaytableConfig_1 = __webpack_require__(261);
var WebImageElement_1 = __webpack_require__(69);
var WebElementFactory_1 = __webpack_require__(45);
var WebImageSlideshowElement_1 = __webpack_require__(406);
var DHBMLUILineConfig_1 = __webpack_require__(957);
var DHBMLUIPaytableConfig = /** @class */ (function (_super) {
    __extends(DHBMLUIPaytableConfig, _super);
    /**
     * LocalisationKeys required to join this game
     */
    function DHBMLUIPaytableConfig() {
        var _this = _super.call(this) || this;
        //set production year
        _this.productionYear = '2020';
        /**
         * Line config for line game
         */
        _this.lineConfig = DHBMLUILineConfig_1.DHBMLUILineConfig.getLineConfig();
        _this.localisationKeys.push('paytable_Game', 'paytable_LineGame');
        return _this;
    }
    /**
     * symbol payout setting
     */
    DHBMLUIPaytableConfig.prototype.getPayoutSetting = function () {
        return new TsMap_1.TsMap([
            [
                'WILD', []
            ],
            [
                'SCATTER', []
            ],
            [
                'PIC1', [
                    { num: 5, multi: 800 },
                    { num: 4, multi: 125 },
                    { num: 3, multi: 20 },
                    { num: 2, multi: 5 }
                ]
            ],
            [
                'PIC2', [
                    { num: 5, multi: 200 },
                    { num: 4, multi: 25 },
                    { num: 3, multi: 10 },
                    { num: 2, multi: 3 }
                ]
            ],
            [
                'PIC3', [
                    { num: 5, multi: 80 },
                    { num: 4, multi: 20 },
                    { num: 3, multi: 5 }
                ]
            ],
            [
                'PIC4', [
                    { num: 5, multi: 80 },
                    { num: 4, multi: 20 },
                    { num: 3, multi: 5 }
                ]
            ],
            [
                'PIC5', [
                    { num: 5, multi: 60 },
                    { num: 4, multi: 10 },
                    { num: 3, multi: 5 }
                ]
            ],
            [
                'A', [
                    { num: 5, multi: 60 },
                    { num: 4, multi: 10 },
                    { num: 3, multi: 5 }
                ]
            ],
            [
                'K', [
                    { num: 5, multi: 60 },
                    { num: 4, multi: 10 },
                    { num: 3, multi: 5 }
                ]
            ],
            [
                'Q', [
                    { num: 5, multi: 50 },
                    { num: 4, multi: 8 },
                    { num: 3, multi: 3 }
                ]
            ],
            [
                'J', [
                    { num: 5, multi: 50 },
                    { num: 4, multi: 8 },
                    { num: 3, multi: 3 }
                ]
            ],
            [
                'T', [
                    { num: 5, multi: 50 },
                    { num: 4, multi: 8 },
                    { num: 3, multi: 3 }
                ]
            ]
        ]);
    };
    /**
     * Portrait screen config
     */
    DHBMLUIPaytableConfig.prototype.getPortraitGameElements = function () {
        var payoutSetting = this.getPayoutSetting();
        return [
            // game introduction
            WebElementFactory_1.WebElementFactory.createWebElementBlock({
                type: WebElementFactory_1.WebFactoryElementType.WEB_ELEMENT_BLOCK,
                blockStyle: "\n\t\t\t\t\twidth: 100%;\n\t\t\t\t",
                config: [
                    // game logo
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_ELEMENT_BLOCK,
                        blockStyle: "\n\t\t\t\t\t\t\tposition: relative;\n\t\t\t\t\t\t\tmargin: auto;\n\t\t\t\t\t\t\twidth: 350px;\n\t\t\t\t\t\t\theight: 150px;\n\t\t\t\t\t\t",
                        config: [
                            {
                                type: WebElementFactory_1.WebFactoryElementType.WEB_IMAGE_ELEMENT,
                                blockStyle: "\n\t\t\t\t\t\t\t\t\tposition: relative;\n\t\t\t\t\t\t\t\t\tmargin: auto;\n\t\t\t\t\t\t\t\t",
                                imageSource: WebImageElement_1.ImageSourceType.TEXTURE,
                                imageData: {
                                    imagePath: 'assets/helpscreens/{locale}/gameLogo.png',
                                    width: 500,
                                    height: 204,
                                    ratio: 0.7
                                },
                                imageStyle: "\n\t\t\t\t\t\t\t\t\tmargin: auto;\n\t\t\t\t\t\t\t\t"
                            },
                        ]
                    },
                    // game description
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_CONTENT_ELEMENT,
                        languageKey: 'content1',
                        blockStyle: "\n\t\t\t\t\t\t\twidth: 100%;\n\t\t\t\t\t\t",
                        contentStyle: "\n\t\t\t\t\t\t\tlist-style-type:none;\n\t\t\t\t\t\t\tmargin-bottom: 14px;\n\t\t\t\t\t\t\ttext-align: center;\n\t\t\t\t\t\t"
                    }
                ]
            }),
            // game features Da Hong Bao Extra Bonus
            WebElementFactory_1.WebElementFactory.createWebElementBlock({
                type: WebElementFactory_1.WebFactoryElementType.WEB_ELEMENT_BLOCK,
                blockStyle: "\n\t\t\t\t\ttext-align: center;\n\t\t\t\t\twidth: 100%;\n\t\t\t\t",
                config: [
                    this.getPortraitWebLineConfig(),
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_ELEMENT,
                        languageKey: 'title2',
                        blockStyle: this.getPortraitTitleStyle()
                    },
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_ELEMENT_BLOCK,
                        blockStyle: "\n\t\t\t\t\t\t\ttext-align: left;\n\t\t\t\t\t\t\twidth: 100%;\n\t\t\t\t\t\t",
                        config: [
                            {
                                type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_ELEMENT,
                                languageKey: 'featureSubTitle1',
                                blockStyle: "\n\t\t\t\t\t\t\t\t\tdisplay: inline-block;\n\t\t\t\t\t\t\t\t\tmax-width: 445px;\n\t\t\t\t\t\t\t\t",
                            },
                            // new asset
                            {
                                type: WebElementFactory_1.WebFactoryElementType.WEB_IMAGE_ELEMENT,
                                blockStyle: "\n\t\t\t\t\t\t\t\t\tposition: relative;\n\t\t\t\t\t\t\t\t\tdisplay: inline-block;\n\t\t\t\t\t\t\t\t\tmargin: 0px 0px 0px 10px;\n\t\t\t\t\t\t\t\t\twidth: 10px;\n\t\t\t\t\t\t\t\t\theight: 45px;\n\t\t\t\t\t\t\t\t",
                                imageSource: WebImageElement_1.ImageSourceType.TEXTURE,
                                imageData: {
                                    imagePath: 'assets/helpscreens/{locale}/new.png',
                                    width: 85,
                                    height: 85,
                                    ratio: 0.6
                                }
                            },
                        ]
                    },
                    // extra bonus schematic diagram
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_ELEMENT_BLOCK,
                        blockStyle: "\n\t\t\t\t\t\t\tposition: relative;\n\t\t\t\t\t\t\tmargin: auto;\n\t\t\t\t\t\t\twidth: 340px;\n\t\t\t\t\t\t\theight: 420px;\n\t\t\t\t\t\t",
                        config: [
                            {
                                type: WebElementFactory_1.WebFactoryElementType.WEB_IMAGE_ELEMENT,
                                blockStyle: "\n\t\t\t\t\t\t\t\t\tposition: relative;\n\t\t\t\t\t\t\t\t\tmargin: auto;\n\t\t\t\t\t\t\t\t",
                                imageSource: WebImageElement_1.ImageSourceType.TEXTURE,
                                imageData: {
                                    imagePath: 'assets/helpscreens/feature.jpg',
                                    width: 490,
                                    height: 600,
                                    ratio: 0.7
                                },
                                imageStyle: 'margin: auto;'
                            },
                        ]
                    },
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_CONTENT_ELEMENT,
                        languageKey: 'content2-1',
                        contentStyle: "\n\t\t\t\t\t\t\tlist-style-type:none;\n\t\t\t\t\t\t\tmargin-bottom: 14px;\n\t\t\t\t\t\t"
                    },
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_CONTENT_ELEMENT,
                        languageKey: 'content2-2'
                    }
                ]
            }),
            // game features lucky bonus re-spins
            WebElementFactory_1.WebElementFactory.createWebElementBlock({
                type: WebElementFactory_1.WebFactoryElementType.WEB_ELEMENT_BLOCK,
                blockStyle: "\n\t\t\t\ttext-align: center;\n\t\t\t\twidth: 100%;\n\t\t\t\t",
                config: [
                    WebElementFactory_1.WebElementFactory.createWebLineElement({
                        type: WebElementFactory_1.WebFactoryElementType.WEB_LINE_ELEMENT,
                        show: false
                    }),
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_ELEMENT,
                        languageKey: 'featureSubTitle2',
                        blockStyle: "\n\t\t\t\t\t\t\ttext-align: left;\n\t\t\t\t\t\t",
                    },
                    // lucky bonus re-spins schematic diagram
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_ELEMENT_BLOCK,
                        blockStyle: "\n\t\t\t\t\t\t\tposition: relative;\n\t\t\t\t\t\t\tmargin: auto;\n\t\t\t\t\t\t\twidth: 340px;\n\t\t\t\t\t\t\theight: 250px;\n\t\t\t\t\t\t",
                        config: [
                            {
                                type: WebElementFactory_1.WebFactoryElementType.WEB_IMAGE_ELEMENT,
                                blockStyle: "\n\t\t\t\t\t\t\t\t\tposition: relative;\n\t\t\t\t\t\t\t\t\tmargin: auto;\n\t\t\t\t\t\t\t\t",
                                imageSource: WebImageElement_1.ImageSourceType.TEXTURE,
                                imageData: {
                                    imagePath: 'assets/helpscreens/luckyBonus.jpg',
                                    width: 490,
                                    height: 360,
                                    ratio: 0.7
                                },
                                imageStyle: 'margin: auto;'
                            },
                        ]
                    },
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_CONTENT_ELEMENT,
                        languageKey: 'content2-3',
                        contentStyle: "\n\t\t\t\t\t\t\tlist-style-type:none;\n\t\t\t\t\t\t\tmargin-bottom: 14px;\n\t\t\t\t\t\t"
                    }
                ]
            }),
            // game features free spins features
            WebElementFactory_1.WebElementFactory.createWebElementBlock({
                type: WebElementFactory_1.WebFactoryElementType.WEB_ELEMENT_BLOCK,
                blockStyle: "\n\t\t\t\ttext-align: center;\n\t\t\t\twidth: 100%;\n\t\t\t\t",
                config: [
                    WebElementFactory_1.WebElementFactory.createWebLineElement({
                        type: WebElementFactory_1.WebFactoryElementType.WEB_LINE_ELEMENT,
                        show: false
                    }),
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_ELEMENT,
                        languageKey: 'featureSubTitle3',
                        blockStyle: "\n\t\t\t\t\t\t\ttext-align: left;\n\t\t\t\t\t\t",
                    },
                    // free spins features schematic diagram
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_IMAGE_SLIDESHOW,
                        TransitionEffectType: WebImageSlideshowElement_1.TransitionEffectType.RIGHT_TO_LEFT,
                        dwellTime: 4,
                        transformTime: 1,
                        blockStyle: "\n\t\t\t\t\t\t\tposition: relative;\n\t\t\t\t\t\t\tmargin: auto;\n\t\t\t\t\t\t\toverflow: hidden;\n\t\t\t\t\t\t\theight: 300px;\n\t\t\t\t\t\t\twidth: 447px;\n\t\t\t\t\t\t\tleft: 20px;\n\t\t\t\t\t\t",
                        pages: [
                            WebElementFactory_1.WebElementFactory.createWebElementBlock({
                                type: WebElementFactory_1.WebFactoryElementType.WEB_ELEMENT_BLOCK,
                                config: [
                                    {
                                        type: WebElementFactory_1.WebFactoryElementType.WEB_IMAGE_ELEMENT,
                                        imageSource: WebImageElement_1.ImageSourceType.TEXTURE,
                                        imageData: {
                                            imagePath: 'assets/helpscreens/slideshowFeature1.png',
                                            width: 450,
                                            height: 593,
                                            ratio: 0.7
                                        },
                                        imageStyle: "\n\t\t\t\t\t\t\t\t\t\t\tmargin: auto;\n\t\t\t\t\t\t\t\t\t\t"
                                    }
                                ]
                            }),
                            WebElementFactory_1.WebElementFactory.createWebElementBlock({
                                type: WebElementFactory_1.WebFactoryElementType.WEB_ELEMENT_BLOCK,
                                config: [
                                    {
                                        type: WebElementFactory_1.WebFactoryElementType.WEB_IMAGE_ELEMENT,
                                        blockStyle: "\n\t\t\t\t\t\t\t\t\t\t\tposition: relative;\n\t\t\t\t\t\t\t\t\t\t\tmargin: auto;\n\t\t\t\t\t\t\t\t\t\t",
                                        imageSource: WebImageElement_1.ImageSourceType.TEXTURE,
                                        imageData: {
                                            imagePath: 'assets/helpscreens/slideshowFeature2.png',
                                            width: 450,
                                            height: 593,
                                            ratio: 0.7
                                        },
                                        imageStyle: "\n\t\t\t\t\t\t\t\t\t\t\tmargin: auto;\n\t\t\t\t\t\t\t\t\t\t"
                                    }
                                ]
                            }),
                            WebElementFactory_1.WebElementFactory.createWebElementBlock({
                                type: WebElementFactory_1.WebFactoryElementType.WEB_ELEMENT_BLOCK,
                                config: [
                                    {
                                        type: WebElementFactory_1.WebFactoryElementType.WEB_IMAGE_ELEMENT,
                                        blockStyle: "\n\t\t\t\t\t\t\t\t\t\t\tposition: relative;\n\t\t\t\t\t\t\t\t\t\t\tmargin: auto;\n\t\t\t\t\t\t\t\t\t\t",
                                        imageSource: WebImageElement_1.ImageSourceType.TEXTURE,
                                        imageData: {
                                            imagePath: 'assets/helpscreens/slideshowFeature3.png',
                                            width: 450,
                                            height: 593,
                                            ratio: 0.7
                                        },
                                        imageStyle: "\n\t\t\t\t\t\t\t\t\t\t\tmargin: auto;\n\t\t\t\t\t\t\t\t\t\t"
                                    }
                                ]
                            })
                        ]
                    },
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_CONTENT_ELEMENT,
                        languageKey: 'content2-4',
                        contentStyle: "\n\t\t\t\t\t\t\tlist-style-type:none;\n\t\t\t\t\t\t\tmargin-bottom: 14px;\n\t\t\t\t\t\t"
                    },
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_CONTENT_ELEMENT,
                        languageKey: 'content2-4-1'
                    },
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_CONTENT_ELEMENT,
                        languageKey: 'content2-4-2',
                        contentStyle: "\n\t\t\t\t\t\t\tlist-style-type:none;\n\t\t\t\t\t\t\tmargin-bottom: 14px;\n\t\t\t\t\t\t"
                    }
                ]
            }),
            // symbols & pay value
            WebElementFactory_1.WebElementFactory.createWebElementBlock({
                type: WebElementFactory_1.WebFactoryElementType.WEB_ELEMENT_BLOCK,
                blockStyle: "\n\t\t\t\ttext-align: left;\n\t\t\t\twidth: 100%;\n\t\t\t\t",
                config: [
                    this.getPortraitWebLineConfig(),
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_ELEMENT,
                        languageKey: 'title3',
                        blockStyle: this.getPortraitTitleStyle()
                    },
                    // Wild
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_ELEMENT_BLOCK,
                        blockStyle: "\n\t\t\t\t\t\t\tdisplay: inline-block;\n\t\t\t\t\t\t\tposition: relative;\n\t\t\t\t\t\t\twidth: 120px;\n\t\t\t\t\t\t\theight: 225px;\n\t\t\t\t\t\t\ttext-align: center;\n\t\t\t\t\t\t",
                        config: [
                            {
                                type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_ELEMENT,
                                languageKey: 'symbolTitle1',
                                blockStyle: "\n\t\t\t\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\t\t\t\twidth: 150px;\n\t\t\t\t\t\t\t\t\theight: 10px;\n\t\t\t\t\t\t\t\t\tmax-width: 230px;\n\t\t\t\t\t\t\t\t\tfont-size: 18px;\n\t\t\t\t\t\t\t\t"
                            },
                            {
                                type: WebElementFactory_1.WebFactoryElementType.WEB_IMAGE_ELEMENT,
                                imageSource: WebImageElement_1.ImageSourceType.SPRITE,
                                imageData: {
                                    assetName: 'symbols',
                                    imageName: 'symbol_WILD.png',
                                    ratio: 1,
                                },
                                imageStyle: "\n\t\t\t\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\t\t\t\ttop: 50px;\n\t\t\t\t\t\t\t\t"
                            },
                            {
                                type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_ELEMENT,
                                languageKey: 'symbolContent1',
                                blockStyle: "\n\t\t\t\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\t\t\t\twidth: 150px;\n\t\t\t\t\t\t\t\t\theight: 10px;\n\t\t\t\t\t\t\t\t\ttop: 200px;\n\t\t\t\t\t\t\t\t\tmax-width: 230px;\n\t\t\t\t\t\t\t\t\tfont-size: 18px;\n\t\t\t\t\t\t\t\t"
                            }
                        ]
                    },
                    // Scatter
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_ELEMENT_BLOCK,
                        blockStyle: "\n\t\t\t\t\t\t\tdisplay: inline-block;\n\t\t\t\t\t\t\tposition: relative;\n\t\t\t\t\t\t\twidth: 120px;\n\t\t\t\t\t\t\theight: 225px;\n\t\t\t\t\t\t\tleft: 90px;\n\t\t\t\t\t\t\ttext-align: center;\n\t\t\t\t\t\t",
                        config: [
                            {
                                type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_ELEMENT,
                                languageKey: 'symbolTitle2',
                                blockStyle: "\n\t\t\t\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\t\t\t\twidth: 150px;\n\t\t\t\t\t\t\t\t\theight: 10px;\n\t\t\t\t\t\t\t\t\tmax-width: 230px;\n\t\t\t\t\t\t\t\t\tfont-size: 18px;\n\t\t\t\t\t\t\t\t"
                            },
                            {
                                type: WebElementFactory_1.WebFactoryElementType.WEB_IMAGE_ELEMENT,
                                imageSource: WebImageElement_1.ImageSourceType.SPRITE,
                                imageData: {
                                    assetName: 'symbols',
                                    imageName: 'symbol_SCATTER.png',
                                    ratio: 1,
                                },
                                imageStyle: "\n\t\t\t\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\t\t\t\ttop: 50px;\n\t\t\t\t\t\t\t\t"
                            },
                            {
                                type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_ELEMENT,
                                languageKey: 'symbolContent2',
                                blockStyle: "\n\t\t\t\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\t\t\t\twidth: 150px;\n\t\t\t\t\t\t\t\t\theight: 10px;\n\t\t\t\t\t\t\t\t\ttop: 200px;\n\t\t\t\t\t\t\t\t\tmax-width: 230px;\n\t\t\t\t\t\t\t\t\tfont-size: 18px;\n\t\t\t\t\t\t\t\t"
                            }
                        ]
                    },
                    // PIC1
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_ELEMENT_BLOCK,
                        blockStyle: "\n\t\t\t\t\t\t\tdisplay: inline-block;\n\t\t\t\t\t\t\tposition: relative;\n\t\t\t\t\t\t\twidth: 155px;\n\t\t\t\t\t\t\theight: 140px;\n\t\t\t\t\t\t",
                        config: [
                            {
                                type: WebElementFactory_1.WebFactoryElementType.WEB_IMAGE_ELEMENT,
                                imageSource: WebImageElement_1.ImageSourceType.SPRITE,
                                imageData: {
                                    assetName: 'symbols',
                                    imageName: 'symbol_PIC1.png',
                                    ratio: 0.7,
                                },
                                imageStyle: "\n\t\t\t\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\t\t\t\ttop: 30px;\n\t\t\t\t\t\t\t\t"
                            },
                            {
                                type: WebElementFactory_1.WebFactoryElementType.WEB_PAYOUT_ELEMENT,
                                lineFeed: 7,
                                payoutPrize: payoutSetting.get('PIC1'),
                                payoutFormat: {
                                    payoutStyle: "\n\t\t\t\t\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\t\t\t\t\tleft: 60px;\n\t\t\t\t\t\t\t\t\t\ttop: 20px;\n\t\t\t\t\t\t\t\t\t\tmargin:0px;\n\t\t\t\t\t\t\t\t\t"
                                }
                            }
                        ]
                    },
                    // PIC2
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_ELEMENT_BLOCK,
                        blockStyle: "\n\t\t\t\t\t\t\tdisplay: inline-block;\n\t\t\t\t\t\t\tposition:relative;\n\t\t\t\t\t\t\twidth: 155px;\n\t\t\t\t\t\t\theight: 140px;\n\t\t\t\t\t\t\tleft: 55px;\n\t\t\t\t\t\t",
                        config: [
                            {
                                type: WebElementFactory_1.WebFactoryElementType.WEB_IMAGE_ELEMENT,
                                imageSource: WebImageElement_1.ImageSourceType.SPRITE,
                                imageData: {
                                    assetName: 'symbols',
                                    imageName: 'symbol_PIC2.png',
                                    ratio: 0.7,
                                },
                                imageStyle: "\n\t\t\t\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\t\t\t\ttop: 30px;\n\t\t\t\t\t\t\t\t"
                            },
                            {
                                type: WebElementFactory_1.WebFactoryElementType.WEB_PAYOUT_ELEMENT,
                                lineFeed: 7,
                                payoutPrize: payoutSetting.get('PIC2'),
                                payoutFormat: {
                                    payoutStyle: "\n\t\t\t\t\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\t\t\t\t\tleft: 60px;\n\t\t\t\t\t\t\t\t\t\ttop: 20px;\n\t\t\t\t\t\t\t\t\t\tmargin:0px;\n\t\t\t\t\t\t\t\t\t"
                                }
                            }
                        ]
                    },
                    // PIC3
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_ELEMENT_BLOCK,
                        blockStyle: "\n\t\t\t\t\t\t\tdisplay: inline-block;\n\t\t\t\t\t\t\tposition:relative;\n\t\t\t\t\t\t\twidth: 155px;\n\t\t\t\t\t\t\theight: 140px;\n\t\t\t\t\t\t",
                        config: [
                            {
                                type: WebElementFactory_1.WebFactoryElementType.WEB_IMAGE_ELEMENT,
                                imageSource: WebImageElement_1.ImageSourceType.SPRITE,
                                imageData: {
                                    assetName: 'symbols',
                                    imageName: 'symbol_PIC3.png',
                                    ratio: 0.7,
                                },
                                imageStyle: "\n\t\t\t\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\t\t\t\ttop: 30px;\n\t\t\t\t\t\t\t\t"
                            },
                            {
                                type: WebElementFactory_1.WebFactoryElementType.WEB_PAYOUT_ELEMENT,
                                lineFeed: 7,
                                payoutPrize: payoutSetting.get('PIC3'),
                                payoutFormat: {
                                    payoutStyle: "\n\t\t\t\t\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\t\t\t\t\tleft: 60px;\n\t\t\t\t\t\t\t\t\t\ttop: 20px;\n\t\t\t\t\t\t\t\t\t\tmargin:0px;\n\t\t\t\t\t\t\t\t\t"
                                }
                            }
                        ]
                    },
                    // PIC4
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_ELEMENT_BLOCK,
                        blockStyle: "\n\t\t\t\t\t\t\tdisplay: inline-block;\n\t\t\t\t\t\t\tposition:relative;\n\t\t\t\t\t\t\twidth: 155px;\n\t\t\t\t\t\t\theight: 140px;\n\t\t\t\t\t\t\tleft: 55px;\n\t\t\t\t\t\t",
                        config: [
                            {
                                type: WebElementFactory_1.WebFactoryElementType.WEB_IMAGE_ELEMENT,
                                imageSource: WebImageElement_1.ImageSourceType.SPRITE,
                                imageData: {
                                    assetName: 'symbols',
                                    imageName: 'symbol_PIC4.png',
                                    ratio: 0.7,
                                },
                                imageStyle: "\n\t\t\t\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\t\t\t\ttop: 30px;\n\t\t\t\t\t\t\t\t"
                            },
                            {
                                type: WebElementFactory_1.WebFactoryElementType.WEB_PAYOUT_ELEMENT,
                                lineFeed: 7,
                                payoutPrize: payoutSetting.get('PIC4'),
                                payoutFormat: {
                                    payoutStyle: "\n\t\t\t\t\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\t\t\t\t\tleft: 60px;\n\t\t\t\t\t\t\t\t\t\ttop: 20px;\n\t\t\t\t\t\t\t\t\t\tmargin:0px;\n\t\t\t\t\t\t\t\t\t"
                                }
                            }
                        ],
                    },
                    // PIC5
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_ELEMENT_BLOCK,
                        blockStyle: "\n\t\t\t\t\t\t\tdisplay: inline-block;\n\t\t\t\t\t\t\tposition:relative;\n\t\t\t\t\t\t\twidth: 155px;\n\t\t\t\t\t\t\theight: 140px;\n\t\t\t\t\t\t",
                        config: [
                            {
                                type: WebElementFactory_1.WebFactoryElementType.WEB_IMAGE_ELEMENT,
                                imageSource: WebImageElement_1.ImageSourceType.SPRITE,
                                imageData: {
                                    assetName: 'symbols',
                                    imageName: 'symbol_PIC5.png',
                                    ratio: 0.7,
                                },
                                imageStyle: "\n\t\t\t\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\t\t\t\ttop: 20px;\n\t\t\t\t\t\t\t\t"
                            },
                            {
                                type: WebElementFactory_1.WebFactoryElementType.WEB_PAYOUT_ELEMENT,
                                lineFeed: 7,
                                payoutPrize: payoutSetting.get('PIC5'),
                                payoutFormat: {
                                    payoutStyle: "\n\t\t\t\t\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\t\t\t\t\tleft: 60px;\n\t\t\t\t\t\t\t\t\t\ttop: 20px;\n\t\t\t\t\t\t\t\t\t\tmargin:0px;\n\t\t\t\t\t\t\t\t\t"
                                }
                            }
                        ]
                    },
                    // A
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_ELEMENT_BLOCK,
                        blockStyle: "\n\t\t\t\t\t\t\tdisplay: inline-block;\n\t\t\t\t\t\t\tposition:relative;\n\t\t\t\t\t\t\twidth: 155px;\n\t\t\t\t\t\t\theight: 140px;\n\t\t\t\t\t\t\tleft: 55px;\n\t\t\t\t\t\t",
                        config: [
                            {
                                type: WebElementFactory_1.WebFactoryElementType.WEB_IMAGE_ELEMENT,
                                imageSource: WebImageElement_1.ImageSourceType.SPRITE,
                                imageData: {
                                    assetName: 'symbols',
                                    imageName: 'symbol_A.png',
                                    ratio: 0.7,
                                },
                                imageStyle: "\n\t\t\t\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\t\t\t\ttop: 20px;\n\t\t\t\t\t\t\t\t"
                            },
                            {
                                type: WebElementFactory_1.WebFactoryElementType.WEB_PAYOUT_ELEMENT,
                                lineFeed: 7,
                                payoutPrize: payoutSetting.get('A'),
                                payoutFormat: {
                                    payoutStyle: "\n\t\t\t\t\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\t\t\t\t\tleft: 60px;\n\t\t\t\t\t\t\t\t\t\ttop: 20px;\n\t\t\t\t\t\t\t\t\t\tmargin:0px;\n\t\t\t\t\t\t\t\t\t"
                                }
                            }
                        ]
                    },
                    // K
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_ELEMENT_BLOCK,
                        blockStyle: "\n\t\t\t\t\t\t\tdisplay: inline-block;\n\t\t\t\t\t\t\tposition:relative;\n\t\t\t\t\t\t\twidth: 155px;\n\t\t\t\t\t\t\theight: 140px;\n\t\t\t\t\t\t",
                        config: [
                            {
                                type: WebElementFactory_1.WebFactoryElementType.WEB_IMAGE_ELEMENT,
                                imageSource: WebImageElement_1.ImageSourceType.SPRITE,
                                imageData: {
                                    assetName: 'symbols',
                                    imageName: 'symbol_K.png',
                                    ratio: 0.7,
                                },
                                imageStyle: "\n\t\t\t\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\t\t\t\ttop: 20px;\n\t\t\t\t\t\t\t\t"
                            },
                            {
                                type: WebElementFactory_1.WebFactoryElementType.WEB_PAYOUT_ELEMENT,
                                lineFeed: 7,
                                payoutPrize: payoutSetting.get('K'),
                                payoutFormat: {
                                    payoutStyle: "\n\t\t\t\t\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\t\t\t\t\tleft: 60px;\n\t\t\t\t\t\t\t\t\t\ttop: 20px;\n\t\t\t\t\t\t\t\t\t\tmargin:0px;\n\t\t\t\t\t\t\t\t\t"
                                }
                            }
                        ]
                    },
                    // Q
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_ELEMENT_BLOCK,
                        blockStyle: "\n\t\t\t\t\t\t\tdisplay: inline-block;\n\t\t\t\t\t\t\tposition:relative;\n\t\t\t\t\t\t\twidth: 155px;\n\t\t\t\t\t\t\theight: 140px;\n\t\t\t\t\t\t\tleft: 55px;\n\t\t\t\t\t\t",
                        config: [
                            {
                                type: WebElementFactory_1.WebFactoryElementType.WEB_IMAGE_ELEMENT,
                                imageSource: WebImageElement_1.ImageSourceType.SPRITE,
                                imageData: {
                                    assetName: 'symbols',
                                    imageName: 'symbol_Q.png',
                                    ratio: 0.7,
                                },
                                imageStyle: "\n\t\t\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\t\t\t\ttop: 20px;\n\t\t\t\t\t\t\t\t"
                            },
                            {
                                type: WebElementFactory_1.WebFactoryElementType.WEB_PAYOUT_ELEMENT,
                                lineFeed: 7,
                                payoutPrize: payoutSetting.get('Q'),
                                payoutFormat: {
                                    payoutStyle: "\n\t\t\t\t\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\t\t\t\t\tleft: 60px;\n\t\t\t\t\t\t\t\t\t\ttop: 20px;\n\t\t\t\t\t\t\t\t\t\tmargin:0px;\n\t\t\t\t\t\t\t\t\t"
                                }
                            }
                        ]
                    },
                    // J
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_ELEMENT_BLOCK,
                        blockStyle: "\n\t\t\t\t\t\t\tdisplay: inline-block;\n\t\t\t\t\t\t\tposition:relative;\n\t\t\t\t\t\t\twidth: 155px;\n\t\t\t\t\t\t\theight: 140px;\n\t\t\t\t\t\t",
                        config: [
                            {
                                type: WebElementFactory_1.WebFactoryElementType.WEB_IMAGE_ELEMENT,
                                imageSource: WebImageElement_1.ImageSourceType.SPRITE,
                                imageData: {
                                    assetName: 'symbols',
                                    imageName: 'symbol_J.png',
                                    ratio: 0.7,
                                },
                                imageStyle: "\n\t\t\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\t\t\t\ttop: 20px;\n\t\t\t\t\t\t\t\t"
                            },
                            {
                                type: WebElementFactory_1.WebFactoryElementType.WEB_PAYOUT_ELEMENT,
                                lineFeed: 7,
                                payoutPrize: payoutSetting.get('J'),
                                payoutFormat: {
                                    payoutStyle: "\n\t\t\t\t\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\t\t\t\t\tleft: 60px;\n\t\t\t\t\t\t\t\t\t\ttop: 20px;\n\t\t\t\t\t\t\t\t\t\tmargin:0px;\n\t\t\t\t\t\t\t\t\t"
                                }
                            }
                        ]
                    },
                    // T
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_ELEMENT_BLOCK,
                        blockStyle: "\n\t\t\t\t\t\t\tdisplay: inline-block;\n\t\t\t\t\t\t\tposition:relative;\n\t\t\t\t\t\t\twidth: 155px;\n\t\t\t\t\t\t\theight: 140px;\n\t\t\t\t\t\t\tleft: 55px;\n\t\t\t\t\t\t",
                        config: [
                            {
                                type: WebElementFactory_1.WebFactoryElementType.WEB_IMAGE_ELEMENT,
                                imageSource: WebImageElement_1.ImageSourceType.SPRITE,
                                imageData: {
                                    assetName: 'symbols',
                                    imageName: 'symbol_T.png',
                                    ratio: 0.7,
                                },
                                imageStyle: "\n\t\t\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\t\t\t\ttop: 20px;\n\t\t\t\t\t\t\t\t"
                            },
                            {
                                type: WebElementFactory_1.WebFactoryElementType.WEB_PAYOUT_ELEMENT,
                                lineFeed: 7,
                                payoutPrize: payoutSetting.get('T'),
                                payoutFormat: {
                                    payoutStyle: "\n\t\t\t\t\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\t\t\t\t\tleft: 60px;\n\t\t\t\t\t\t\t\t\t\ttop: 20px;\n\t\t\t\t\t\t\t\t\t\tmargin:0px;\n\t\t\t\t\t\t\t\t\t"
                                }
                            }
                        ]
                    },
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_CONTENT_ELEMENT,
                        languageKey: 'content3'
                    }
                ]
            })
        ];
    };
    /**
     * Portrait screen title config
     */
    DHBMLUIPaytableConfig.prototype.getPortraitTitleStyle = function () {
        return "\n\t\t\ttext-align: center;\n\t\t\twidth: 100%;\n\t\t";
    };
    /**
     * Landscape screen config
     */
    DHBMLUIPaytableConfig.prototype.getLandscapeGerneralPagingElementPages = function () {
        var payoutSetting = this.getPayoutSetting();
        return [
            //page 1 game introduction
            WebElementFactory_1.WebElementFactory.createWebElementBlock({
                type: WebElementFactory_1.WebFactoryElementType.WEB_ELEMENT_BLOCK,
                blockStyle: "\n\t\t\t\t\ttext-align: left;\n\t\t\t\t\twidth: 100%;\n\t\t\t\t",
                config: [
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_ELEMENT,
                        blockStyle: this.getLandscapeMainTitleStyle(),
                        languageKey: 'mainTitle'
                    },
                    // game logo
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_IMAGE_ELEMENT,
                        blockStyle: "\n\t\t\t\t\t\t\twidth: 500px;\n\t\t\t\t\t\t\theight: 204px;\n\t\t\t\t\t\t\tposition: relative;\n\t\t\t\t\t\t\tmargin: auto;\n\t\t\t\t\t\t",
                        imageSource: WebImageElement_1.ImageSourceType.TEXTURE,
                        imageData: {
                            imagePath: 'assets/helpscreens/{locale}/gameLogo.png',
                            width: 500,
                            height: 204,
                            ratio: 1
                        },
                        imageStyle: "\n\t\t\t\t\t\t\tmargin: auto;\n\t\t\t\t\t\t"
                    },
                    // game description
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_CONTENT_ELEMENT,
                        languageKey: 'content1',
                        contentStyle: "\n\t\t\t\t\t\t\ttext-align: center;\n\t\t\t\t\t\t\tlist-style-type:none;\n\t\t\t\t\t\t"
                    }
                ]
            }),
            //page 2 game features Da Hong Bao Extra Bonus
            WebElementFactory_1.WebElementFactory.createWebElementBlock({
                type: WebElementFactory_1.WebFactoryElementType.WEB_ELEMENT_BLOCK,
                blockStyle: "\n\t\t\t\t\tposition: relative;\n\t\t\t\t\ttext-align: center;\n\t\t\t\t\twidth: 100%;\n\t\t\t\t",
                config: [
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_ELEMENT,
                        blockStyle: this.getLandscapeMainTitleStyle(),
                        languageKey: 'title2'
                    },
                    // subtitle
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_ELEMENT_BLOCK,
                        blockStyle: "\n\t\t\t\t\t\t\tposition: relative;\n\t\t\t\t\t\t\tleft: -20px;\n\t\t\t\t\t\t\ttext-align: left;\n\t\t\t\t\t\t\twidth: 100%;\n\t\t\t\t\t\t",
                        config: [
                            {
                                type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_ELEMENT,
                                languageKey: 'featureSubTitle1',
                                blockStyle: "\n\t\t\t\t\t\t\t\t\tfont-size: 18px;\n\t\t\t\t\t\t\t\t\tdisplay: inline-block;\n\t\t\t\t\t\t\t\t\tmax-width: 310px;\n\t\t\t\t\t\t\t\t\tleft: -10px;\n\t\t\t\t\t\t\t\t",
                            },
                            // new asset
                            {
                                type: WebElementFactory_1.WebFactoryElementType.WEB_IMAGE_ELEMENT,
                                blockStyle: "\n\t\t\t\t\t\t\t\t\tposition: relative;\n\t\t\t\t\t\t\t\t\tdisplay: inline-block;\n\t\t\t\t\t\t\t\t\twidth: 34px;\n\t\t\t\t\t\t\t\t\theight: 33.6px;\n\t\t\t\t\t\t\t\t",
                                imageSource: WebImageElement_1.ImageSourceType.TEXTURE,
                                imageData: {
                                    imagePath: 'assets/helpscreens/{locale}/new.png',
                                    width: 85,
                                    height: 84,
                                    ratio: 0.4
                                }
                            },
                        ]
                    },
                    // extra bonus schematic diagram
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_IMAGE_ELEMENT,
                        blockStyle: "\n\t\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\t\tmargin: auto;\n\t\t\t\t\t\t",
                        imageSource: WebImageElement_1.ImageSourceType.TEXTURE,
                        imageData: {
                            imagePath: 'assets/helpscreens/feature.jpg',
                            width: 701,
                            height: 864,
                            ratio: 0.3
                        }
                    },
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_ELEMENT_BLOCK,
                        blockStyle: "\n\t\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\t\twidth: 350px;\n\t\t\t\t\t\t\theight: 420px;\n\t\t\t\t\t\t\tleft: 260px;\n\t\t\t\t\t\t\ttop: 10px;\n\t\t\t\t\t\t",
                        config: [
                            {
                                type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_CONTENT_ELEMENT,
                                languageKey: 'content2-1',
                                blockStyle: "\n\t\t\t\t\t\t\t\t\twidth: 350px;\n\t\t\t\t\t\t\t\t\tleft: 280px;\n\t\t\t\t\t\t\t\t\tmax-width: 350px;\n\t\t\t\t\t\t\t\t",
                                contentStyle: "\n\t\t\t\t\t\t\t\t\tlist-style-type:none;\n\t\t\t\t\t\t\t\t\tmargin-bottom: 14px;\n\t\t\t\t\t\t\t\t"
                            },
                            {
                                type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_CONTENT_ELEMENT,
                                languageKey: 'content2-2',
                                blockStyle: "\n\t\t\t\t\t\t\t\t\twidth: 350px;\n\t\t\t\t\t\t\t\t\tleft: 280px;\n\t\t\t\t\t\t\t\t\tmax-width: 350px;\n\t\t\t\t\t\t\t\t"
                            }
                        ]
                    }
                ]
            }),
            //page 3 game features lucky bonus re-spins
            WebElementFactory_1.WebElementFactory.createWebElementBlock({
                type: WebElementFactory_1.WebFactoryElementType.WEB_ELEMENT_BLOCK,
                blockStyle: "\n\t\t\t\tposition: relative;\n\t\t\t\ttext-align: center;\n\t\t\t\twidth: 100%;\n\t\t\t\t",
                config: [
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_ELEMENT,
                        blockStyle: this.getLandscapeMainTitleStyle(),
                        languageKey: 'title2'
                    },
                    // subtitle
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_ELEMENT,
                        languageKey: 'featureSubTitle2',
                        blockStyle: "\n\t\t\t\t\t\t\ttext-align: left;\n\t\t\t\t\t\t\tfont-size: 21px;\n\t\t\t\t\t\t\ttop: 10px;\n\t\t\t\t\t\t",
                    },
                    // lucky bonus re-spins schematic diagram
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_IMAGE_ELEMENT,
                        blockStyle: "\n\t\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\t\tmargin: auto;\n\t\t\t\t\t\t",
                        imageSource: WebImageElement_1.ImageSourceType.TEXTURE,
                        imageData: {
                            imagePath: 'assets/helpscreens/luckyBonus.jpg',
                            width: 490,
                            height: 360,
                            ratio: 0.6
                        }
                    },
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_CONTENT_ELEMENT,
                        languageKey: 'content2-3',
                        blockStyle: "\n\t\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\t\twidth: 280px;\n\t\t\t\t\t\t\tleft: 300px;\n\t\t\t\t\t\t\ttop: 100px;\n\t\t\t\t\t\t\tmax-width: 590px;\n\t\t\t\t\t\t",
                        contentStyle: "\n\t\t\t\t\t\t\tlist-style-type:none;\n\t\t\t\t\t\t\tmargin-bottom: 14px;\n\t\t\t\t\t\t"
                    }
                ]
            }),
            //page4 game features free spins features image
            WebElementFactory_1.WebElementFactory.createWebElementBlock({
                type: WebElementFactory_1.WebFactoryElementType.WEB_ELEMENT_BLOCK,
                blockStyle: "\n\t\t\t\t\tposition: relative;\n\t\t\t\t\ttext-align: center;\n\t\t\t\t\twidth: 100%;\n\t\t\t\t",
                config: [
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_ELEMENT,
                        blockStyle: this.getLandscapeMainTitleStyle(),
                        languageKey: 'title2'
                    },
                    // subtitle
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_ELEMENT,
                        languageKey: 'featureSubTitle3',
                        blockStyle: "\n\t\t\t\t\t\t\tposition: relative;\n\t\t\t\t\t\t\ttext-align: left;\n\t\t\t\t\t\t\tfont-size: 20px;\n\t\t\t\t\t\t\ttop: 10px;\n\t\t\t\t\t\t\tleft: -20px;\n\t\t\t\t\t\t",
                    },
                    // free spins features schematic diagram
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_ELEMENT_BLOCK,
                        config: [
                            {
                                type: WebElementFactory_1.WebFactoryElementType.WEB_IMAGE_SLIDESHOW,
                                TransitionEffectType: WebImageSlideshowElement_1.TransitionEffectType.RIGHT_TO_LEFT,
                                dwellTime: 3,
                                transformTime: 1,
                                blockStyle: "\n\t\t\t\t\t\t\t\t\tposition: relative;\n\t\t\t\t\t\t\t\t\toverflow: hidden;\n\t\t\t\t\t\t\t\t\theight: 240px;\n\t\t\t\t\t\t\t\t\twidth: 210px;\n\t\t\t\t\t\t\t\t\ttop: -15px;\n\t\t\t\t\t\t\t\t\tleft: -5px;\n\t\t\t\t\t\t\t\t",
                                pages: [
                                    WebElementFactory_1.WebElementFactory.createWebElementBlock({
                                        type: WebElementFactory_1.WebFactoryElementType.WEB_ELEMENT_BLOCK,
                                        config: [
                                            {
                                                type: WebElementFactory_1.WebFactoryElementType.WEB_IMAGE_ELEMENT,
                                                imageSource: WebImageElement_1.ImageSourceType.TEXTURE,
                                                imageData: {
                                                    imagePath: 'assets/helpscreens/slideshowFeature1.png',
                                                    width: 701,
                                                    height: 802,
                                                    ratio: 0.3
                                                }
                                            }
                                        ]
                                    }),
                                    WebElementFactory_1.WebElementFactory.createWebElementBlock({
                                        type: WebElementFactory_1.WebFactoryElementType.WEB_ELEMENT_BLOCK,
                                        config: [
                                            {
                                                type: WebElementFactory_1.WebFactoryElementType.WEB_IMAGE_ELEMENT,
                                                imageSource: WebImageElement_1.ImageSourceType.TEXTURE,
                                                imageData: {
                                                    imagePath: 'assets/helpscreens/slideshowFeature2.png',
                                                    width: 701,
                                                    height: 802,
                                                    ratio: 0.3
                                                }
                                            }
                                        ]
                                    }),
                                    WebElementFactory_1.WebElementFactory.createWebElementBlock({
                                        type: WebElementFactory_1.WebFactoryElementType.WEB_ELEMENT_BLOCK,
                                        config: [
                                            {
                                                type: WebElementFactory_1.WebFactoryElementType.WEB_IMAGE_ELEMENT,
                                                imageSource: WebImageElement_1.ImageSourceType.TEXTURE,
                                                imageData: {
                                                    imagePath: 'assets/helpscreens/slideshowFeature3.png',
                                                    width: 701,
                                                    height: 802,
                                                    ratio: 0.3
                                                }
                                            }
                                        ]
                                    })
                                ]
                            }
                        ]
                    },
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_ELEMENT_BLOCK,
                        blockStyle: "\n\t\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\t\ttop: 0px;\n\t\t\t\t\t\t",
                        config: [
                            {
                                type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_CONTENT_ELEMENT,
                                languageKey: 'content2-4',
                                blockStyle: "\n\t\t\t\t\t\t\t\t\tposition: relative;\n\t\t\t\t\t\t\t\t\twidth: 255px;\n\t\t\t\t\t\t\t\t\tmax-width: 340px;\n\t\t\t\t\t\t\t\t\tleft: -25px;\n\t\t\t\t\t\t\t\t\ttop: 265px;\n\t\t\t\t\t\t\t\t",
                                contentStyle: "\n\t\t\t\t\t\t\t\t\tlist-style-type:none;\n\t\t\t\t\t\t\t\t\tmargin-bottom: 14px;\n\t\t\t\t\t\t\t\t\tfont-size: 14px;\n\t\t\t\t\t\t\t\t\tline-height: 1.4;\n\t\t\t\t\t\t\t\t"
                            }
                        ]
                    },
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_ELEMENT_BLOCK,
                        blockStyle: "\n\t\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\t\ttop: 5px;\n\t\t\t\t\t\t\tleft: 15px;\n\t\t\t\t\t\t",
                        config: [
                            {
                                type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_CONTENT_ELEMENT,
                                languageKey: 'content2-4-1',
                                blockStyle: "\n\t\t\t\t\t\t\t\t\tposition: relative;\n\t\t\t\t\t\t\t\t\twidth: 340px;\n\t\t\t\t\t\t\t\t\tleft: 260px;\n\t\t\t\t\t\t\t\t\ttop: -25px;\n\t\t\t\t\t\t\t\t\tmax-width: 640px;\n\t\t\t\t\t\t\t\t",
                                contentStyle: "\n\t\t\t\t\t\t\t\t\tfont-size: 14px;\n\t\t\t\t\t\t\t\t\tline-height: 1.4;\n\t\t\t\t\t\t\t\t"
                            },
                            {
                                type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_CONTENT_ELEMENT,
                                languageKey: 'content2-4-2',
                                blockStyle: "\n\t\t\t\t\t\t\t\t\tposition: relative;\n\t\t\t\t\t\t\t\t\twidth: 340px;\n\t\t\t\t\t\t\t\t\tleft: 260px;\n\t\t\t\t\t\t\t\t\ttop: -20px;\n\t\t\t\t\t\t\t\t\tmax-width: 640px;\n\t\t\t\t\t\t\t\t\tmargin: 0px;\n\t\t\t\t\t\t\t\t",
                                contentStyle: "\n\t\t\t\t\t\t\t\t\tlist-style-type:none;\n\t\t\t\t\t\t\t\t\tfont-size: 14px;\n\t\t\t\t\t\t\t\t\tline-height: 1.4;\n\t\t\t\t\t\t\t\t"
                            }
                        ]
                    }
                ]
            }),
            //page5 symbols & pay value : wild and scatter
            WebElementFactory_1.WebElementFactory.createWebElementBlock({
                type: WebElementFactory_1.WebFactoryElementType.WEB_ELEMENT_BLOCK,
                blockStyle: "\n\t\t\t\t\tposition: relative;\n\t\t\t\t\ttext-align: left;\n\t\t\t\t\twidth: 100%;\n\t\t\t\t",
                config: [
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_ELEMENT,
                        blockStyle: this.getLandscapeMainTitleStyle(),
                        languageKey: 'title3'
                    },
                    // Wild
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_ELEMENT_BLOCK,
                        blockStyle: "\n\t\t\t\t\t\t\tdisplay: inline-block;\n\t\t\t\t\t\t\tposition: relative;\n\t\t\t\t\t\t\twidth: 50%;\n\t\t\t\t\t\t\theight: 225px;\n\t\t\t\t\t\t\tleft: 30px;\n\t\t\t\t\t\t\ttop: 65px;\n\t\t\t\t\t\t\ttext-align: left;\n\t\t\t\t\t\t",
                        config: [
                            {
                                type: WebElementFactory_1.WebFactoryElementType.WEB_IMAGE_ELEMENT,
                                imageSource: WebImageElement_1.ImageSourceType.SPRITE,
                                imageData: {
                                    assetName: 'symbols',
                                    imageName: 'symbol_WILD.png',
                                    ratio: 1,
                                },
                                imageStyle: "\n\t\t\t\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\t\t\t\ttop: 30px;\n\t\t\t\t\t\t\t\t"
                            },
                            {
                                type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_ELEMENT,
                                languageKey: 'symbolTitle1',
                                blockStyle: "\n\t\t\t\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\t\t\t\twidth: 140px;\n\t\t\t\t\t\t\t\t\theight: 10px;\n\t\t\t\t\t\t\t\t\tleft: 170px;\n\t\t\t\t\t\t\t\t\ttop: 70px;\n\t\t\t\t\t\t\t\t\tmax-width: 135px;\n\t\t\t\t\t\t\t\t\tfont-size: 18px;\n\t\t\t\t\t\t\t\t"
                            },
                            {
                                type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_ELEMENT,
                                languageKey: 'symbolContent1',
                                blockStyle: "\n\t\t\t\t\t\t\t\t\tdisplay: inline-block;\n\t\t\t\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\t\t\t\twidth: 140px;\n\t\t\t\t\t\t\t\t\theight: 10px;\n\t\t\t\t\t\t\t\t\tleft: 170px;\n\t\t\t\t\t\t\t\t\ttop: 100px;\n\t\t\t\t\t\t\t\t\tmax-width: 135px;\n\t\t\t\t\t\t\t\t\tfont-size: 18px;\n\t\t\t\t\t\t\t\t"
                            }
                        ]
                    },
                    // Scatter
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_ELEMENT_BLOCK,
                        blockStyle: "\n\t\t\t\t\t\t\tdisplay: inline-block;\n\t\t\t\t\t\t\tposition: relative;\n\t\t\t\t\t\t\twidth: 50%;\n\t\t\t\t\t\t\theight: 225px;\n\t\t\t\t\t\t\tleft: 30px;\n\t\t\t\t\t\t\ttop: 65px;\n\t\t\t\t\t\t\ttext-align: left;\n\t\t\t\t\t\t",
                        config: [
                            {
                                type: WebElementFactory_1.WebFactoryElementType.WEB_IMAGE_ELEMENT,
                                imageSource: WebImageElement_1.ImageSourceType.SPRITE,
                                imageData: {
                                    assetName: 'symbols',
                                    imageName: 'symbol_SCATTER.png',
                                    ratio: 1,
                                },
                                imageStyle: "\n\t\t\t\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\t\t\t\ttop: 30px;\n\t\t\t\t\t\t\t\t"
                            },
                            {
                                type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_ELEMENT,
                                languageKey: 'symbolTitle2',
                                blockStyle: "\n\t\t\t\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\t\t\t\twidth: 140px;\n\t\t\t\t\t\t\t\t\theight: 10px;\n\t\t\t\t\t\t\t\t\tleft: 170px;\n\t\t\t\t\t\t\t\t\ttop: 70px;\n\t\t\t\t\t\t\t\t\tmax-width: 135px;\n\t\t\t\t\t\t\t\t\tfont-size: 18px;\n\t\t\t\t\t\t\t\t"
                            },
                            {
                                type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_ELEMENT,
                                languageKey: 'symbolContent2',
                                blockStyle: "\n\t\t\t\t\t\t\t\t\tdisplay: inline-block;\n\t\t\t\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\t\t\t\twidth: 140px;\n\t\t\t\t\t\t\t\t\theight: 10px;\n\t\t\t\t\t\t\t\t\tleft: 170px;\n\t\t\t\t\t\t\t\t\ttop: 100px;\n\t\t\t\t\t\t\t\t\tmax-width: 135px;\n\t\t\t\t\t\t\t\t\tfont-size: 18px;\n\t\t\t\t\t\t\t\t"
                            }
                        ]
                    }
                ]
            }),
            //page6 symbols & pay value : pic1 to pic5
            WebElementFactory_1.WebElementFactory.createWebElementBlock({
                type: WebElementFactory_1.WebFactoryElementType.WEB_ELEMENT_BLOCK,
                blockStyle: "\n\t\t\t\t\tposition: relative;\n\t\t\t\t\ttext-align: left;\n\t\t\t\t\twidth: 100%;\n\t\t\t\t",
                config: [
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_ELEMENT,
                        blockStyle: this.getLandscapeMainTitleStyle(),
                        languageKey: 'title3'
                    },
                    // Top
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_ELEMENT_BLOCK,
                        blockStyle: "\n\t\t\t\t\t\t\tposition: relative;\n\t\t\t\t\t\t\ttext-align: left;\n\t\t\t\t\t\t\twidth: 100%;\n\t\t\t\t\t\t\tleft: 120px;\n\t\t\t\t\t\t\ttop: 55px;\n\t\t\t\t\t\t",
                        config: [
                            // PIC1
                            {
                                type: WebElementFactory_1.WebFactoryElementType.WEB_ELEMENT_BLOCK,
                                blockStyle: "\n\t\t\t\t\t\t\t\t\tdisplay: inline-block;\n\t\t\t\t\t\t\t\t\tposition:relative;\n\t\t\t\t\t\t\t\t\twidth: 200px;\n\t\t\t\t\t\t\t\t\theight: 140px;\n\t\t\t\t\t\t\t\t",
                                config: [
                                    {
                                        type: WebElementFactory_1.WebFactoryElementType.WEB_IMAGE_ELEMENT,
                                        imageSource: WebImageElement_1.ImageSourceType.SPRITE,
                                        imageData: {
                                            assetName: 'symbols',
                                            imageName: 'symbol_PIC1.png',
                                            ratio: 0.7,
                                        },
                                        imageStyle: "\n\t\t\t\t\t\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\t\t\t\t\t"
                                    },
                                    {
                                        type: WebElementFactory_1.WebFactoryElementType.WEB_PAYOUT_ELEMENT,
                                        lineFeed: 7,
                                        payoutPrize: payoutSetting.get('PIC1'),
                                        payoutFormat: {
                                            payoutStyle: "\n\t\t\t\t\t\t\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\t\t\t\t\t\t\tleft: 100px;\n\t\t\t\t\t\t\t\t\t\t\t\ttop: -15px;\n\t\t\t\t\t\t\t\t\t\t\t\tmargin:0px;\n\t\t\t\t\t\t\t\t\t\t\t"
                                        }
                                    }
                                ]
                            },
                            // PIC2
                            {
                                type: WebElementFactory_1.WebFactoryElementType.WEB_ELEMENT_BLOCK,
                                blockStyle: "\n\t\t\t\t\t\t\t\t\tdisplay: inline-block;\n\t\t\t\t\t\t\t\t\tposition:relative;\n\t\t\t\t\t\t\t\t\twidth: 200px;\n\t\t\t\t\t\t\t\t\theight: 140px;\n\t\t\t\t\t\t\t\t",
                                config: [
                                    {
                                        type: WebElementFactory_1.WebFactoryElementType.WEB_IMAGE_ELEMENT,
                                        imageSource: WebImageElement_1.ImageSourceType.SPRITE,
                                        imageData: {
                                            assetName: 'symbols',
                                            imageName: 'symbol_PIC2.png',
                                            ratio: 0.7,
                                        },
                                        imageStyle: "\n\t\t\t\t\t\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\t\t\t\t\t"
                                    },
                                    {
                                        type: WebElementFactory_1.WebFactoryElementType.WEB_PAYOUT_ELEMENT,
                                        lineFeed: 7,
                                        payoutPrize: payoutSetting.get('PIC2'),
                                        payoutFormat: {
                                            payoutStyle: "\n\t\t\t\t\t\t\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\t\t\t\t\t\t\tleft: 100px;\n\t\t\t\t\t\t\t\t\t\t\t\ttop: -15px;\n\t\t\t\t\t\t\t\t\t\t\t\tmargin:0px;\n\t\t\t\t\t\t\t\t\t\t\t"
                                        }
                                    }
                                ]
                            }
                        ]
                    },
                    // Bottom
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_ELEMENT_BLOCK,
                        blockStyle: "\n\t\t\t\t\t\t\tposition: relative;\n\t\t\t\t\t\t\ttext-align: left;\n\t\t\t\t\t\t\twidth: 100%;\n\t\t\t\t\t\t\ttop: 50px;\n\t\t\t\t\t\t\tleft: 30px;\n\t\t\t\t\t\t",
                        config: [
                            // PIC3
                            {
                                type: WebElementFactory_1.WebFactoryElementType.WEB_ELEMENT_BLOCK,
                                blockStyle: "\n\t\t\t\t\t\t\t\t\tdisplay: inline-block;\n\t\t\t\t\t\t\t\t\tposition:relative;\n\t\t\t\t\t\t\t\t\twidth: 200px;\n\t\t\t\t\t\t\t\t\theight: 140px;\n\t\t\t\t\t\t\t\t",
                                config: [
                                    {
                                        type: WebElementFactory_1.WebFactoryElementType.WEB_IMAGE_ELEMENT,
                                        imageSource: WebImageElement_1.ImageSourceType.SPRITE,
                                        imageData: {
                                            assetName: 'symbols',
                                            imageName: 'symbol_PIC3.png',
                                            ratio: 0.7,
                                        },
                                        imageStyle: "\n\t\t\t\t\t\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\t\t\t\t\t"
                                    },
                                    {
                                        type: WebElementFactory_1.WebFactoryElementType.WEB_PAYOUT_ELEMENT,
                                        lineFeed: 7,
                                        payoutPrize: payoutSetting.get('PIC3'),
                                        payoutFormat: {
                                            payoutStyle: "\n\t\t\t\t\t\t\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\t\t\t\t\t\t\tleft: 100px;\n\t\t\t\t\t\t\t\t\t\t\t\ttop: -15px;\n\t\t\t\t\t\t\t\t\t\t\t\tmargin:0px;\n\t\t\t\t\t\t\t\t\t\t\t"
                                        }
                                    }
                                ]
                            },
                            // PIC4
                            {
                                type: WebElementFactory_1.WebFactoryElementType.WEB_ELEMENT_BLOCK,
                                blockStyle: "\n\t\t\t\t\t\t\t\t\tdisplay: inline-block;\n\t\t\t\t\t\t\t\t\tposition:relative;\n\t\t\t\t\t\t\t\t\twidth: 200px;\n\t\t\t\t\t\t\t\t\theight: 140px;\n\t\t\t\t\t\t\t\t",
                                config: [
                                    {
                                        type: WebElementFactory_1.WebFactoryElementType.WEB_IMAGE_ELEMENT,
                                        imageSource: WebImageElement_1.ImageSourceType.SPRITE,
                                        imageData: {
                                            assetName: 'symbols',
                                            imageName: 'symbol_PIC4.png',
                                            ratio: 0.7,
                                        },
                                        imageStyle: "\n\t\t\t\t\t\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\t\t\t\t\t"
                                    },
                                    {
                                        type: WebElementFactory_1.WebFactoryElementType.WEB_PAYOUT_ELEMENT,
                                        lineFeed: 7,
                                        payoutPrize: payoutSetting.get('PIC4'),
                                        payoutFormat: {
                                            payoutStyle: "\n\t\t\t\t\t\t\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\t\t\t\t\t\t\tleft: 100px;\n\t\t\t\t\t\t\t\t\t\t\t\ttop: -15px;\n\t\t\t\t\t\t\t\t\t\t\t\tmargin:0px;\n\t\t\t\t\t\t\t\t\t\t\t"
                                        }
                                    }
                                ],
                            },
                            // PIC5
                            {
                                type: WebElementFactory_1.WebFactoryElementType.WEB_ELEMENT_BLOCK,
                                blockStyle: "\n\t\t\t\t\t\t\t\t\tdisplay: inline-block;\n\t\t\t\t\t\t\t\t\tposition:relative;\n\t\t\t\t\t\t\t\t\twidth: 200px;\n\t\t\t\t\t\t\t\t\theight: 140px;\n\t\t\t\t\t\t\t\t",
                                config: [
                                    {
                                        type: WebElementFactory_1.WebFactoryElementType.WEB_IMAGE_ELEMENT,
                                        imageSource: WebImageElement_1.ImageSourceType.SPRITE,
                                        imageData: {
                                            assetName: 'symbols',
                                            imageName: 'symbol_PIC5.png',
                                            ratio: 0.7,
                                        },
                                        imageStyle: "\n\t\t\t\t\t\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\t\t\t\t\t"
                                    },
                                    {
                                        type: WebElementFactory_1.WebFactoryElementType.WEB_PAYOUT_ELEMENT,
                                        lineFeed: 7,
                                        payoutPrize: payoutSetting.get('PIC5'),
                                        payoutFormat: {
                                            payoutStyle: "\n\t\t\t\t\t\t\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\t\t\t\t\t\t\tleft: 100px;\n\t\t\t\t\t\t\t\t\t\t\t\ttop: -15px;\n\t\t\t\t\t\t\t\t\t\t\t\tmargin:0px;\n\t\t\t\t\t\t\t\t\t\t\t"
                                        }
                                    }
                                ]
                            }
                        ]
                    }
                ]
            }),
            //page7 symbols & pay value : A to T
            WebElementFactory_1.WebElementFactory.createWebElementBlock({
                type: WebElementFactory_1.WebFactoryElementType.WEB_ELEMENT_BLOCK,
                blockStyle: "\n\t\t\t\ttext-align: left;\n\t\t\t\twidth: 100%;\n\t\t\t\t",
                config: [
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_ELEMENT,
                        blockStyle: this.getLandscapeMainTitleStyle(),
                        languageKey: 'title3'
                    },
                    // Top
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_ELEMENT_BLOCK,
                        blockStyle: "\n\t\t\t\t\t\t\tposition: relative;\n\t\t\t\t\t\t\ttext-align: left;\n\t\t\t\t\t\t\twidth: 100%;\n\t\t\t\t\t\t\tleft: 120px;\n\t\t\t\t\t\t\ttop: 10px;\n\t\t\t\t\t\t",
                        config: [
                            // A
                            {
                                type: WebElementFactory_1.WebFactoryElementType.WEB_ELEMENT_BLOCK,
                                blockStyle: "\n\t\t\t\t\t\t\t\t\tdisplay: inline-block;\n\t\t\t\t\t\t\t\t\tposition:relative;\n\t\t\t\t\t\t\t\t\twidth: 200px;\n\t\t\t\t\t\t\t\t\theight: 100px;\n\t\t\t\t\t\t\t\t",
                                config: [
                                    {
                                        type: WebElementFactory_1.WebFactoryElementType.WEB_IMAGE_ELEMENT,
                                        imageSource: WebImageElement_1.ImageSourceType.SPRITE,
                                        imageData: {
                                            assetName: 'symbols',
                                            imageName: 'symbol_A.png',
                                            ratio: 0.7,
                                        },
                                        imageStyle: "\n\t\t\t\t\t\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\t\t\t\t\t"
                                    },
                                    {
                                        type: WebElementFactory_1.WebFactoryElementType.WEB_PAYOUT_ELEMENT,
                                        lineFeed: 7,
                                        payoutPrize: payoutSetting.get('A'),
                                        payoutFormat: {
                                            payoutStyle: "\n\t\t\t\t\t\t\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\t\t\t\t\t\t\tleft: 100px;\n\t\t\t\t\t\t\t\t\t\t\t\ttop: -15px;\n\t\t\t\t\t\t\t\t\t\t\t\tmargin:0px;\n\t\t\t\t\t\t\t\t\t\t\t"
                                        }
                                    }
                                ]
                            },
                            // K
                            {
                                type: WebElementFactory_1.WebFactoryElementType.WEB_ELEMENT_BLOCK,
                                blockStyle: "\n\t\t\t\t\t\t\t\t\tdisplay: inline-block;\n\t\t\t\t\t\t\t\t\tposition:relative;\n\t\t\t\t\t\t\t\t\twidth: 200px;\n\t\t\t\t\t\t\t\t\theight: 100px;\n\t\t\t\t\t\t\t\t",
                                config: [
                                    {
                                        type: WebElementFactory_1.WebFactoryElementType.WEB_IMAGE_ELEMENT,
                                        imageSource: WebImageElement_1.ImageSourceType.SPRITE,
                                        imageData: {
                                            assetName: 'symbols',
                                            imageName: 'symbol_K.png',
                                            ratio: 0.7,
                                        },
                                        imageStyle: "\n\t\t\t\t\t\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\t\t\t\t\t"
                                    },
                                    {
                                        type: WebElementFactory_1.WebFactoryElementType.WEB_PAYOUT_ELEMENT,
                                        lineFeed: 7,
                                        payoutPrize: payoutSetting.get('K'),
                                        payoutFormat: {
                                            payoutStyle: "\n\t\t\t\t\t\t\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\t\t\t\t\t\t\tleft: 100px;\n\t\t\t\t\t\t\t\t\t\t\t\ttop: -15px;\n\t\t\t\t\t\t\t\t\t\t\t\tmargin:0px;\n\t\t\t\t\t\t\t\t\t\t\t"
                                        }
                                    }
                                ]
                            }
                        ]
                    },
                    // Bottom
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_ELEMENT_BLOCK,
                        blockStyle: "\n\t\t\t\t\t\t\tposition: relative;\n\t\t\t\t\t\t\ttext-align: left;\n\t\t\t\t\t\t\twidth: 100%;\n\t\t\t\t\t\t\tleft: 30px;\n\t\t\t\t\t\t\ttop: 15px;\n\t\t\t\t\t\t",
                        config: [
                            // Q
                            {
                                type: WebElementFactory_1.WebFactoryElementType.WEB_ELEMENT_BLOCK,
                                blockStyle: "\n\t\t\t\t\t\t\t\t\tdisplay: inline-block;\n\t\t\t\t\t\t\t\t\tposition:relative;\n\t\t\t\t\t\t\t\t\twidth: 200px;\n\t\t\t\t\t\t\t\t\theight: 100px;\n\t\t\t\t\t\t\t\t",
                                config: [
                                    {
                                        type: WebElementFactory_1.WebFactoryElementType.WEB_IMAGE_ELEMENT,
                                        imageSource: WebImageElement_1.ImageSourceType.SPRITE,
                                        imageData: {
                                            assetName: 'symbols',
                                            imageName: 'symbol_Q.png',
                                            ratio: 0.7,
                                        },
                                        imageStyle: "\n\t\t\t\t\t\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\t\t\t\t\t"
                                    },
                                    {
                                        type: WebElementFactory_1.WebFactoryElementType.WEB_PAYOUT_ELEMENT,
                                        lineFeed: 7,
                                        payoutPrize: payoutSetting.get('Q'),
                                        payoutFormat: {
                                            payoutStyle: "\n\t\t\t\t\t\t\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\t\t\t\t\t\t\tleft: 100px;\n\t\t\t\t\t\t\t\t\t\t\t\ttop: -15px;\n\t\t\t\t\t\t\t\t\t\t\t\tmargin:0px;\n\t\t\t\t\t\t\t\t\t\t\t"
                                        }
                                    }
                                ]
                            },
                            // J
                            {
                                type: WebElementFactory_1.WebFactoryElementType.WEB_ELEMENT_BLOCK,
                                blockStyle: "\n\t\t\t\t\t\t\t\t\tdisplay: inline-block;\n\t\t\t\t\t\t\t\t\tposition:relative;\n\t\t\t\t\t\t\t\t\twidth: 200px;\n\t\t\t\t\t\t\t\t\theight: 100px;\n\t\t\t\t\t\t\t\t",
                                config: [
                                    {
                                        type: WebElementFactory_1.WebFactoryElementType.WEB_IMAGE_ELEMENT,
                                        imageSource: WebImageElement_1.ImageSourceType.SPRITE,
                                        imageData: {
                                            assetName: 'symbols',
                                            imageName: 'symbol_J.png',
                                            ratio: 0.7,
                                        },
                                        imageStyle: "\n\t\t\t\t\t\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\t\t\t\t\t"
                                    },
                                    {
                                        type: WebElementFactory_1.WebFactoryElementType.WEB_PAYOUT_ELEMENT,
                                        lineFeed: 7,
                                        payoutPrize: payoutSetting.get('J'),
                                        payoutFormat: {
                                            payoutStyle: "\n\t\t\t\t\t\t\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\t\t\t\t\t\t\tleft: 100px;\n\t\t\t\t\t\t\t\t\t\t\t\ttop: -15px;\n\t\t\t\t\t\t\t\t\t\t\t\tmargin:0px;\n\t\t\t\t\t\t\t\t\t\t\t"
                                        }
                                    }
                                ],
                            },
                            // T
                            {
                                type: WebElementFactory_1.WebFactoryElementType.WEB_ELEMENT_BLOCK,
                                blockStyle: "\n\t\t\t\t\t\t\t\t\tdisplay: inline-block;\n\t\t\t\t\t\t\t\t\tposition:relative;\n\t\t\t\t\t\t\t\t\twidth: 200px;\n\t\t\t\t\t\t\t\t\theight: 100px;\n\t\t\t\t\t\t\t\t",
                                config: [
                                    {
                                        type: WebElementFactory_1.WebFactoryElementType.WEB_IMAGE_ELEMENT,
                                        imageSource: WebImageElement_1.ImageSourceType.SPRITE,
                                        imageData: {
                                            assetName: 'symbols',
                                            imageName: 'symbol_T.png',
                                            ratio: 0.7,
                                        },
                                        imageStyle: "\n\t\t\t\t\t\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\t\t\t\t\t"
                                    },
                                    {
                                        type: WebElementFactory_1.WebFactoryElementType.WEB_PAYOUT_ELEMENT,
                                        lineFeed: 7,
                                        payoutPrize: payoutSetting.get('T'),
                                        payoutFormat: {
                                            payoutStyle: "\n\t\t\t\t\t\t\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\t\t\t\t\t\t\tleft: 100px;\n\t\t\t\t\t\t\t\t\t\t\t\ttop: -15px;\n\t\t\t\t\t\t\t\t\t\t\t\tmargin:0px;\n\t\t\t\t\t\t\t\t\t\t\t"
                                        }
                                    }
                                ]
                            }
                        ]
                    },
                    // content
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_CONTENT_ELEMENT,
                        languageKey: 'content3',
                        blockStyle: "\n\t\t\t\t\t\t\twidth: 100%;\n\t\t\t\t\t\t"
                    }
                ]
            })
        ];
    };
    /**
     * set up landscape line game line config block layout
     */
    DHBMLUIPaytableConfig.prototype.getLandscapeLineGameElements = function () {
        return [
            WebElementFactory_1.WebElementFactory.createWebElementBlock({
                type: WebElementFactory_1.WebFactoryElementType.WEB_ELEMENT_BLOCK,
                config: [
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_ELEMENT,
                        blockStyle: this.getLandscapeMainTitleStyle(),
                        languageKey: 'lineGameTitle',
                    },
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_LINE_PATTERN_ELEMENT,
                        blockStyle: "\n\t\t\t\t\t\t\tposition: relative;\n\t\t\t\t\t\t",
                        patternStyleConfig: this.getLandscapeLinePatternStyleConfig(),
                        patternPosition: {
                            x: 15,
                            y: 0
                        },
                        startLineNumber: 0,
                        endLineNumber: 20
                    }
                ]
            }),
            WebElementFactory_1.WebElementFactory.createWebElementBlock({
                type: WebElementFactory_1.WebFactoryElementType.WEB_ELEMENT_BLOCK,
                config: [
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_ELEMENT,
                        blockStyle: this.getLandscapeMainTitleStyle(),
                        languageKey: 'lineGameTitle',
                    },
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_LINE_PATTERN_ELEMENT,
                        blockStyle: "\n\t\t\t\t\t\t\tposition: relative;\n\t\t\t\t\t\t",
                        patternStyleConfig: this.getLandscapeLinePatternStyleConfig(),
                        patternPosition: {
                            x: 15,
                            y: 0
                        },
                        startLineNumber: 20,
                        endLineNumber: 40
                    }
                ]
            }),
            WebElementFactory_1.WebElementFactory.createWebElementBlock({
                type: WebElementFactory_1.WebFactoryElementType.WEB_ELEMENT_BLOCK,
                config: [
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_ELEMENT,
                        blockStyle: this.getLandscapeMainTitleStyle(),
                        languageKey: 'lineGameTitle',
                    },
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_LINE_PATTERN_ELEMENT,
                        blockStyle: "\n\t\t\t\t\t\t\tposition: relative;\n\t\t\t\t\t\t",
                        patternStyleConfig: this.getLandscapeLinePatternStyleConfig(),
                        patternPosition: {
                            x: 15,
                            y: 0
                        },
                        startLineNumber: 40,
                        endLineNumber: 50
                    }
                ]
            })
        ];
    };
    /**
     * set up main title style
     */
    DHBMLUIPaytableConfig.prototype.getLandscapeMainTitleStyle = function () {
        return "\n\t\t\tfont-size: 33px;\n\t\t\tposition: absolute;\n\t\t\ttop: -45.5px;\n\t\t\tleft: -40px;\n\t\t\tz-index: 11;\n\t\t\twhite-space: pre;\n\t\t\tfont-weight: bold;\n\t\t";
    };
    /**
     * set portrait line pattern style config
     */
    DHBMLUIPaytableConfig.prototype.getPortraitLinePatternStyleConfig = function () {
        return {
            blockStyle: "\n\t\t\t\tmargin: 10px 0 0 0px;\n\t\t\t\tfloat: left;\n\t\t\t",
            elementStyle: "\n\t\t\t\theight:10px;\n\t\t\t\twidth:10px;\n\t\t\t",
            backgroundConfig: [
                WebElementFactory_1.WebElementFactory.createWebElementBlock({
                    type: WebElementFactory_1.WebFactoryElementType.WEB_ELEMENT_BLOCK,
                    blockStyle: "\n\t\t\t\t\tposition:relative;\n\t\t\t\t\tbackground-color: #ffffff;\n\t\t\t\t\theight:50px;\n\t\t\t\t\twidth:62px;\n\t\t\t\t\t",
                    config: []
                })
            ],
            patternElementPosition: [
                [{ x: 2, y: 2 }, { x: 2, y: 14 }, { x: 2, y: 26 }, { x: 2, y: 38 }],
                [{ x: 14, y: 2 }, { x: 14, y: 14 }, { x: 14, y: 26 }, { x: 14, y: 38 }],
                [{ x: 26, y: 2 }, { x: 26, y: 14 }, { x: 26, y: 26 }, { x: 26, y: 38 }],
                [{ x: 38, y: 2 }, { x: 38, y: 14 }, { x: 38, y: 26 }, { x: 38, y: 38 }],
                [{ x: 50, y: 2 }, { x: 50, y: 14 }, { x: 50, y: 26 }, { x: 50, y: 38 }]
            ]
        };
    };
    DHBMLUIPaytableConfig.prototype.getPortraitLinePatternBlockStyleConfig = function () {
        return "\n\t\t\twidth: 431px;\n\t\t\tfont-size: 14px;\n\t\t\tposition: relative;\n\t\t";
    };
    /**
     * set landscape line pattern style config
     */
    DHBMLUIPaytableConfig.prototype.getLandscapeLinePatternStyleConfig = function () {
        return {
            blockStyle: "\n\t\t\t\tmargin: 10px 0 0 0px;\n\t\t\t\tfloat: left;\n\t\t\t",
            elementStyle: "\n\t\t\t\theight:10px;\n\t\t\t\twidth:10px;\n\t\t\t",
            backgroundConfig: [
                WebElementFactory_1.WebElementFactory.createWebElementBlock({
                    type: WebElementFactory_1.WebFactoryElementType.WEB_ELEMENT_BLOCK,
                    blockStyle: "\n\t\t\t\t\tposition:relative;\n\t\t\t\t\tbackground-color: #ffffff;\n\t\t\t\t\theight:50px;\n\t\t\t\t\twidth:62px;\n\t\t\t\t\t",
                    config: []
                })
            ],
            patternElementPosition: [
                [{ x: 2, y: 2 }, { x: 2, y: 14 }, { x: 2, y: 26 }, { x: 2, y: 38 }],
                [{ x: 14, y: 2 }, { x: 14, y: 14 }, { x: 14, y: 26 }, { x: 14, y: 38 }],
                [{ x: 26, y: 2 }, { x: 26, y: 14 }, { x: 26, y: 26 }, { x: 26, y: 38 }],
                [{ x: 38, y: 2 }, { x: 38, y: 14 }, { x: 38, y: 26 }, { x: 38, y: 38 }],
                [{ x: 50, y: 2 }, { x: 50, y: 14 }, { x: 50, y: 26 }, { x: 50, y: 38 }]
            ]
        };
    };
    return DHBMLUIPaytableConfig;
}(MLUIPaytableConfig_1.MLUIPaytableConfig));
exports.DHBMLUIPaytableConfig = DHBMLUIPaytableConfig;


/***/ }),
/* 957 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var DHBMLUILineConfig = /** @class */ (function () {
    function DHBMLUILineConfig() {
    }
    /**
    * format line config for line pattern
    * @param lineConfigs line config from server
    * @param symbolAmount amount of symbols on one reel
    */
    DHBMLUILineConfig.formatLineConfig = function (lineConfigs, symbolAmount) {
        var output = [];
        for (var i = 0; i < lineConfigs.length; i++) {
            var onePattern = [];
            for (var j = 0; j < lineConfigs[i].length; j++) {
                var oneReel = [];
                for (var k = 0; k < symbolAmount; k++) {
                    if (k === lineConfigs[i][j]) {
                        oneReel.push(true);
                    }
                    else {
                        oneReel.push(false);
                    }
                }
                onePattern.push(oneReel);
            }
            output.push(onePattern);
        }
        return output;
    };
    DHBMLUILineConfig.getLineConfig = function () {
        return this.formatLineConfig(this.lineConfig, this.symbolAmount);
    };
    //define amount of symbols on one reel
    DHBMLUILineConfig.symbolAmount = 4;
    DHBMLUILineConfig.lineConfig = [
        // line 1~5
        [1, 1, 1, 1, 1],
        [0, 0, 0, 0, 0],
        [2, 2, 2, 2, 2],
        [3, 3, 3, 3, 3],
        [0, 1, 2, 1, 0],
        // line 6~10
        [1, 2, 3, 2, 1],
        [2, 1, 0, 1, 2],
        [3, 2, 1, 2, 3],
        [0, 0, 1, 0, 0],
        [1, 1, 2, 1, 1],
        // line 11~15
        [2, 2, 3, 2, 2],
        [1, 1, 0, 1, 1],
        [2, 2, 1, 2, 2],
        [3, 3, 2, 3, 3],
        [0, 1, 1, 1, 0],
        // line 16~20
        [1, 2, 2, 2, 1],
        [2, 3, 3, 3, 2],
        [1, 0, 0, 0, 1],
        [2, 1, 1, 1, 2],
        [3, 2, 2, 2, 3],
        // line 21~25
        [0, 2, 0, 2, 0],
        [1, 3, 1, 3, 1],
        [3, 1, 3, 1, 3],
        [2, 0, 2, 0, 2],
        [0, 1, 2, 3, 3],
        // line 26~30
        [3, 2, 1, 0, 0],
        [0, 1, 0, 1, 0],
        [1, 2, 1, 2, 1],
        [2, 3, 2, 3, 2],
        [1, 0, 1, 0, 1],
        // line 31~35
        [2, 1, 2, 1, 2],
        [3, 2, 3, 2, 3],
        [1, 0, 1, 2, 1],
        [2, 1, 2, 3, 2],
        [2, 3, 2, 1, 2],
        // line 36~40
        [1, 2, 1, 0, 1],
        [0, 0, 3, 0, 0],
        [3, 3, 0, 3, 3],
        [0, 1, 2, 2, 2],
        [1, 2, 3, 3, 3],
        // line 41~45
        [2, 1, 0, 0, 0],
        [3, 2, 1, 1, 1],
        [0, 2, 3, 2, 0],
        [3, 1, 0, 1, 3],
        [1, 0, 2, 0, 1],
        // line 46~50
        [2, 1, 3, 1, 2],
        [2, 3, 1, 3, 2],
        [1, 2, 0, 2, 1],
        [0, 0, 0, 1, 1],
        [3, 3, 3, 2, 2],
    ];
    return DHBMLUILineConfig;
}());
exports.DHBMLUILineConfig = DHBMLUILineConfig;


/***/ }),
/* 958 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var WebpageElement_1 = __webpack_require__(249);
var MLUIHistoryConfig_1 = __webpack_require__(260);
var TsMap_1 = __webpack_require__(2);
var SoundConfig_1 = __webpack_require__(55);
var WebImageElement_1 = __webpack_require__(69);
var WebElementFactory_1 = __webpack_require__(45);
var DHBMLUIHistoryConfig = /** @class */ (function (_super) {
    __extends(DHBMLUIHistoryConfig, _super);
    /**
     * LocalisationKeys required to join this game
     */
    function DHBMLUIHistoryConfig() {
        var _this = _super.call(this) || this;
        _this.localisationKeys.push('history_Game');
        return _this;
    }
    /**
     * Portrait round detail
     */
    DHBMLUIHistoryConfig.prototype.getPortraitDetialFormatConfigs = function () {
        return [
            {
                type: WebpageElement_1.WebElementType.RESULTS_PAGING,
                pageSize: 0,
                variableName: 'reelResults',
                pagingConfig: {},
                config: [
                    {
                        type: WebpageElement_1.WebElementType.FEATURES,
                        featureType: 'PICK',
                        blockStyle: "\n\t\t\t\t\t\t\theight:300px;\n\t\t\t\t\t\t\twidth:100%;\n\t\t\t\t\t\t",
                        choiceSymbolConfig: {
                            blockStyle: "\n\t\t\t\t\t\t\t\tleft: 20px;\n\t\t\t\t\t\t\t",
                            choiceSymbolPosition: [
                                { x: 0, y: 0 }, { x: 90, y: 0 }, { x: 180, y: 0 }, { x: 270, y: 0 },
                                { x: 0, y: 90 }, { x: 90, y: 90 }, { x: 180, y: 90 }, { x: 270, y: 90 },
                                { x: 0, y: 180 }, { x: 90, y: 180 }, { x: 180, y: 180 }, { x: 270, y: 180 },
                                { x: 0, y: 270 }, { x: 90, y: 270 }, { x: 180, y: 270 }, { x: 270, y: 270 }
                            ],
                            choiceSymbolImageConfigs: new TsMap_1.TsMap([
                                [
                                    '*', WebElementFactory_1.WebElementFactory.createWebImageElement({
                                        type: WebElementFactory_1.WebFactoryElementType.WEB_IMAGE_ELEMENT,
                                        blockStyle: "\n\t\t\t\t\t\t\t\t\t\t\twidth:82px;\n\t\t\t\t\t\t\t\t\t\t\theight:79.5px;\n\t\t\t\t\t\t\t\t\t\t",
                                        imageSource: WebImageElement_1.ImageSourceType.TEXTURE,
                                        imageData: {
                                            imagePath: 'assets/freeSpins/background/Pick_Coin.png',
                                            width: 294,
                                            height: 284,
                                            ratio: 0.28
                                        },
                                        imageStyle: "\n\t\t\t\t\t\t\t\t\t\t"
                                    })
                                ],
                                [
                                    'GRAND', WebElementFactory_1.WebElementFactory.createWebImageElement({
                                        type: WebElementFactory_1.WebFactoryElementType.WEB_IMAGE_ELEMENT,
                                        blockStyle: "\n\t\t\t\t\t\t\t\t\t\t\twidth:85px;\n\t\t\t\t\t\t\t\t\t\t\theight:86px;\n\t\t\t\t\t\t\t\t\t\t",
                                        imageSource: WebImageElement_1.ImageSourceType.TEXTURE,
                                        imageData: {
                                            imagePath: 'assets/freeSpins/background/GRAND.png',
                                            width: 498,
                                            height: 506,
                                            ratio: 0.17
                                        },
                                        imageStyle: "\n\t\t\t\t\t\t\t\t\t\t"
                                    })
                                ],
                                [
                                    'MAJOR', WebElementFactory_1.WebElementFactory.createWebImageElement({
                                        type: WebElementFactory_1.WebFactoryElementType.WEB_IMAGE_ELEMENT,
                                        blockStyle: "\n\t\t\t\t\t\t\t\t\t\twidth:85px;\n\t\t\t\t\t\t\t\t\t\theight:86px;\n\t\t\t\t\t\t\t\t\t\t",
                                        imageSource: WebImageElement_1.ImageSourceType.TEXTURE,
                                        imageData: {
                                            imagePath: 'assets/freeSpins/background/MAJOR.png',
                                            width: 498,
                                            height: 506,
                                            ratio: 0.17
                                        },
                                        imageStyle: "\n\t\t\t\t\t\t\t\t\t\t"
                                    })
                                ],
                                [
                                    'MINOR', WebElementFactory_1.WebElementFactory.createWebImageElement({
                                        type: WebElementFactory_1.WebFactoryElementType.WEB_IMAGE_ELEMENT,
                                        blockStyle: "\n\t\t\t\t\t\t\t\t\t\twidth:85px;\n\t\t\t\t\t\t\t\t\t\theight:86px;\n\t\t\t\t\t\t\t\t\t\t",
                                        imageSource: WebImageElement_1.ImageSourceType.TEXTURE,
                                        imageData: {
                                            imagePath: 'assets/freeSpins/background/MINOR.png',
                                            width: 498,
                                            height: 506,
                                            ratio: 0.17
                                        },
                                        imageStyle: "\n\t\t\t\t\t\t\t\t\t\t"
                                    })
                                ],
                                [
                                    'MINI', WebElementFactory_1.WebElementFactory.createWebImageElement({
                                        type: WebElementFactory_1.WebFactoryElementType.WEB_IMAGE_ELEMENT,
                                        blockStyle: "\n\t\t\t\t\t\t\t\t\t\twidth:85px;\n\t\t\t\t\t\t\t\t\t\theight:86px;\n\t\t\t\t\t\t\t\t\t\t",
                                        imageSource: WebImageElement_1.ImageSourceType.TEXTURE,
                                        imageData: {
                                            imagePath: 'assets/freeSpins/background/MINI.png',
                                            width: 498,
                                            height: 506,
                                            ratio: 0.17
                                        },
                                        imageStyle: "\n\t\t\t\t\t\t\t\t\t\t"
                                    })
                                ]
                            ])
                        }
                    },
                    {
                        type: WebpageElement_1.WebElementType.REEL_RESULTS,
                        blockStyle: '',
                        reelsConfig: {
                            blockStyle: "\n\t\t\t\t\t\t\t\tposition:relative;\n\t\t\t\t\t\t\t\theight:280px;\n\t\t\t\t\t\t\t\ttext-align: center;\n\t\t\t\t\t\t\t\tleft: 30px;\n   \t\t\t\t\t\t\t\ttop: 20px;\n\t\t\t\t\t\t\t",
                            symbolImageCofig: {
                                sourceName: 'symbols',
                                imageName: 'symbol_{name}.png',
                                ratio: 0.5
                            },
                            reelSymbolPosition: [
                                [{ x: 0, y: 0 }, { x: 0, y: 70 }, { x: 0, y: 140 }, { x: 0, y: 210 }],
                                [{ x: 72, y: 0 }, { x: 72, y: 70 }, { x: 72, y: 140 }, { x: 72, y: 210 }],
                                [{ x: 144, y: 0 }, { x: 144, y: 70 }, { x: 144, y: 140 }, { x: 144, y: 210 }],
                                [{ x: 216, y: 0 }, { x: 216, y: 70 }, { x: 216, y: 140 }, { x: 216, y: 210 }],
                                [{ x: 288, y: 0 }, { x: 288, y: 70 }, { x: 288, y: 140 }, { x: 288, y: 210 }],
                            ]
                        },
                        devisionLine: WebElementFactory_1.WebElementFactory.createWebLineElement({
                            type: WebElementFactory_1.WebFactoryElementType.WEB_LINE_ELEMENT,
                            show: true,
                            color: '#ffffff',
                            length: 390,
                            height: 14,
                            lineHeight: 1.5
                        }),
                        reelWinsConfig: {
                            blockStyle: "\n\t\t\t\t\t\t\t\tmargin-bottom:35px;\n\t\t\t\t\t\t\t",
                            symbolImageCofig: {
                                sourceName: 'symbols',
                                imageName: 'symbol_{name}.png',
                                ratio: 0.35
                            },
                            lineWinConfig: {
                                linePattern: this.getPortraitLinePatternStyleConfig(),
                            },
                            rowHeight: 56,
                            winCountStyle: "top:14px; font-size:16px;",
                            symbolStyle: "margin:23px;",
                            showAll: false,
                            winTextConfig: {
                                languageKey: 'won',
                                maxNumberAmount: 25,
                            }
                        }
                    }
                ]
            }
        ];
    };
    /**
     * set portrait line pattern style config
     */
    DHBMLUIHistoryConfig.prototype.getPortraitLinePatternStyleConfig = function () {
        return {
            blockStyle: "\n\t\t\t\tmargin: 10px 0 0 5px;\n\t\t\t\tfloat: left;\n\t\t\t",
            elementStyle: "\n\t\t\t\theight:10px;\n\t\t\t\twidth:10px;\n\t\t\t",
            backgroundConfig: [
                WebElementFactory_1.WebElementFactory.createWebElementBlock({
                    type: WebElementFactory_1.WebFactoryElementType.WEB_ELEMENT_BLOCK,
                    blockStyle: "\n\t\t\t\t\tposition:relative;\n\t\t\t\t\tbackground-color: #ffffff;\n\t\t\t\t\theight:50px;\n\t\t\t\t\twidth:62px;\n\t\t\t\t\t",
                    config: []
                })
            ],
            patternElementPosition: [
                [{ x: 2, y: 2 }, { x: 2, y: 14 }, { x: 2, y: 26 }, { x: 2, y: 38 }],
                [{ x: 14, y: 2 }, { x: 14, y: 14 }, { x: 14, y: 26 }, { x: 14, y: 38 }],
                [{ x: 26, y: 2 }, { x: 26, y: 14 }, { x: 26, y: 26 }, { x: 26, y: 38 }],
                [{ x: 38, y: 2 }, { x: 38, y: 14 }, { x: 38, y: 26 }, { x: 38, y: 38 }],
                [{ x: 50, y: 2 }, { x: 50, y: 14 }, { x: 50, y: 26 }, { x: 50, y: 38 }]
            ]
        };
    };
    DHBMLUIHistoryConfig.prototype.getLandscapeDetialFormatConfigs = function () {
        return [
            {
                type: WebpageElement_1.WebElementType.RESULTS_PAGING,
                blockStyle: "\n\t\t\t\t\tposition: absolute;\n\t\t\t\t\ttop: 0px;\n\t\t\t\t",
                pagingConfig: {
                    arrowButton: {
                        blockStyle: 'top: 67px;left: -15px;',
                        nextButton: {
                            soundKey: SoundConfig_1.SoundConfig.buttonClick,
                            buttonImage: WebElementFactory_1.WebElementFactory.createWebImageElement({
                                type: WebElementFactory_1.WebFactoryElementType.WEB_IMAGE_ELEMENT,
                                blockStyle: "\n\t\t\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\t\t\tleft: 275px;\n\t\t\t\t\t\t\t\ttop:-19px;\n\t\t\t\t\t\t\t\tz-index:20;\n\t\t\t\t\t\t\t\twidth:70px;\n\t\t\t\t\t\t\t\twidth: 33px;\n\t\t\t\t\t\t\t\theight: 33px;\n\t\t\t\t\t\t\t\tuser-select: none;\n\t\t\t\t\t\t\t\t",
                                imageSource: WebImageElement_1.ImageSourceType.TEXTURE,
                                imageData: {
                                    imagePath: 'assets/helpscreens/arrow.png',
                                    width: 60,
                                    height: 60,
                                    ratio: 0.56
                                },
                            })
                        },
                        preButton: {
                            soundKey: SoundConfig_1.SoundConfig.buttonClick,
                            buttonImage: WebElementFactory_1.WebElementFactory.createWebImageElement({
                                type: WebElementFactory_1.WebFactoryElementType.WEB_IMAGE_ELEMENT,
                                blockStyle: "\n\t\t\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\t\t\tleft: 25px;\n\t\t\t\t\t\t\t\ttop:-19px;\n\t\t\t\t\t\t\t\tz-index:20;\n\t\t\t\t\t\t\t\twidth:70px;\n\t\t\t\t\t\t\t\twidth: 33px;\n\t\t\t\t\t\t\t\theight: 33px;\n\t\t\t\t\t\t\t\tuser-select: none;\n\t\t\t\t\t\t\t\ttransform: scaleX(-1);\n\t\t\t\t\t\t\t\t",
                                imageSource: WebImageElement_1.ImageSourceType.TEXTURE,
                                imageData: {
                                    imagePath: 'assets/helpscreens/arrow.png',
                                    width: 60,
                                    height: 60,
                                    ratio: 0.56
                                },
                                imageStyle: "\n\t\t\t\t\t\t\t\t"
                            })
                        }
                    },
                    dropDownBox: {
                        soundKey: SoundConfig_1.SoundConfig.buttonClick,
                        dropDownStyle: "\n\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\tleft: 38px;\n\t\t\t\t\t\ttop: 35px;\n\t\t\t\t\t\tfont-size: 15px;\n\t\t\t\t\t\twidth: 225px;\n\t\t\t\t\t\tline-height: 50px;\n\t\t\t\t\t\ttext-align: center;\n\t\t\t\t\t\tz-index: 9;\n\t\t\t\t\t\t",
                        dropDownMenuStyle: "\n\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\tleft: 20px;\n\t\t\t\t\t\ttop: 75px;\n\t\t\t\t\t\tfont-size: 16px;\n\t\t\t\t\t\tmax-height: 220px;\n\t\t\t\t\t\tpadding: 0px 85px;\n\t\t\t\t\t\twidth: 400px;\n\t\t\t\t\t\tz-index: 30;\n\t\t\t\t\t\t",
                        dropDownMenuRowStyle: "\n\t\t\t\t\t\t",
                        arrowTurnStyle: "\n\t\t\t\t\t\t\ttop:0px;\n\t\t\t\t\t\t\tmargin-left: 5px;\n\t\t\t\t\t\t",
                        arrowImage: WebElementFactory_1.WebElementFactory.createWebImageElement({
                            type: WebElementFactory_1.WebFactoryElementType.WEB_IMAGE_ELEMENT,
                            blockStyle: "\n\t\t\t\t\t\t\tposition: relative;\n\t\t\t\t\t\t\ttransform:rotate(90deg);\n\t\t\t\t\t\t\ttop: 11px;\n\t\t\t\t\t\t\twidth: 33px;\n\t\t\t\t\t\t\theight: 33px;\n\t\t\t\t\t\t\tdisplay: inline-block;\n\t\t\t\t\t\t\tuser-select: none;",
                            imageSource: WebImageElement_1.ImageSourceType.TEXTURE,
                            imageData: {
                                imagePath: 'assets/helpscreens/arrow.png',
                                width: 60,
                                height: 60,
                                ratio: 0.56
                            },
                            imageStyle: "\n\t\t\t\t\t\t\t ",
                        }),
                        variableName: 'title'
                    }
                },
                pageSize: 1,
                variableName: 'reelResults',
                config: [
                    {
                        type: WebpageElement_1.WebElementType.FEATURES,
                        featureType: 'PICK',
                        blockStyle: "\n\t\t\t\t\t\t\theight:300px;\n\t\t\t\t\t\t\twidth:100%;\n\t\t\t\t\t\t",
                        choiceSymbolConfig: {
                            blockStyle: "\n\t\t\t\t\t\t\t\ttop: 60px;\n\t\t\t\t\t\t\t",
                            choiceSymbolPosition: [
                                { x: 0, y: 0 }, { x: 80, y: 0 }, { x: 160, y: 0 }, { x: 240, y: 0 },
                                { x: 0, y: 80 }, { x: 80, y: 80 }, { x: 160, y: 80 }, { x: 240, y: 80 },
                                { x: 0, y: 160 }, { x: 80, y: 160 }, { x: 160, y: 160 }, { x: 240, y: 160 },
                                { x: 0, y: 240 }, { x: 80, y: 240 }, { x: 160, y: 240 }, { x: 240, y: 240 }
                            ],
                            choiceSymbolImageConfigs: new TsMap_1.TsMap([
                                [
                                    '*', WebElementFactory_1.WebElementFactory.createWebImageElement({
                                        type: WebElementFactory_1.WebFactoryElementType.WEB_IMAGE_ELEMENT,
                                        blockStyle: "\n\t\t\t\t\t\t\t\t\t\t\twidth:82px;\n\t\t\t\t\t\t\t\t\t\t\theight:79.5px;\n\t\t\t\t\t\t\t\t\t\t",
                                        imageSource: WebImageElement_1.ImageSourceType.TEXTURE,
                                        imageData: {
                                            imagePath: 'assets/freeSpins/background/Pick_Coin.png',
                                            width: 294,
                                            height: 284,
                                            ratio: 0.24
                                        },
                                        imageStyle: "\n\t\t\t\t\t\t\t\t\t\t"
                                    })
                                ],
                                [
                                    'GRAND', WebElementFactory_1.WebElementFactory.createWebImageElement({
                                        type: WebElementFactory_1.WebFactoryElementType.WEB_IMAGE_ELEMENT,
                                        blockStyle: "\n\t\t\t\t\t\t\t\t\t\t\twidth:85px;\n\t\t\t\t\t\t\t\t\t\t\theight:86px;\n\t\t\t\t\t\t\t\t\t\t",
                                        imageSource: WebImageElement_1.ImageSourceType.TEXTURE,
                                        imageData: {
                                            imagePath: 'assets/freeSpins/background/GRAND.png',
                                            width: 498,
                                            height: 506,
                                            ratio: 0.15
                                        },
                                        imageStyle: "\n\t\t\t\t\t\t\t\t\t\t"
                                    })
                                ],
                                [
                                    'MAJOR', WebElementFactory_1.WebElementFactory.createWebImageElement({
                                        type: WebElementFactory_1.WebFactoryElementType.WEB_IMAGE_ELEMENT,
                                        blockStyle: "\n\t\t\t\t\t\t\t\t\t\twidth:85px;\n\t\t\t\t\t\t\t\t\t\theight:86px;\n\t\t\t\t\t\t\t\t\t\t",
                                        imageSource: WebImageElement_1.ImageSourceType.TEXTURE,
                                        imageData: {
                                            imagePath: 'assets/freeSpins/background/MAJOR.png',
                                            width: 498,
                                            height: 506,
                                            ratio: 0.15
                                        },
                                        imageStyle: "\n\t\t\t\t\t\t\t\t\t\t"
                                    })
                                ],
                                [
                                    'MINOR', WebElementFactory_1.WebElementFactory.createWebImageElement({
                                        type: WebElementFactory_1.WebFactoryElementType.WEB_IMAGE_ELEMENT,
                                        blockStyle: "\n\t\t\t\t\t\t\t\t\t\twidth:85px;\n\t\t\t\t\t\t\t\t\t\theight:86px;\n\t\t\t\t\t\t\t\t\t\t",
                                        imageSource: WebImageElement_1.ImageSourceType.TEXTURE,
                                        imageData: {
                                            imagePath: 'assets/freeSpins/background/MINOR.png',
                                            width: 498,
                                            height: 506,
                                            ratio: 0.15
                                        },
                                        imageStyle: "\n\t\t\t\t\t\t\t\t\t\t"
                                    })
                                ],
                                [
                                    'MINI', WebElementFactory_1.WebElementFactory.createWebImageElement({
                                        type: WebElementFactory_1.WebFactoryElementType.WEB_IMAGE_ELEMENT,
                                        blockStyle: "\n\t\t\t\t\t\t\t\t\t\twidth:85px;\n\t\t\t\t\t\t\t\t\t\theight:86px;\n\t\t\t\t\t\t\t\t\t\t",
                                        imageSource: WebImageElement_1.ImageSourceType.TEXTURE,
                                        imageData: {
                                            imagePath: 'assets/freeSpins/background/MINI.png',
                                            width: 498,
                                            height: 506,
                                            ratio: 0.15
                                        },
                                        imageStyle: "\n\t\t\t\t\t\t\t\t\t\t"
                                    })
                                ]
                            ])
                        }
                    },
                    {
                        type: WebpageElement_1.WebElementType.REEL_RESULTS,
                        blockStyle: 'width:0px;',
                        reelsConfig: {
                            blockStyle: "\n\t\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\t\theight:390px;\n\t\t\t\t\t\t\ttop: 65px;\n\t\t\t\t\t\t\tleft: 5px;\n\t\t\t\t\t\t\t",
                            symbolImageCofig: {
                                sourceName: 'symbols',
                                imageName: 'symbol_{name}.png',
                                ratio: 0.38
                            },
                            reelSymbolPosition: [
                                [{ x: 0, y: 0 }, { x: 0, y: 60 }, { x: 0, y: 120 }, { x: 0, y: 180 }],
                                [{ x: 60, y: 0 }, { x: 60, y: 60 }, { x: 60, y: 120 }, { x: 60, y: 180 }],
                                [{ x: 120, y: 0 }, { x: 120, y: 60 }, { x: 120, y: 120 }, { x: 120, y: 180 }],
                                [{ x: 180, y: 0 }, { x: 180, y: 60 }, { x: 180, y: 120 }, { x: 180, y: 180 }],
                                [{ x: 240, y: 0 }, { x: 240, y: 60 }, { x: 240, y: 120 }, { x: 240, y: 180 }],
                            ]
                        },
                        reelWinsConfig: {
                            blockStyle: "\n\t\t\t\t\t\t\tposition:relative;\n\t\t\t\t\t\t\tleft: 360px;\n\t\t\t\t\t\t\twidth:280px;\n\t\t\t\t\t\t\ttop:50px;\n\t\t\t\t\t\t\tmargin:0px;\n\t\t\t\t\t\t\t",
                            symbolImageCofig: {
                                sourceName: 'symbols',
                                imageName: 'symbol_{name}.png',
                                ratio: 0.3
                            },
                            lineWinConfig: {
                                linePattern: this.getLandscapeLinePatternStyleConfig(),
                            },
                            rowHeight: 40,
                            winCountStyle: "\n\t\t\t\t\t\t\t\ttop:14px;\n\t\t\t\t\t\t\t\tfont-size:16px;\n\t\t\t\t\t\t\t",
                            symbolStyle: "\n\t\t\t\t\t\t\t\tmargin:  20px 15px 7px 20px;\n\t\t\t\t\t\t\t",
                            showAll: false,
                            winTextConfig: {
                                languageKey: 'won',
                                maxNumberAmount: 20,
                                textStyle: 'font-size:14px;white-space: pre;left:145px;',
                                winNumberStyle: 'font-size:14px; top:25px;white-space: pre;left:145px;',
                                multiplierStyle: 'font-size:11px;white-space: pre;'
                            },
                            paging: {
                                type: WebpageElement_1.WebElementType.REELWINS_PAGING,
                                pagingConfig: {
                                    arrowButton: {
                                        showNumber: true,
                                        numberStyle: "\n\t\t\t\t\t\t\t\t\t\tfont-size: 16px;\n\t\t\t\t\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\t\t\t\t\tright: -30px;\n\t\t\t\t\t\t\t\t\t\ttop: 280px;\n\t\t\t\t\t\t\t\t\t\t",
                                        blockStyle: "\n\t\t\t\t\t\t\t\t\t\tright: -700px;\n\t\t\t\t\t\t\t\t\t\ttop: -50px;\n\t\t\t\t\t\t\t\t\t\t",
                                        nextButton: {
                                            soundKey: SoundConfig_1.SoundConfig.buttonClick,
                                            buttonImage: WebElementFactory_1.WebElementFactory.createWebImageElement({
                                                type: WebElementFactory_1.WebFactoryElementType.WEB_IMAGE_ELEMENT,
                                                blockStyle: "\n\t\t\t\t\t\t\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\t\t\t\t\t\t\ttop: 310px;\n\t\t\t\t\t\t\t\t\t\t\t\tright: -56px;\n\t\t\t\t\t\t\t\t\t\t\t\ttransform: scaleY(-1);\n\t\t\t\t\t\t\t\t\t\t\t\tz-index:20;\n\t\t\t\t\t\t\t\t\t\t\t\tpadding:0px 20px;\n\t\t\t\t\t\t\t\t\t\t\t\twidth: 33px;\n\t\t\t\t\t\t\t\t\t\t\t\theight: 33px;\n\t\t\t\t\t\t\t\t\t\t\t\tuser-select: none;\n\t\t\t\t\t\t\t\t\t\t\t\t",
                                                imageSource: WebImageElement_1.ImageSourceType.TEXTURE,
                                                imageData: {
                                                    imagePath: 'assets/helpscreens/arrow2.png',
                                                    width: 60,
                                                    height: 60,
                                                    ratio: 0.56
                                                },
                                            })
                                        },
                                        preButton: {
                                            soundKey: SoundConfig_1.SoundConfig.buttonClick,
                                            buttonImage: WebElementFactory_1.WebElementFactory.createWebImageElement({
                                                type: WebElementFactory_1.WebFactoryElementType.WEB_IMAGE_ELEMENT,
                                                blockStyle: "\n\t\t\t\t\t\t\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\t\t\t\t\t\t\ttop: 235px;\n\t\t\t\t\t\t\t\t\t\t\t\tright: -56px;\n\t\t\t\t\t\t\t\t\t\t\t\tz-index:20;\n\t\t\t\t\t\t\t\t\t\t\t\twidth: 33px;\n\t\t\t\t\t\t\t\t\t\t\t\theight: 33px;\n\t\t\t\t\t\t\t\t\t\t\t\tpadding:0px 20px;\n\t\t\t\t\t\t\t\t\t\t\t\tuser-select: none;\n\t\t\t\t\t\t\t\t\t\t\t\t",
                                                imageSource: WebImageElement_1.ImageSourceType.TEXTURE,
                                                imageData: {
                                                    imagePath: 'assets/helpscreens/arrow2.png',
                                                    width: 60,
                                                    height: 60,
                                                    ratio: 0.56
                                                }
                                            })
                                        }
                                    }
                                },
                                OnePageWinAmount: 4,
                            },
                        }
                    }
                ]
            },
            {
                type: WebpageElement_1.WebElementType.WEBPAGE_ELEMENT,
                blockStyle: "\n\t\t\t\tposition:absolute;\n\t\t\t\twidth: 720px;\n\t\t\t\theight: 2px;\n\t\t\t\ttop: 40px;\n\t\t\t\tleft: -6px;\n\t\t\t\tbackground-color: #ffffff;\n\t\t\t\tz-index: 3;\n\t\t\t\t"
            }
        ];
    };
    /**
     * set landscape line pattern style config
     */
    DHBMLUIHistoryConfig.prototype.getLandscapeLinePatternStyleConfig = function () {
        return {
            blockStyle: "\n\t\t\t\tmargin: 15px 0 0 5px;\n\t\t\t\tfloat: left;\n\t\t\t",
            elementStyle: "\n\t\t\t\theight:7px;\n\t\t\t\twidth:7px;\n\t\t\t",
            backgroundConfig: [
                WebElementFactory_1.WebElementFactory.createWebElementBlock({
                    type: WebElementFactory_1.WebFactoryElementType.WEB_ELEMENT_BLOCK,
                    blockStyle: "\n\t\t\t\t\tposition:relative;\n\t\t\t\t\tbackground-color: #ffffff;\n\t\t\t\t\theight: 33px;\n\t\t\t\t\twidth: 41px;\n\t\t\t\t\t",
                    config: []
                })
            ],
            patternElementPosition: [
                [{ x: 1, y: 1 }, { x: 1, y: 9 }, { x: 1, y: 17 }, { x: 1, y: 25 }],
                [{ x: 9, y: 1 }, { x: 9, y: 9 }, { x: 9, y: 17 }, { x: 9, y: 25 }],
                [{ x: 17, y: 1 }, { x: 17, y: 9 }, { x: 17, y: 17 }, { x: 17, y: 25 }],
                [{ x: 25, y: 1 }, { x: 25, y: 9 }, { x: 25, y: 17 }, { x: 25, y: 25 }],
                [{ x: 33, y: 1 }, { x: 33, y: 9 }, { x: 33, y: 17 }, { x: 33, y: 25 }],
            ]
        };
    };
    return DHBMLUIHistoryConfig;
}(MLUIHistoryConfig_1.MLUIHistoryConfig));
exports.DHBMLUIHistoryConfig = DHBMLUIHistoryConfig;


/***/ }),
/* 959 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var MLUIRulesConfig_1 = __webpack_require__(247);
var WebImageElement_1 = __webpack_require__(69);
var WebElementFactory_1 = __webpack_require__(45);
var DHBMLUIRulesConfig = /** @class */ (function (_super) {
    __extends(DHBMLUIRulesConfig, _super);
    /**
     * LocalisationKeys required to join this game
     */
    function DHBMLUIRulesConfig() {
        var _this = _super.call(this) || this;
        _this.localisationKeys.push('rules_Game');
        return _this;
    }
    /**
     * Portrait screen config
     */
    DHBMLUIRulesConfig.prototype.getPortraitGameElements = function () {
        return [
            //rules introduction content
            WebElementFactory_1.WebElementFactory.createWebElementBlock({
                type: WebElementFactory_1.WebFactoryElementType.WEB_ELEMENT_BLOCK,
                config: [
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_ELEMENT,
                        blockStyle: this.getLandscapeMainTitleStyle(),
                        languageKey: 'mainTitle'
                    },
                    // game logo
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_IMAGE_ELEMENT,
                        blockStyle: "\n\t\t\t\t\t\t\tposition: relative;\n\t\t\t\t\t\t\twidth: 350px;\n\t\t\t\t\t\t\theight: 142px;\n\t\t\t\t\t\t\tmargin: auto;\n\t\t\t\t\t\t",
                        imageSource: WebImageElement_1.ImageSourceType.TEXTURE,
                        imageData: {
                            imagePath: 'assets/helpscreens/{locale}/gameLogo.png',
                            width: 500,
                            height: 204,
                            ratio: 0.7
                        },
                        imageStyle: "\n\t\t\t\t\t\t\tposition : absolute;\n\t\t\t\t\t\t"
                    },
                    // game description
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_CONTENT_ELEMENT,
                        blockStyle: "\n\t\t\t\t\t\t\tmargin: 16.8px 0px 0px 0\n\t\t\t\t\t\t",
                        languageKey: 'introductionContent1',
                        contentStyle: "\n\t\t\t\t\t\t\ttext-align: center;\n\t\t\t\t\t\t\tlist-style-type: none;\n\t\t\t\t\t\t"
                    }
                ]
            }),
            //game feature
            WebElementFactory_1.WebElementFactory.createWebElementBlock({
                type: WebElementFactory_1.WebFactoryElementType.WEB_ELEMENT_BLOCK,
                config: [
                    this.getPortraitWebLineConfig(),
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_ELEMENT,
                        blockStyle: this.getPortraitTitleStyle(),
                        languageKey: 'featureTitle1'
                    },
                    // Da Hong Bao Extra Bonus
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_ELEMENT,
                        blockStyle: this.getPortraitSubTitleStyle(),
                        languageKey: 'featureSubTitle1'
                    },
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_CONTENT_ELEMENT,
                        languageKey: 'featureContent1',
                        contentStyle: "\n\t\t\t\t\t\t\tlist-style-type:none;\n\t\t\t\t\t\t\tmargin-bottom: 14px;\n\t\t\t\t\t\t"
                    },
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_CONTENT_ELEMENT,
                        languageKey: 'featureSubContent1',
                        contentStyle: "\n\t\t\t\t\t\t\tmargin-bottom: 14px;\n\t\t\t\t\t\t"
                    },
                    WebElementFactory_1.WebElementFactory.createWebLineElement({
                        type: WebElementFactory_1.WebFactoryElementType.WEB_LINE_ELEMENT,
                        show: false
                    }),
                    // Lucky Bonus Re-spins
                    {
                        blockStyle: "\n\t\t\t\t\t\t\tmargin: 35px 0px 10px;\n\t\t\t\t\t\t",
                        type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_ELEMENT,
                        languageKey: 'featureSubTitle2'
                    },
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_CONTENT_ELEMENT,
                        languageKey: 'featureContent2',
                        contentStyle: "\n\t\t\t\t\t\t\tlist-style-type:none;\n\t\t\t\t\t\t\tmargin-bottom: 14px;\n\t\t\t\t\t\t"
                    },
                    WebElementFactory_1.WebElementFactory.createWebLineElement({
                        type: WebElementFactory_1.WebFactoryElementType.WEB_LINE_ELEMENT,
                        show: false
                    }),
                    // Lucky Spins Feature
                    {
                        blockStyle: "\n\t\t\t\t\t\t\tmargin: 35px 0px 10px;\n\t\t\t\t\t\t",
                        type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_ELEMENT,
                        languageKey: 'featureSubTitle3'
                    },
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_CONTENT_ELEMENT,
                        languageKey: 'featureContent3',
                        contentStyle: "\n\t\t\t\t\t\t\tlist-style-type:none;\n\t\t\t\t\t\t\tmargin-bottom: 14px;\n\t\t\t\t\t\t"
                    },
                    WebElementFactory_1.WebElementFactory.createWebLineElement({
                        type: WebElementFactory_1.WebFactoryElementType.WEB_LINE_ELEMENT,
                        show: false
                    }),
                    // Fortune Spins Feature
                    {
                        blockStyle: "\n\t\t\t\t\t\t\tmargin: 35px 0px 10px;\n\t\t\t\t\t\t",
                        type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_ELEMENT,
                        languageKey: 'featureSubTitle4'
                    },
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_CONTENT_ELEMENT,
                        languageKey: 'featureContent4',
                        contentStyle: "\n\t\t\t\t\t\t\tlist-style-type:none;\n\t\t\t\t\t\t\tmargin-bottom: 14px;\n\t\t\t\t\t\t"
                    },
                    WebElementFactory_1.WebElementFactory.createWebLineElement({
                        type: WebElementFactory_1.WebFactoryElementType.WEB_LINE_ELEMENT,
                        show: false
                    }),
                    // Dragon Spins Feature
                    {
                        blockStyle: "\n\t\t\t\t\t\t\tmargin: 35px 0px 10px;\n\t\t\t\t\t\t",
                        type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_ELEMENT,
                        languageKey: 'featureSubTitle5'
                    },
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_CONTENT_ELEMENT,
                        languageKey: 'featureContent5',
                        contentStyle: "\n\t\t\t\t\t\t\tlist-style-type:none;\n\t\t\t\t\t\t\tmargin-bottom: 14px;\n\t\t\t\t\t\t"
                    }
                ]
            })
        ];
    };
    /**
     * Landscape screen config
     */
    DHBMLUIRulesConfig.prototype.getLandscapeGerneralPagingElementPages = function () {
        return [
            // page 1 game logo and description
            WebElementFactory_1.WebElementFactory.createWebElementBlock({
                type: WebElementFactory_1.WebFactoryElementType.WEB_ELEMENT_BLOCK,
                config: [
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_ELEMENT,
                        blockStyle: this.getLandscapeMainTitleStyle(),
                        languageKey: 'mainTitle'
                    },
                    // game logo
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_IMAGE_ELEMENT,
                        blockStyle: "\n\t\t\t\t\t\t\tposition:relative;\n\t\t\t\t\t\t\twidth: 500px;\n\t\t\t\t\t\t\theight: 204px;\n\t\t\t\t\t\t\tmargin: auto;\n\t\t\t\t\t\t",
                        imageSource: WebImageElement_1.ImageSourceType.TEXTURE,
                        imageData: {
                            imagePath: 'assets/helpscreens/{locale}/gameLogo.png',
                            width: 500,
                            height: 204,
                            ratio: 1
                        },
                        imageStyle: "\n\t\t\t\t\t\t\tposition : absolute;\n\t\t\t\t\t\t"
                    },
                    // game description
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_CONTENT_ELEMENT,
                        languageKey: 'introductionContent1',
                        contentStyle: "\n\t\t\t\t\t\t\ttext-align: center;\n\t\t\t\t\t\t\tlist-style-type:none;\n\t\t\t\t\t\t"
                    }
                ]
            }),
            // page 2 Features & Gameplay - Extra Bonus
            WebElementFactory_1.WebElementFactory.createWebElementBlock({
                type: WebElementFactory_1.WebFactoryElementType.WEB_ELEMENT_BLOCK,
                config: [
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_ELEMENT,
                        blockStyle: this.getLandscapeMainTitleStyle(),
                        languageKey: 'featureTitle1'
                    },
                    // Da Hong Bao Extra Bonus
                    {
                        blockStyle: "\n\t\t\t\t\t\t\tmargin: 25px 0px 10px;\n\t\t\t\t\t\t",
                        type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_ELEMENT,
                        languageKey: 'featureSubTitle1'
                    },
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_CONTENT_ELEMENT,
                        languageKey: 'featureContent1',
                        contentStyle: "\n\t\t\t\t\t\t\tlist-style-type:none;\n\t\t\t\t\t\t\tmargin-bottom: 14px;\n\t\t\t\t\t\t"
                    },
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_CONTENT_ELEMENT,
                        languageKey: 'featureSubContent1',
                        contentStyle: "\n\t\t\t\t\t\t\tmargin-bottom: 14px;\n\t\t\t\t\t\t"
                    }
                ]
            }),
            // page 3 Features & Gameplay - Lucky Bonus Re-spins
            WebElementFactory_1.WebElementFactory.createWebElementBlock({
                type: WebElementFactory_1.WebFactoryElementType.WEB_ELEMENT_BLOCK,
                config: [
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_ELEMENT,
                        blockStyle: this.getLandscapeMainTitleStyle(),
                        languageKey: 'featureTitle1'
                    },
                    // Lucky Bonus Re-spins
                    {
                        blockStyle: "\n\t\t\t\t\t\t\tmargin: 35px 0px 10px;\n\t\t\t\t\t\t",
                        type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_ELEMENT,
                        languageKey: 'featureSubTitle2'
                    },
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_CONTENT_ELEMENT,
                        languageKey: 'featureContent2',
                        contentStyle: "\n\t\t\t\t\t\t\tlist-style-type:none;\n\t\t\t\t\t\t\tmargin-bottom: 14px;\n\t\t\t\t\t\t"
                    }
                ]
            }),
            // page 4 Features & Gameplay - Lucky Spins Feature
            WebElementFactory_1.WebElementFactory.createWebElementBlock({
                type: WebElementFactory_1.WebFactoryElementType.WEB_ELEMENT_BLOCK,
                config: [
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_ELEMENT,
                        blockStyle: this.getLandscapeMainTitleStyle(),
                        languageKey: 'featureTitle1'
                    },
                    // Lucky Spins Feature
                    {
                        blockStyle: "\n\t\t\t\t\t\t\tmargin: 35px 0px 10px;\n\t\t\t\t\t\t",
                        type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_ELEMENT,
                        languageKey: 'featureSubTitle3'
                    },
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_CONTENT_ELEMENT,
                        languageKey: 'featureContent3',
                        contentStyle: "\n\t\t\t\t\t\t\tlist-style-type:none;\n\t\t\t\t\t\t"
                    }
                ],
            }),
            // page 5 Features & Gameplay - Fortune Spins Feature
            WebElementFactory_1.WebElementFactory.createWebElementBlock({
                type: WebElementFactory_1.WebFactoryElementType.WEB_ELEMENT_BLOCK,
                config: [
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_ELEMENT,
                        blockStyle: this.getLandscapeMainTitleStyle(),
                        languageKey: 'featureTitle1'
                    },
                    // Fortune Spins Feature
                    {
                        blockStyle: "\n\t\t\t\t\t\t\tmargin: 35px 0px 10px;\n\t\t\t\t\t\t",
                        type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_ELEMENT,
                        languageKey: 'featureSubTitle4'
                    },
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_CONTENT_ELEMENT,
                        languageKey: 'featureContent4',
                        contentStyle: "\n\t\t\t\t\t\t\tlist-style-type:none;\n\t\t\t\t\t\t\tmargin-bottom: 14px;\n\t\t\t\t\t\t"
                    }
                ]
            }),
            // page 6 Features & Gameplay-Da Hong Bao Dragon Spins Feature
            WebElementFactory_1.WebElementFactory.createWebElementBlock({
                type: WebElementFactory_1.WebFactoryElementType.WEB_ELEMENT_BLOCK,
                config: [
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_ELEMENT,
                        blockStyle: this.getLandscapeMainTitleStyle(),
                        languageKey: 'featureTitle1'
                    },
                    // Dragon Spins Feature
                    {
                        blockStyle: "\n\t\t\t\t\t\t\tmargin: 35px 0px 10px;\n\t\t\t\t\t\t",
                        type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_ELEMENT,
                        languageKey: 'featureSubTitle5'
                    },
                    {
                        type: WebElementFactory_1.WebFactoryElementType.WEB_TEXT_CONTENT_ELEMENT,
                        languageKey: 'featureContent5',
                        contentStyle: "\n\t\t\t\t\t\t\tlist-style-type:none;\n\t\t\t\t\t\t\tmargin-bottom: 14px;\n\t\t\t\t\t\t"
                    }
                ]
            }),
        ];
    };
    DHBMLUIRulesConfig.prototype.getPortraitTitleStyle = function () {
        return "\n\t\t\ttext-align: center;\n\t\t\tfont-size: 24px;\n\t\t\twidth: 100%;\n\t\t";
    };
    DHBMLUIRulesConfig.prototype.getPortraitSubTitleStyle = function () {
        return "\n\t\t\ttext-align: left;\n\t\t\tfont-size: 22px;\n\t\t\tmargin: 11px 0px 0px 0px;\n\t\t";
    };
    return DHBMLUIRulesConfig;
}(MLUIRulesConfig_1.MLUIRulesConfig));
exports.DHBMLUIRulesConfig = DHBMLUIRulesConfig;


/***/ }),
/* 960 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FreeSpinFeatureFormatter_1 = __webpack_require__(149);
var SlotNGFeatureDataDefinitions_1 = __webpack_require__(23);
var es5_1 = __webpack_require__(0);
var DHBPickFeatureFormatter_1 = __webpack_require__(451);
var DHBFreeSpinFeatureFormatter = /** @class */ (function (_super) {
    __extends(DHBFreeSpinFeatureFormatter, _super);
    function DHBFreeSpinFeatureFormatter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DHBFreeSpinFeatureFormatter.prototype.setupFeatureFormatters = function () {
        var map = _super.prototype.setupFeatureFormatters.call(this);
        map.set(SlotNGFeatureDataDefinitions_1.FeatureTypes.PICK, es5_1.Container.get(DHBPickFeatureFormatter_1.DHBPickFeatureFormatter));
        return map;
    };
    DHBFreeSpinFeatureFormatter.prototype.freeSpinResponseScenario = function (message, pendingFeatureInfo) {
        var _this = this;
        var pickfeatureInfo = null;
        var pickFeatureDetail = null;
        message.spin_result.features_triggered.forEach(function (element) {
            if (element.type == SlotNGFeatureDataDefinitions_1.FeatureTypes.PICK) {
                pickfeatureInfo = element;
                pickFeatureDetail = _this.getFeatureDetail(element);
            }
        });
        if (pendingFeatureInfo.subfeatures.find(function (e) { return e == SlotNGFeatureDataDefinitions_1.FeatureTypes.PICK; }) && pickfeatureInfo && pickFeatureDetail.selected_index) {
            var pickResponseScenario = null;
            pickResponseScenario = this.getFormatFeatureTriggeredsScenario(message, pickResponseScenario);
            if (pickfeatureInfo.complete) {
                pickResponseScenario = this.getFreeSpinsScenario(pickResponseScenario, message, pendingFeatureInfo);
            }
            // console.error( 'DHBFreeSpinFeatureFormatter pickResponseScenario' );
            // console.error( pickResponseScenario );
            return pickResponseScenario;
        }
        this.bankService.balance = message.balance - message.spin_result.win_amount;
        var responseScenario = null;
        // format features before free spin stop
        responseScenario = this.getFeatureBeforeSpinStopScenario(message, responseScenario);
        // setup free spin stop scenario
        if (responseScenario) {
            responseScenario.addScenario(this.getFreeSpinStopScenario(message));
        }
        else {
            responseScenario = this.getFreeSpinStopScenario(message);
        }
        // setup free spin win scenario
        var winScenario = this.getFreeSpinWinScenario(message);
        if (winScenario) {
            responseScenario.addScenario(winScenario);
        }
        // format features after free spin stop
        responseScenario = this.getFormatFeatureTriggeredsScenario(message, responseScenario);
        // format features after free spin win/ no win
        responseScenario = this.getFeatureAfterWinScenario(message, responseScenario);
        if (pickfeatureInfo == null || pickfeatureInfo.complete) {
            responseScenario = this.getFreeSpinsScenario(responseScenario, message, pendingFeatureInfo);
        }
        // console.error( 'DHBFreeSpinFeatureFormatter responseScenario' );
        // console.error( responseScenario );
        if (responseScenario.hasStateName(this.stateNames.freeSpinsAllLineWin)) {
            var wildWin_1 = false;
            message.spin_result.reel_wins.forEach(function (winline) {
                if (winline.wild_win) {
                    wildWin_1 = true;
                }
            });
            var featureWinAmount = message.feature_win;
            responseScenario.addStateData(this.stateNames.freeSpinsAllLineWin, {
                wildWin: wildWin_1,
                featureWinAmount: featureWinAmount
            });
        }
        return responseScenario;
    };
    DHBFreeSpinFeatureFormatter.prototype.getFreeSpinsScenario = function (responseScenario, message, featureInfo) {
        var freeResponseScenario = _super.prototype.getFreeSpinsScenario.call(this, responseScenario, message, featureInfo);
        if (freeResponseScenario.hasStateName(this.stateNames.freeSpinsIntroPopup)) {
            var feature = '';
            var LuckFeature = message.spin_result.features_triggered.find(function (e) { return e.type == 'LUCKY_FREE_SPIN'; });
            var FortuneFeature = message.spin_result.features_triggered.find(function (e) { return e.type == 'FORTUNE_FREE_SPIN'; });
            if (LuckFeature && FortuneFeature) {
                feature = 'DragonSpinsFeature';
            }
            else if (FortuneFeature) {
                feature = 'FortuneSpinsFeature';
            }
            else if (LuckFeature) {
                feature = 'LuckySpinFeature';
            }
            freeResponseScenario.addStateData(this.stateNames.freeSpinsIntroPopup, {
                freeSpinType: feature
            });
        }
        return freeResponseScenario;
    };
    DHBFreeSpinFeatureFormatter.prototype.restoreFeatureIncomingMessage = function (freeSpinFeatureDetail, features, type, message) {
        var _this = this;
        var freeSpinFeatureScenario = this.scenarioManager.getScenario(this.scenarioNames.transitionToFreeSpins);
        // restore sub features, if there are any
        var freeSpinFeature = features.find(function (e) { return e.type === SlotNGFeatureDataDefinitions_1.FeatureTypes.FREE_SPIN; });
        var subFeaturesScenario = this.getSubfeaturesScenario(freeSpinFeature.subfeatures, features);
        if (subFeaturesScenario != undefined) {
            freeSpinFeatureScenario.addScenario(subFeaturesScenario);
        }
        var pickfeatureInfo = null;
        var pickFeatureDetail = null;
        message.state.spin_result.features_triggered.forEach(function (element) {
            if (element.type == SlotNGFeatureDataDefinitions_1.FeatureTypes.PICK) {
                pickfeatureInfo = element;
                pickFeatureDetail = _this.getFeatureDetail(element);
            }
        });
        if (pickfeatureInfo == null || (pickfeatureInfo && pickfeatureInfo.complete)) {
            // add scenarios to start free spins
            freeSpinFeatureScenario.addScenario(this.scenarioManager.getScenario(this.scenarioNames.freeSpinsIdle));
            freeSpinFeatureScenario.addScenario(this.scenarioManager.getScenario(this.scenarioNames.freeSpinContinue));
            freeSpinFeatureScenario.setStateData(this.stateNames.freeSpinsStart, {
                currentFreeSpinCount: freeSpinFeatureDetail.total_free_spin_count - freeSpinFeatureDetail.free_spins_left + 1,
                totalFreeSpinCount: freeSpinFeatureDetail.total_free_spin_count,
                currentFeatureWin: freeSpinFeatureDetail.total_free_spin_win_amount
            });
        }
        var feature = '';
        var LuckFeature = features.find(function (e) { return e.type == 'LUCKY_FREE_SPIN'; });
        var FortuneFeature = features.find(function (e) { return e.type == 'FORTUNE_FREE_SPIN'; });
        if (LuckFeature && FortuneFeature) {
            feature = 'DragonSpinsFeature';
        }
        else if (FortuneFeature) {
            feature = 'FortuneSpinsFeature';
        }
        else if (LuckFeature) {
            feature = 'LuckySpinFeature';
        }
        freeSpinFeatureScenario.setStateData(this.stateNames.freeSpinsIntroPopup, {
            type: type,
            spins: freeSpinFeatureDetail.free_spins_left,
            freeSpinType: feature
        });
        freeSpinFeatureScenario.setStateData(this.stateNames.transitionToFreeSpins, {
            type: type,
            provider: (message) ? message.state.provider : null,
            spins: freeSpinFeatureDetail.free_spins_left,
            totalFreeSpinCount: freeSpinFeatureDetail.total_free_spin_count,
            currentFreeSpinCount: freeSpinFeatureDetail.total_free_spin_count - freeSpinFeatureDetail.free_spins_left + 1
        });
        freeSpinFeatureScenario = this.getFeatureRestoreScenario(features, freeSpinFeatureScenario);
        // console.error( 'restoreFeatureIncomingMessage' );
        // console.error( freeSpinFeatureScenario );
        return freeSpinFeatureScenario;
    };
    DHBFreeSpinFeatureFormatter.prototype.getSubfeaturesScenario = function (subfeatures, features) {
        var _this = this;
        var subFeaturesScenario = null;
        subfeatures.forEach(function (element) {
            var featureFormatter = _this.getFeatureFormatter(element);
            if (featureFormatter != undefined) {
                var subFeature = features.find(function (e) { return e.type === element; });
                if (subFeature.type != SlotNGFeatureDataDefinitions_1.FeatureTypes.PICK) {
                    if (subFeature != undefined) {
                        var subfeatureScenario = featureFormatter.restoreFeatureIncomingMessage(subFeature.feature_state, subFeature);
                        if (subfeatureScenario != undefined) {
                            if (subFeaturesScenario == undefined) {
                                subFeaturesScenario = subfeatureScenario;
                            }
                            else {
                                subFeaturesScenario.addScenario(subfeatureScenario);
                            }
                        }
                    }
                }
            }
        });
        return subFeaturesScenario;
    };
    return DHBFreeSpinFeatureFormatter;
}(FreeSpinFeatureFormatter_1.FreeSpinFeatureFormatter));
exports.DHBFreeSpinFeatureFormatter = DHBFreeSpinFeatureFormatter;


/***/ }),
/* 961 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var MLUISpinSettingsController_1 = __webpack_require__(263);
var MLUISpinSettingsPanel_1 = __webpack_require__(446);
var DHBMLUISpinSettingsController = /** @class */ (function (_super) {
    __extends(DHBMLUISpinSettingsController, _super);
    function DHBMLUISpinSettingsController(view) {
        return _super.call(this, view) || this;
    }
    DHBMLUISpinSettingsController.prototype.startPickFeature = function (stateData) {
        if (!this.freeSpinsMode) {
            this.onStopAutoSpins();
        }
        this.finishStateAction();
    };
    DHBMLUISpinSettingsController.prototype.freeSpinsShowWinning = function () {
        // this.triggerNextTurn();
        this.finishStateAction();
    };
    var _a;
    DHBMLUISpinSettingsController = __decorate([
        __param(0, es5_1.Inject),
        __metadata("design:paramtypes", [typeof (_a = typeof MLUISpinSettingsPanel_1.MLUISpinSettingsPanel !== "undefined" && MLUISpinSettingsPanel_1.MLUISpinSettingsPanel) === "function" && _a || Object])
    ], DHBMLUISpinSettingsController);
    return DHBMLUISpinSettingsController;
}(MLUISpinSettingsController_1.MLUISpinSettingsController));
exports.DHBMLUISpinSettingsController = DHBMLUISpinSettingsController;


/***/ }),
/* 962 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var LineScoreConfig_1 = __webpack_require__(265);
var TsMap_1 = __webpack_require__(2);
var Viewport_1 = __webpack_require__(6);
var DHBLineScoreConfig = /** @class */ (function (_super) {
    __extends(DHBLineScoreConfig, _super);
    function DHBLineScoreConfig() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.coreElementOrientationConfig = new TsMap_1.TsMap([
            [
                Viewport_1.Orientation.PORTRAIT, new TsMap_1.TsMap([
                    [
                        _this.lineScoreLabel.name, {
                            position: _this.lineScoreLabel.position
                        }
                    ]
                ])
            ],
            [
                Viewport_1.Orientation.LANDSCAPE, new TsMap_1.TsMap([
                    [
                        _this.lineScoreLabel.name, {
                            position: { x: 280, y: 290 }
                        }
                    ]
                ])
            ]
        ]);
        return _this;
    }
    return DHBLineScoreConfig;
}(LineScoreConfig_1.LineScoreConfig));
exports.DHBLineScoreConfig = DHBLineScoreConfig;


/***/ }),
/* 963 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var MainConfig_1 = __webpack_require__(61);
var Viewport_1 = __webpack_require__(6);
var TsMap_1 = __webpack_require__(2);
var DHBConfig = /** @class */ (function (_super) {
    __extends(DHBConfig, _super);
    function DHBConfig() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.orientation = Viewport_1.Orientation.BOTH;
        _this.localisation = {
            supportMultipleLoading: false,
            preloadLanguages: ['en'],
            assets: new TsMap_1.TsMap([
                ['en', 'assets/localisation/en.json'],
                ['zh-hant', 'assets/localisation/zh-hant.json'],
                ['zh-hans', 'assets/localisation/zh-hans.json'],
                ['th', 'assets/localisation/th.json'],
                ['vi', 'assets/localisation/vi.json']
            ])
        };
        _this.partnerConfig = {
            defaultPartner: 'GNS',
            certainPartners: ['GPK']
        };
        return _this;
    }
    return DHBConfig;
}(MainConfig_1.MainConfig));
exports.DHBConfig = DHBConfig;


/***/ }),
/* 964 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var MLUITurboConfig_1 = __webpack_require__(262);
var DHBMLUITurboConfig = /** @class */ (function (_super) {
    __extends(DHBMLUITurboConfig, _super);
    function DHBMLUITurboConfig() {
        var _this = _super.call(this) || this;
        _this.turboButton.speedMode = [1, 3];
        return _this;
    }
    return DHBMLUITurboConfig;
}(MLUITurboConfig_1.MLUITurboConfig));
exports.DHBMLUITurboConfig = DHBMLUITurboConfig;


/***/ }),
/* 965 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Animation_1 = __webpack_require__(26);
var BaseSymbol_1 = __webpack_require__(157);
var DHBBaseSymbol = /** @class */ (function (_super) {
    __extends(DHBBaseSymbol, _super);
    function DHBBaseSymbol() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DHBBaseSymbol.prototype.setSymbolScale = function (size) {
        this.symbolLayer.scale.set(size.x, size.y);
    };
    // wild lock loop animation
    DHBBaseSymbol.prototype.playLoopAnimation = function (type) {
        this.symbolLayer.visible = true;
        this.itemAnimation = Animation_1.Animation.getAnimationFromPool('symbol_' + this.symbolName + type);
        this.symbolLayer.visible = false;
        this.itemAnimation.animationSpeed = this.itemAnimation.totalFrames / BaseSymbol_1.BaseSymbol.SYMBOL_ANIMATION_FRAME_COUNT;
        this.itemAnimation.anchor.set(0.5);
        var symbolSize = this.getSymbolSizeByName(this.symbolName);
        this.itemAnimation.x = symbolSize.width / 2;
        this.itemAnimation.y = symbolSize.height / 2;
        this.animationLayer.removeChildren();
        this.animationLayer.addChild(this.itemAnimation);
        this.itemAnimation.gotoAndStop(0);
        this.itemAnimation.loop = true;
        this.itemAnimation.gotoAndPlay(0);
        return true;
    };
    return DHBBaseSymbol;
}(BaseSymbol_1.BaseSymbol));
exports.DHBBaseSymbol = DHBBaseSymbol;


/***/ }),
/* 966 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var DialogConfig_1 = __webpack_require__(223);
var SpineAnimation_1 = __webpack_require__(63);
var TsMap_1 = __webpack_require__(2);
var Viewport_1 = __webpack_require__(6);
var DHBDialogConfig = /** @class */ (function (_super) {
    __extends(DHBDialogConfig, _super);
    function DHBDialogConfig() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.introAnimation = {
            elementType: SpineAnimation_1.SpineAnimation.elementType,
            elementConfig: {
                name: 'introDialog',
                isOrientationSupported: true,
                animationName: 'spinsFeature',
            }
        };
        _this.outroAnimation = {
            elementType: SpineAnimation_1.SpineAnimation.elementType,
            elementConfig: {
                name: 'outroDialog',
                isOrientationSupported: true,
                animationName: 'featureComplete',
                position: { x: null, y: 290 },
            }
        };
        _this.winValueLabel = {
            name: 'freeWinValueLabel',
            key: '',
            isOrientationSupported: true,
            position: { x: 360, y: 620 },
            anchor: { x: 0.5, y: 0.5 },
            style: {
                font: {
                    name: 'BigWinFont',
                    size: 99,
                },
                align: 'center',
            },
        };
        _this.coreElementOrientationConfig = new TsMap_1.TsMap([
            [
                Viewport_1.Orientation.PORTRAIT, new TsMap_1.TsMap([
                    [
                        'introDialog', {
                            position: { x: 365, y: 685 },
                        }
                    ],
                    [
                        'outroDialog', {
                            position: { x: 351, y: 685 }
                        }
                    ],
                    [
                        'freeWinValueLabel', {
                            position: { x: 360, y: 690 }
                        }
                    ]
                ])
            ],
            [
                Viewport_1.Orientation.LANDSCAPE, new TsMap_1.TsMap([
                    [
                        'introDialog', {
                            position: { x: 630, y: 360 },
                        }
                    ],
                    [
                        'outroDialog', {
                            position: { x: 630, y: 370 }
                        }
                    ],
                    [
                        'freeWinValueLabel', {
                            position: { x: 630, y: 380 }
                        }
                    ]
                ])
            ]
        ]);
        return _this;
    }
    return DHBDialogConfig;
}(DialogConfig_1.DialogConfig));
exports.DHBDialogConfig = DHBDialogConfig;


/***/ }),
/* 967 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var SingleWildMultiplierFeatureFormatter_1 = __webpack_require__(216);
var DHBSingleWildsMultiplierFeatureFormatter = /** @class */ (function (_super) {
    __extends(DHBSingleWildsMultiplierFeatureFormatter, _super);
    function DHBSingleWildsMultiplierFeatureFormatter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DHBSingleWildsMultiplierFeatureFormatter.prototype.getFeatureShowWinningData = function (winningData, spinResult, featureInfo) {
        winningData.winLines.forEach(function (winline) {
            var wildMultiplier = Array();
            winline.reelPositions.forEach(function (reel, index) {
                reel.forEach(function (symbol) {
                    if (spinResult.reels[index].symbols[symbol].symbol == 'WILD') {
                        var multiplier = {
                            reel_index: index,
                            symbol_index: symbol,
                            multiplier: featureInfo.feature_state.wild_multiplier
                        };
                        wildMultiplier.push(multiplier);
                    }
                });
            });
            winline.wildMultiplier = wildMultiplier;
        });
        return winningData;
    };
    return DHBSingleWildsMultiplierFeatureFormatter;
}(SingleWildMultiplierFeatureFormatter_1.SingleWildMultiplierFeatureFormatter));
exports.DHBSingleWildsMultiplierFeatureFormatter = DHBSingleWildsMultiplierFeatureFormatter;


/***/ }),
/* 968 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Scenario_1 = __webpack_require__(200);
var CoreState_1 = __webpack_require__(76);
var SlotNGFeatureDataDefinitions_1 = __webpack_require__(23);
var FreeRespinReelsFormatter_1 = __webpack_require__(117);
var DHBFreeRespinReelsFormatter = /** @class */ (function (_super) {
    __extends(DHBFreeRespinReelsFormatter, _super);
    function DHBFreeRespinReelsFormatter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DHBFreeRespinReelsFormatter.prototype.getTransitionToFreeRepinScenario = function (responseScenario, respinDetail, featureTriggeredInfo, message) {
        var freeSpinFeatrue = message.features.find(function (e) { return e.type === SlotNGFeatureDataDefinitions_1.FeatureTypes.FREE_SPIN; });
        if (freeSpinFeatrue == undefined) {
            responseScenario.addState(new CoreState_1.CoreState(this.stateNames.prefeatureWinning));
            responseScenario.addState(new CoreState_1.CoreState(this.stateNames.startFreeRespin));
        }
        return responseScenario;
    };
    DHBFreeRespinReelsFormatter.prototype.restoreFeatureIncomingMessage = function (respinDetail, features, type, message) {
        // getTransitionToFreeRepinScenario
        var responseScenario = new Scenario_1.Scenario('', []);
        var freeSpinFeatrue = features.find(function (e) { return e.type === SlotNGFeatureDataDefinitions_1.FeatureTypes.FREE_SPIN; });
        if (freeSpinFeatrue == undefined) {
            responseScenario.addState(new CoreState_1.CoreState(this.stateNames.prefeatureWinning));
            responseScenario.addState(new CoreState_1.CoreState(this.stateNames.startFreeRespin));
        }
        // getRespinningScenario
        var respinningScenario = this.scenarioManager.getScenario(this.scenarioNames.freeRespinReels);
        respinningScenario.setStateData(this.stateNames.freeRespinReels, respinDetail);
        responseScenario.addScenario(respinningScenario);
        return responseScenario;
    };
    return DHBFreeRespinReelsFormatter;
}(FreeRespinReelsFormatter_1.FreeRespinReelsFormatter));
exports.DHBFreeRespinReelsFormatter = DHBFreeRespinReelsFormatter;


/***/ }),
/* 969 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var ButtonsStateSet_1 = __webpack_require__(75);
var SlotUIButtonId_1 = __webpack_require__(162);
var MLUIButtonId_1 = __webpack_require__(38);
var MLUILocalButtonsStateSet_1 = __webpack_require__(970);
var DHBLocalButtonsStateSet = /** @class */ (function (_super) {
    __extends(DHBLocalButtonsStateSet, _super);
    function DHBLocalButtonsStateSet() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DHBLocalButtonsStateSet.prototype.initStates = function () {
        _super.prototype.initStates.call(this);
        this.buttonStates.set(this.stateNames.autoSpinAllLineWin, this.autoSpinAllLineWin());
    };
    DHBLocalButtonsStateSet.prototype.transitionToFreeSpins = function () {
        var buttonState = _super.prototype.transitionToFreeSpins.call(this);
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_TURBO_MODE, new ButtonsStateSet_1.ButtonBehaviour(true, true));
        return buttonState;
    };
    DHBLocalButtonsStateSet.prototype.transitionToBaseGame = function () {
        var buttonState = _super.prototype.transitionToBaseGame.call(this);
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_TURBO_MODE, new ButtonsStateSet_1.ButtonBehaviour(true, true));
        return buttonState;
    };
    DHBLocalButtonsStateSet.prototype.freeRespinsStop = function () {
        return this.prefeatureWinning();
    };
    DHBLocalButtonsStateSet.prototype.autoSpinAllLineWin = function () {
        var buttonState = this.autoSpinSpinStop();
        return buttonState;
    };
    DHBLocalButtonsStateSet.prototype.showWinning = function () {
        var buttonState = this.default();
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_START_SPIN, new ButtonsStateSet_1.ButtonBehaviour(true, true));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_STOP_SPIN, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_BET_MAX, new ButtonsStateSet_1.ButtonBehaviour(true, true));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_SHOW_AUTO_PLAY, new ButtonsStateSet_1.ButtonBehaviour(true, true));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_STOP_AUTO_PLAY, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_TURBO_MODE, new ButtonsStateSet_1.ButtonBehaviour(true, true));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_SHOW_MENU_OPTIONS, new ButtonsStateSet_1.ButtonBehaviour(true, true));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_SHOW_BET_OPTIONS, new ButtonsStateSet_1.ButtonBehaviour(true, true));
        buttonState.set(MLUIButtonId_1.MLUIButtonId.BUTTON_MAIN_VIEW_BET_INCREMENT, new ButtonsStateSet_1.ButtonBehaviour(true, true));
        buttonState.set(MLUIButtonId_1.MLUIButtonId.BUTTON_MAIN_VIEW_BET_DECREMENT, new ButtonsStateSet_1.ButtonBehaviour(true, true));
        return buttonState;
    };
    DHBLocalButtonsStateSet.prototype.startPickFeature = function () {
        var buttonState = this.default();
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_START_SPIN, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_STOP_SPIN, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_SHOW_AUTO_PLAY, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_STOP_AUTO_PLAY, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_TURBO_MODE, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_SHOW_BET_OPTIONS, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_SHOW_MENU_OPTIONS, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(MLUIButtonId_1.MLUIButtonId.BUTTON_MAIN_VIEW_BET_INCREMENT, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(MLUIButtonId_1.MLUIButtonId.BUTTON_MAIN_VIEW_BET_DECREMENT, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        return buttonState;
    };
    DHBLocalButtonsStateSet = __decorate([
        es5_1.Singleton
    ], DHBLocalButtonsStateSet);
    return DHBLocalButtonsStateSet;
}(MLUILocalButtonsStateSet_1.MLUILocalButtonsStateSet));
exports.DHBLocalButtonsStateSet = DHBLocalButtonsStateSet;


/***/ }),
/* 970 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var MLUIButtonId_1 = __webpack_require__(38);
var MLUIStates_1 = __webpack_require__(401);
var es5_1 = __webpack_require__(0);
var ButtonsStateSet_1 = __webpack_require__(75);
var SlotUIButtonId_1 = __webpack_require__(162);
var SlotUILocalButtonsStateSet_1 = __webpack_require__(242);
/**
 * Local Buttons State Class
 * Set state for the local buttons
 */
var MLUILocalButtonsStateSet = /** @class */ (function (_super) {
    __extends(MLUILocalButtonsStateSet, _super);
    function MLUILocalButtonsStateSet() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MLUILocalButtonsStateSet.prototype.initStates = function () {
        _super.prototype.initStates.call(this);
        this.buttonStates.set(this.stateNames.gameStartTutorial, this.gameStartTutorial());
    };
    MLUILocalButtonsStateSet.prototype.init = function () {
        var buttonState = _super.prototype.init.call(this);
        buttonState.set(MLUIButtonId_1.MLUIButtonId.BUTTON_MAIN_VIEW_BET_INCREMENT, new ButtonsStateSet_1.ButtonBehaviour(true, true));
        buttonState.set(MLUIButtonId_1.MLUIButtonId.BUTTON_MAIN_VIEW_BET_DECREMENT, new ButtonsStateSet_1.ButtonBehaviour(true, true));
        return buttonState;
    };
    MLUILocalButtonsStateSet.prototype.gameStartTutorial = function () {
        var buttonState = this.init();
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_START_SPIN, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_STOP_SPIN, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_SHOW_AUTO_PLAY, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_STOP_AUTO_PLAY, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_TURBO_MODE, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_BET_MAX, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_SHOW_MENU_OPTIONS, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(SlotUIButtonId_1.SlotUIButtonId.BUTTON_SHOW_BET_OPTIONS, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(MLUIButtonId_1.MLUIButtonId.BUTTON_MAIN_VIEW_BET_INCREMENT, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(MLUIButtonId_1.MLUIButtonId.BUTTON_MAIN_VIEW_BET_DECREMENT, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        return buttonState;
    };
    MLUILocalButtonsStateSet.prototype.autoSpinReadyForStopSpin = function () {
        return this.autoSpinSpinStop();
    };
    MLUILocalButtonsStateSet.prototype.autoSpinShowWinning = function () {
        return this.autoSpinSpinStop();
    };
    MLUILocalButtonsStateSet.prototype.spinning = function () {
        var buttonState = _super.prototype.spinning.call(this);
        buttonState.set(MLUIButtonId_1.MLUIButtonId.BUTTON_MAIN_VIEW_BET_INCREMENT, new ButtonsStateSet_1.ButtonBehaviour(false, true));
        buttonState.set(MLUIButtonId_1.MLUIButtonId.BUTTON_MAIN_VIEW_BET_DECREMENT, new ButtonsStateSet_1.ButtonBehaviour(false, true));
        return buttonState;
    };
    MLUILocalButtonsStateSet.prototype.dashboardDisable = function () {
        var buttonState = _super.prototype.dashboardDisable.call(this);
        buttonState.set(MLUIButtonId_1.MLUIButtonId.BUTTON_MAIN_VIEW_BET_INCREMENT, new ButtonsStateSet_1.ButtonBehaviour(false, true));
        buttonState.set(MLUIButtonId_1.MLUIButtonId.BUTTON_MAIN_VIEW_BET_DECREMENT, new ButtonsStateSet_1.ButtonBehaviour(false, true));
        return buttonState;
    };
    MLUILocalButtonsStateSet.prototype.startSpin = function () {
        var buttonState = _super.prototype.startSpin.call(this);
        buttonState.set(MLUIButtonId_1.MLUIButtonId.BUTTON_MAIN_VIEW_BET_INCREMENT, new ButtonsStateSet_1.ButtonBehaviour(false, true));
        buttonState.set(MLUIButtonId_1.MLUIButtonId.BUTTON_MAIN_VIEW_BET_DECREMENT, new ButtonsStateSet_1.ButtonBehaviour(false, true));
        return buttonState;
    };
    MLUILocalButtonsStateSet.prototype.autoSpinSpinStop = function () {
        var buttonState = _super.prototype.autoSpinSpinStop.call(this);
        buttonState.set(MLUIButtonId_1.MLUIButtonId.BUTTON_MAIN_VIEW_BET_INCREMENT, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(MLUIButtonId_1.MLUIButtonId.BUTTON_MAIN_VIEW_BET_DECREMENT, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        return buttonState;
    };
    MLUILocalButtonsStateSet.prototype.spinStop = function () {
        var buttonState = _super.prototype.spinStop.call(this);
        buttonState.set(MLUIButtonId_1.MLUIButtonId.BUTTON_MAIN_VIEW_BET_INCREMENT, new ButtonsStateSet_1.ButtonBehaviour(false, true));
        buttonState.set(MLUIButtonId_1.MLUIButtonId.BUTTON_MAIN_VIEW_BET_DECREMENT, new ButtonsStateSet_1.ButtonBehaviour(false, true));
        return buttonState;
    };
    MLUILocalButtonsStateSet.prototype.skip_autoSpinSpinning = function () {
        return this.autoSpinSpinStop();
    };
    MLUILocalButtonsStateSet.prototype.autoSpinSpinning = function () {
        return this.autoSpinStartSpin();
    };
    MLUILocalButtonsStateSet.prototype.autoSpinStartSpin = function () {
        var buttonState = _super.prototype.autoSpinStartSpin.call(this);
        buttonState.set(MLUIButtonId_1.MLUIButtonId.BUTTON_MAIN_VIEW_BET_INCREMENT, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(MLUIButtonId_1.MLUIButtonId.BUTTON_MAIN_VIEW_BET_DECREMENT, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        return buttonState;
    };
    MLUILocalButtonsStateSet.prototype.transitionToAutoSpin = function () {
        var buttonState = _super.prototype.transitionToAutoSpin.call(this);
        buttonState.set(MLUIButtonId_1.MLUIButtonId.BUTTON_MAIN_VIEW_BET_INCREMENT, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(MLUIButtonId_1.MLUIButtonId.BUTTON_MAIN_VIEW_BET_DECREMENT, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        return buttonState;
    };
    MLUILocalButtonsStateSet.prototype.transitionToFreeSpins = function () {
        var buttonState = _super.prototype.transitionToFreeSpins.call(this);
        buttonState.set(MLUIButtonId_1.MLUIButtonId.BUTTON_MAIN_VIEW_BET_INCREMENT, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(MLUIButtonId_1.MLUIButtonId.BUTTON_MAIN_VIEW_BET_DECREMENT, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        return buttonState;
    };
    MLUILocalButtonsStateSet.prototype.autoSpinDashboardEnable = function () {
        var buttonState = _super.prototype.autoSpinDashboardEnable.call(this);
        buttonState.set(MLUIButtonId_1.MLUIButtonId.BUTTON_MAIN_VIEW_BET_INCREMENT, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(MLUIButtonId_1.MLUIButtonId.BUTTON_MAIN_VIEW_BET_DECREMENT, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        return buttonState;
    };
    MLUILocalButtonsStateSet.prototype.skipSpinning = function () {
        var buttonState = _super.prototype.skipSpinning.call(this);
        buttonState.set(MLUIButtonId_1.MLUIButtonId.BUTTON_MAIN_VIEW_BET_INCREMENT, new ButtonsStateSet_1.ButtonBehaviour(false, true));
        buttonState.set(MLUIButtonId_1.MLUIButtonId.BUTTON_MAIN_VIEW_BET_DECREMENT, new ButtonsStateSet_1.ButtonBehaviour(false, true));
        return buttonState;
    };
    MLUILocalButtonsStateSet.prototype.gameReadyForStopSpin = function () {
        var buttonState = _super.prototype.gameReadyForStopSpin.call(this);
        buttonState.set(MLUIButtonId_1.MLUIButtonId.BUTTON_MAIN_VIEW_BET_INCREMENT, new ButtonsStateSet_1.ButtonBehaviour(false, true));
        buttonState.set(MLUIButtonId_1.MLUIButtonId.BUTTON_MAIN_VIEW_BET_DECREMENT, new ButtonsStateSet_1.ButtonBehaviour(false, true));
        return buttonState;
    };
    MLUILocalButtonsStateSet.prototype.freeSpinsStart = function () {
        var buttonState = _super.prototype.freeSpinsStart.call(this);
        buttonState.set(MLUIButtonId_1.MLUIButtonId.BUTTON_MAIN_VIEW_BET_INCREMENT, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(MLUIButtonId_1.MLUIButtonId.BUTTON_MAIN_VIEW_BET_DECREMENT, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        return buttonState;
    };
    MLUILocalButtonsStateSet.prototype.freeSpinning = function () {
        var buttonState = _super.prototype.freeSpinning.call(this);
        buttonState.set(MLUIButtonId_1.MLUIButtonId.BUTTON_MAIN_VIEW_BET_INCREMENT, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(MLUIButtonId_1.MLUIButtonId.BUTTON_MAIN_VIEW_BET_DECREMENT, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        return buttonState;
    };
    MLUILocalButtonsStateSet.prototype.freeSpinsStop = function () {
        var buttonState = _super.prototype.freeSpinsStop.call(this);
        buttonState.set(MLUIButtonId_1.MLUIButtonId.BUTTON_MAIN_VIEW_BET_INCREMENT, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(MLUIButtonId_1.MLUIButtonId.BUTTON_MAIN_VIEW_BET_DECREMENT, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        return buttonState;
    };
    MLUILocalButtonsStateSet.prototype.freeSpinsShowWinning = function () {
        var buttonState = _super.prototype.freeSpinsShowWinning.call(this);
        buttonState.set(MLUIButtonId_1.MLUIButtonId.BUTTON_MAIN_VIEW_BET_INCREMENT, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(MLUIButtonId_1.MLUIButtonId.BUTTON_MAIN_VIEW_BET_DECREMENT, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        return buttonState;
    };
    MLUILocalButtonsStateSet.prototype.prefeatureWinning = function () {
        var buttonState = _super.prototype.prefeatureWinning.call(this);
        buttonState.set(MLUIButtonId_1.MLUIButtonId.BUTTON_MAIN_VIEW_BET_INCREMENT, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(MLUIButtonId_1.MLUIButtonId.BUTTON_MAIN_VIEW_BET_DECREMENT, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        return buttonState;
    };
    MLUILocalButtonsStateSet.prototype.transitionToBaseGame = function () {
        var buttonState = _super.prototype.transitionToBaseGame.call(this);
        buttonState.set(MLUIButtonId_1.MLUIButtonId.BUTTON_MAIN_VIEW_BET_INCREMENT, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        buttonState.set(MLUIButtonId_1.MLUIButtonId.BUTTON_MAIN_VIEW_BET_DECREMENT, new ButtonsStateSet_1.ButtonBehaviour(false, false));
        return buttonState;
    };
    var _a;
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof MLUIStates_1.MLUIStates !== "undefined" && MLUIStates_1.MLUIStates) === "function" && _a || Object)
    ], MLUILocalButtonsStateSet.prototype, "stateNames", void 0);
    MLUILocalButtonsStateSet = __decorate([
        es5_1.Singleton
    ], MLUILocalButtonsStateSet);
    return MLUILocalButtonsStateSet;
}(SlotUILocalButtonsStateSet_1.SlotUILocalButtonsStateSet));
exports.MLUILocalButtonsStateSet = MLUILocalButtonsStateSet;


/***/ }),
/* 971 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var WildLockedFeatureFormatter_1 = __webpack_require__(215);
var DHBWildLockedFeatureFormatter = /** @class */ (function (_super) {
    __extends(DHBWildLockedFeatureFormatter, _super);
    function DHBWildLockedFeatureFormatter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DHBWildLockedFeatureFormatter.prototype.getFeatureScenarioBeforeFreeSpinStop = function (freeSpinStopScenario, message, featureInfo) {
        return this.getWildLockedScenario(message, featureInfo);
    };
    DHBWildLockedFeatureFormatter.prototype.triggeredFeatureIncomingMessage = function (message, featureInfo) {
        return null;
    };
    return DHBWildLockedFeatureFormatter;
}(WildLockedFeatureFormatter_1.WildLockedFeatureFormatter));
exports.DHBWildLockedFeatureFormatter = DHBWildLockedFeatureFormatter;


/***/ }),
/* 972 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var CoinShowerConfig_1 = __webpack_require__(237);
var DHBCoinShowerConfig = /** @class */ (function (_super) {
    __extends(DHBCoinShowerConfig, _super);
    function DHBCoinShowerConfig() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.largeShowerParticleDelay = 70;
        _this.mediumShowerParticleDelay = 100;
        _this.smallShowerParticleDelay = 100;
        _this.emitters = [
            {
                speedMultiplier: 13,
                numberOfCoins: 100,
                gravity: 800,
                minimumInitialVelocityY: -900,
                maximumInitialVelocityY: -1100,
                minimumInitialVelocityX: -200,
                maximumInitialVelocityX: 200,
                minimumScaleSpeed: 0,
                maximumScaleSpeed: 0.6,
                maximumScale: 0.65,
                minimumScale: 0.3,
                emitterX: 0,
                emitterY: 400,
                xOffsetRange: 50,
                yOffsetRange: 0,
                angularVelocity: 8,
                angularAcceleration: 1,
                animationSpeed: 0.1,
                animationAcceleration: 0.1
            }
        ];
        return _this;
    }
    return DHBCoinShowerConfig;
}(CoinShowerConfig_1.CoinShowerConfig));
exports.DHBCoinShowerConfig = DHBCoinShowerConfig;


/***/ }),
/* 973 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var SmartPreloaderView_1 = __webpack_require__(219);
var DHBSmartPreloaderView = /** @class */ (function (_super) {
    __extends(DHBSmartPreloaderView, _super);
    function DHBSmartPreloaderView() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DHBSmartPreloaderView.prototype.getAssetsList = function () {
        return [
            {
                assetKey: 'preloaderBackground',
                assetURL: 'assets/preloader/{partner}/{locale}/preloaderBackground.json'
            },
            {
                assetKey: 'preloaderUI',
                assetURL: 'assets/preloader/{locale}/preloaderUI.json'
            }
        ];
    };
    return DHBSmartPreloaderView;
}(SmartPreloaderView_1.SmartPreloaderView));
exports.DHBSmartPreloaderView = DHBSmartPreloaderView;


/***/ }),
/* 974 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var SpinMsgFormatter_1 = __webpack_require__(116);
var SlotNGFeatureDataDefinitions_1 = __webpack_require__(23);
/**
 * formatting response for base spin api
 */
var DHBSpinMsgFormatter = /** @class */ (function (_super) {
    __extends(DHBSpinMsgFormatter, _super);
    function DHBSpinMsgFormatter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    // add wild win data for wild win effect on state allLineWin
    DHBSpinMsgFormatter.prototype.processIncomingMessage = function (message) {
        var responseScenario = _super.prototype.processIncomingMessage.call(this, message);
        if (responseScenario.hasStateName(this.stateNames.allLineWin)) {
            var wildWin_1 = false;
            message.spin_result.reel_wins.forEach(function (winline) {
                if (winline.wild_win) {
                    wildWin_1 = true;
                }
            });
            responseScenario.addStateData(this.stateNames.allLineWin, {
                wildWin: wildWin_1
            });
        }
        if (responseScenario.hasStateName(this.stateNames.prefeatureWinning)) {
            var respinData = message.features.find(function (e) { return e.type === SlotNGFeatureDataDefinitions_1.FeatureTypes.FREE_RESPIN_REELS; });
            var pickData = message.features.find(function (e) { return e.type === SlotNGFeatureDataDefinitions_1.FeatureTypes.PICK; });
            responseScenario.addStateData(this.stateNames.prefeatureWinning, {
                respin: respinData,
                pick: pickData
            });
        }
        return responseScenario;
    };
    return DHBSpinMsgFormatter;
}(SpinMsgFormatter_1.SpinMsgFormatter));
exports.DHBSpinMsgFormatter = DHBSpinMsgFormatter;


/***/ }),
/* 975 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var SoundManager_1 = __webpack_require__(13);
var DHBSoundManager = /** @class */ (function (_super) {
    __extends(DHBSoundManager, _super);
    function DHBSoundManager() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DHBSoundManager.prototype.stop = function (key) {
        if (!this.audios.get(key)) {
            return;
        }
        // don't wait for time out
        // fix for anticipation effect
        this.audios.get(key).stop();
    };
    return DHBSoundManager;
}(SoundManager_1.SoundManager));
exports.DHBSoundManager = DHBSoundManager;


/***/ }),
/* 976 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var IBigWinConfig_1 = __webpack_require__(67);
var SlotCoinShowerController_1 = __webpack_require__(236);
var DHBCoinShowerView_1 = __webpack_require__(456);
var DHBCoinShowerController = /** @class */ (function (_super) {
    __extends(DHBCoinShowerController, _super);
    function DHBCoinShowerController(view) {
        var _this = _super.call(this, view) || this;
        _this.coinShowerView = view;
        return _this;
    }
    DHBCoinShowerController.prototype.onTierReached = function (e) {
        if (e.data.tier == IBigWinConfig_1.BigWinTierType.Coins) {
            switch (e.data.finalTier) {
                case IBigWinConfig_1.BigWinTierType.ExtremeBigWin:
                case IBigWinConfig_1.BigWinTierType.UltraExtremeBigWin: {
                    this.coinShowerView.startEnvelopeShower();
                }
            }
        }
        _super.prototype.onTierReached.call(this, e);
    };
    DHBCoinShowerController.prototype.stopCoinShower = function () {
        this.coinShowerView.endEnvelopeShower();
        _super.prototype.stopCoinShower.call(this);
    };
    var _a;
    DHBCoinShowerController = __decorate([
        __param(0, es5_1.Inject),
        __metadata("design:paramtypes", [typeof (_a = typeof DHBCoinShowerView_1.DHBCoinShowerView !== "undefined" && DHBCoinShowerView_1.DHBCoinShowerView) === "function" && _a || Object])
    ], DHBCoinShowerController);
    return DHBCoinShowerController;
}(SlotCoinShowerController_1.SlotCoinShowerController));
exports.DHBCoinShowerController = DHBCoinShowerController;


/***/ }),
/* 977 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var AssetLoader_1 = __webpack_require__(54);
var SlotInformationHeaderView_1 = __webpack_require__(264);
var MLUIInformationHeaderView = /** @class */ (function (_super) {
    __extends(MLUIInformationHeaderView, _super);
    function MLUIInformationHeaderView() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MLUIInformationHeaderView.prototype.getAssetsList = function () {
        var asset = [
            {
                assetKey: 'InformationHeaderLogo',
                assetURL: 'assets/uiInformation/{partner}/logo.png'
            },
            {
                assetKey: 'InformationHeaderLogo_gray',
                assetURL: 'assets/uiInformation/{partner}/logo_gray.png'
            }
        ];
        return asset;
    };
    MLUIInformationHeaderView.prototype.getImageSource = function (assetName) {
        return this.assetLoader.toTargetPath('assets/uiInformation/{partner}/' + assetName);
    };
    var _a;
    __decorate([
        es5_1.Inject,
        __metadata("design:type", typeof (_a = typeof AssetLoader_1.AssetLoader !== "undefined" && AssetLoader_1.AssetLoader) === "function" && _a || Object)
    ], MLUIInformationHeaderView.prototype, "assetLoader", void 0);
    return MLUIInformationHeaderView;
}(SlotInformationHeaderView_1.SlotInformationHeaderView));
exports.MLUIInformationHeaderView = MLUIInformationHeaderView;


/***/ }),
/* 978 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var es5_1 = __webpack_require__(0);
var MLUISpinPanel_1 = __webpack_require__(403);
var MLUISpinController_1 = __webpack_require__(245);
var DHBMLUISpinController = /** @class */ (function (_super) {
    __extends(DHBMLUISpinController, _super);
    function DHBMLUISpinController(view) {
        return _super.call(this, view) || this;
    }
    DHBMLUISpinController.prototype.autoSpinAllLineWin = function () {
        this.view.showSpinButton();
        this.finishStateAction();
    };
    var _a;
    DHBMLUISpinController = __decorate([
        __param(0, es5_1.Inject),
        __metadata("design:paramtypes", [typeof (_a = typeof MLUISpinPanel_1.MLUISpinPanel !== "undefined" && MLUISpinPanel_1.MLUISpinPanel) === "function" && _a || Object])
    ], DHBMLUISpinController);
    return DHBMLUISpinController;
}(MLUISpinController_1.MLUISpinController));
exports.DHBMLUISpinController = DHBMLUISpinController;


/***/ }),
/* 979 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var WinLinesConfig_1 = __webpack_require__(394);
var SimpleTimer_1 = __webpack_require__(15);
var MainConfig_1 = __webpack_require__(61);
var SlotCompController_1 = __webpack_require__(77);
var ReelController_1 = __webpack_require__(156);
var GlobalDispatcher_1 = __webpack_require__(7);
var ReelControllerView_1 = __webpack_require__(229);
var WinDisplayController_1 = __webpack_require__(161);
var BigWinController_1 = __webpack_require__(93);
var IBigWinConfig_1 = __webpack_require__(67);
var SlotNGFeatureDataDefinitions_1 = __webpack_require__(23);
var ReelsConfig_1 = __webpack_require__(52);
var BaseWinLinesV2Controller = /** @class */ (function (_super) {
    __extends(BaseWinLinesV2Controller, _super);
    function BaseWinLinesV2Controller() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.freeSpinLastspinDelay = 0;
        _this.winTable = [];
        _this.skipDisplay = false;
        return _this;
    }
    BaseWinLinesV2Controller.prototype.addEventListeners = function () {
        GlobalDispatcher_1.GlobalDispatcher.addListener(this, ReelControllerView_1.ReelControllerView.ALL_SYMBOLS_ANIMATION_COMPLETE, this.onCombinationAnimateComplete);
        GlobalDispatcher_1.GlobalDispatcher.addListener(this, BaseWinLinesV2Controller.SHOW_WIN_LINE_LOOP_COMPLETE, this.showWinningLoopComplete);
    };
    BaseWinLinesV2Controller.prototype.init = function () {
        this.initWinLinesConfig();
        this.finishStateAction();
        this.freeSpinLastspinDelay = this.config.freeSpinLastspinDelay;
    };
    BaseWinLinesV2Controller.prototype.baseGameIdle = function () {
        this.reset();
        this.finishStateAction();
    };
    BaseWinLinesV2Controller.prototype.freeSpinsIdle = function () {
        this.reset();
        this.finishStateAction();
    };
    BaseWinLinesV2Controller.prototype.startSpin = function () {
        this.reset();
        this.finishStateAction();
    };
    BaseWinLinesV2Controller.prototype.transitionToBaseGame = function () {
        this.isInFreeGame = false;
        this.reset();
        this.finishStateAction();
    };
    BaseWinLinesV2Controller.prototype.transitionToFreeSpins = function () {
        this.isInFreeGame = true;
        this.finishStateAction();
    };
    BaseWinLinesV2Controller.prototype.freeSpinsAllLineWin = function (data) {
        this.skipDisplay = false;
        this.allLineWin(data);
    };
    BaseWinLinesV2Controller.prototype.skip_freeSpinsAllLineWin = function (data) {
        this.skipDisplay = true;
        this.reset();
        this.finishStateAction();
    };
    BaseWinLinesV2Controller.prototype.skip_freeSpinsShowWinning = function (data) {
        this.reset();
        this.finishStateAction();
    };
    BaseWinLinesV2Controller.prototype.allLineWin = function (data) {
        if (!data.winLines || data.winLines.length === 0) {
            this.finishStateAction();
            return;
        }
        this.data = data;
        this.showLinesStopped = false;
        this.showComplete = false;
        this.loopedShow = false;
        var winline = {
            line: undefined,
            payout: data.totalWin,
            symbol: undefined,
            reelPositions: this.getReelPositionFromWinTable(data.winTable),
            wildMultiplier: undefined,
            winningCombinations: undefined,
            rightToLeft: undefined
        };
        winline.winTable = data.winTable.slice(0);
        var winLines = [winline];
        this.winLines = winLines;
        this.winTable = data.winTable.slice(0);
        this.showWinLine();
    };
    BaseWinLinesV2Controller.prototype.showWinning = function (data) {
        if (!data.winLines || data.winLines.length === 0) {
            this.finishStateAction();
            return;
        }
        this.data = data;
        this.winLines = data.winLines;
        this.showLinesStopped = false;
        this.showComplete = false;
        this.loopedShow = false;
        var finalBigWinTier = BigWinController_1.BigWinController.getBigWinTier(data.totalWin, data.totalBet);
        var showPaylineLabel = (data.totalWin != 0 && finalBigWinTier === IBigWinConfig_1.BigWinTierType.Balance);
        this.currentWinLineIndex = 0;
        this.setWinTable(data.winTable, data.winLines.slice(0, 1));
        this.winTable = data.winTable.slice(0);
        this.showWinLine(0, showPaylineLabel);
    };
    BaseWinLinesV2Controller.prototype.skip_showWinning = function (data) {
        this.reset();
        this.finishStateAction();
    };
    BaseWinLinesV2Controller.prototype.skip_allLineWin = function () {
        this.reset();
        this.finishStateAction();
    };
    BaseWinLinesV2Controller.prototype.freeSpinsShowWinning = function (data) {
        if (this.skipDisplay) {
            this.finishStateAction();
            return;
        }
        this.data = data;
        this.showWinning(data);
    };
    BaseWinLinesV2Controller.prototype.prefeatureWinning = function (data) {
        this.allLineWin(data);
    };
    BaseWinLinesV2Controller.prototype.showWinningLoop = function (data) {
        if (!data.winLines || data.winLines.length === 0) {
            this.finishStateAction();
            return;
        }
        this.winLines = data.winLines;
        if (this.delayAnimationTimer != null) {
            this.delayAnimationTimer.stop();
            this.delayAnimationTimer = null;
        }
        this.showLinesStopped = false;
        this.showComplete = true;
        this.loopedShow = true;
        this.showWinLine();
    };
    BaseWinLinesV2Controller.prototype.skip_showWinningLoop = function (data) {
        this.showWinningLoopComplete();
    };
    BaseWinLinesV2Controller.prototype.showWinningLoopComplete = function () {
        this.reset();
        this.finishStateAction();
    };
    BaseWinLinesV2Controller.prototype.reset = function () {
        this.winLines = [];
        this.showLinesStopped = true;
        this.loopedShow = false;
        this.showComplete = false;
        if (this.delayAnimationTimer != null) {
            this.delayAnimationTimer.stop();
            this.delayAnimationTimer = null;
        }
    };
    BaseWinLinesV2Controller.prototype.initWinLinesConfig = function () {
        this.mainConfig = this.gameConfig.getConfig(MainConfig_1.MainConfig);
        this.config = this.gameConfig.getConfig(WinLinesConfig_1.WinLinesConfig);
    };
    BaseWinLinesV2Controller.prototype.onCombinationAnimateComplete = function () {
        var _this = this;
        if (!this.showLinesStopped) {
            var deltaMS = this.loopedShow ? this.config.winLineLoopAnimationDelay : this.config.winLineAnimationDelay;
            if (deltaMS === 0) {
                ++this.currentWinLineIndex;
                this.showWinLine(this.currentWinLineIndex);
            }
            else {
                this.delayAnimationTimer = new SimpleTimer_1.SimpleTimer(deltaMS, (function () {
                    _this.showWinLine(++_this.currentWinLineIndex);
                }));
            }
        }
    };
    BaseWinLinesV2Controller.prototype.showWinLine = function (id, showPaylineLabel) {
        var _this = this;
        if (id === void 0) { id = 0; }
        if (showPaylineLabel === void 0) { showPaylineLabel = true; }
        if (this.showLinesStopped || this.winLines == null) {
            return;
        }
        this.currentWinLineIndex = id;
        if (this.currentWinLineIndex >= this.winLines.length) {
            this.currentWinLineIndex = 0;
            this.loopedShow = true;
        }
        var winData = this.winLines[this.currentWinLineIndex];
        this.setWinTable(this.winTable, this.winLines.slice(this.currentWinLineIndex, this.currentWinLineIndex + 1));
        winData.winTable = this.winTable.slice(0);
        winData.currentState = this.currentStateName;
        if (this.loopedShow) {
            if (this.showComplete) {
                this.dispatchWinLine(winData, !this.loopedShow && showPaylineLabel, this.winLines.length, [this.stateNames.showWinningLoop]);
            }
            else {
                this.showComplete = true;
                if (this.isInFreeGame && this.data.featureState && this.data.featureState.type === SlotNGFeatureDataDefinitions_1.FeatureTypes.FREE_SPIN) {
                    if (this.data.featureState.feature_state.free_spins_left === 0) {
                        var timer_1 = new SimpleTimer_1.SimpleTimer(this.freeSpinLastspinDelay, function () {
                            _this.finishStateAction();
                            timer_1.destroy();
                        });
                    }
                    else {
                        this.finishStateAction();
                    }
                }
                else if (this.isSpecialLine(this.winLines[this.winLines.length - 1])) {
                    this.specialSymbolLineAction();
                }
                else {
                    this.finishStateAction();
                }
            }
        }
        else if (this.isAllLineWinState() && !this.config.showAllLineWin) {
            this.finishStateAction();
        }
        else {
            this.dispatchWinLine(winData, !this.loopedShow && showPaylineLabel, this.winLines.length, [
                this.stateNames.allLineWin,
                this.stateNames.showWinning,
                this.stateNames.freeSpinsShowWinning,
                this.stateNames.freeSpinsAllLineWin,
                this.stateNames.prefeatureWinning
            ]);
        }
    };
    BaseWinLinesV2Controller.prototype.isAllLineWinState = function () {
        return (this.currentStateName === this.stateNames.allLineWin || this.currentStateName === this.stateNames.freeSpinsAllLineWin);
    };
    BaseWinLinesV2Controller.prototype.specialSymbolLineAction = function () {
        var _this = this;
        var timer = new SimpleTimer_1.SimpleTimer(this.config.specialSymbolDelay, function () {
            _this.finishStateAction();
            timer.destroy();
        });
    };
    BaseWinLinesV2Controller.prototype.isSpecialLine = function (winline) {
        // TODO: need support for not only symbol. ex: win 3 symbols in one reel.
        return winline.symbol === ReelsConfig_1.SymbolSet.SCATTER;
    };
    BaseWinLinesV2Controller.prototype.dispatchWinLine = function (winData, showPaylineLabel, totalWinLines, states) {
        GlobalDispatcher_1.GlobalDispatcher.dispatchIntoExpectedStates(ReelController_1.ReelController.SHOW_WIN_LINE_NOTIFICATION, states, winData);
        GlobalDispatcher_1.GlobalDispatcher.dispatchIntoExpectedStates(WinDisplayController_1.WinDisplayController.SHOW_WIN_LINE, states, {
            winData: winData,
            showPaylineLabel: showPaylineLabel,
            totalWinLines: totalWinLines
        });
    };
    BaseWinLinesV2Controller.prototype.getReelPositionFromWinTable = function (winTable) {
        var reelPosition = [];
        winTable.forEach(function (reel) {
            var reelInfo = [];
            reel.forEach(function (value, y) {
                if (value) {
                    reelInfo.push(y);
                }
            });
            reelPosition.push(reelInfo);
        });
        return reelPosition;
    };
    BaseWinLinesV2Controller.prototype.setWinTable = function (winTable, winData) {
        winData.forEach(function (winline) {
            winline.reelPositions.forEach(function (winSymbolIndexArr, x) {
                winTable[x].forEach(function (_value, y) { winTable[x][y] = false; });
                winSymbolIndexArr.forEach(function (index) {
                    winTable[x][index] = true;
                });
            });
        });
    };
    BaseWinLinesV2Controller.SHOW_WIN_LINE_LOOP_COMPLETE = 'showWinLineLoopComplete';
    return BaseWinLinesV2Controller;
}(SlotCompController_1.SlotCompController));
exports.BaseWinLinesV2Controller = BaseWinLinesV2Controller;


/***/ })
],[457]);
//# sourceMappingURL=main.97e19a0e9dfda7fc3c0e.js.map